 AS V1.42 Beta [Bld 118] - source file md.asm - page 1 - 3/1/2023 4:19:44


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; PUZZUL GENESIS
       4/       0 :                     ; +-----------------------------------------------------------------+
       5/       0 :                     
       6/       0 :                     		include	"system/macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Include this file FIRST
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     ; AS Main settings
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 :                     		!org 0				; Start at 0
(1)   13/       0 :                     		cpu 		68000		; Current CPU is 68k, gets changed later.
(1)   14/       0 :                     		padding		off		; Dont pad dc.b
(1)   15/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
(1)   16/       0 :                     		supmode 	on 		; Supervisor mode 68k
(1)   17/       0 :                     		dottedstructs	off		; If needed
(1)   18/       0 :                     		page 		0
(1)   19/       0 :                     
(1)   20/       0 :                     ; ====================================================================
(1)   21/       0 :                     ; ---------------------------------------------
(1)   22/       0 :                     ; Functions
(1)   23/       0 :                     ; ---------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     dword 		function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   26/       0 :                     mapsize		function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes, for cell sizes use doubleword
(1)   27/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   28/       0 :                     
(1)   29/       0 :                     ; ====================================================================
(1)   30/       0 :                     ; ---------------------------------------------
(1)   31/       0 :                     ; Macros
(1)   32/       0 :                     ; ---------------------------------------------
(1)   33/       0 :                     
(1)   34/       0 : =$0                 paddingSoFar set 0
(1)   35/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   36/       0 :                     
(1)   37/       0 :                     ; -------------------------------------
(1)   38/       0 :                     ; Reserve memory section
(1)   39/       0 :                     ;
(1)   40/       0 :                     ; NOTE: This doesn't work for Z80
(1)   41/       0 :                     ; -------------------------------------
(1)   42/       0 :                     
(1)   43/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   44/       0 :                     GLBL_LASTPC	set *
(1)   45/       0 :                     		dephase
(1)   46/       0 :                     GLBL_LASTORG	set *
(1)   47/       0 :                     		phase thisinput
(1)   48/       0 :                     		endm
(1)   49/       0 :                     		
(1)   50/       0 :                     ; -------------------------------------
(1)   51/       0 :                     ; Finish struct
(1)   52/       0 :                     ; -------------------------------------
(1)   53/       0 :                     
(1)   54/       0 :                     finish		macro				; Then finish the custom struct.
(1)   55/       0 :                     		!org GLBL_LASTORG
(1)   56/       0 :                     		phase GLBL_LASTPC
(1)   57/       0 :                     		endm
(1)   58/       0 :                     
(1)   59/       0 :                     ; -------------------------------------
(1)   60/       0 :                     ; Report RAM usage
(1)   61/       0 :                     ; -------------------------------------
(1)   62/       0 :                     
(1)   63/       0 :                     report		macro from,dis
(1)   64/       0 :                     	if from == 0
(1)   65/       0 :                     		if MOMPASS=5
(1)   66/       0 :                     			message "THIS SCREEN RAM uses: \{(dis-RAM_ModeBuff)&$FFFFFF} of \{MAX_MDERAM}"
(1)   67/       0 :                     		endif
(1)   68/       0 :                     	endif
(1)   69/       0 :                     		endm
(1)   70/       0 :                     
(1)   71/       0 :                     ; -------------------------------------
(1)   72/       0 :                     ; Color debug
(1)   73/       0 :                     ; -------------------------------------
(1)   74/       0 :                     
(1)   75/       0 :                     colorme		macro this
(1)   76/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)   77/       0 :                     		move.w	#this,(vdp_data).l
(1)   78/       0 :                     		endm
(1)   79/       0 :                     
(1)   80/       0 :                     ; -------------------------------------
(1)   81/       0 :                     ; Custom ORG-filler
(1)   82/       0 :                     ;
(1)   83/       0 :                     ; (from s2disasm)
(1)   84/       0 :                     ; -------------------------------------
(1)   85/       0 :                     
(1)   86/       0 :                     org macro address
(1)   87/       0 :                     	if notZ80(MOMCPU)
(1)   88/       0 :                     		if address < *
(1)   89/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   90/       0 :                     		elseif address > *
(1)   91/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)   92/       0 :                     			!org address
(1)   93/       0 :                     		endif
(1)   94/       0 :                     	else
(1)   95/       0 :                     		if address < $
(1)   96/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   97/       0 :                     		else
(1)   98/       0 :                     			while address > $
(1)   99/       0 :                     				db 0
(1)  100/       0 :                     			endm
(1)  101/       0 :                     		endif
(1)  102/       0 :                     	endif
(1)  103/       0 :                         endm
(1)  104/       0 :                     
(1)  105/       0 :                     
       7/       0 :                     		include	"system/shared.asm"		; Shared Genesis/32X variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD/32X shared structs and values
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; --------------------------------------------------------
(1)    8/       0 :                     ; Settings
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 : =$10                MAX_MODELS	equ 16		; MAX 3D Models
(1)   12/       0 : =$18                MAX_SUPERSPR	equ 24		; MAX Number of Super Sprites
(1)   13/       0 :                     
(1)   14/       0 :                     ; --------------------------------------------------------
(1)   15/       0 :                     ; Structs
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     
(1)   18/       0 :                     ; 3D Models
(1)   19/       0 :                     ; RAM_MdDreq+Dreq_Objects
(1)   20/       0 : (MACRO)             		struct 0
(1)   20/       0 : =$0                 GLBL_LASTPC     set *
(1)   20/       0 :                                     dephase
(1)   20/       0 : =$0                 GLBL_LASTORG    set *
(1)   20/       0 :                                     phase 0
(1)   21/       0 :                     mdl_data	ds.l 1		; Model data pointer, if zero: no model
(1)   22/       4 :                     mdl_option	ds.l 1		; Model options: pixelvalue increment
(1)   23/       8 :                     mdl_x_pos	ds.w 1		; X position $08.00
(1)   24/       A :                     mdl_y_pos	ds.w 1		; Y position $08.00
(1)   25/       C :                     mdl_z_pos	ds.w 1		; Z position $08.00
(1)   26/       E :                     mdl_x_rot	ds.w 1		; X rotation $08.00
(1)   27/      10 :                     mdl_y_rot	ds.w 1		; Y rotation $08.00
(1)   28/      12 :                     mdl_z_rot	ds.w 1		; Z rotation $08.00
(1)   29/      14 :                     mdl_frame	ds.w 1
(1)   30/      16 :                     mdl_flags	ds.w 1
(1)   31/      18 :                     sizeof_mdlobj	ds.l 0
(1)   32/      18 : (MACRO)             		finish
(1)   32/       0 :                                     !org GLBL_LASTORG
(1)   32/       0 :                                     phase GLBL_LASTPC
(1)   33/       0 :                     
(1)   34/       0 :                     ; 3D Camera
(1)   35/       0 :                     ; RAM_MdDreq+Dreq_ObjCam
(1)   36/       0 : (MACRO)             		struct 0
(1)   36/       0 : =$0                 GLBL_LASTPC     set *
(1)   36/       0 :                                     dephase
(1)   36/       0 : =$0                 GLBL_LASTORG    set *
(1)   36/       0 :                                     phase 0
(1)   37/       0 :                     cam_x_pos	ds.l 1		; X position $000000.00
(1)   38/       4 :                     cam_y_pos	ds.l 1		; Y position $000000.00
(1)   39/       8 :                     cam_z_pos	ds.l 1		; Z position $000000.00
(1)   40/       C :                     cam_x_rot	ds.l 1		; X rotation $000000.00
(1)   41/      10 :                     cam_y_rot	ds.l 1		; Y rotation $000000.00
(1)   42/      14 :                     cam_z_rot	ds.l 1		; Z rotation $000000.00
(1)   43/      18 :                     sizeof_camera	ds.l 0
(1)   44/      18 : (MACRO)             		finish
(1)   44/       0 :                                     !org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 :                     
(1)   46/       0 :                     ; "Super" sprites:
(1)   47/       0 :                     ; RAM_MdDreq+Dreq_SuperSpr
(1)   48/       0 :                     ;
(1)   49/       0 :                     ; ** = KEEP the order
(1)   50/       0 : (MACRO)             		struct 0
(1)   50/       0 : =$0                 GLBL_LASTPC     set *
(1)   50/       0 :                                     dephase
(1)   50/       0 : =$0                 GLBL_LASTORG    set *
(1)   50/       0 :                                     phase 0
(1)   51/       0 :                     marsspr_xfrm	ds.b 1		; Animation X frame pos **
(1)   52/       1 :                     marsspr_yfrm	ds.b 1		; Animation Y frame pos **
(1)   53/       2 :                     marsspr_xs	ds.b 1		; Sprite X size **
(1)   54/       3 :                     marsspr_ys	ds.b 1		; Sprite Y size **
(1)   55/       4 :                     marsspr_x	ds.w 1		; Screen X position **
(1)   56/       6 :                     marsspr_y	ds.w 1		; Screen Y position **
(1)   57/       8 :                     marsspr_dwidth	ds.w 1		; Spritesheet WIDTH
(1)   58/       A :                     marsspr_indx	ds.w 1		; Palette index base
(1)   59/       C :                     marsspr_flags	ds.w 1		; Sprite flags: %VH (flip)
(1)   60/       E :                     marsspr_fill	ds.w 1		; <-- 2 FILLER bytes: free to use
(1)   61/      10 :                     marsspr_data	ds.l 1		; Spritesheet address in SH2 area (0 == end-of-supersprites)
(1)   62/      14 :                     ; marsspr_map	ds.l 1		; MAP data
(1)   63/      14 :                     sizeof_marsspr	ds.l 0
(1)   64/      14 : (MACRO)             		finish
(1)   64/       0 :                                     !org GLBL_LASTORG
(1)   64/       0 :                                     phase GLBL_LASTPC
(1)   65/       0 :                     
(1)   66/       0 :                     ; ====================================================================
(1)   67/       0 :                     ; ----------------------------------------------------------------
(1)   68/       0 :                     ; MAIN DREQ-RAM control
(1)   69/       0 :                     ;
(1)   70/       0 :                     ; To read these labels:
(1)   71/       0 :                     ;
(1)   72/       0 :                     ; On the Genesis Side:
(1)   73/       0 :                     ; 	lea	(RAM_MdDreq+DREQ_LABEL),a0
(1)   74/       0 :                     ; On the 32X Side:
(1)   75/       0 :                     ; 	mov	#RAM_Mars_DreqRead+DREQ_LABEL,r1
(1)   76/       0 :                     ;
(1)   77/       0 :                     ; Call System_MarsUpdate DURING display to transfer your
(1)   78/       0 :                     ; changes.
(1)   79/       0 :                     ; ----------------------------------------------------------------
(1)   80/       0 :                     
(1)   81/       0 :                     ; *** List MUST be aligned in 8bytes (end with 0 or 8) ***
(1)   82/       0 :                     
(1)   83/       0 : (MACRO)             		struct 0
(1)   83/       0 : =$0                 GLBL_LASTPC     set *
(1)   83/       0 :                                     dephase
(1)   83/       0 : =$0                 GLBL_LASTORG    set *
(1)   83/       0 :                                     phase 0
(1)   84/       0 :                     Dreq_Palette	ds.w 256				; 256-color palette
(1)   85/     200 :                     Dreq_BgExBuff	ds.b $80				; Buffer for current screen mode (NOTE: manual size)
(1)   86/     280 :                     Dreq_ObjCam	ds.b sizeof_camera
(1)   87/     298 :                     Dreq_Objects	ds.b sizeof_mdlobj*MAX_MODELS		; 3D Objects
(1)   88/     418 :                     Dreq_SuperSpr	ds.b sizeof_marsspr*MAX_SUPERSPR	; Super sprites
(1)   89/     5F8 :                     sizeof_dreq	ds.l 0
(1)   90/     5F8 : (MACRO)             		finish
(1)   90/       0 :                                     !org GLBL_LASTORG
(1)   90/       0 :                                     phase GLBL_LASTPC
(1)   91/       0 :                     
(1)   95/       0 :                     
       8/       0 :                     		include	"system/md/map.asm"		; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / MegaDrive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100            z80_bus 	equ	$A11100		; only read bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   21/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000              zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9-byte writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
(1)   40/       0 :                     ; ----------------------------------------------------------------
(1)   41/       0 :                     ; 32X registers
(1)   42/       0 :                     ; ----------------------------------------------------------------
(1)   43/       0 :                     
(1)   44/       0 : =$A130EC            sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   45/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   46/       0 :                     
       9/       0 :                     		include	"system/md/const.asm"		; Genesis variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis side constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$10                MAX_MDDMATSK	equ 16			; MAX DMA BLAST entries
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; Settings
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 : =$FFFF9000          MDRAM_START	equ $FFFF9000		; Start of Genesis working RAM
(1)   14/       0 : =$1000              MAX_MDERAM	equ $1000		; Maximum RAM for current Screen mode
(1)   15/       0 :                     
(1)   16/       0 :                     ; ====================================================================
(1)   17/       0 :                     ; ----------------------------------------------------------------
(1)   18/       0 :                     ; Input
(1)   19/       0 :                     ; ----------------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Controller
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; Controller buffer data (after calling System_Input)
(1)   26/       0 :                     ;
(1)   27/       0 :                     ; Type/Revision byte:
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; ID    |
(1)   30/       0 :                     ; $0D   | $00 - Original 3 button
(1)   31/       0 :                     ;       | $01 - 6 button version: XYZM
(1)   32/       0 :                     
(1)   33/       0 : (MACRO)             		struct 0
(1)   33/       0 : =$0                 GLBL_LASTPC     set *
(1)   33/       0 :                                     dephase
(1)   33/       0 : =$0                 GLBL_LASTORG    set *
(1)   33/       0 :                                     phase 0
(1)   34/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   35/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   36/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   37/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   38/       6 :                     mouse_x		ds.w 1			; Mouse X add/sub
(1)   39/       8 :                     mouse_y		ds.w 1			; Mouse Y add/sub
(1)   40/       A :                     extr_3		ds.w 1
(1)   41/       C :                     extr_4		ds.w 1
(1)   42/       E :                     extr_5		ds.w 1
(1)   43/      10 :                     sizeof_input	ds.l 0
(1)   44/      10 : (MACRO)             		finish
(1)   44/       0 :                                     !org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 :                     
(1)   46/       0 :                     ; Read as (Controller_1) then add +on_hold or +on_press
(1)   47/       0 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   48/       0 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   49/       0 :                     
(1)   50/       0 :                     ; Read WORD in +on_hold or +on_press
(1)   51/       0 : =$1                 JoyUp		equ $0001
(1)   52/       0 : =$2                 JoyDown		equ $0002
(1)   53/       0 : =$4                 JoyLeft		equ $0004
(1)   54/       0 : =$8                 JoyRight	equ $0008
(1)   55/       0 : =$10                JoyB		equ $0010
(1)   56/       0 : =$20                JoyC		equ $0020
(1)   57/       0 : =$40                JoyA		equ $0040
(1)   58/       0 : =$80                JoyStart	equ $0080
(1)   59/       0 : =$100               JoyZ		equ $0100
(1)   60/       0 : =$200               JoyY		equ $0200
(1)   61/       0 : =$400               JoyX		equ $0400
(1)   62/       0 : =$800               JoyMode		equ $0800
(1)   63/       0 : =$0                 bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   64/       0 : =$1                 bitJoyDown	equ 1
(1)   65/       0 : =$2                 bitJoyLeft	equ 2
(1)   66/       0 : =$3                 bitJoyRight	equ 3
(1)   67/       0 : =$4                 bitJoyB		equ 4
(1)   68/       0 : =$5                 bitJoyC		equ 5
(1)   69/       0 : =$6                 bitJoyA		equ 6
(1)   70/       0 : =$7                 bitJoyStart	equ 7
(1)   71/       0 : =$8                 bitJoyZ		equ 8
(1)   72/       0 : =$9                 bitJoyY		equ 9
(1)   73/       0 : =$A                 bitJoyX		equ 10
(1)   74/       0 : =$B                 bitJoyMode	equ 11
(1)   75/       0 :                     
(1)   76/       0 :                     ; Mega Mouse
(1)   77/       0 :                     ; Read WORD as +on_hold or +on_press
(1)   78/       0 : =$1                 ClickR		equ $0001
(1)   79/       0 : =$2                 ClickL		equ $0002
(1)   80/       0 : =$4                 ClickM		equ $0004	; US MOUSE ONLY
(1)   81/       0 : =$8                 ClickS		equ $0008	; (Untested)
(1)   82/       0 : =$0                 bitClickR	equ 0
(1)   83/       0 : =$1                 bitClickL	equ 1
(1)   84/       0 : =$2                 bitClickM	equ 2
(1)   85/       0 : =$3                 bitClickS	equ 3
(1)   86/       0 :                     
(1)   87/       0 :                     ; ====================================================================
(1)   88/       0 :                     ; ----------------------------------------------------------------
(1)   89/       0 :                     ; MD RAM
(1)   90/       0 :                     ;
(1)   91/       0 :                     ; NOTE for porting this to Sega CD (or SegaCD+32X):
(1)   92/       0 :                     ; From $FFFD00 to $FFFDFF is reserved for the MAIN-CPU's vectors
(1)   93/       0 :                     ; ----------------------------------------------------------------
(1)   94/       0 :                     
(1)   95/       0 : (MACRO)             		struct MDRAM_START
(1)   95/       0 : =$0                 GLBL_LASTPC     set *
(1)   95/       0 :                                     dephase
(1)   95/       0 : =$0                 GLBL_LASTORG    set *
(1)   95/FFFFFFFFFFFF9000 :                                     phase MDRAM_START
(1)   96/FFFFFFFFFFFF9000 :                     	; First pass: empty sizes
(1)  106/FFFFFFFFFFFF9000 :                     	; Second pass: sizes are set
(1)  107/FFFFFFFFFFFF9000 :                     ; RAM_MdSound	ds.b sizeof_mdsnd-RAM_MdSound
(1)  108/FFFFFFFFFFFF9000 :                     RAM_MdVideo	ds.b sizeof_mdvid-RAM_MdVideo
(1)  109/FFFFFFFFFFFFA9C6 :                     RAM_MdSystem	ds.b sizeof_mdsys-RAM_MdSystem
(1)  110/FFFFFFFFFFFFAE22 :                     RAM_MdDreq	ds.b sizeof_dreq
(1)  111/FFFFFFFFFFFFB41A :                     RAM_ModeBuff	ds.b MAX_MDERAM
(1)  112/FFFFFFFFFFFFC41A :                     RAM_MdGlobal	ds.b sizeof_mdglbl-RAM_MdGlobal	; code/global.asm
(1)  113/FFFFFFFFFFFFC41C :                     sizeof_mdram	ds.l 0
(1)  115/FFFFFFFFFFFFC41C :                     
MD RAM: FF9000-FFC41C
(1)  117/FFFFFFFFFFFFC41C :                     		message "MD RAM: \{(MDRAM_START)&$FFFFFF}-\{(sizeof_mdram)&$FFFFFF}"
(1)  119/FFFFFFFFFFFFC41C : (MACRO)             		finish
(1)  119/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)  119/       0 :                                     phase GLBL_LASTPC
(1)  120/       0 :                     
(1)  121/       0 :                     
      10/       0 :                     		include	"system/mars/map.asm"		; 32X hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                 CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000           CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000           CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000          TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000          _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000          _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000          _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                 adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                 intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                 standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                 hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                 dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                comm7		equ	$27		;
(1)   52/       0 : =$28                comm8		equ	$28		;
(1)   53/       0 : =$29                comm9		equ	$29		;
(1)   54/       0 : =$2A                comm10		equ	$2A		;
(1)   55/       0 : =$2B                comm11		equ	$2B		;
(1)   56/       0 : =$2C                comm12		equ	$2C		;
(1)   57/       0 : =$2D                comm13		equ	$2D		;
(1)   58/       0 : =$2E                comm14		equ	$2E		;
(1)   59/       0 : =$2F                comm15		equ	$2F		;
(1)   60/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                 CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                 ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                 FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                 FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                 HIRQ_ON		equ	$04
(1)   82/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                 tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                 shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                 filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                 vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                 framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                 _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                 _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                 _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                 _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92          _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      11/       0 :                     		include "code/global.asm"		; Global user variables on the Genesis
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Global structs and values for Genesis side
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; --------------------------------------------------------
(1)    8/       0 :                     ; Settings
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     
(1)   12/       0 :                     ; ====================================================================
(1)   13/       0 :                     ; ------------------------------------------------------
(1)   14/       0 :                     ; Structs
(1)   15/       0 :                     ; ------------------------------------------------------
(1)   16/       0 :                     
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Variables
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     
(1)   24/       0 :                     ; ====================================================================
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     ; RAM
(1)   27/       0 :                     ; --------------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 : (MACRO)             			struct RAM_MdGlobal
(1)   29/       0 : =$0                 GLBL_LASTPC     set *
(1)   29/       0 :                                     dephase
(1)   29/       0 : =$0                 GLBL_LASTORG    set *
(1)   29/FFFFFFFFFFFFC41A :                                     phase RAM_MDGLOBAL
(1)   30/FFFFFFFFFFFFC41A :                     RAM_Glbl_Scrn		ds.w 1
(1)   31/FFFFFFFFFFFFC41C :                     sizeof_mdglbl		ds.l 0
(1)   32/FFFFFFFFFFFFC41E : (MACRO)             			finish
(1)   32/FFFFFFFFFFFFC41A :                                     !org GLBL_LASTORG
(1)   32/       0 :                                     phase GLBL_LASTPC
(1)   33/       0 :                     
      12/       0 :                     		include	"system/head_md.asm"		; 32X header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis header
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : 0000 0000           		dc.l 0			; Stack point
(1)    7/       4 : 0000 0202           		dc.l MD_Entry		; Entry point MUST point to $3F0
(1)    8/       8 : 0000 0200           		dc.l MD_ErrBus		; Bus error
(1)    9/       C : 0000 0200           		dc.l MD_ErrAddr		; Address error
(1)   10/      10 : 0000 0200           		dc.l MD_ErrIll		; ILLEGAL Instruction
(1)   11/      14 : 0000 0200           		dc.l MD_ErrZDiv		; Divide by 0
(1)   12/      18 : 0000 0200           		dc.l MD_ErrChk		; CHK Instruction
(1)   13/      1C : 0000 0200           		dc.l MD_ErrTrapV	; TRAPV Instruction
(1)   14/      20 : 0000 0200           		dc.l MD_ErrPrivl	; Privilege violation
(1)   15/      24 : 0000 0200           		dc.l MD_Trace		; Trace
(1)   16/      28 : 0000 0200           		dc.l MD_Line1010	; Line 1010 Emulator
(1)   17/      2C : 0000 0200           		dc.l MD_Line1111	; Line 1111 Emulator
(1)   18/      30 : 0000 0200           		dc.l MD_ErrorEx		; Error exception
(1)   19/      34 : 0000 0200           		dc.l MD_ErrorEx
(1)   20/      38 : 0000 0200           		dc.l MD_ErrorEx
(1)   21/      3C : 0000 0200           		dc.l MD_ErrorEx
(1)   22/      40 : 0000 0200           		dc.l MD_ErrorEx
(1)   23/      44 : 0000 0200           		dc.l MD_ErrorEx
(1)   24/      48 : 0000 0200           		dc.l MD_ErrorEx
(1)   25/      4C : 0000 0200           		dc.l MD_ErrorEx
(1)   26/      50 : 0000 0200           		dc.l MD_ErrorEx
(1)   27/      54 : 0000 0200           		dc.l MD_ErrorEx
(1)   28/      58 : 0000 0200           		dc.l MD_ErrorEx
(1)   29/      5C : 0000 0200           		dc.l MD_ErrorEx
(1)   30/      60 : 0000 0200           		dc.l MD_ErrorEx
(1)   31/      64 : 0000 0200           		dc.l MD_ErrorTrap
(1)   32/      68 : 0000 0200           		dc.l MD_ErrorTrap
(1)   33/      6C : 0000 0200           		dc.l MD_ErrorTrap
(1)   34/      70 : FFFF AE18           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   35/      74 : 0000 0200           		dc.l MD_ErrorTrap
(1)   36/      78 : FFFF AE12           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   37/      7C : 0000 0200           		dc.l MD_ErrorTrap
(1)   38/      80 : 0000 0200           		dc.l MD_ErrorTrap
(1)   39/      84 : 0000 0200           		dc.l MD_ErrorTrap
(1)   40/      88 : 0000 0200           		dc.l MD_ErrorTrap
(1)   41/      8C : 0000 0200           		dc.l MD_ErrorTrap
(1)   42/      90 : 0000 0200           		dc.l MD_ErrorTrap
(1)   43/      94 : 0000 0200           		dc.l MD_ErrorTrap
(1)   44/      98 : 0000 0200           		dc.l MD_ErrorTrap
(1)   45/      9C : 0000 0200           		dc.l MD_ErrorTrap
(1)   46/      A0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   47/      A4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   48/      A8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   49/      AC : 0000 0200           		dc.l MD_ErrorTrap
(1)   50/      B0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   51/      B4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   52/      B8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   53/      BC : 0000 0200           		dc.l MD_ErrorTrap
(1)   54/      C0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   55/      C4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   56/      C8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   57/      CC : 0000 0200           		dc.l MD_ErrorTrap
(1)   58/      D0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   59/      D4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   60/      D8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   61/      DC : 0000 0200           		dc.l MD_ErrorTrap
(1)   62/      E0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   63/      E4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   64/      E8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   65/      EC : 0000 0200           		dc.l MD_ErrorTrap
(1)   66/      F0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   67/      F4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   68/      F8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   69/      FC : 0000 0200           		dc.l MD_ErrorTrap
(1)   70/     100 : 5345 4741 2047 454E 		dc.b "SEGA GENESIS    "
                    4553 4953 2020 2020 
(1)   71/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2023.FEB"
                    3230 3233 2E46 4542 
(1)   72/     120 : 426C 6F71 7565 2065 		dc.b "Bloque eswap                                    "
                    7377 6170 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   73/     150 : 5377 6170 426C 6F6B 		dc.b "SwapBlok                                        "
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   74/     180 : 474D 2050 555A 5A4C 		dc.b "GM PUZZLSWP-01"
                    5357 502D 3031      
(1)   75/     18E : 0000                		dc.w 0
(1)   76/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   77/     1A0 : 0000 0000           		dc.l 0
(1)   78/     1A4 : 0003 F200           		dc.l ROM_END
(1)   79/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   80/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   81/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   82/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   83/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   84/     1BC :                     		align $1F0
(1)   85/     1F0 : 4A55 2020 2020 2020 		dc.b "JU              "
                    2020 2020 2020 2020 
(1)   86/     200 :                     
(1)   87/     200 :                     ; ====================================================================
(1)   88/     200 :                     ; ----------------------------------------------------------------
(1)   89/     200 :                     ; Error handlers
(1)   90/     200 :                     ;
(1)   91/     200 :                     ; all these do nothing currently
(1)   92/     200 :                     ; ----------------------------------------------------------------
(1)   93/     200 :                     
(1)   94/     200 :                     MD_ErrBus:				; Bus error
(1)   95/     200 :                     MD_ErrAddr:				; Address error
(1)   96/     200 :                     MD_ErrIll:				; ILLEGAL Instruction
(1)   97/     200 :                     MD_ErrZDiv:				; Divide by 0
(1)   98/     200 :                     MD_ErrChk:				; CHK Instruction
(1)   99/     200 :                     MD_ErrTrapV:				; TRAPV Instruction
(1)  100/     200 :                     MD_ErrPrivl:				; Privilege violation
(1)  101/     200 :                     MD_Trace:				; Trace
(1)  102/     200 :                     MD_Line1010:				; Line 1010 Emulator
(1)  103/     200 :                     MD_Line1111:				; Line 1111 Emulator
(1)  104/     200 :                     MD_ErrorEx:				; Error exception
(1)  105/     200 :                     MD_ErrorTrap:
(1)  106/     200 : 4E73                		rte			; Return from Exception
(1)  107/     202 :                     
(1)  108/     202 :                     ; ====================================================================
(1)  109/     202 :                     ; ----------------------------------------------------------------
(1)  110/     202 :                     ; Entry point
(1)  111/     202 :                     ; ----------------------------------------------------------------
(1)  112/     202 :                     
(1)  113/     202 :                     MD_Entry:
(1)  114/     202 :                     	; --------------------------------
(1)  115/     202 :                     	; Check if the system has TMSS
(1)  116/     202 : 46FC 2700           		move	#$2700,sr			; Disable interrputs
(1)  117/     206 : 1039 00A1 0001      		move.b	(sys_io).l,d0			; Read IO port
(1)  118/     20C : 0200 000F           		andi.b	#%1111,d0			; Get version, right 4 bits
(1)  119/     210 : 670A                		beq.s	.oldmd				; If == 0, skip this part
(1)  120/     212 : 23F9 0000 0100 00A1 		move.l	($100).l,(sys_tmss).l		; Write "SEGA" to port sys_tmss
                    4000                
(1)  121/     21C :                     .oldmd:
(1)  122/     21C : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l			; Random VDP test, to unlock it
(1)  123/     222 :                     
(1)  124/     222 :                     	; --------------------------------
(1)  125/     222 :                     
(1)  126/     222 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  127/     228 : 223C FFFF C41C      		move.l	#sizeof_mdram,d1
(1)  128/     22E : 7000                		moveq	#0,d0
(1)  129/     230 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  130/     232 : B1C1                		cmp.l	d1,a0
(1)  131/     234 : 65FA                		bcs.s	.loop_ram
(1)  132/     236 : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
(1)  133/     23E : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  134/     244 : 3E16                .wait_dma:	move.w	(a6),d7			; Check if our DMA is active.
(1)  135/     246 : 0807 0001           		btst	#1,d7
(1)  136/     24A : 66F8                		bne.s	.wait_dma
(1)  137/     24C :                     
(1)  138/     24C :                     ; 		moveq	#0,d0				; d0 = 0
(1)  139/     24C :                     ; 		movea.l	d0,a6				; a6 = d0
(1)  140/     24C :                     ; 		move.l	a6,usp				; move a6 to usp
(1)  141/     24C :                     ; .waitframe:	move.w	(vdp_ctrl).l,d0			; Wait for VBlank
(1)  142/     24C :                     ; 		btst	#4,d0
(1)  143/     24C :                     ; 		beq.s	.waitframe
(1)  144/     24C :                     ; 		move.l	#$80048104,(vdp_ctrl).l		; VDP: Set special bits, and keep Display (TMSS screen stays on)
(1)  145/     24C :                     ; 		lea	($FFFF0000),a0			; a0 - RAM Address
(1)  146/     24C :                     ; 		move.w	#($F000/4)-1,d0			; d0 - Bytes to clear / 4, minus 1
(1)  147/     24C :                     ; .clrram:
(1)  148/     24C :                     ; 		clr.l	(a0)+				; Clear 4 bytes, and increment by 4
(1)  149/     24C :                     ; 		dbf	d0,.clrram			; Loop until d0 == 0
(1)  150/     24C :                     ; 		movem.l	($FF0000),d0-a6			; Trick: Grab clean RAM memory to clear all registers except a7 (Stack point)
(1)  151/     24C :                     ; 		bra	MD_Main				; Branch to MD_Main
(1)  152/     24C :                     
      13/     24C :                     
      14/     24C :                     ; ====================================================================
      15/     24C :                     ; ----------------------------------------------------------------
      16/     24C :                     ; Main
      17/     24C :                     ; ----------------------------------------------------------------
      18/     24C :                     
      19/     24C : 4EB9 0000 0280      		jsr	(Sound_init).l
      20/     252 : 4EB9 0000 045C      		jsr	(Video_init).l
      21/     258 : 4EB9 0000 1784      		jsr	(System_Init).l
      22/     25E : 31FC 0000 C41A      		move.w	#0,(RAM_Glbl_Scrn).w
      23/     264 : 4EF9 0000 1CA0      		jmp	(Md_ReadModes).l
      24/     26A :                     
      25/     26A :                     ; ====================================================================
      26/     26A :                     ; --------------------------------------------------------
      27/     26A :                     ; TOP 68K code
      28/     26A :                     ; --------------------------------------------------------
      29/     26A :                     
      30/     26A :                     		include	"system/md/sound.asm"
(1)    1/     26A :                     ; ====================================================================
(1)    2/     26A :                     ; ----------------------------------------------------------------
(1)    3/     26A :                     ; Genesis sound (GEMA/Nicona Sound driver v0.5)
(1)    4/     26A :                     ; ----------------------------------------------------------------
(1)    5/     26A :                     
(1)    6/     26A :                     ; ====================================================================
(1)    7/     26A :                     ; --------------------------------------------------------
(1)    8/     26A :                     ; Settings
(1)    9/     26A :                     ; --------------------------------------------------------
(1)   10/     26A :                     
(1)   11/     26A :                     ; --------------------------------------------------------
(1)   12/     26A :                     ; Variables
(1)   13/     26A :                     ; --------------------------------------------------------
(1)   14/     26A :                     
(1)   15/     26A :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   16/     26A :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   17/     26A :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   18/     26A : =$40                zDrvFifo	equ commZfifo		; FIFO command storage
(1)   19/     26A : =$80                zDrvFWrt	equ commZWrite		; FIFO command index
(1)   20/     26A : =$81                zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   21/     26A : =$82                zDrvMarsBlk	equ marsBlock		; Disable PWM flag
(1)   22/     26A :                     
(1)   23/     26A :                     ; ====================================================================
(1)   24/     26A :                     ; --------------------------------------------------------
(1)   25/     26A :                     ; Initialize Sound
(1)   26/     26A :                     ;
(1)   27/     26A :                     ; Uses:
(1)   28/     26A :                     ; a0-a1,d0-d1
(1)   29/     26A :                     ; --------------------------------------------------------
(1)   30/     26A :                     
(1)   31/     26A :                     		align $80
(1)   32/     280 :                     Sound_Init:
(1)   33/     280 : 46FC 2700           		move.w	#$2700,sr
(1)   34/     284 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Get Z80 bus
(1)   35/     28C : 33FC 0100 00A1 1200 		move.w	#$0100,(z80_reset).l		; Z80 reset
(1)   36/     294 :                     .wait:
(1)   37/     294 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   38/     29C : 66F6                		bne.s	.wait
(1)   39/     29E : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 FIRST.
(1)   40/     2A4 : 303C 1FFF           		move.w	#$1FFF,d0
(1)   41/     2A8 : 7200                		moveq	#0,d1
(1)   42/     2AA :                     .cleanup:
(1)   43/     2AA : 10C1                		move.b	d1,(a0)+
(1)   44/     2AC : 51C8 FFFC           		dbf	d0,.cleanup
(1)   45/     2B0 : 41F9 0000 2D18      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   46/     2B6 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)   47/     2BC : 303C 1EFF           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   48/     2C0 :                     .copy:
(1)   49/     2C0 : 12D8                		move.b	(a0)+,(a1)+
(1)   50/     2C2 : 51C8 FFFC           		dbf	d0,.copy
(1)   51/     2C6 : 33FC 0000 00A1 1200 		move.w	#0,(z80_reset).l		; Reset cancel
(1)   52/     2CE : 4E71                		nop
(1)   53/     2D0 : 4E71                		nop
(1)   54/     2D2 : 4E71                		nop
(1)   55/     2D4 : 4E71                		nop
(1)   56/     2D6 : 33FC 0100 00A1 1200 		move.w	#$100,(z80_reset).l
(1)   57/     2DE : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l			; Start Z80
(1)   58/     2E6 : 4E75                		rts
(1)   59/     2E8 :                     
(1)   60/     2E8 :                     ; ====================================================================
(1)   61/     2E8 :                     ; ----------------------------------------------------------------
(1)   62/     2E8 :                     ; Subroutines
(1)   63/     2E8 :                     ; ----------------------------------------------------------------
(1)   64/     2E8 :                     
(1)   65/     2E8 :                     ; ------------------------------------------------
(1)   66/     2E8 :                     ; Lock Z80, get bus
(1)   67/     2E8 :                     ; ------------------------------------------------
(1)   68/     2E8 :                     
(1)   69/     2E8 :                     sndLockZ80:
(1)   70/     2E8 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)   71/     2F0 :                     .wait:
(1)   72/     2F0 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   73/     2F8 : 66F6                		bne.s	.wait
(1)   74/     2FA : 4E75                		rts
(1)   75/     2FC :                     
(1)   76/     2FC :                     ; ------------------------------------------------
(1)   77/     2FC :                     ; Unlock Z80, return bus
(1)   78/     2FC :                     ; ------------------------------------------------
(1)   79/     2FC :                     
(1)   80/     2FC :                     sndUnlockZ80:
(1)   81/     2FC : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   82/     304 : 4E75                		rts
(1)   83/     306 :                     
(1)   84/     306 :                     ; ------------------------------------------------
(1)   85/     306 :                     ; 68k-to-z80 Sound request
(1)   86/     306 :                     ; enter/exit routines
(1)   87/     306 :                     ;
(1)   88/     306 :                     ; d6 - commFifo index
(1)   89/     306 :                     ; ------------------------------------------------
(1)   90/     306 :                     
(1)   91/     306 :                     sndReq_Enter:
(1)   92/     306 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)   93/     30A : DEFC 0010           		adda	#4*4,sp				; Go back to the RTS jump
(1)   94/     30E : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)   95/     316 : 7C00                		moveq	#0,d6
(1)   96/     318 : 40C6                		move.w	sr,d6
(1)   97/     31A : 4846                		swap	d6
(1)   98/     31C : 007C 0700           		or.w	#$0700,sr			; Disable interrupts
(1)   99/     320 : 4BF9 00A0 0080      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  100/     326 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  101/     32C :                     .wait:
(1)  102/     32C : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for Z80
(1)  103/     334 : 66F6                		bne.s	.wait
(1)  104/     336 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  105/     338 : 4886                		ext.w	d6				; extend to 16 bits
(1)  106/     33A : 4E75                		rts
(1)  107/     33C :                     ; JUMP ONLY
(1)  108/     33C :                     sndReq_Exit:
(1)  109/     33C : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  110/     344 : 4846                		swap	d6
(1)  111/     346 : 46C6                		move.w	d6,sr
(1)  112/     348 : 9EFC 0010           		suba	#4*4,sp				; Roll to the last regs
(1)  113/     34C : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  114/     350 : 4E75                		rts
(1)  115/     352 :                     
(1)  116/     352 :                     ; ------------------------------------------------
(1)  117/     352 :                     ; Send request id and arguments
(1)  118/     352 :                     ;
(1)  119/     352 :                     ; Input:
(1)  120/     352 :                     ; d7 - byte to write
(1)  121/     352 :                     ; d6 - index pointer
(1)  122/     352 :                     ; a5 - commZWrite, update index
(1)  123/     352 :                     ; a6 - commZfifo command list
(1)  124/     352 :                     ;
(1)  125/     352 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  126/     352 :                     ; ------------------------------------------------
(1)  127/     352 :                     
(1)  128/     352 :                     sndReq_scmd:
(1)  129/     352 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  130/     358 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  131/     35A : 0206 003F           		andi.b	#$3F,d6
(1)  132/     35E : 600C                		bra.s	sndReq_sbyte
(1)  133/     360 :                     sndReq_slong:
(1)  134/     360 : 610A                		bsr	sndReq_sbyte
(1)  135/     362 : E09F                		ror.l	#8,d7
(1)  136/     364 :                     sndReq_saddr:
(1)  137/     364 : 6106                		bsr	sndReq_sbyte
(1)  138/     366 : E09F                		ror.l	#8,d7
(1)  139/     368 :                     sndReq_sword:
(1)  140/     368 : 6102                		bsr	sndReq_sbyte
(1)  141/     36A : E09F                		ror.l	#8,d7
(1)  142/     36C :                     sndReq_sbyte:
(1)  143/     36C : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  144/     370 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  145/     372 : 0206 003F           		andi.b	#$3F,d6
(1)  146/     376 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  147/     378 : 4E75                		rts
(1)  148/     37A :                     
(1)  149/     37A :                     ; --------------------------------------------------------
(1)  150/     37A :                     ; gemaDmaPause
(1)  151/     37A :                     ;
(1)  152/     37A :                     ; Call this BEFORE doing any DMA transfer
(1)  153/     37A :                     ; --------------------------------------------------------
(1)  154/     37A :                     
(1)  155/     37A :                     gemaDmaPause:
(1)  156/     37A : 4847                		swap	d7
(1)  157/     37C : 4846                		swap	d6
(1)  158/     37E : 6100 FF68           		bsr	sndLockZ80
(1)  159/     382 : 13FC 0001 00A0 0081 		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  160/     38A : 31FC 0001 0000      		move.w	#1,
(1)  161/     390 : 6100 FF6A           		bsr	sndUnlockZ80
(1)  162/     394 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  163/     398 : 51CF FFFE           		dbf	d7,*
(1)  164/     39C : 4846                		swap	d6
(1)  165/     39E : 4847                		swap	d7
(1)  166/     3A0 : 4E75                		rts
(1)  167/     3A2 :                     
(1)  168/     3A2 :                     ; --------------------------------------------------------
(1)  169/     3A2 :                     ; gemaDmaResume
(1)  170/     3A2 :                     ;
(1)  171/     3A2 :                     ; Call this AFTER finishing DMA transfer
(1)  172/     3A2 :                     ; --------------------------------------------------------
(1)  173/     3A2 :                     
(1)  174/     3A2 :                     gemaDmaResume:
(1)  175/     3A2 : 4847                		swap	d7
(1)  176/     3A4 : 4846                		swap	d6
(1)  177/     3A6 : 6100 FF40           		bsr	sndLockZ80
(1)  178/     3AA : 13FC 0000 00A0 0081 		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  179/     3B2 : 6100 FF48           		bsr	sndUnlockZ80
(1)  180/     3B6 : 4846                		swap	d6
(1)  181/     3B8 : 4847                		swap	d7
(1)  182/     3BA : 4E75                		rts
(1)  183/     3BC :                     
(1)  184/     3BC :                     ; --------------------------------------------------------
(1)  185/     3BC :                     ; gemaDmaPause
(1)  186/     3BC :                     ;
(1)  187/     3BC :                     ; Call this BEFORE doing any DMA transfer
(1)  188/     3BC :                     ; --------------------------------------------------------
(1)  189/     3BC :                     
(1)  190/     3BC :                     gemaDmaPauseRom:
(1)  191/     3BC : 4847                		swap	d7
(1)  192/     3BE : 4846                		swap	d6
(1)  193/     3C0 : 6100 FF26           		bsr	sndLockZ80
(1)  194/     3C4 : 13FC 0001 00A0 0081 		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  195/     3CC : 6100 FF2E           		bsr	sndUnlockZ80
(1)  196/     3D0 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  197/     3D4 : 51CF FFFE           		dbf	d7,*
(1)  203/     3D8 : 4846                		swap	d6
(1)  204/     3DA : 4847                		swap	d7
(1)  205/     3DC : 4E75                		rts
(1)  206/     3DE :                     
(1)  207/     3DE :                     ; --------------------------------------------------------
(1)  208/     3DE :                     ; gemaDmaResume
(1)  209/     3DE :                     ;
(1)  210/     3DE :                     ; Call this AFTER finishing DMA transfer
(1)  211/     3DE :                     ; --------------------------------------------------------
(1)  212/     3DE :                     
(1)  213/     3DE :                     gemaDmaResumeRom:
(1)  214/     3DE : 4847                		swap	d7
(1)  215/     3E0 : 4846                		swap	d6
(1)  216/     3E2 : 6100 FF04           		bsr	sndLockZ80
(1)  217/     3E6 : 13FC 0000 00A0 0081 		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  218/     3EE : 6100 FF0C           		bsr	sndUnlockZ80
(1)  224/     3F2 : 4846                		swap	d6
(1)  225/     3F4 : 4847                		swap	d7
(1)  226/     3F6 : 4E75                		rts
(1)  227/     3F8 :                     
(1)  228/     3F8 :                     ; ------------------------------------------------
(1)  229/     3F8 :                     ; 32X ONLY: Request CMD interrupt with
(1)  230/     3F8 :                     ; command
(1)  231/     3F8 :                     ;
(1)  232/     3F8 :                     ; d6 - command
(1)  233/     3F8 :                     ; ------------------------------------------------
(1)  234/     3F8 :                     
(1)  235/     3F8 :                     sndReqCmd:
(1)  255/     3F8 : 4E75                		rts
(1)  256/     3FA :                     
(1)  257/     3FA :                     ; ============================================================
(1)  258/     3FA :                     ; --------------------------------------------------------
(1)  259/     3FA :                     ; gemaTest
(1)  260/     3FA :                     ;
(1)  261/     3FA :                     ; For TESTING only.
(1)  262/     3FA :                     ; --------------------------------------------------------
(1)  263/     3FA :                     
(1)  264/     3FA :                     gemaTest:
(1)  265/     3FA : 6100 FF0A           		bsr	sndReq_Enter
(1)  266/     3FE : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  267/     402 : 6100 FF4E           		bsr	sndReq_scmd
(1)  268/     406 : 6000 FF34           		bra 	sndReq_Exit
(1)  269/     40A :                     
(1)  270/     40A :                     ; --------------------------------------------------------
(1)  271/     40A :                     ; gemaPlayTrack
(1)  272/     40A :                     ;
(1)  273/     40A :                     ; Play a track by number
(1)  274/     40A :                     ;
(1)  275/     40A :                     ; d0.b - Track number
(1)  276/     40A :                     ; --------------------------------------------------------
(1)  277/     40A :                     
(1)  278/     40A :                     gemaPlayTrack:
(1)  279/     40A : 6100 FEFA           		bsr	sndReq_Enter
(1)  280/     40E : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  281/     412 : 6100 FF3E           		bsr	sndReq_scmd
(1)  282/     416 : 1E00                		move.b	d0,d7
(1)  283/     418 : 6100 FF52           		bsr	sndReq_sbyte
(1)  284/     41C : 6000 FF1E           		bra 	sndReq_Exit
(1)  285/     420 :                     
(1)  286/     420 :                     ; --------------------------------------------------------
(1)  287/     420 :                     ; gemaStopTrack
(1)  288/     420 :                     ;
(1)  289/     420 :                     ; Stops a track using that ID
(1)  290/     420 :                     ;
(1)  291/     420 :                     ; d0.b - Track number
(1)  292/     420 :                     ; --------------------------------------------------------
(1)  293/     420 :                     
(1)  294/     420 :                     gemaStopTrack:
(1)  295/     420 : 6100 FEE4           		bsr	sndReq_Enter
(1)  296/     424 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  297/     428 : 6100 FF28           		bsr	sndReq_scmd
(1)  298/     42C : 1E00                		move.b	d0,d7
(1)  299/     42E : 6100 FF3C           		bsr	sndReq_sbyte
(1)  300/     432 : 6000 FF08           		bra 	sndReq_Exit
(1)  301/     436 :                     
(1)  302/     436 :                     ; --------------------------------------------------------
(1)  303/     436 :                     ; gemaStopAll
(1)  304/     436 :                     ;
(1)  305/     436 :                     ; Stop ALL tracks from ALL buffers.
(1)  306/     436 :                     ;
(1)  307/     436 :                     ; No arguments.
(1)  308/     436 :                     ; --------------------------------------------------------
(1)  309/     436 :                     
(1)  310/     436 :                     gemaStopAll:
(1)  311/     436 : 6100 FECE           		bsr	sndReq_Enter
(1)  312/     43A : 3E3C 0008           		move.w	#$08,d7		; Command $08
(1)  313/     43E : 6100 FF12           		bsr	sndReq_scmd
(1)  314/     442 : 6000 FEF8           		bra 	sndReq_Exit
(1)  315/     446 :                     
(1)  316/     446 :                     ; --------------------------------------------------------
(1)  317/     446 :                     ; gemaSetBeats
(1)  318/     446 :                     ;
(1)  319/     446 :                     ; Sets global subbeats
(1)  320/     446 :                     ;
(1)  321/     446 :                     ; d0.w - sub-beats
(1)  322/     446 :                     ; --------------------------------------------------------
(1)  323/     446 :                     
(1)  324/     446 :                     gemaSetBeats:
(1)  325/     446 : 6100 FEBE           		bsr	sndReq_Enter
(1)  326/     44A : 3E3C 000C           		move.w	#$0C,d7		; Command $0C
(1)  327/     44E : 6100 FF02           		bsr	sndReq_scmd
(1)  328/     452 : 3E00                		move.w	d0,d7
(1)  329/     454 : 6100 FF12           		bsr	sndReq_sword
(1)  330/     458 : 6000 FEE2           		bra 	sndReq_Exit
(1)  331/     45C :                     
(1)  332/     45C :                     
      31/     45C :                     		include	"system/md/video.asm"
(1)    1/     45C :                     ; ====================================================================
(1)    2/     45C :                     ; ----------------------------------------------------------------
(1)    3/     45C :                     ; Genesis Video
(1)    4/     45C :                     ; ----------------------------------------------------------------
(1)    5/     45C :                     
(1)    6/     45C : =$FFFFFFFFFF..      RAM_BgBufferM	equ	RAM_MdDreq+Dreq_BgExBuff	; Relocate MARS layer control
(1)    7/     45C :                     
(1)    8/     45C :                     ; ====================================================================
(1)    9/     45C :                     ; --------------------------------------------------------
(1)   10/     45C :                     ; Settings
(1)   11/     45C :                     ; --------------------------------------------------------
(1)   12/     45C :                     
(1)   13/     45C : =$10                MAX_MDOBJ	equ 16		; Max objects for Genesis
(1)   14/     45C : =$7FF               varNullVram	equ $7FF	; Default Blank cell for some video routines
(1)   15/     45C : =$580               varPrintVram	equ $580	; Location of the PRINT text graphics
(1)   16/     45C : =$3                 varPrintPal	equ 3		; Palette to use for the printable text
(1)   17/     45C :                     
(1)   18/     45C :                     ; --------------------------------------------------------
(1)   19/     45C :                     ; Variables
(1)   20/     45C :                     ; --------------------------------------------------------
(1)   21/     45C :                     
(1)   22/     45C :                     ; VDP Register $80
(1)   23/     45C : =$2                 HVStop		equ $02
(1)   24/     45C : =$10                HintEnbl	equ $10
(1)   25/     45C : =$1                 bitHVStop	equ 1
(1)   26/     45C : =$4                 bitHintEnbl	equ 4
(1)   27/     45C :                     
(1)   28/     45C :                     ; VDP Register $81
(1)   29/     45C : =$40                DispEnbl 	equ $40
(1)   30/     45C : =$20                VintEnbl 	equ $20
(1)   31/     45C : =$10                DmaEnbl		equ $10
(1)   32/     45C : =$6                 bitDispEnbl	equ 6
(1)   33/     45C : =$5                 bitVintEnbl	equ 5
(1)   34/     45C : =$4                 bitDmaEnbl	equ 4
(1)   35/     45C : =$3                 bitV30		equ 3
(1)   36/     45C :                     
(1)   37/     45C :                     ; vdp_ctrl READ bits (full WORD)
(1)   38/     45C : =$9                 bitFifoE	equ 9		; DMA FIFO empty
(1)   39/     45C : =$8                 bitFifoF	equ 8		; DMA FIFO full
(1)   40/     45C : =$7                 bitVInt		equ 7		; Vertical interrupt
(1)   41/     45C : =$6                 bitSprOvr	equ 6		; Sprite overflow
(1)   42/     45C : =$5                 bitSprCol	equ 5		; Sprite collision
(1)   43/     45C : =$4                 bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   44/     45C : =$3                 bitVBlk		equ 3		; Inside VBlank
(1)   45/     45C : =$2                 bitHBlk		equ 2		; Inside HBlank
(1)   46/     45C : =$1                 bitDma		equ 1		; Only works for FILL and COPY
(1)   47/     45C : =$0                 bitPal		equ 0
(1)   48/     45C :                     
(1)   49/     45C :                     ; md_bg_flags
(1)   50/     45C : =$0                 bitDrwR		equ 0
(1)   51/     45C : =$1                 bitDrwL		equ 1
(1)   52/     45C : =$2                 bitDrwD		equ 2
(1)   53/     45C : =$3                 bitDrwU		equ 3
(1)   54/     45C : =$7                 bitBgOn		equ 7
(1)   55/     45C : =$6                 bitMarsBg	equ 6
(1)   56/     45C :                     
(1)   57/     45C :                     ; ====================================================================
(1)   58/     45C :                     ; ----------------------------------------------------------------
(1)   59/     45C :                     ; Structs
(1)   60/     45C :                     ; ----------------------------------------------------------------
(1)   61/     45C :                     
(1)   62/     45C :                     ; IN SH2 ORDER
(1)   63/     45C :                     ; still works fine on this side.
(1)   64/     45C :                     ; md_bg_flags: %EM..UDLR
(1)   65/     45C :                     ; UDLR - off-screen update bits
(1)   66/     45C :                     ;    M - Map belongs to Genesis or 32X
(1)   67/     45C :                     ;    E - Enable this map
(1)   68/     45C :                     
(1)   69/     45C : (MACRO)             		struct 0
(1)   69/     45C : =$45C               GLBL_LASTPC     set *
(1)   69/     45C :                                     dephase
(1)   69/     45C : =$45C               GLBL_LASTORG    set *
(1)   69/       0 :                                     phase 0
(1)   70/       0 :                     md_bg_bw	ds.b 1		; Block Width
(1)   71/       1 :                     md_bg_bh	ds.b 1		; Block Height
(1)   72/       2 :                     md_bg_blkw	ds.b 1		; Bitshift block size (LSL)
(1)   73/       3 :                     md_bg_flags	ds.b 1		; Drawing flags: %EM00UDLR
(1)   74/       4 :                     md_bg_xset	ds.b 1		; X-counter
(1)   75/       5 :                     md_bg_yset	ds.b 1		; Y-counter
(1)   76/       6 :                     md_bg_movex	ds.b 1		; *** ALIGNMENT, FREE TO USE
(1)   77/       7 :                     md_bg_movey	ds.b 1		; ***
(1)   78/       8 :                     md_bg_w		ds.w 1		; Width in blocks
(1)   79/       A :                     md_bg_h		ds.w 1		; Height in blocks
(1)   80/       C :                     md_bg_wf	ds.w 1		; FULL Width in pixels
(1)   81/       E :                     md_bg_hf	ds.w 1		; FULL Height in pixels
(1)   82/      10 :                     md_bg_xinc_l	ds.w 1		; Layout draw-beams L/R/U/D
(1)   83/      12 :                     md_bg_xinc_r	ds.w 1
(1)   84/      14 :                     md_bg_yinc_u	ds.w 1
(1)   85/      16 :                     md_bg_yinc_d	ds.w 1
(1)   86/      18 :                     md_bg_x_old	ds.w 1		; OLD X position
(1)   87/      1A :                     md_bg_y_old	ds.w 1		; OLD Y position
(1)   88/      1C :                     md_bg_vpos	ds.w 1		; VRAM output for map
(1)   89/      1E :                     md_bg_vram	ds.w 1		; VRAM start for cells
(1)   90/      20 :                     md_bg_low	ds.l 1		; MAIN layout data
(1)   91/      24 :                     md_bg_hi	ds.l 1		; HI layout data
(1)   92/      28 :                     md_bg_blk	ds.l 1		; Block data
(1)   93/      2C :                     md_bg_col	ds.l 1		; Collision data (if needed)
(1)   94/      30 :                     md_bg_x		ds.l 1		; X pos 0000.0000
(1)   95/      34 :                     md_bg_y		ds.l 1		; Y pos 0000.0000
(1)   96/      38 :                     sizeof_mdbg	ds.l 0
(1)   97/      38 : (MACRO)             		finish
(1)   97/       0 :                                     !org GLBL_LASTORG
(1)   97/     45C :                                     phase GLBL_LASTPC
(1)   98/     45C :                     
(1)   99/     45C :                     ; --------------------------------
(1)  100/     45C :                     ; object struct
(1)  101/     45C :                     ; --------------------------------
(1)  102/     45C :                     
(1)  103/     45C : (MACRO)             		struct 0
(1)  103/     45C : =$45C               GLBL_LASTPC     set *
(1)  103/     45C :                                     dephase
(1)  103/     45C : =$45C               GLBL_LASTORG    set *
(1)  103/       0 :                                     phase 0
(1)  104/       0 :                     obj_code	ds.l 1		; Object code
(1)  105/       4 :                     obj_size	ds.l 1		; Object size (see below)
(1)  106/       8 :                     obj_x		ds.l 1		; Object X Position
(1)  107/       C :                     obj_y		ds.l 1		; Object Y Position
(1)  108/      10 :                     obj_map		ds.l 1		; Object image settings
(1)  109/      14 :                     obj_vram	ds.w 1		; Object VRAM position (MD-side only)
(1)  110/      16 :                     obj_x_spd	ds.w 1		; Object X Speed
(1)  111/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed
(1)  112/      1A :                     obj_anim_indx	ds.w 1		; Object animation increment (obj_anim + obj_anim_indx)
(1)  113/      1C :                     obj_anim_id	ds.w 1		; Object animation to read (current|saved)
(1)  114/      1E :                     obj_frame	ds.w 1		; Object display frame (MD: $FFFF, MARS: $YY,$XX)
(1)  115/      20 :                     obj_anim_spd	ds.b 1		; Object animation delay
(1)  116/      21 :                     obj_index	ds.b 1		; Object code index
(1)  117/      22 :                     obj_subid	ds.b 1		; Object SubID
(1)  118/      23 :                     obj_set		ds.b 1		; Object settings
(1)  119/      24 :                     obj_status	ds.b 1		; Object custom status
(1)  120/      25 :                     obj_spwnid	ds.b 1		; Object respawn index (this - 1)
(1)  121/      26 :                     obj_ram		ds.b $40	; Object RAM
(1)  122/      66 :                     sizeof_mdobj	ds.l 0
(1)  123/      68 : (MACRO)             		finish
(1)  123/       0 :                                     !org GLBL_LASTORG
(1)  123/     45C :                                     phase GLBL_LASTPC
(1)  124/     45C :                     ; 		message "\{sizeof_mdobj}"
(1)  125/     45C :                     
(1)  126/     45C :                     ; --------------------------------
(1)  127/     45C :                     ; obj_settings
(1)  128/     45C :                     ; --------------------------------
(1)  129/     45C :                     
(1)  130/     45C : =$7                 bitobj_Mars	equ	7	; This object is for 32X side.
(1)  131/     45C : =$1                 bitobj_flipV	equ	1	; set to flip Sprite Vertically
(1)  132/     45C : =$0                 bitobj_flipH	equ	0	; set to flip Sprite Horizontally
(1)  133/     45C :                     
(1)  134/     45C :                     ; --------------------------------
(1)  135/     45C :                     ; obj_set
(1)  136/     45C :                     ; --------------------------------
(1)  137/     45C :                     
(1)  138/     45C : =$0                 bitobj_air	equ	0	; set if floating/jumping
(1)  139/     45C :                     
(1)  140/     45C :                     ; --------------------------------
(1)  141/     45C :                     ; obj_size
(1)  142/     45C :                     ; --------------------------------
(1)  143/     45C :                     
(1)  144/     45C : =$3                 at_u		equ	3
(1)  145/     45C : =$2                 at_d		equ	2
(1)  146/     45C : =$1                 at_l		equ	1
(1)  147/     45C : =$0                 at_r		equ	0
(1)  148/     45C :                     
(1)  149/     45C :                     ; ====================================================================
(1)  150/     45C :                     ; ----------------------------------------------------------------
(1)  151/     45C :                     ; Video RAM
(1)  152/     45C :                     ; ----------------------------------------------------------------
(1)  153/     45C :                     
(1)  154/     45C : (MACRO)             			struct RAM_MdVideo
(1)  154/     45C : =$45C               GLBL_LASTPC     set *
(1)  154/     45C :                                     dephase
(1)  154/     45C : =$45C               GLBL_LASTORG    set *
(1)  154/FFFFFFFFFFFF9000 :                                     phase RAM_MDVIDEO
(1)  155/FFFFFFFFFFFF9000 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj
(1)  156/FFFFFFFFFFFF9660 :                     RAM_BgBuffer		ds.b sizeof_mdbg*4	; Map backgrounds, back to front.
(1)  157/FFFFFFFFFFFF9740 :                     RAM_FrameCount		ds.l 1			; Frames counter
(1)  158/FFFFFFFFFFFF9744 :                     RAM_HorScroll		ds.l 240		; DMA Horizontal scroll data
(1)  159/FFFFFFFFFFFF9B04 :                     RAM_VerScroll		ds.l 320/16		; DMA Vertical scroll data
(1)  160/FFFFFFFFFFFF9B54 :                     RAM_ObjDispList		ds.w MAX_MDOBJ		; Objects half-RAM pointers for display (Obj|Extra)
(1)  161/FFFFFFFFFFFF9B74 :                     RAM_SprDrwPz		ds.w 8*70		; External sprite pieces
(1)  162/FFFFFFFFFFFF9FD4 :                     RAM_Sprites		ds.w 8*70		; DMA Sprites
(1)  163/FFFFFFFFFFFFA434 :                     RAM_Palette		ds.w 64			; DMA palette
(1)  164/FFFFFFFFFFFFA4B4 :                     RAM_PaletteFd		ds.w 64			; Target MD palette for FadeIn/Out
(1)  165/FFFFFFFFFFFFA534 :                     RAM_MdMarsPalFd		ds.w 256		; Target 32X palette for FadeIn/Out (NOTE: it's slow)
(1)  166/FFFFFFFFFFFFA734 :                     RAM_VdpDmaList		ds.w 7*MAX_MDDMATSK	; DMA BLAST list for VBlank
(1)  167/FFFFFFFFFFFFA814 :                     RAM_VidPrntList		ds.w 3*64		; Video_Print list: Address, Type
(1)  168/FFFFFFFFFFFFA994 :                     RAM_SprDrwCntr		ds.w 1
(1)  169/FFFFFFFFFFFFA996 :                     RAM_SprShowIndx		ds.w 1
(1)  170/FFFFFFFFFFFFA998 :                     RAM_VdpDmaIndx		ds.w 1			; Current index in DMA BLAST list
(1)  171/FFFFFFFFFFFFA99A :                     RAM_VdpDmaMod		ds.w 1			; Mid-write flag (just to be safe)
(1)  172/FFFFFFFFFFFFA99C :                     RAM_VidPrntVram		ds.w 1			; Default VRAM location for ASCII text used by Video_Print
(1)  173/FFFFFFFFFFFFA99E :                     RAM_FadeMdReq		ds.w 1			; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  174/FFFFFFFFFFFFA9A0 :                     RAM_FadeMdIncr		ds.w 1			; Fading increment count
(1)  175/FFFFFFFFFFFFA9A2 :                     RAM_FadeMdDelay		ds.w 1			; Fading delay
(1)  176/FFFFFFFFFFFFA9A4 :                     RAM_FadeMdTmr		ds.w 1			; Fading delay timer
(1)  177/FFFFFFFFFFFFA9A6 :                     RAM_FadeMarsReq		ds.w 1			; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  178/FFFFFFFFFFFFA9A8 :                     RAM_FadeMarsIncr	ds.w 1			; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  179/FFFFFFFFFFFFA9AA :                     RAM_FadeMarsDelay	ds.w 1
(1)  180/FFFFFFFFFFFFA9AC :                     RAM_FadeMarsTmr		ds.w 1
(1)  181/FFFFFFFFFFFFA9AE :                     RAM_VdpRegs		ds.b 24			; VDP Register cache
(1)  182/FFFFFFFFFFFFA9C6 :                     sizeof_mdvid		ds.l 0
(1)  183/FFFFFFFFFFFFA9C8 : (MACRO)             			finish
(1)  183/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)  183/     45C :                                     phase GLBL_LASTPC
(1)  184/     45C :                     
(1)  185/     45C :                     ; ====================================================================
(1)  186/     45C :                     ; --------------------------------------------------------
(1)  187/     45C :                     ; Init Genesis video
(1)  188/     45C :                     ; --------------------------------------------------------
(1)  189/     45C :                     
(1)  190/     45C :                     Video_Init:
(1)  191/     45C : 4DF8 9000           		lea	(RAM_MdVideo),a6	; Clear RAM
(1)  192/     460 : 7C00                		moveq	#0,d6
(1)  193/     462 : 3E3C 19C5           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  194/     466 :                     .clrram:
(1)  195/     466 : 1CC6                		move.b	d6,(a6)+
(1)  196/     468 : 51CF FFFC           		dbf	d7,.clrram
(1)  197/     46C : 4DFA 0042           		lea	list_vdpregs(pc),a6
(1)  198/     470 : 4BF8 A9AE           		lea	(RAM_VdpRegs).w,a5
(1)  199/     474 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  200/     47A : 3C3C 8000           		move.w	#$8000,d6
(1)  201/     47E : 3E3C 0012           		move.w	#19-1,d7
(1)  202/     482 :                     .loop:
(1)  203/     482 : 1C1E                		move.b	(a6)+,d6
(1)  204/     484 : 1AC6                		move.b	d6,(a5)+
(1)  205/     486 : 3886                		move.w	d6,(a4)
(1)  206/     488 : DC7C 0100           		add.w	#$100,d6
(1)  207/     48C : 51CF FFF4           		dbf	d7,.loop
(1)  208/     490 :                     .exit:
(1)  209/     490 :                     
(1)  210/     490 :                     ; --------------------------------------------------------
(1)  211/     490 :                     ; Video_Update
(1)  212/     490 :                     ;
(1)  213/     490 :                     ; Writes register data stored in RAM to VDP
(1)  214/     490 :                     ; from Registers $80 to $90, WINDOW registers
(1)  215/     490 :                     ; $91 and $92 can be written manually.
(1)  216/     490 :                     ;
(1)  217/     490 :                     ; Breaks:
(1)  218/     490 :                     ; d6-d7,a5-a6
(1)  219/     490 :                     ; --------------------------------------------------------
(1)  220/     490 :                     
(1)  221/     490 :                     Video_Update:
(1)  222/     490 : 4DF8 A9AE           		lea	(RAM_VdpRegs).w,a6
(1)  223/     494 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  224/     49A : 3C3C 8000           		move.w	#$8000,d6
(1)  225/     49E : 3E3C 0010           		move.w	#17-1,d7
(1)  226/     4A2 :                     .loop:
(1)  227/     4A2 : 1C1E                		move.b	(a6)+,d6
(1)  228/     4A4 : 3A86                		move.w	d6,(a5)
(1)  229/     4A6 : DC7C 0100           		add.w	#$100,d6
(1)  230/     4AA : 51CF FFF6           		dbf	d7,.loop
(1)  231/     4AE :                     .exit:
(1)  232/     4AE : 4E75                		rts
(1)  233/     4B0 :                     
(1)  234/     4B0 :                     ; --------------------------------------------------------
(1)  235/     4B0 :                     
(1)  236/     4B0 :                     list_vdpregs:
(1)  237/     4B0 : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  238/     4B1 : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  239/     4B2 : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  240/     4B3 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  241/     4B4 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  242/     4B5 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  243/     4B6 : 00                  		dc.b $00			; Unused
(1)  244/     4B7 : 00                  		dc.b $00			; Background color: 0
(1)  245/     4B8 : 00                  		dc.b $00			; Unused
(1)  246/     4B9 : 00                  		dc.b $00			; Unused
(1)  247/     4BA : 00                  		dc.b $00			; HInt value
(1)  248/     4BB : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  249/     4BC : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1)  250/     4BD : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  251/     4BE : 00                  		dc.b $00			; Unused
(1)  252/     4BF : 02                  		dc.b $02			; VDP Auto increment: $02
(1)  253/     4C0 : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1)  254/     4C1 : 00                  		dc.b $00
(1)  255/     4C2 : 00                  		dc.b $00
(1)  256/     4C3 :                     		align 2
(1)  257/     4C4 :                     
(1)  258/     4C4 : 0000 0EEE 0CCC 0AAA ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1)  259/     4D4 : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  260/     4E4 :                     ASCII_PAL_e:
(1)  261/     4E4 :                     		align 2
(1)  262/     4E4 :                     
(1)  263/     4E4 :                     ; --------------------------------------------------------
(1)  264/     4E4 :                     ; Video_Clear
(1)  265/     4E4 :                     ;
(1)  266/     4E4 :                     ; Clear all video data from VRAM
(1)  267/     4E4 :                     ; --------------------------------------------------------
(1)  268/     4E4 :                     
(1)  269/     4E4 :                     Video_Clear:
(1)  270/     4E4 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  271/     4E4 :                     ; 		move.w	#0,d1
(1)  272/     4E4 :                     ; 		move.w	#$57F*$20,d2
(1)  273/     4E4 :                     ; 		bsr	Video_Fill
(1)  274/     4E4 :                     
(1)  275/     4E4 :                     Video_ClearScreen:
(1)  276/     4E4 : 7000                		moveq	#0,d0
(1)  277/     4E6 : 343C 0FFF           		move.w	#$FFF,d2		; FG/BG size
(1)  278/     4EA : 1239 FFFF A9B0      		move.b	(RAM_VdpRegs+2).l,d1	; FG
(1)  279/     4F0 : 0241 0038           		andi.w	#%111000,d1
(1)  280/     4F4 : E149                		lsl.w	#8,d1
(1)  281/     4F6 : E549                		lsl.w	#2,d1
(1)  282/     4F8 : 6100 054C           		bsr	Video_Fill
(1)  283/     4FC : 1239 FFFF A9B2      		move.b	(RAM_VdpRegs+4).l,d1	; BG
(1)  284/     502 : 0241 0007           		andi.w	#%000111,d1
(1)  285/     506 : E149                		lsl.w	#8,d1
(1)  286/     508 : EB49                		lsl.w	#5,d1
(1)  287/     50A : 6100 053A           		bsr	Video_Fill
(1)  288/     50E : 343C 0FFF           		move.w	#$FFF,d2		; WD Size
(1)  289/     512 : 1239 FFFF A9B1      		move.b	(RAM_VdpRegs+3).l,d1	; Window
(1)  290/     518 : 0241 003E           		andi.w	#%111110,d1
(1)  291/     51C : E149                		lsl.w	#8,d1
(1)  292/     51E : E549                		lsl.w	#2,d1
(1)  293/     520 : 6100 0524           		bsr	Video_Fill
(1)  294/     524 :                     	; RAM...
(1)  295/     524 : 41F8 9744           		lea	(RAM_HorScroll),a0
(1)  296/     528 : 3E3C 00EF           		move.w	#240-1,d7
(1)  297/     52C : 7000                		moveq	#0,d0
(1)  298/     52E :                     .xnext:
(1)  299/     52E : 20C0                		move.l	d0,(a0)+
(1)  300/     530 : 51CF FFFC           		dbf	d7,.xnext
(1)  301/     534 : 41F8 9B04           		lea	(RAM_VerScroll),a0
(1)  302/     538 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  303/     53C : 7000                		moveq	#0,d0
(1)  304/     53E :                     .ynext:
(1)  305/     53E : 20C0                		move.l	d0,(a0)+
(1)  306/     540 : 51CF FFFC           		dbf	d7,.ynext
(1)  307/     544 : 41F8 9FD4           		lea	(RAM_Sprites),a0
(1)  308/     548 : 3E3C 008B           		move.w	#((70*8)/4)-1,d7
(1)  309/     54C : 7000                		moveq	#0,d0
(1)  310/     54E :                     .snext:
(1)  311/     54E : 20C0                		move.l	d0,(a0)+
(1)  312/     550 : 51CF FFFC           		dbf	d7,.snext
(1)  313/     554 :                     
(1)  314/     554 : 41F8 A434           		lea	(RAM_Palette),a0
(1)  315/     558 : 43F8 A4B4           		lea	(RAM_PaletteFd),a1
(1)  316/     55C : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  317/     560 : 7000                		moveq	#0,d0
(1)  318/     562 :                     .pnext:
(1)  319/     562 : 20C0                		move.l	d0,(a0)+
(1)  320/     564 : 22C0                		move.l	d0,(a1)+
(1)  321/     566 : 51CF FFFA           		dbf	d7,.pnext
(1)  322/     56A :                     
(1)  323/     56A : 41F8 AE22           		lea	(RAM_MdDreq+Dreq_Palette),a0
(1)  324/     56E : 43F8 A534           		lea	(RAM_MdMarsPalFd),a1
(1)  325/     572 : 3E3C 007F           		move.w	#(256/2)-1,d7
(1)  326/     576 : 7000                		moveq	#0,d0
(1)  327/     578 :                     .pmnext:
(1)  328/     578 : 20C0                		move.l	d0,(a0)+
(1)  329/     57A : 22C0                		move.l	d0,(a1)+
(1)  330/     57C : 51CF FFFA           		dbf	d7,.pmnext
(1)  331/     580 : 4E75                		rts
(1)  332/     582 :                     
(1)  333/     582 :                     ; ====================================================================
(1)  334/     582 :                     ; ----------------------------------------------------------------
(1)  335/     582 :                     ; Generic screen-drawing routines
(1)  336/     582 :                     ; ----------------------------------------------------------------
(1)  337/     582 :                     
(1)  338/     582 :                     ; --------------------------------------------------------
(1)  339/     582 :                     ; Video_LoadMap
(1)  340/     582 :                     ;
(1)  341/     582 :                     ; Loads map data, in Horizontal order
(1)  342/     582 :                     ; Can autodetect layer width, height and
(1)  343/     582 :                     ; double interlace mode
(1)  344/     582 :                     ;
(1)  345/     582 :                     ; Input:
(1)  346/     582 :                     ; a0 - Map data
(1)  347/     582 :                     ;
(1)  348/     582 :                     ; d0 | LONG - locate(lyr,x,y) / 00|Layer|X|Y
(1)  349/     582 :                     ; d1 | LONG - mapsize(x,y) / Width|Height (in cells)
(1)  350/     582 :                     ; d2 | WORD - VRAM
(1)  351/     582 :                     ;
(1)  352/     582 :                     ; Breaks:
(1)  353/     582 :                     ; d4-d7,a6
(1)  354/     582 :                     ; --------------------------------------------------------
(1)  355/     582 :                     
(1)  356/     582 :                     Video_LoadMap:
(1)  357/     582 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  358/     588 : 6100 0224           		bsr	vid_PickLayer
(1)  359/     58C : 3A01                		move.w	d1,d5		; Start here
(1)  360/     58E :                     .yloop:
(1)  361/     58E : 4845                		swap	d5
(1)  362/     590 : 2D44 0004           		move.l	d4,4(a6)
(1)  363/     594 : 2E01                		move.l	d1,d7
(1)  364/     596 : 4847                		swap	d7
(1)  365/     598 :                     .xloop:
(1)  366/     598 : 3A18                		move.w	(a0)+,d5
(1)  367/     59A : BA7C FFFF           		cmp.w	#-1,d5		; -1 ?
(1)  368/     59E : 6606                		bne.s	.nonull
(1)  369/     5A0 : 3A3C 07FF           		move.w	#varNullVram,d5	; Replace with custom blank tile
(1)  370/     5A4 : 6002                		bra.s	.cont
(1)  371/     5A6 :                     .nonull:
(1)  372/     5A6 : DA42                		add.w	d2,d5
(1)  373/     5A8 :                     .cont:
(1)  374/     5A8 :                     
(1)  375/     5A8 :                     	; Check for double interlace
(1)  376/     5A8 : 4847                		swap	d7
(1)  377/     5AA : 1E39 FFFF A9BA      		move.b	(RAM_VdpRegs+$C).l,d7
(1)  378/     5B0 : CE7C 0006           		and.w	#%110,d7
(1)  379/     5B4 : BE7C 0006           		cmp.w	#%110,d7
(1)  380/     5B8 : 660E                		bne.s	.nodble
(1)  381/     5BA : 3E05                		move.w	d5,d7
(1)  382/     5BC : E24F                		lsr.w	#1,d7
(1)  383/     5BE : CE7C 07FF           		and.w	#$7FF,d7
(1)  384/     5C2 : CA7C F800           		and.w	#$F800,d5
(1)  385/     5C6 : 8A47                		or.w	d7,d5
(1)  386/     5C8 :                     .nodble:
(1)  387/     5C8 : 4847                		swap	d7
(1)  388/     5CA : 3C85                		move.w	d5,(a6)
(1)  389/     5CC : 51CF FFCA           		dbf	d7,.xloop
(1)  390/     5D0 : D886                		add.l	d6,d4
(1)  391/     5D2 : 4845                		swap	d5
(1)  392/     5D4 : 51CD FFB8           		dbf	d5,.yloop
(1)  393/     5D8 : 4E75                		rts
(1)  394/     5DA :                     
(1)  395/     5DA :                     ; --------------------------------------------------------
(1)  396/     5DA :                     ; Video_LoadMap_Vert
(1)  397/     5DA :                     ;
(1)  398/     5DA :                     ; Load map data, Vertical order
(1)  399/     5DA :                     ;
(1)  400/     5DA :                     ; a0 - Map data
(1)  401/     5DA :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  402/     5DA :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  403/     5DA :                     ; d2 | WORD - VRAM
(1)  404/     5DA :                     
(1)  405/     5DA :                     ; Breaks:
(1)  406/     5DA :                     ; a4-a5,d4-d7
(1)  407/     5DA :                     ; --------------------------------------------------------
(1)  408/     5DA :                     
(1)  409/     5DA :                     Video_LoadMap_Vert:
(1)  410/     5DA : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  411/     5E0 : 6100 01CC           		bsr	vid_PickLayer
(1)  412/     5E4 : 2A01                		move.l	d1,d5		; Start here
(1)  413/     5E6 : 4845                		swap	d5
(1)  414/     5E8 :                     .xloop:
(1)  415/     5E8 : 4845                		swap	d5
(1)  416/     5EA : 2F04                		move.l	d4,-(sp)
(1)  417/     5EC : 3E01                		move.w	d1,d7
(1)  418/     5EE : 0839 0002 FFFF A9BA 		btst	#2,(RAM_VdpRegs+$C).l
(1)  419/     5F6 : 6702                		beq.s	.yloop
(1)  420/     5F8 : E24F                		lsr.w	#1,d7
(1)  421/     5FA :                     .yloop:
(1)  422/     5FA : 2944 0004           		move.l	d4,4(a4)
(1)  423/     5FE : 3A10                		move.w	(a0),d5
(1)  424/     600 : BA7C FFFF           		cmp.w	#-1,d5
(1)  425/     604 : 6606                		bne.s	.nonull
(1)  426/     606 : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  427/     60A : 6002                		bra.s	.cont
(1)  428/     60C :                     .nonull:
(1)  429/     60C : DA42                		add.w	d2,d5
(1)  430/     60E :                     .cont:
(1)  431/     60E : 4847                		swap	d7
(1)  432/     610 : D0FC 0002           		adda	#2,a0
(1)  433/     614 : 0839 0002 FFFF A9BA 		btst	#2,(RAM_VdpRegs+$C).l
(1)  434/     61C : 6712                		beq.s	.nodble
(1)  435/     61E : D0FC 0002           		adda	#2,a0
(1)  436/     622 : 3E05                		move.w	d5,d7
(1)  437/     624 : E24F                		lsr.w	#1,d7
(1)  438/     626 : CE7C 07FF           		and.w	#$7FF,d7
(1)  439/     62A : CA7C F800           		and.w	#$F800,d5
(1)  440/     62E : 8A47                		or.w	d7,d5
(1)  441/     630 :                     .nodble:
(1)  442/     630 : 4847                		swap	d7
(1)  443/     632 : 3885                		move.w	d5,(a4)
(1)  444/     634 : D886                		add.l	d6,d4
(1)  445/     636 : 51CF FFC2           		dbf	d7,.yloop
(1)  446/     63A :                     .outdbl:
(1)  447/     63A : 281F                		move.l	(sp)+,d4
(1)  448/     63C : D8BC 0002 0000      		add.l	#$20000,d4
(1)  449/     642 : 4845                		swap	d5
(1)  450/     644 : 51CD FFA2           		dbf	d5,.xloop
(1)  451/     648 : 4E75                		rts
(1)  452/     64A :                     
(1)  453/     64A :                     ; ; --------------------------------------------------------
(1)  454/     64A :                     ; ; Video_AutoMap_Vert
(1)  455/     64A :                     ; ;
(1)  456/     64A :                     ; ; Make automatic map, Vertical order
(1)  457/     64A :                     ; ;
(1)  458/     64A :                     ; ; MCD: Use this to make a virtual screen
(1)  459/     64A :                     ; ; for Stamps
(1)  460/     64A :                     ; ;
(1)  461/     64A :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  462/     64A :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  463/     64A :                     ; ; d2 | WORD - VRAM
(1)  464/     64A :                     ;
(1)  465/     64A :                     ; ; Breaks:
(1)  466/     64A :                     ; ; a4-a5,d4-d7
(1)  467/     64A :                     ; ; --------------------------------------------------------
(1)  468/     64A :                     ;
(1)  469/     64A :                     ; ; TODO: double interlace
(1)  470/     64A :                     ; Video_AutoMap_Vert:
(1)  471/     64A :                     ; 		lea	(vdp_data),a4
(1)  472/     64A :                     ; 		bsr	vid_PickLayer
(1)  473/     64A :                     ; 		move.w	d2,d7		; Start here
(1)  474/     64A :                     ; 		move.l	d1,d5
(1)  475/     64A :                     ; 		swap	d5
(1)  476/     64A :                     ; .xloop:
(1)  477/     64A :                     ; 		swap	d5
(1)  478/     64A :                     ; 		move.l	d4,-(sp)
(1)  479/     64A :                     ; 		move.w	d1,d5
(1)  480/     64A :                     ; 		btst	#2,(RAM_VdpRegs+$C).l
(1)  481/     64A :                     ; 		beq.s	.yloop
(1)  482/     64A :                     ; 		lsr.w	#1,d5
(1)  483/     64A :                     ; .yloop:
(1)  484/     64A :                     ; 		move.l	d4,4(a4)
(1)  485/     64A :                     ; 		move.w	d7,(a4)
(1)  486/     64A :                     ; 		add.w	#1,d7
(1)  487/     64A :                     ; 		add.l	d6,d4
(1)  488/     64A :                     ; 		dbf	d5,.yloop
(1)  489/     64A :                     ;
(1)  490/     64A :                     ; 		move.l	(sp)+,d4
(1)  491/     64A :                     ; 		add.l	#$20000,d4
(1)  492/     64A :                     ; 		swap	d5
(1)  493/     64A :                     ; 		dbf	d5,.xloop
(1)  494/     64A :                     ; 		rts
(1)  495/     64A :                     
(1)  496/     64A :                     ; ====================================================================
(1)  497/     64A :                     ; ----------------------------------------------------------------
(1)  498/     64A :                     ; Custom "PRINT" system, for debugging or quick texts.
(1)  499/     64A :                     ; ----------------------------------------------------------------
(1)  500/     64A :                     
(1)  501/     64A :                     ; --------------------------------------------------------
(1)  502/     64A :                     ; Video_PrintInit
(1)  503/     64A :                     ;
(1)  504/     64A :                     ; Initializes the default Graphics and Palette
(1)  505/     64A :                     ; for the font.
(1)  506/     64A :                     ;
(1)  507/     64A :                     ; *** ON VBLANK OR DISPLAY OFF ONLY ***
(1)  508/     64A :                     ; *** MAKE SURE SH2 IS NOT READING ROM DATA ***
(1)  509/     64A :                     ; --------------------------------------------------------
(1)  510/     64A :                     
(1)  511/     64A :                     Video_PrintInit:
(1)  512/     64A : 203C 0003 0000      		move.l	#ASCII_FONT,d0
(1)  513/     650 : 323C B000           		move.w	#varPrintVram*$20,d1
(1)  514/     654 : 343C 1000           		move.w	#ASCII_FONT_e-ASCII_FONT,d2
(1)  515/     658 : 363C 6580           		move.w	#varPrintVram|(varPrintPal<<13),d3
(1)  516/     65C : 31C3 A99C           		move.w	d3,(RAM_VidPrntVram).w
(1)  517/     660 : 6100 04DE           		bsr	Video_LoadArt
(1)  518/     664 :                     Video_PrintPal:
(1)  519/     664 : 41FA FE5E           		lea	ASCII_PAL(pc),a0
(1)  520/     668 : 7030                		moveq	#(varPrintPal<<4),d0
(1)  521/     66A : 323C 000F           		move.w	#$F,d1
(1)  522/     66E : 6100 01F6           		bsr	Video_LoadPal	; Write to both palette buffers
(1)  523/     672 : 6000 01E8           		bra	Video_FadePal
(1)  524/     676 :                     
(1)  525/     676 :                     ; --------------------------------------------------------
(1)  526/     676 :                     ; Video_Print
(1)  527/     676 :                     ;
(1)  528/     676 :                     ; Prints string to layer
(1)  529/     676 :                     ; requires ASCII font
(1)  530/     676 :                     ;
(1)  531/     676 :                     ; a0 | DATA - String data w/special characters +
(1)  532/     676 :                     ;             list of RAM locations to read
(1)  533/     676 :                     ; d0 | LONG - Print location on-screen:
(1)  534/     676 :                     ;             00|Lyr|X|Y or locate(layer,x,y)
(1)  535/     676 :                     ;
(1)  536/     676 :                     ; Special characters:
(1)  537/     676 :                     ; "//b" - Shows BYTE value
(1)  538/     676 :                     ; "//w" - Shows WORD value
(1)  539/     676 :                     ; "//l" - Shows LONG value
(1)  540/     676 :                     ;   $0A - Next line
(1)  541/     676 :                     ;   $00 - End of line
(1)  542/     676 :                     ;
(1)  543/     676 :                     ; After $00, put your RAM addresses in LONGS
(1)  544/     676 :                     ; don't forget to put align 2 at the end.
(1)  545/     676 :                     ;
(1)  546/     676 :                     ; CALL Video_PrintInit FIRST before using this.
(1)  547/     676 :                     ;
(1)  548/     676 :                     ; Breaks:
(1)  549/     676 :                     ; d4-d7,a4-a6
(1)  550/     676 :                     ; --------------------------------------------------------
(1)  551/     676 :                     
(1)  552/     676 :                     Video_Print:
(1)  553/     676 :                     ; 		movem.l	d3-d7,-(sp)
(1)  554/     676 :                     ; 		movem.l	a4-a6,-(sp)
(1)  555/     676 :                     
(1)  556/     676 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  557/     67C : 6100 0130           		bsr	vid_PickLayer
(1)  558/     680 : 4BF8 A814           		lea	(RAM_VidPrntList),a5
(1)  559/     684 :                     .newjump:
(1)  560/     684 : 2D44 0004           		move.l	d4,4(a6)
(1)  561/     688 : 2A04                		move.l	d4,d5
(1)  562/     68A :                     .loop:
(1)  563/     68A : 1E18                		move.b	(a0)+,d7
(1)  564/     68C : 6772                		beq	.exit
(1)  565/     68E : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  566/     692 : 6718                		beq.s	.next
(1)  567/     694 : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(1)  568/     698 : 6716                		beq.s	.special
(1)  569/     69A : 0247 00FF           		andi.w	#$FF,d7
(1)  570/     69E :                     .puttext:
(1)  571/     69E : DE78 A99C           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  572/     6A2 : 3C87                		move.w	d7,(a6)
(1)  573/     6A4 : DABC 0002 0000      		add.l	#$20000,d5
(1)  574/     6AA : 60DE                		bra.s	.loop
(1)  575/     6AC :                     ; Next line
(1)  576/     6AC :                     .next:
(1)  577/     6AC : D886                		add.l	d6,d4
(1)  578/     6AE : 60D4                		bra.s	.newjump
(1)  579/     6B0 :                     
(1)  580/     6B0 :                     ; Specials
(1)  581/     6B0 :                     .special:
(1)  582/     6B0 : 1E18                		move.b	(a0)+,d7
(1)  583/     6B2 : 0C07 0062           		cmpi.b	#"b",d7
(1)  584/     6B6 : 6712                		beq.s	.isbyte
(1)  585/     6B8 : 0C07 0077           		cmpi.b	#"w",d7
(1)  586/     6BC : 671E                		beq.s	.isword
(1)  587/     6BE : 0C07 006C           		cmpi.b	#"l",d7
(1)  588/     6C2 : 672A                		beq.s	.islong
(1)  589/     6C4 : 3E3C 005C           		move.w	#"\\",d7		; normal " \ "
(1)  590/     6C8 : 60D4                		bra.s	.puttext
(1)  591/     6CA :                     
(1)  592/     6CA :                     	; TEMPORAL VALUES
(1)  593/     6CA :                     .isbyte:
(1)  594/     6CA : 2AC5                		move.l	d5,(a5)+
(1)  595/     6CC : 3AFC 0001           		move.w	#1,(a5)+
(1)  596/     6D0 : DABC 0004 0000      		add.l	#$40000,d5
(1)  597/     6D6 : 2D45 0004           		move.l	d5,4(a6)
(1)  598/     6DA : 60AE                		bra	.loop
(1)  599/     6DC :                     .isword:
(1)  600/     6DC : 2AC5                		move.l	d5,(a5)+
(1)  601/     6DE : 3AFC 0002           		move.w	#2,(a5)+
(1)  602/     6E2 : DABC 0008 0000      		add.l	#$80000,d5
(1)  603/     6E8 : 2D45 0004           		move.l	d5,4(a6)
(1)  604/     6EC : 609C                		bra	.loop
(1)  605/     6EE :                     .islong:
(1)  606/     6EE : 2AC5                		move.l	d5,(a5)+
(1)  607/     6F0 : 3AFC 0003           		move.w	#3,(a5)+
(1)  608/     6F4 : DABC 0010 0000      		add.l	#$100000,d5
(1)  609/     6FA : 2D45 0004           		move.l	d5,4(a6)
(1)  610/     6FE : 608A                		bra	.loop
(1)  611/     700 :                     .exit:
(1)  612/     700 :                     
(1)  613/     700 :                     	; ----------------------------------------
(1)  614/     700 :                     	; Print values
(1)  615/     700 :                     	;
(1)  616/     700 :                     	; vvvv vvvv tttt
(1)  617/     700 :                     	; v - vdp pos
(1)  618/     700 :                     	; t - value type
(1)  619/     700 :                     	; ----------------------------------------
(1)  620/     700 :                     
(1)  621/     700 :                     	; reading byte by byte because longs doesn't get
(1)  622/     700 :                     	; aligned after $00...
(1)  623/     700 :                     
(1)  624/     700 : 7800                		moveq	#0,d4
(1)  625/     702 : 7A00                		moveq	#0,d5
(1)  626/     704 : 7C00                		moveq	#0,d6
(1)  627/     706 : 4BF8 A814           		lea	(RAM_VidPrntList),a5
(1)  628/     70A :                     .nextv:
(1)  629/     70A : 4A95                		tst.l	(a5)
(1)  630/     70C : 6700 009E           		beq	.nothing
(1)  631/     710 :                     
(1)  632/     710 :                     	; grab value
(1)  633/     710 : 7800                		moveq	#0,d4
(1)  634/     712 : 1818                		move.b	(a0)+,d4
(1)  635/     714 : E19C                		rol.l	#8,d4
(1)  636/     716 : 1818                		move.b	(a0)+,d4
(1)  637/     718 : E19C                		rol.l	#8,d4
(1)  638/     71A : 1818                		move.b	(a0)+,d4
(1)  639/     71C : E19C                		rol.l	#8,d4
(1)  640/     71E : 1818                		move.b	(a0)+,d4
(1)  641/     720 : 2844                		movea.l	d4,a4
(1)  642/     722 : 7800                		moveq	#0,d4
(1)  643/     724 :                     
(1)  644/     724 :                     	; get value
(1)  645/     724 : 3C2D 0004           		move.w	4(a5),d6
(1)  646/     728 : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  647/     72C : 660E                		bne.s	.vbyte
(1)  648/     72E : 1814                		move.b	(a4),d4
(1)  649/     730 : 2D55 0004           		move.l	(a5),4(a6)
(1)  650/     734 : E91C                		rol.b	#4,d4
(1)  651/     736 : 6158                		bsr.s	.donibl
(1)  652/     738 : E91C                		rol.b	#4,d4
(1)  653/     73A : 6154                		bsr.s	.donibl
(1)  654/     73C :                     .vbyte:
(1)  655/     73C : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  656/     740 : 661C                		bne.s	.vword
(1)  657/     742 : 1814                		move.b	(a4),d4
(1)  658/     744 : E15C                		rol.w	#8,d4
(1)  659/     746 : 182C 0001           		move.b	1(a4),d4
(1)  660/     74A : 2D55 0004           		move.l	(a5),4(a6)
(1)  661/     74E : E95C                		rol.w	#4,d4
(1)  662/     750 : 613E                		bsr.s	.donibl
(1)  663/     752 : E95C                		rol.w	#4,d4
(1)  664/     754 : 613A                		bsr.s	.donibl
(1)  665/     756 : E95C                		rol.w	#4,d4
(1)  666/     758 : 6136                		bsr.s	.donibl
(1)  667/     75A : E95C                		rol.w	#4,d4
(1)  668/     75C : 6132                		bsr.s	.donibl
(1)  669/     75E :                     .vword:
(1)  670/     75E :                     
(1)  671/     75E :                     	; TODO: might break on negative values
(1)  672/     75E : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  673/     762 : 6624                		bne.s	.vlong
(1)  674/     764 : 1814                		move.b	(a4),d4
(1)  675/     766 : E19C                		rol.l	#8,d4
(1)  676/     768 : 182C 0001           		move.b	1(a4),d4
(1)  677/     76C : E19C                		rol.l	#8,d4
(1)  678/     76E : 182C 0002           		move.b	2(a4),d4
(1)  679/     772 : E19C                		rol.l	#8,d4
(1)  680/     774 : 182C 0003           		move.b	3(a4),d4
(1)  681/     778 : 2D55 0004           		move.l	(a5),4(a6)
(1)  682/     77C : 3C3C 0007           		move.w	#7,d6
(1)  683/     780 : E99C                .lngloop:	rol.l	#4,d4
(1)  684/     782 : 610C                		bsr.s	.donibl
(1)  685/     784 : 51CE FFFA           		dbf	d6,.lngloop
(1)  686/     788 :                     .vlong:
(1)  687/     788 : 429D                		clr.l	(a5)+
(1)  688/     78A : 425D                		clr.w	(a5)+
(1)  689/     78C : 6000 FF7C           		bra	.nextv
(1)  690/     790 :                     
(1)  691/     790 :                     ; make nibble byte
(1)  692/     790 :                     .donibl:
(1)  693/     790 : 3A04                		move.w	d4,d5
(1)  694/     792 : 0245 000F           		andi.w	#%1111,d5
(1)  695/     796 : BA3C 000A           		cmp.b	#$A,d5
(1)  696/     79A : 6D04                		blt.s	.lowr
(1)  697/     79C : DA3C 0007           		add.b	#7,d5
(1)  698/     7A0 :                     .lowr:
(1)  699/     7A0 : DA7C 0030           		add.w	#"0",d5
(1)  700/     7A4 : DA78 A99C           		add.w	(RAM_VidPrntVram),d5
(1)  701/     7A8 : 3C85                		move.w	d5,(a6)
(1)  702/     7AA : 4E75                		rts
(1)  703/     7AC :                     ; exit
(1)  704/     7AC :                     .nothing:
(1)  705/     7AC :                     ; 		movem.l	(sp)+,a4-a6
(1)  706/     7AC :                     ; 		movem.l	(sp)+,d3-d7
(1)  707/     7AC : 4E75                		rts
(1)  708/     7AE :                     
(1)  709/     7AE :                     ; --------------------------------------------------------
(1)  710/     7AE :                     ; Shared: pick layer / x pos / y pos and set size
(1)  711/     7AE :                     ; --------------------------------------------------------
(1)  712/     7AE :                     
(1)  713/     7AE :                     vid_PickLayer:
(1)  714/     7AE : 2C00                		move.l	d0,d6			; Pick layer
(1)  715/     7B0 : 4846                		swap	d6
(1)  716/     7B2 : 0806 0000           		btst	#0,d6
(1)  717/     7B6 : 671E                		beq.s	.plawnd
(1)  718/     7B8 : 1839 FFFF A9B2      		move.b	(RAM_VdpRegs+4).l,d4	; BG
(1)  719/     7BE : 3A04                		move.w	d4,d5
(1)  720/     7C0 : E24D                		lsr.w	#1,d5
(1)  721/     7C2 : 0245 0003           		andi.w	#%11,d5
(1)  722/     7C6 : 4844                		swap	d4
(1)  723/     7C8 : 3805                		move.w	d5,d4
(1)  724/     7CA : 4844                		swap	d4
(1)  725/     7CC : 0244 0001           		andi.w	#1,d4
(1)  726/     7D0 : E14C                		lsl.w	#8,d4
(1)  727/     7D2 : EB4C                		lsl.w	#5,d4
(1)  728/     7D4 : 6028                		bra.s	.golyr
(1)  729/     7D6 :                     .plawnd:
(1)  730/     7D6 : 1839 FFFF A9B0      		move.b	(RAM_VdpRegs+2).l,d4	; FG
(1)  731/     7DC : 0806 0001           		btst	#1,d6
(1)  732/     7E0 : 6706                		beq.s	.nowd
(1)  733/     7E2 : 1839 FFFF A9B1      		move.b	(RAM_VdpRegs+3).l,d4	; WINDOW
(1)  734/     7E8 :                     .nowd:
(1)  735/     7E8 : 3A04                		move.w	d4,d5
(1)  736/     7EA : E84D                		lsr.w	#4,d5
(1)  737/     7EC : 0245 0003           		andi.w	#%11,d5
(1)  738/     7F0 : 4844                		swap	d4
(1)  739/     7F2 : 3805                		move.w	d5,d4
(1)  740/     7F4 : 4844                		swap	d4
(1)  741/     7F6 : 0244 000E           		andi.w	#%00001110,d4
(1)  742/     7FA : E14C                		lsl.w	#8,d4
(1)  743/     7FC : E54C                		lsl.w	#2,d4
(1)  744/     7FE :                     .golyr:
(1)  745/     7FE : 0044 4000           		ori.w	#$4000,d4
(1)  746/     802 : 3A00                		move.w	d0,d5			; Y start pos
(1)  747/     804 : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  748/     808 : ED4D                		lsl.w	#6,d5
(1)  749/     80A : 1C38 A9BE           		move.b	(RAM_VdpRegs+$10).w,d6
(1)  750/     80E : 0246 0003           		andi.w	#%11,d6
(1)  751/     812 : 670A                		beq.s	.thissz
(1)  752/     814 : DA45                		add.w	d5,d5			; H64
(1)  753/     816 : 0246 0002           		andi.w	#%10,d6
(1)  754/     81A : 6702                		beq.s	.thissz
(1)  755/     81C : DA45                		add.w	d5,d5			; H128
(1)  756/     81E :                     .thissz:
(1)  757/     81E : D845                		add.w	d5,d4
(1)  758/     820 : 3A00                		move.w	d0,d5
(1)  759/     822 : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  760/     826 : EE4D                		lsr.w	#7,d5
(1)  761/     828 : D845                		add.w	d5,d4			; X add
(1)  762/     82A : 4844                		swap	d4
(1)  763/     82C : 7C00                		moveq	#0,d6
(1)  764/     82E : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  765/     832 : 1A38 A9BE           		move.b	(RAM_VdpRegs+$10).w,d5
(1)  766/     836 : 0245 0003           		andi.w	#%11,d5
(1)  767/     83A : 670A                		beq.s	.thisszj
(1)  768/     83C : DC46                		add.w	d6,d6			; H64
(1)  769/     83E : 0245 0002           		andi.w	#%10,d5
(1)  770/     842 : 6702                		beq.s	.thisszj
(1)  771/     844 : DC46                		add.w	d6,d6			; H128
(1)  772/     846 :                     .thisszj:
(1)  773/     846 : 4846                		swap	d6
(1)  774/     848 : 4E75                		rts
(1)  775/     84A :                     
(1)  776/     84A :                     ; ====================================================================
(1)  777/     84A :                     ; ----------------------------------------------------------------
(1)  778/     84A :                     ; Palette fade system, Genesis side
(1)  779/     84A :                     ; ----------------------------------------------------------------
(1)  780/     84A :                     
(1)  781/     84A :                     ; --------------------------------------------------------
(1)  782/     84A :                     ; Video_RunFade
(1)  783/     84A :                     ;
(1)  784/     84A :                     ; Processes palette fading and reports if requests
(1)  785/     84A :                     ; finished on exit.
(1)  786/     84A :                     ;
(1)  787/     84A :                     ; Returns:
(1)  788/     84A :                     ; bne - Still active
(1)  789/     84A :                     ; beq - Finished
(1)  790/     84A :                     ;
(1)  791/     84A :                     ; *** CALL System_WaitFrame FIRST ***
(1)  792/     84A :                     ; --------------------------------------------------------
(1)  793/     84A :                     
(1)  794/     84A :                     Video_RunFade:
(1)  795/     84A : 613E                		bsr	Video_DoPalFade
(1)  796/     84C : 6100 0428           		bsr	Video_MarsPalFade
(1)  797/     850 : 3E38 A9A6           		move.w	(RAM_FadeMarsReq),d7
(1)  798/     854 : 3C38 A99E           		move.w	(RAM_FadeMdReq),d6
(1)  799/     858 : 8E46                		or.w	d6,d7
(1)  800/     85A : 4E75                		rts
(1)  801/     85C :                     
(1)  802/     85C :                     ; --------------------------------------------------------
(1)  803/     85C :                     ; Video_LoadPal
(1)  804/     85C :                     ;
(1)  805/     85C :                     ; Input:
(1)  806/     85C :                     ; a0 - Palette data
(1)  807/     85C :                     ; d0 - Start position
(1)  808/     85C :                     ; d1 - Number of colors
(1)  809/     85C :                     ;
(1)  810/     85C :                     ; Breaks:
(1)  811/     85C :                     ; d5-d7,a6
(1)  812/     85C :                     ; --------------------------------------------------------
(1)  813/     85C :                     
(1)  814/     85C :                     Video_FadePal:
(1)  815/     85C : 4DF8 A4B4           		lea	(RAM_PaletteFd),a6
(1)  816/     860 : 4278 A9A4           		clr.w	(RAM_FadeMdTmr).w
(1)  817/     864 : 6004                		bra.s	vidMd_Pal
(1)  818/     866 :                     Video_LoadPal:
(1)  819/     866 : 4DF8 A434           		lea	(RAM_Palette),a6
(1)  820/     86A :                     vidMd_Pal:
(1)  821/     86A : 2A48                		move.l	a0,a5
(1)  822/     86C : 7E00                		moveq	#0,d7
(1)  823/     86E : 3E00                		move.w	d0,d7
(1)  824/     870 : DE47                		add.w	d7,d7
(1)  825/     872 : DCC7                		adda	d7,a6
(1)  826/     874 : 3E01                		move.w	d1,d7
(1)  827/     876 : 9E7C 0001           		sub.w	#1,d7
(1)  828/     87A : 3C02                		move.w	d2,d6
(1)  829/     87C : CC7C 0001           		and.w	#1,d6
(1)  830/     880 : E25E                		ror.w	#1,d6
(1)  831/     882 :                     .loop:
(1)  832/     882 : 3CDD                		move.w	(a5)+,(a6)+
(1)  833/     884 : 51CF FFFC           		dbf	d7,.loop
(1)  834/     888 : 4E75                		rts
(1)  835/     88A :                     
(1)  836/     88A :                     ; --------------------------------------------------------
(1)  837/     88A :                     ; Video_DoPalFade
(1)  838/     88A :                     ;
(1)  839/     88A :                     ; RAM_ReqFadeMars: (WORD)
(1)  840/     88A :                     ; $00 - No task or finished.
(1)  841/     88A :                     ; $01 - Fade in
(1)  842/     88A :                     ; $02 - Fade out to black
(1)  843/     88A :                     ;
(1)  844/     88A :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  845/     88A :                     ; --------------------------------------------------------
(1)  846/     88A :                     
(1)  847/     88A :                     Video_DoPalFade:
(1)  848/     88A : 0478 0001 A9A4      		sub.w	#1,(RAM_FadeMdTmr).w
(1)  849/     890 : 6A14                		bpl.s	.active
(1)  850/     892 : 31F8 A9A2 A9A4      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  851/     898 : 3E38 A99E           		move.w	(RAM_FadeMdReq).w,d7
(1)  852/     89C : DE47                		add.w	d7,d7
(1)  853/     89E : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  854/     8A2 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  855/     8A6 :                     .active:
(1)  856/     8A6 : 4E75                		rts
(1)  857/     8A8 :                     
(1)  858/     8A8 :                     ; --------------------------------------------
(1)  859/     8A8 :                     
(1)  860/     8A8 :                     .fade_list:
(1)  861/     8A8 : 0006                		dc.w .fade_done-.fade_list
(1)  862/     8AA : 0008                		dc.w .fade_in-.fade_list
(1)  863/     8AC : 00AC                		dc.w .fade_out-.fade_list
(1)  864/     8AE :                     
(1)  865/     8AE :                     ; --------------------------------------------
(1)  866/     8AE :                     ; No fade or finished.
(1)  867/     8AE :                     ; --------------------------------------------
(1)  868/     8AE :                     
(1)  869/     8AE :                     .fade_done:
(1)  870/     8AE : 4E75                		rts
(1)  871/     8B0 :                     
(1)  872/     8B0 :                     ; --------------------------------------------
(1)  873/     8B0 :                     ; Fade in
(1)  874/     8B0 :                     ; --------------------------------------------
(1)  875/     8B0 :                     
(1)  876/     8B0 :                     .fade_in:
(1)  877/     8B0 : 4DF8 A4B4           		lea	(RAM_PaletteFd),a6
(1)  878/     8B4 : 4BF8 A434           		lea	(RAM_Palette),a5
(1)  879/     8B8 : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  880/     8BC : 3238 A9A0           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  881/     8C0 : D241                		add.w	d1,d1
(1)  882/     8C2 : 3C00                		move.w	d0,d6
(1)  883/     8C4 : 4846                		swap	d6
(1)  884/     8C6 : 907C 0001           		sub.w	#1,d0
(1)  885/     8CA :                     .nxt_pal:
(1)  886/     8CA : 4242                		clr.w	d2		; Reset finished colorbits
(1)  887/     8CC : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  888/     8CE : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  889/     8D0 : 3607                		move.w	d7,d3		; RED
(1)  890/     8D2 : 3806                		move.w	d6,d4
(1)  891/     8D4 : CC7C 0EE0           		and.w	#%0000111011100000,d6
(1)  892/     8D8 : C87C 000E           		and.w	#%0000000000001110,d4
(1)  893/     8DC : C67C 000E           		and.w	#%0000000000001110,d3
(1)  894/     8E0 : D841                		add.w	d1,d4
(1)  895/     8E2 : B843                		cmp.w	d3,d4
(1)  896/     8E4 : 6506                		bcs.s	.no_red
(1)  897/     8E6 : 3803                		move.w	d3,d4
(1)  898/     8E8 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1)  899/     8EC :                     .no_red:
(1)  900/     8EC : 8C44                		or.w	d4,d6
(1)  901/     8EE : E949                		lsl.w	#4,d1
(1)  902/     8F0 : 3607                		move.w	d7,d3		; GREEN
(1)  903/     8F2 : 3806                		move.w	d6,d4
(1)  904/     8F4 : CC7C 0E0E           		and.w	#%0000111000001110,d6
(1)  905/     8F8 : C87C 00E0           		and.w	#%0000000011100000,d4
(1)  906/     8FC : C67C 00E0           		and.w	#%0000000011100000,d3
(1)  907/     900 : D841                		add.w	d1,d4
(1)  908/     902 : B843                		cmp.w	d3,d4
(1)  909/     904 : 6506                		bcs.s	.no_grn
(1)  910/     906 : 3803                		move.w	d3,d4
(1)  911/     908 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1)  912/     90C :                     .no_grn:
(1)  913/     90C : 8C44                		or.w	d4,d6
(1)  914/     90E : E949                		lsl.w	#4,d1
(1)  915/     910 : 3607                		move.w	d7,d3		; BLUE
(1)  916/     912 : 3806                		move.w	d6,d4
(1)  917/     914 : CC7C 00EE           		and.w	#%0000000011101110,d6
(1)  918/     918 : C87C 0E00           		and.w	#%0000111000000000,d4
(1)  919/     91C : C67C 0E00           		and.w	#%0000111000000000,d3
(1)  920/     920 : D841                		add.w	d1,d4
(1)  921/     922 : B843                		cmp.w	d3,d4
(1)  922/     924 : 6506                		bcs.s	.no_blu
(1)  923/     926 : 3803                		move.w	d3,d4
(1)  924/     928 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1)  925/     92C :                     .no_blu:
(1)  926/     92C : 8C44                		or.w	d4,d6
(1)  927/     92E : E049                		lsr.w	#8,d1
(1)  928/     930 : 3AC6                		move.w	d6,(a5)+
(1)  929/     932 : DCFC 0002           		adda	#2,a6
(1)  930/     936 : B47C 0007           		cmp.w	#%111,d2
(1)  931/     93A : 6608                		bne.s	.no_fnsh
(1)  932/     93C : 4846                		swap	d6
(1)  933/     93E : 9C7C 0001           		sub.w	#1,d6
(1)  934/     942 : 4846                		swap	d6
(1)  935/     944 :                     .no_fnsh:
(1)  936/     944 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  937/     948 : 4846                		swap	d6
(1)  938/     94A : 4A46                		tst.w	d6
(1)  939/     94C : 6604                		bne.s	.no_move
(1)  940/     94E : 4278 A99E           		clr.w	(RAM_FadeMdReq).w
(1)  941/     952 :                     .no_move:
(1)  942/     952 : 4E75                		rts
(1)  943/     954 :                     
(1)  944/     954 :                     ; --------------------------------------------
(1)  945/     954 :                     ; Fade out
(1)  946/     954 :                     ; --------------------------------------------
(1)  947/     954 :                     
(1)  948/     954 :                     .fade_out:
(1)  949/     954 : 4DF8 A434           		lea	(RAM_Palette),a6
(1)  950/     958 : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  951/     95C : 3238 A9A0           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  952/     960 : 3C00                		move.w	d0,d6
(1)  953/     962 : 4846                		swap	d6
(1)  954/     964 : 907C 0001           		sub.w	#1,d0
(1)  955/     968 :                     .nxt_pal_o:
(1)  956/     968 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  957/     96A : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  958/     96C : 3C07                		move.w	d7,d6
(1)  959/     96E : CE7C 0EE0           		and.w	#%0000111011100000,d7
(1)  960/     972 : CC7C 000E           		and.w	#%0000000000001110,d6
(1)  961/     976 : 9C41                		sub.w	d1,d6
(1)  962/     978 : 6A06                		bpl.s	.no_red_o
(1)  963/     97A : 4246                		clr.w	d6
(1)  964/     97C : 847C 0001           		or.w	#%001,d2		; RED is ready
(1)  965/     980 :                     .no_red_o:
(1)  966/     980 : 8E46                		or.w	d6,d7
(1)  967/     982 : E949                		lsl.w	#4,d1
(1)  968/     984 : 3C07                		move.w	d7,d6
(1)  969/     986 : CE7C 0E0E           		and.w	#%0000111000001110,d7
(1)  970/     98A : CC7C 00E0           		and.w	#%0000000011100000,d6
(1)  971/     98E : 9C41                		sub.w	d1,d6
(1)  972/     990 : 6A06                		bpl.s	.no_grn_o
(1)  973/     992 : 4246                		clr.w	d6
(1)  974/     994 : 847C 0002           		or.w	#%010,d2		; GREEN is ready
(1)  975/     998 :                     .no_grn_o:
(1)  976/     998 : 8E46                		or.w	d6,d7
(1)  977/     99A : E949                		lsl.w	#4,d1
(1)  978/     99C : 3C07                		move.w	d7,d6
(1)  979/     99E : CE7C 00EE           		and.w	#%0000000011101110,d7
(1)  980/     9A2 : CC7C 0E00           		and.w	#%0000111000000000,d6
(1)  981/     9A6 : 9C41                		sub.w	d1,d6
(1)  982/     9A8 : 6A06                		bpl.s	.no_blu_o
(1)  983/     9AA : 4246                		clr.w	d6
(1)  984/     9AC : 847C 0004           		or.w	#%100,d2		; BLUE is ready
(1)  985/     9B0 :                     .no_blu_o:
(1)  986/     9B0 : 8E46                		or.w	d6,d7
(1)  987/     9B2 : E049                		lsr.w	#8,d1
(1)  988/     9B4 : 3CC7                		move.w	d7,(a6)+
(1)  989/     9B6 : B47C 0007           		cmp.w	#%111,d2
(1)  990/     9BA : 6608                		bne.s	.no_fnsh_o
(1)  991/     9BC : 4846                		swap	d6
(1)  992/     9BE : 9C7C 0001           		sub.w	#1,d6
(1)  993/     9C2 : 4846                		swap	d6
(1)  994/     9C4 :                     .no_fnsh_o:
(1)  995/     9C4 : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  996/     9C8 : 4846                		swap	d6
(1)  997/     9CA : 4A46                		tst.w	d6
(1)  998/     9CC : 6604                		bne.s	.no_move_o
(1)  999/     9CE : 4278 A99E           		clr.w	(RAM_FadeMdReq).w
(1) 1000/     9D2 :                     .no_move_o:
(1) 1001/     9D2 : 4E75                		rts
(1) 1002/     9D4 :                     
(1) 1003/     9D4 :                     ; ====================================================================
(1) 1004/     9D4 :                     ; --------------------------------------------------------
(1) 1005/     9D4 :                     ; Genesis DMA
(1) 1006/     9D4 :                     ; --------------------------------------------------------
(1) 1007/     9D4 :                     
(1) 1008/     9D4 :                     ; --------------------------------------------------------
(1) 1009/     9D4 :                     ; Video_DmaMkEntry
(1) 1010/     9D4 :                     ;
(1) 1011/     9D4 :                     ; Sets a new DMA transfer task to the Blast list
(1) 1012/     9D4 :                     ;
(1) 1013/     9D4 :                     ; *** ONLY CALL THIS OUTSIDE OF VBLANK ***
(1) 1014/     9D4 :                     ;
(1) 1015/     9D4 :                     ; d0 | LONG - Art data
(1) 1016/     9D4 :                     ; d1 | WORD - VRAM location
(1) 1017/     9D4 :                     ; d2 | WORD - Size
(1) 1018/     9D4 :                     ;
(1) 1019/     9D4 :                     ; Breaks:
(1) 1020/     9D4 :                     ; d6-d7,a6
(1) 1021/     9D4 :                     ; --------------------------------------------------------
(1) 1022/     9D4 :                     
(1) 1023/     9D4 :                     Video_DmaMkEntry:
(1) 1024/     9D4 : 31FC 0001 A99A      		move.w	#1,(RAM_VdpDmaMod).w
(1) 1025/     9DA : 4DF8 A734           		lea	(RAM_VdpDmaList).w,a6
(1) 1026/     9DE : 3E38 A998           		move.w	(RAM_VdpDmaIndx).w,d7
(1) 1027/     9E2 : DCC7                		adda	d7,a6
(1) 1028/     9E4 : DE7C 000E           		add.w	#7*2,d7
(1) 1029/     9E8 : 31C7 A998           		move.w	d7,(RAM_VdpDmaIndx).w
(1) 1030/     9EC : 3E02                		move.w	d2,d7			; Length
(1) 1031/     9EE : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1032/     9F4 : E24F                		lsr.w	#1,d7
(1) 1033/     9F6 : 1C07                		move.b	d7,d6
(1) 1034/     9F8 : 4846                		swap	d6
(1) 1035/     9FA : E04F                		lsr.w	#8,d7
(1) 1036/     9FC : 1C07                		move.b	d7,d6
(1) 1037/     9FE : 4846                		swap	d6
(1) 1038/     A00 : 2CC6                		move.l	d6,(a6)+
(1) 1039/     A02 : 2E00                		move.l	d0,d7			; Source
(1) 1040/     A04 : E28F                  		lsr.l	#1,d7
(1) 1041/     A06 : 2C3C 9600 9500       		move.l	#$96009500,d6
(1) 1042/     A0C : 1C07                 		move.b	d7,d6
(1) 1043/     A0E : E08F                 		lsr.l	#8,d7
(1) 1044/     A10 : 4846                 		swap	d6
(1) 1045/     A12 : 1C07                 		move.b	d7,d6
(1) 1046/     A14 : 2CC6                 		move.l	d6,(a6)+
(1) 1047/     A16 : 3C3C 9700            		move.w	#$9700,d6
(1) 1048/     A1A : E08F                 		lsr.l	#8,d7
(1) 1049/     A1C : 1C07                 		move.b	d7,d6
(1) 1050/     A1E : 3CC6                 		move.w	d6,(a6)+
(1) 1051/     A20 : 3E01                		move.w	d1,d7			; Destination
(1) 1052/     A22 :                     ; 		and.w	#$7FF,d7
(1) 1053/     A22 :                     ; 		lsl.w	#5,d7
(1) 1054/     A22 : 3C07                		move.w	d7,d6
(1) 1055/     A24 : CEBC 0000 3FE0      		and.l	#$3FE0,d7
(1) 1056/     A2A : 0047 4000           		ori.w	#$4000,d7
(1) 1057/     A2E : E04E                		lsr.w	#8,d6
(1) 1058/     A30 : EC4E                		lsr.w	#6,d6
(1) 1059/     A32 : 0246 0003           		andi.w	#%11,d6
(1) 1060/     A36 : 0046 0080           		ori.w	#$80,d6
(1) 1061/     A3A : 3CC7                		move.w	d7,(a6)+
(1) 1062/     A3C : 3CC6                		move.w	d6,(a6)+
(1) 1063/     A3E : 31FC 0000 A99A      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1064/     A44 : 4E75                		rts
(1) 1065/     A46 :                     
(1) 1066/     A46 :                     ; --------------------------------------------------------
(1) 1067/     A46 :                     ; Video_Fill
(1) 1068/     A46 :                     ;
(1) 1069/     A46 :                     ; Fill data to VRAM
(1) 1070/     A46 :                     ;
(1) 1071/     A46 :                     ; d0 | WORD - WORD to fill
(1) 1072/     A46 :                     ; d1 | WORD - VRAM position
(1) 1073/     A46 :                     ; d2 | WORD - Size
(1) 1074/     A46 :                     ;
(1) 1075/     A46 :                     ; Breaks:
(1) 1076/     A46 :                     ; d6-d7,a6
(1) 1077/     A46 :                     ; --------------------------------------------------------
(1) 1078/     A46 :                     
(1) 1079/     A46 :                     Video_Fill:
(1) 1080/     A46 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1081/     A4C : 3E3C 8100           		move.w	#$8100,d7
(1) 1082/     A50 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1083/     A54 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1084/     A58 : 3C87                		move.w	d7,(a6)
(1) 1085/     A5A : 3E16                .dmaw:		move.w	(a6),d7
(1) 1086/     A5C : 0807 0001           		btst	#bitDma,d7
(1) 1087/     A60 : 66F8                		bne.s	.dmaw
(1) 1088/     A62 : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1) 1089/     A66 : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1090/     A68 : 9E7C 0001           		sub.w	#1,d7
(1) 1091/     A6C : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1092/     A72 : 1C07                		move.b	d7,d6
(1) 1093/     A74 : 4846                		swap	d6
(1) 1094/     A76 : E04F                		lsr.w	#8,d7
(1) 1095/     A78 : 1C07                		move.b	d7,d6
(1) 1096/     A7A : 4846                		swap	d6
(1) 1097/     A7C : 2C86                		move.l	d6,(a6)
(1) 1098/     A7E : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1099/     A82 : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1100/     A84 :                     ; 		lsl.w	#5,d7
(1) 1101/     A84 : 3C07                		move.w	d7,d6
(1) 1102/     A86 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1103/     A8A : 0046 4000           		ori.w	#$4000,d6
(1) 1104/     A8E : 4846                		swap	d6
(1) 1105/     A90 : 3C07                		move.w	d7,d6
(1) 1106/     A92 : E04E                		lsr.w	#8,d6
(1) 1107/     A94 : EC4E                		lsr.w	#6,d6
(1) 1108/     A96 : 0246 0003           		andi.w	#%11,d6
(1) 1109/     A9A : 0046 0080           		ori.w	#$80,d6
(1) 1110/     A9E : 2C86                		move.l	d6,(a6)
(1) 1111/     AA0 : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1112/     AA4 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1113/     AA6 : 0807 0001           		btst	#bitDma,d7
(1) 1114/     AAA : 66F8                		bne.s	.dmawe
(1) 1115/     AAC : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1) 1116/     AB0 : 3E3C 8100           		move.w	#$8100,d7
(1) 1117/     AB4 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1118/     AB8 : 3C87                		move.w	d7,(a6)
(1) 1119/     ABA : 4E75                		rts
(1) 1120/     ABC :                     
(1) 1121/     ABC :                     ; --------------------------------------------------------
(1) 1122/     ABC :                     ; Video_Copy
(1) 1123/     ABC :                     ;
(1) 1124/     ABC :                     ; Copy VRAM data to another location
(1) 1125/     ABC :                     ;
(1) 1126/     ABC :                     ; d0 | WORD - VRAM Source
(1) 1127/     ABC :                     ; d1 | WORD - VRAM Destination
(1) 1128/     ABC :                     ; d2 | WORD - Size
(1) 1129/     ABC :                     ;
(1) 1130/     ABC :                     ; Breaks:
(1) 1131/     ABC :                     ; d6-d7,a6
(1) 1132/     ABC :                     ; --------------------------------------------------------
(1) 1133/     ABC :                     
(1) 1134/     ABC :                     ; TODO: test if this works again...
(1) 1135/     ABC :                     
(1) 1136/     ABC :                     Video_Copy:
(1) 1137/     ABC : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1138/     AC2 : 3E3C 8100           		move.w	#$8100,d7
(1) 1139/     AC6 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1140/     ACA : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1141/     ACE : 3C87                		move.w	d7,(a6)
(1) 1142/     AD0 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1143/     AD2 : 0807 0001           		btst	#bitDma,d7
(1) 1144/     AD6 : 66F8                		bne.s	.dmaw
(1) 1145/     AD8 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1146/     ADC : 3E02                		move.w	d2,d7			; SIZE
(1) 1147/     ADE : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1148/     AE4 :                     ; 		lsr.w	#1,d7
(1) 1149/     AE4 : 1C07                		move.b	d7,d6
(1) 1150/     AE6 : 4846                		swap	d6
(1) 1151/     AE8 : E04F                		lsr.w	#8,d7
(1) 1152/     AEA : 1C07                		move.b	d7,d6
(1) 1153/     AEC : 4846                		swap	d6
(1) 1154/     AEE : 2C86                		move.l	d6,(a6)
(1) 1155/     AF0 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1156/     AF6 : 3E00                		move.w	d0,d7
(1) 1157/     AF8 : 1C07                		move.b	d7,d6
(1) 1158/     AFA : 4846                		swap	d6
(1) 1159/     AFC : E04F                		lsr.w	#8,d7
(1) 1160/     AFE : 1C07                		move.b	d7,d6
(1) 1161/     B00 : 2C86                		move.l	d6,(a6)
(1) 1162/     B02 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1163/     B06 : 2E02                		move.l	d2,d7			; DESTINATION
(1) 1164/     B08 :                     ; 		lsl.w	#5,d7
(1) 1165/     B08 : 3C07                		move.w	d7,d6
(1) 1166/     B0A : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1167/     B0E : 0046 4000           		ori.w	#$4000,d6
(1) 1168/     B12 : 4846                		swap	d6
(1) 1169/     B14 : 3C07                		move.w	d7,d6
(1) 1170/     B16 : E04E                		lsr.w	#8,d6
(1) 1171/     B18 : EC4E                		lsr.w	#6,d6
(1) 1172/     B1A : 0246 0003           		andi.w	#%11,d6
(1) 1173/     B1E : 0046 00C0           		ori.w	#$C0,d6
(1) 1174/     B22 : 2C86                		move.l	d6,(a6)
(1) 1175/     B24 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1176/     B28 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1177/     B2A : 0807 0001           		btst	#bitDma,d7
(1) 1178/     B2E : 66F8                		bne.s	.dmawe
(1) 1179/     B30 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1180/     B34 : 3E3C 8100           		move.w	#$8100,d7
(1) 1181/     B38 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1182/     B3C : 3C87                		move.w	d7,(a6)
(1) 1183/     B3E : 4E75                		rts
(1) 1184/     B40 :                     
(1) 1185/     B40 :                     ; --------------------------------------------------------
(1) 1186/     B40 :                     ; Load graphics using DMA, direct
(1) 1187/     B40 :                     ;
(1) 1188/     B40 :                     ; d0 | LONG - Art data
(1) 1189/     B40 :                     ; d1 | WORD - VRAM location
(1) 1190/     B40 :                     ; d2 | WORD - Size
(1) 1191/     B40 :                     ;
(1) 1192/     B40 :                     ; Breaks:
(1) 1193/     B40 :                     ; d5-d7,a4-a6
(1) 1194/     B40 :                     ;
(1) 1195/     B40 :                     ; *** For faster transfers call this during VBlank ***
(1) 1196/     B40 :                     ; *** MAKE SURE SH2 IS NOT IN THE MIDDLE OF READING
(1) 1197/     B40 :                     ; ROM ***
(1) 1198/     B40 :                     ; --------------------------------------------------------
(1) 1199/     B40 :                     
(1) 1200/     B40 :                     Video_LoadArt:
(1) 1201/     B40 : 40E7                		move.w	sr,-(sp)
(1) 1202/     B42 : 007C 0700           		or	#$700,sr
(1) 1203/     B46 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1) 1204/     B4C : 3C3C 8100           		move.w	#$8100,d6		; DMA ON
(1) 1205/     B50 : 1C38 A9AF           		move.b	(RAM_VdpRegs+1),d6
(1) 1206/     B54 : 08C6 0004           		bset	#bitDmaEnbl,d6
(1) 1207/     B58 : 3886                		move.w	d6,(a4)
(1) 1208/     B5A : 3C02                		move.w	d2,d6			; Length
(1) 1209/     B5C : 2A3C 9400 9300      		move.l	#$94009300,d5
(1) 1210/     B62 : E24E                		lsr.w	#1,d6
(1) 1211/     B64 : 1A06                		move.b	d6,d5
(1) 1212/     B66 : 4845                		swap	d5
(1) 1213/     B68 : E04E                		lsr.w	#8,d6
(1) 1214/     B6A : 1A06                		move.b	d6,d5
(1) 1215/     B6C : 4845                		swap	d5
(1) 1216/     B6E : 2885                		move.l	d5,(a4)
(1) 1217/     B70 : 2C00                		move.l	d0,d6			; Source
(1) 1218/     B72 : E28E                  		lsr.l	#1,d6
(1) 1219/     B74 : 2A3C 9600 9500       		move.l	#$96009500,d5
(1) 1220/     B7A : 1A06                 		move.b	d6,d5
(1) 1221/     B7C : E08E                 		lsr.l	#8,d6
(1) 1222/     B7E : 4845                 		swap	d5
(1) 1223/     B80 : 1A06                 		move.b	d6,d5
(1) 1224/     B82 : 2885                 		move.l	d5,(a4)
(1) 1225/     B84 : 3A3C 9700            		move.w	#$9700,d5
(1) 1226/     B88 : E08E                 		lsr.l	#8,d6
(1) 1227/     B8A : 1A06                 		move.b	d6,d5
(1) 1228/     B8C : 3885                 		move.w	d5,(a4)
(1) 1229/     B8E : 3C01                		move.w	d1,d6			; Destination
(1) 1230/     B90 : 3A06                		move.w	d6,d5
(1) 1231/     B92 : CCBC 0000 3FE0      		and.l	#$3FE0,d6
(1) 1232/     B98 : 0046 4000           		ori.w	#$4000,d6
(1) 1233/     B9C : E04D                		lsr.w	#8,d5
(1) 1234/     B9E : EC4D                		lsr.w	#6,d5
(1) 1235/     BA0 : 0245 0003           		andi.w	#%11,d5
(1) 1236/     BA4 : 0045 0080           		ori.w	#$80,d5
(1) 1237/     BA8 : 2E00                		move.l	d0,d7
(1) 1238/     BAA : 4847                		swap	d7
(1) 1239/     BAC : E04F                		lsr.w	#8,d7
(1) 1240/     BAE : BE3C 00FF           		cmp.b	#$FF,d7
(1) 1241/     BB2 : 671A                		beq.s	.from_ram
(1) 1242/     BB4 : 6100 0CFC           		bsr	System_DmaEnter_ROM
(1) 1243/     BB8 : 3F05                 		move.w	d5,-(sp)
(1) 1244/     BBA : 3886                		move.w	d6,(a4)				; d6 - First word
(1) 1245/     BBC : 389F                		move.w	(sp)+,(a4)			; *** Second write, 68k freezes until DMA ends
(1) 1246/     BBE : 3C3C 8100           		move.w	#$8100,d6			; DMA OFF
(1) 1247/     BC2 : 1C38 A9AF           		move.b	(RAM_VdpRegs+1),d6
(1) 1248/     BC6 : 3886                		move.w	d6,(a4)
(1) 1249/     BC8 : 46DF                		move.w	(sp)+,sr
(1) 1250/     BCA : 6000 0CEA           		bra	System_DmaExit_ROM
(1) 1251/     BCE :                     .from_ram:
(1) 1252/     BCE : 3887                		move.w	d7,(a4)
(1) 1253/     BD0 : 3F05                 		move.w	d5,-(sp)
(1) 1254/     BD2 : 389F                		move.w	(sp)+,(a4)			; Second write
(1) 1255/     BD4 : 3E3C 8100           		move.w	#$8100,d7
(1) 1256/     BD8 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1257/     BDC : 3887                		move.w	d7,(a4)
(1) 1258/     BDE : 46DF                		move.w	(sp)+,sr
(1) 1259/     BE0 : 4E75                		rts
(1) 1260/     BE2 :                     
(1) 1261/     BE2 :                     ; --------------------------------------------------------
(1) 1262/     BE2 :                     ; Video_DmaBlast
(1) 1263/     BE2 :                     ;
(1) 1264/     BE2 :                     ; Process DMA tasks from a predefined list in RAM
(1) 1265/     BE2 :                     ; **CALL THIS DURING VBLANK ONLY**
(1) 1266/     BE2 :                     ;
(1) 1267/     BE2 :                     ; Breaks:
(1) 1268/     BE2 :                     ; d5-d7,a3-a4
(1) 1269/     BE2 :                     ; --------------------------------------------------------
(1) 1270/     BE2 :                     
(1) 1271/     BE2 :                     ; Entry format:
(1) 1272/     BE2 :                     ; $94xx,$93xx,$96xx,$95xx,$97xx (SIZE,SOURCE)
(1) 1273/     BE2 :                     ; $40000080 (vdp destination + dma bit)
(1) 1274/     BE2 :                     
(1) 1275/     BE2 :                     Video_DmaBlast:
(1) 1276/     BE2 : 4A78 A99A           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1) 1277/     BE6 : 6656                		bne.s	.exit
(1) 1278/     BE8 : 4A78 A998           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1) 1279/     BEC : 6750                		beq.s	.exit
(1) 1280/     BEE : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1) 1281/     BF4 : 47F8 A734           		lea	(RAM_VdpDmaList).w,a3
(1) 1282/     BF8 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1283/     BFC : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1284/     C00 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1285/     C04 : 3887                		move.w	d7,(a4)
(1) 1286/     C06 : 6100 0CAA           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1290/     C0A : 4A78 A998           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1291/     C0E : 6720                		beq.s	.end
(1) 1292/     C10 : 2893                		move.l	(a3),(a4)			; Size
(1) 1293/     C12 : 429B                		clr.l	(a3)+
(1) 1294/     C14 : 2893                		move.l	(a3),(a4)			; Source
(1) 1295/     C16 : 429B                		clr.l	(a3)+
(1) 1296/     C18 : 3893                		move.w	(a3),(a4)
(1) 1297/     C1A : 425B                		clr.w	(a3)+
(1) 1298/     C1C : 3C13                		move.w	(a3),d6				; Destination
(1) 1299/     C1E : 425B                		clr.w	(a3)+
(1) 1300/     C20 : 3A13                		move.w	(a3),d5
(1) 1301/     C22 : 425B                		clr.w	(a3)+
(1) 1302/     C24 : 3886                		move.w	d6,(a4)
(1) 1303/     C26 : 3885                		move.w	d5,(a4)
(1) 1304/     C28 : 0478 000E A998      		sub.w	#7*2,(RAM_VdpDmaIndx).w
(1) 1305/     C2E : 60DA                		bra.s	.next
(1) 1306/     C30 :                     .end:
(1) 1310/     C30 : 6100 0C84           		bsr	System_DmaExit_ROM		; Resume Z80 and SH2 direct
(1) 1311/     C34 : 3E3C 8100           		move.w	#$8100,d7			; DMA OFF
(1) 1312/     C38 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1313/     C3C : 3887                		move.w	d7,(a4)
(1) 1314/     C3E :                     .exit:
(1) 1315/     C3E : 4E75                		rts
(1) 1316/     C40 :                     
(1) 1317/     C40 :                     ; ====================================================================
(1) 1318/     C40 :                     ; ----------------------------------------------------------------
(1) 1319/     C40 :                     ; Video routines for 32X
(1) 1320/     C40 :                     ; ----------------------------------------------------------------
(1) 1321/     C40 :                     
(1) 1322/     C40 :                     ; --------------------------------------------------------
(1) 1323/     C40 :                     ; Video_Mars_GfxMode
(1) 1324/     C40 :                     ; Sets graphics mode on the 32X side
(1) 1325/     C40 :                     ;
(1) 1326/     C40 :                     ; Input:
(1) 1327/     C40 :                     ; d0 - Graphics mode
(1) 1328/     C40 :                     ; --------------------------------------------------------
(1) 1329/     C40 :                     
(1) 1330/     C40 :                     Video_Mars_GfxMode:
(1) 1344/     C40 : 4E75                		rts
(1) 1345/     C42 :                     
(1) 1346/     C42 :                     ; --------------------------------------------------------
(1) 1347/     C42 :                     ; Video_Mars_WaitFrame
(1) 1348/     C42 :                     ; --------------------------------------------------------
(1) 1349/     C42 :                     
(1) 1350/     C42 :                     Video_Mars_WaitFrame:
(1) 1362/     C42 : 4E75                		rts
(1) 1363/     C44 :                     
(1) 1364/     C44 :                     ; --------------------------------------------------------
(1) 1365/     C44 :                     ; Video_LoadPal_Mars
(1) 1366/     C44 :                     ;
(1) 1367/     C44 :                     ; Load Indexed palette directly to Buffer
(1) 1368/     C44 :                     ;
(1) 1369/     C44 :                     ; d0 - Start at
(1) 1370/     C44 :                     ; d1 - Number of colors
(1) 1371/     C44 :                     ; d2 - Priority bit OFF/ON
(1) 1372/     C44 :                     ; --------------------------------------------------------
(1) 1373/     C44 :                     
(1) 1374/     C44 :                     Video_FadePal_Mars:
(1) 1375/     C44 : 4DF8 A534           		lea	(RAM_MdMarsPalFd),a6
(1) 1376/     C48 : 4278 A9AC           		clr.w	(RAM_FadeMarsTmr).w
(1) 1377/     C4C : 6004                		bra.s	vidMars_Pal
(1) 1378/     C4E :                     Video_LoadPal_Mars:
(1) 1379/     C4E : 4DF8 AE22           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1) 1380/     C52 :                     vidMars_Pal:
(1) 1381/     C52 : 2A48                		move.l	a0,a5
(1) 1382/     C54 : 7E00                		moveq	#0,d7
(1) 1383/     C56 : 3E00                		move.w	d0,d7
(1) 1384/     C58 : DE47                		add.w	d7,d7
(1) 1385/     C5A : DCC7                		adda	d7,a6
(1) 1386/     C5C : 3E01                		move.w	d1,d7
(1) 1387/     C5E : 9E7C 0001           		sub.w	#1,d7
(1) 1388/     C62 : 3C02                		move.w	d2,d6
(1) 1389/     C64 : CC7C 0001           		and.w	#1,d6
(1) 1390/     C68 : E25E                		ror.w	#1,d6
(1) 1391/     C6A :                     .loop:
(1) 1392/     C6A : 3A1D                		move.w	(a5)+,d5
(1) 1393/     C6C : 8A46                		or.w	d6,d5
(1) 1394/     C6E : 3CC5                		move.w	d5,(a6)+
(1) 1395/     C70 : 51CF FFF8           		dbf	d7,.loop
(1) 1396/     C74 : 4E75                		rts
(1) 1397/     C76 :                     
(1) 1398/     C76 :                     ; --------------------------------------------------------
(1) 1399/     C76 :                     ; Video_MarsPalFade
(1) 1400/     C76 :                     ;
(1) 1401/     C76 :                     ; a0 - Palette data
(1) 1402/     C76 :                     ; d0 - Number of colors
(1) 1403/     C76 :                     ; d1 - Speed
(1) 1404/     C76 :                     ;
(1) 1405/     C76 :                     ; RAM_ReqFadeMars: (WORD)
(1) 1406/     C76 :                     ; $00 - No task (or finished)
(1) 1407/     C76 :                     ; $01 - Fade in
(1) 1408/     C76 :                     ; $02 - Fade out to black
(1) 1409/     C76 :                     ;
(1) 1410/     C76 :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 1411/     C76 :                     ; --------------------------------------------------------
(1) 1412/     C76 :                     
(1) 1413/     C76 :                     ; TODO: luego ver que hago con el priority bit
(1) 1414/     C76 :                     
(1) 1415/     C76 :                     Video_MarsPalFade:
(1) 1416/     C76 : 0478 0001 A9AC      		sub.w	#1,(RAM_FadeMarsTmr).w
(1) 1417/     C7C : 6A14                		bpl.s	.active
(1) 1418/     C7E : 31F8 A9AA A9AC      		move.w	(RAM_FadeMarsDelay).w,(RAM_FadeMarsTmr).w
(1) 1419/     C84 : 3E38 A9A6           		move.w	(RAM_FadeMarsReq).w,d7
(1) 1420/     C88 : DE47                		add.w	d7,d7
(1) 1421/     C8A : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1) 1422/     C8E : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1) 1423/     C92 :                     .active:
(1) 1424/     C92 : 4E75                		rts
(1) 1425/     C94 :                     
(1) 1426/     C94 :                     ; --------------------------------------------
(1) 1427/     C94 :                     
(1) 1428/     C94 :                     .fade_list:
(1) 1429/     C94 : 0006                		dc.w .fade_done-.fade_list
(1) 1430/     C96 : 0008                		dc.w .fade_in-.fade_list
(1) 1431/     C98 : 00B2                		dc.w .fade_out-.fade_list
(1) 1432/     C9A :                     
(1) 1433/     C9A :                     ; --------------------------------------------
(1) 1434/     C9A :                     ; No fade or finished.
(1) 1435/     C9A :                     ; --------------------------------------------
(1) 1436/     C9A :                     
(1) 1437/     C9A :                     .fade_done:
(1) 1438/     C9A : 4E75                		rts
(1) 1439/     C9C :                     
(1) 1440/     C9C :                     ; --------------------------------------------
(1) 1441/     C9C :                     ; Fade in
(1) 1442/     C9C :                     ; --------------------------------------------
(1) 1443/     C9C :                     
(1) 1444/     C9C :                     .fade_in:
(1) 1445/     C9C : 4DF8 A534           		lea	(RAM_MdMarsPalFd),a6
(1) 1446/     CA0 : 4BF8 AE22           		lea	(RAM_MdDreq+Dreq_Palette).w,a5
(1) 1447/     CA4 : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1448/     CA8 : 3238 A9A8           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 1449/     CAC : 3C00                		move.w	d0,d6
(1) 1450/     CAE : 4846                		swap	d6
(1) 1451/     CB0 : 907C 0001           		sub.w	#1,d0
(1) 1452/     CB4 :                     .nxt_pal:
(1) 1453/     CB4 : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1454/     CB6 : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1455/     CB8 : 3C15                		move.w	(a5),d6		; d6 - Output
(1) 1456/     CBA : 3607                		move.w	d7,d3		; RED
(1) 1457/     CBC : 3806                		move.w	d6,d4
(1) 1458/     CBE : CC7C FFE0           		and.w	#%1111111111100000,d6
(1) 1459/     CC2 : C87C 001F           		and.w	#%0000000000011111,d4
(1) 1460/     CC6 : C67C 001F           		and.w	#%0000000000011111,d3
(1) 1461/     CCA : D841                		add.w	d1,d4
(1) 1462/     CCC : B843                		cmp.w	d3,d4
(1) 1463/     CCE : 6506                		bcs.s	.no_red
(1) 1464/     CD0 : 3803                		move.w	d3,d4
(1) 1465/     CD2 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 1466/     CD6 :                     .no_red:
(1) 1467/     CD6 : 8C44                		or.w	d4,d6
(1) 1468/     CD8 : EB49                		lsl.w	#5,d1
(1) 1469/     CDA : 3607                		move.w	d7,d3		; GREEN
(1) 1470/     CDC : 3806                		move.w	d6,d4
(1) 1471/     CDE : CC7C FC1F           		and.w	#%1111110000011111,d6
(1) 1472/     CE2 : C87C 03E0           		and.w	#%0000001111100000,d4
(1) 1473/     CE6 : C67C 03E0           		and.w	#%0000001111100000,d3
(1) 1474/     CEA : D841                		add.w	d1,d4
(1) 1475/     CEC : B843                		cmp.w	d3,d4
(1) 1476/     CEE : 6506                		bcs.s	.no_grn
(1) 1477/     CF0 : 3803                		move.w	d3,d4
(1) 1478/     CF2 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 1479/     CF6 :                     .no_grn:
(1) 1480/     CF6 : 8C44                		or.w	d4,d6
(1) 1481/     CF8 : EB49                		lsl.w	#5,d1
(1) 1482/     CFA : 3607                		move.w	d7,d3		; BLUE
(1) 1483/     CFC : 3806                		move.w	d6,d4
(1) 1484/     CFE : CC7C 83FF           		and.w	#%1000001111111111,d6
(1) 1485/     D02 : C87C 7C00           		and.w	#%0111110000000000,d4
(1) 1486/     D06 : C67C 7C00           		and.w	#%0111110000000000,d3
(1) 1487/     D0A : D841                		add.w	d1,d4
(1) 1488/     D0C : B843                		cmp.w	d3,d4
(1) 1489/     D0E : 6506                		bcs.s	.no_blu
(1) 1490/     D10 : 3803                		move.w	d3,d4
(1) 1491/     D12 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 1492/     D16 :                     .no_blu:
(1) 1493/     D16 : 8C44                		or.w	d4,d6
(1) 1494/     D18 : E049                		lsr.w	#8,d1
(1) 1495/     D1A : E449                		lsr.w	#2,d1
(1) 1496/     D1C : CE7C 8000           		and.w	#$8000,d7	; Keep priority bit
(1) 1497/     D20 : 8C47                		or.w	d7,d6
(1) 1498/     D22 : 3AC6                		move.w	d6,(a5)+
(1) 1499/     D24 : DCFC 0002           		adda	#2,a6
(1) 1500/     D28 : B47C 0007           		cmp.w	#%111,d2
(1) 1501/     D2C : 6608                		bne.s	.no_fnsh
(1) 1502/     D2E : 4846                		swap	d6
(1) 1503/     D30 : 9C7C 0001           		sub.w	#1,d6
(1) 1504/     D34 : 4846                		swap	d6
(1) 1505/     D36 :                     .no_fnsh:
(1) 1506/     D36 : 51C8 FF7C           		dbf	d0,.nxt_pal
(1) 1507/     D3A : 4846                		swap	d6
(1) 1508/     D3C : 4A46                		tst.w	d6
(1) 1509/     D3E : 6604                		bne.s	.no_move
(1) 1510/     D40 : 4278 A9A6           		clr.w	(RAM_FadeMarsReq).w
(1) 1511/     D44 :                     .no_move:
(1) 1512/     D44 : 4E75                		rts
(1) 1513/     D46 :                     
(1) 1514/     D46 :                     ; --------------------------------------------
(1) 1515/     D46 :                     ; Fade out
(1) 1516/     D46 :                     ; --------------------------------------------
(1) 1517/     D46 :                     
(1) 1518/     D46 :                     .fade_out:
(1) 1519/     D46 : 4DF8 AE22           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1) 1520/     D4A : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1521/     D4E : 3238 A9A8           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 1522/     D52 : 3C00                		move.w	d0,d6
(1) 1523/     D54 : 4846                		swap	d6
(1) 1524/     D56 : 907C 0001           		sub.w	#1,d0
(1) 1525/     D5A :                     .nxt_pal_o:
(1) 1526/     D5A : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1527/     D5C : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1528/     D5E : 3C07                		move.w	d7,d6
(1) 1529/     D60 : CE7C FFE0           		and.w	#%1111111111100000,d7
(1) 1530/     D64 : CC7C 001F           		and.w	#%0000000000011111,d6
(1) 1531/     D68 : 9C41                		sub.w	d1,d6
(1) 1532/     D6A : 6A06                		bpl.s	.no_red_o
(1) 1533/     D6C : 4246                		clr.w	d6
(1) 1534/     D6E : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 1535/     D72 :                     .no_red_o:
(1) 1536/     D72 : 8E46                		or.w	d6,d7
(1) 1537/     D74 : EB49                		lsl.w	#5,d1
(1) 1538/     D76 : 3C07                		move.w	d7,d6
(1) 1539/     D78 : CE7C FC1F           		and.w	#%1111110000011111,d7
(1) 1540/     D7C : CC7C 03E0           		and.w	#%0000001111100000,d6
(1) 1541/     D80 : 9C41                		sub.w	d1,d6
(1) 1542/     D82 : 6A06                		bpl.s	.no_grn_o
(1) 1543/     D84 : 4246                		clr.w	d6
(1) 1544/     D86 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 1545/     D8A :                     .no_grn_o:
(1) 1546/     D8A : 8E46                		or.w	d6,d7
(1) 1547/     D8C : EB49                		lsl.w	#5,d1
(1) 1548/     D8E : 3C07                		move.w	d7,d6
(1) 1549/     D90 : CE7C 83FF           		and.w	#%1000001111111111,d7
(1) 1550/     D94 : CC7C 7C00           		and.w	#%0111110000000000,d6
(1) 1551/     D98 : 9C41                		sub.w	d1,d6
(1) 1552/     D9A : 6A06                		bpl.s	.no_blu_o
(1) 1553/     D9C : 4246                		clr.w	d6
(1) 1554/     D9E : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 1555/     DA2 :                     .no_blu_o:
(1) 1556/     DA2 : 8E46                		or.w	d6,d7
(1) 1557/     DA4 : E049                		lsr.w	#8,d1
(1) 1558/     DA6 : E449                		lsr.w	#2,d1
(1) 1559/     DA8 : 3CC7                		move.w	d7,(a6)+
(1) 1560/     DAA : B47C 0007           		cmp.w	#%111,d2
(1) 1561/     DAE : 6608                		bne.s	.no_fnsh_o
(1) 1562/     DB0 : 4846                		swap	d6
(1) 1563/     DB2 : 9C7C 0001           		sub.w	#1,d6
(1) 1564/     DB6 : 4846                		swap	d6
(1) 1565/     DB8 :                     .no_fnsh_o:
(1) 1566/     DB8 : 51C8 FFA0           		dbf	d0,.nxt_pal_o
(1) 1567/     DBC : 4846                		swap	d6
(1) 1568/     DBE : 4A46                		tst.w	d6
(1) 1569/     DC0 : 6604                		bne.s	.no_move_o
(1) 1570/     DC2 : 4278 A9A6           		clr.w	(RAM_FadeMarsReq).w
(1) 1571/     DC6 :                     .no_move_o:
(1) 1572/     DC6 : 4E75                		rts
(1) 1573/     DC8 :                     
(1) 1574/     DC8 :                     ; ====================================================================
(1) 1575/     DC8 :                     ; ----------------------------------------------------------------
(1) 1576/     DC8 :                     ; MAP layout system
(1) 1577/     DC8 :                     ;
(1) 1578/     DC8 :                     ; Note: uses some RAM'd video registeds.
(1) 1579/     DC8 :                     ; ----------------------------------------------------------------
(1) 1580/     DC8 :                     
(1) 1581/     DC8 :                     ; --------------------------------------------------------
(1) 1582/     DC8 :                     ; MdMap_Init
(1) 1583/     DC8 :                     ;
(1) 1584/     DC8 :                     ; Initializes all BG buffers
(1) 1585/     DC8 :                     ; --------------------------------------------------------
(1) 1586/     DC8 :                     
(1) 1587/     DC8 :                     MdMap_Init:
(1) 1588/     DC8 : 41F8 9660           		lea	(RAM_BgBuffer),a0
(1) 1589/     DCC : 323C 0037           		move.w	#((sizeof_mdbg*4)/4)-1,d1
(1) 1590/     DD0 : 7000                		moveq	#0,d0
(1) 1591/     DD2 :                     .clr:
(1) 1592/     DD2 : 20C0                		move.l	d0,(a0)+
(1) 1593/     DD4 : 51C9 FFFC           		dbf	d1,.clr
(1) 1594/     DD8 : 4E75                		rts
(1) 1595/     DDA :                     
(1) 1596/     DDA :                     ; --------------------------------------------------------
(1) 1597/     DDA :                     ; MdMap_Set
(1) 1598/     DDA :                     ;
(1) 1599/     DDA :                     ; Sets a new scrolling section to use.
(1) 1600/     DDA :                     ;
(1) 1601/     DDA :                     ; **SET YOUR X and Y COORDS EXTERNALLY
(1) 1602/     DDA :                     ; BEFORE GETTING HERE**
(1) 1603/     DDA :                     ;
(1) 1604/     DDA :                     ; Input:
(1) 1605/     DDA :                     ; ** Genesis side **
(1) 1606/     DDA :                     ; d0 | WORD - BG internal slot (-1: 32X only)
(1) 1607/     DDA :                     ; d1 | WORD - VRAM location for map data
(1) 1608/     DDA :                     ; d2 | WORD - VRAM add + palette
(1) 1609/     DDA :                     ; a0 - Level header data:
(1) 1610/     DDA :                     ; 	dc.w width,height
(1) 1611/     DDA :                     ; 	dc.b blkwidth,blkheight
(1) 1612/     DDA :                     ; a1 - Block data
(1) 1613/     DDA :                     ; a2 - LOW priority layout data
(1) 1614/     DDA :                     ; a3 - HIGH priority layout data
(1) 1615/     DDA :                     ; d4 - Collision data
(1) 1616/     DDA :                     ;
(1) 1617/     DDA :                     ; Then load the graphics externally at the same
(1) 1618/     DDA :                     ; VRAM location set in d2
(1) 1619/     DDA :                     ;
(1) 1620/     DDA :                     ; ** 32X side **
(1) 1621/     DDA :                     ; d0 | WORD - Write as -1
(1) 1622/     DDA :                     ; d1 | WORD - Scroll buffer to use on the 32X side (0 - default)
(1) 1623/     DDA :                     ; d2 | WORD - Index-palette increment
(1) 1624/     DDA :                     ; a0 - Level header data: (68K AREA)
(1) 1625/     DDA :                     ; 	dc.w width,height
(1) 1626/     DDA :                     ; 	dc.b blkwidth,blkheight
(1) 1627/     DDA :                     ; a1 - Graphics data stored as blocks (SH2 AREA)
(1) 1628/     DDA :                     ; a2 - MAIN layout (SH2 AREA)
(1) 1629/     DDA :                     ; a3 - *** UNUSED, set to 0
(1) 1630/     DDA :                     ; a4 - Collision data (68K AREA)
(1) 1631/     DDA :                     ;
(1) 1632/     DDA :                     ; Uses:
(1) 1633/     DDA :                     ; d0,d6-d7
(1) 1634/     DDA :                     ; --------------------------------------------------------
(1) 1635/     DDA :                     
(1) 1636/     DDA :                     MdMap_Set:
(1) 1637/     DDA : 4A40                		tst.w	d0
(1) 1638/     DDC : 6A0C                		bpl.s	.md_side
(1) 1639/     DDE : 4DF8 B022           		lea	(RAM_BgBufferM),a6
(1) 1640/     DE2 : 08EE 0006 0003      		bset	#bitMarsBg,md_bg_flags(a6)
(1) 1641/     DE8 : 6010                		bra.s	.mars_side
(1) 1642/     DEA :                     .md_side:
(1) 1643/     DEA : 4DF8 9660           		lea	(RAM_BgBuffer),a6
(1) 1644/     DEE : C0FC 0038           		mulu.w	#sizeof_mdbg,d0
(1) 1645/     DF2 : DCC0                		adda	d0,a6
(1) 1646/     DF4 : 08AE 0006 0003      		bclr	#bitMarsBg,md_bg_flags(a6)
(1) 1647/     DFA :                     .mars_side:
(1) 1648/     DFA : 3D41 001C           		move.w	d1,md_bg_vpos(a6)
(1) 1649/     DFE : 3D42 001E           		move.w	d2,md_bg_vram(a6)
(1) 1650/     E02 :                     
(1) 1651/     E02 : 7E00                		moveq	#0,d7
(1) 1652/     E04 : 3E2E 0030           		move.w	md_bg_x(a6),d7
(1) 1653/     E08 : 1D47 0004           		move.b	d7,md_bg_xset(a6)
(1) 1654/     E0C : 3D47 0018           		move.w	d7,md_bg_x_old(a6)
(1) 1655/     E10 : 4847                		swap	d7
(1) 1656/     E12 : 2D47 0030           		move.l	d7,md_bg_x(a6)
(1) 1657/     E16 : 7E00                		moveq	#0,d7
(1) 1658/     E18 : 3E2E 0034           		move.w	md_bg_y(a6),d7
(1) 1659/     E1C : 1D47 0005           		move.b	d7,md_bg_yset(a6)
(1) 1660/     E20 : 3D47 001A           		move.w	d7,md_bg_y_old(a6)
(1) 1661/     E24 : 4847                		swap	d7
(1) 1662/     E26 : 2D47 0034           		move.l	d7,md_bg_y(a6)
(1) 1663/     E2A : C67C 000F           		and.w	#$F,d3
(1) 1664/     E2E : C87C 000F           		and.w	#$F,d4
(1) 1665/     E32 :                     
(1) 1666/     E32 : 4843                		swap	d3
(1) 1667/     E34 : 4844                		swap	d4
(1) 1668/     E36 : 2D49 0028           		move.l	a1,md_bg_blk(a6)
(1) 1669/     E3A : 2D4A 0020           		move.l	a2,md_bg_low(a6)
(1) 1670/     E3E : 2D4B 0024           		move.l	a3,md_bg_hi(a6)
(1) 1671/     E42 : 2D4C 002C           		move.l	a4,md_bg_col(a6)
(1) 1672/     E46 : 2A48                		move.l	a0,a5
(1) 1673/     E48 : 3E1D                		move.w	(a5)+,d7	; Layout Width (blocks)
(1) 1674/     E4A : 3C1D                		move.w	(a5)+,d6	; Layout Height (blocks)
(1) 1675/     E4C : 181D                		move.b	(a5)+,d4	; BLOCK width
(1) 1676/     E4E : 161D                		move.b	(a5)+,d3	; BLOCK height
(1) 1677/     E50 : C87C 00FF           		and.w	#$FF,d4
(1) 1678/     E54 : C67C 00FF           		and.w	#$FF,d3
(1) 1679/     E58 : 3D47 0008           		move.w	d7,md_bg_w(a6)
(1) 1680/     E5C : 3D46 000A           		move.w	d6,md_bg_h(a6)
(1) 1681/     E60 : 1C84                		move.b	d4,md_bg_bw(a6)
(1) 1682/     E62 : 1D43 0001           		move.b	d3,md_bg_bh(a6)
(1) 1683/     E66 : CEC4                		mulu.w	d4,d7
(1) 1684/     E68 : CCC3                		mulu.w	d3,d6
(1) 1685/     E6A : 3D47 000C           		move.w	d7,md_bg_wf(a6)
(1) 1686/     E6E : 3D46 000E           		move.w	d6,md_bg_hf(a6)
(1) 1687/     E72 : 987C 0001           		sub.w	#1,d4
(1) 1688/     E76 : 967C 0001           		sub.w	#1,d3
(1) 1689/     E7A : C92E 0004           		and.b	d4,md_bg_xset(a6)
(1) 1690/     E7E : C72E 0005           		and.b	d3,md_bg_yset(a6)
(1) 1691/     E82 : 4843                		swap	d3
(1) 1692/     E84 : 4844                		swap	d4
(1) 1693/     E86 :                     
(1) 1694/     E86 :                     	; TODO: improve this...
(1) 1695/     E86 : 362E 0030           		move.w	md_bg_x(a6),d3
(1) 1696/     E8A : 382E 0034           		move.w	md_bg_y(a6),d4
(1) 1697/     E8E :                     	; X beams
(1) 1698/     E8E : B647                .xl_l:		cmp.w	d7,d3
(1) 1699/     E90 : 6D04                		blt.s	.xl_g
(1) 1700/     E92 : 9647                		sub.w	d7,d3
(1) 1701/     E94 : 60F8                		bra.s	.xl_l
(1) 1702/     E96 :                     .xl_g:
(1) 1703/     E96 : 3D43 0010           		move.w	d3,md_bg_xinc_l(a6)
(1) 1704/     E9A : D67C 0140           		add.w	#320,d3				; <-- X resolution R
(1) 1705/     E9E : B647                .xr_l:		cmp.w	d7,d3
(1) 1706/     EA0 : 6D04                		blt.s	.xr_g
(1) 1707/     EA2 : 9647                		sub.w	d7,d3
(1) 1708/     EA4 : 60F8                		bra.s	.xr_l
(1) 1709/     EA6 :                     .xr_g:
(1) 1710/     EA6 : 3D43 0012           		move.w	d3,md_bg_xinc_r(a6)
(1) 1711/     EAA :                     
(1) 1712/     EAA :                     	; Y beams
(1) 1713/     EAA : B846                .yt_l:		cmp.w	d6,d4
(1) 1714/     EAC : 6D04                		blt.s	.yt_g
(1) 1715/     EAE : 9846                		sub.w	d6,d4
(1) 1716/     EB0 : 60F8                		bra.s	.yt_l
(1) 1717/     EB2 :                     .yt_g:
(1) 1718/     EB2 : 3D44 0014           		move.w	d4,md_bg_yinc_u(a6)
(1) 1719/     EB6 : D87C 00E0           		add.w	#224,d4				; <-- Y resolution B
(1) 1720/     EBA : B846                .yb_l:		cmp.w	d6,d4
(1) 1721/     EBC : 6D04                		blt.s	.yb_g
(1) 1722/     EBE : 9846                		sub.w	d6,d4
(1) 1723/     EC0 : 60F8                		bra.s	.yb_l
(1) 1724/     EC2 :                     .yb_g:
(1) 1725/     EC2 : 3D44 0016           		move.w	d4,md_bg_yinc_d(a6)
(1) 1726/     EC6 :                     
(1) 1727/     EC6 : 08EE 0007 0003      		bset	#bitBgOn,md_bg_flags(a6)	; Enable this BG
(1) 1728/     ECC : 4E75                		rts
(1) 1729/     ECE :                     
(1) 1730/     ECE :                     ; --------------------------------------------------------
(1) 1731/     ECE :                     ; MdMap_Move
(1) 1732/     ECE :                     ;
(1) 1733/     ECE :                     ; Moves the current background/foreground
(1) 1734/     ECE :                     ; and checks for overflow.
(1) 1735/     ECE :                     ;
(1) 1736/     ECE :                     ; Input:
(1) 1737/     ECE :                     ; d0 | WORD - Background slot, if -1 32X's
(1) 1738/     ECE :                     ; d1 | WORD - Current X position
(1) 1739/     ECE :                     ; d2 | WORD - Current Y position
(1) 1740/     ECE :                     ; a0 - Background to move and check.
(1) 1741/     ECE :                     ;
(1) 1742/     ECE :                     ; Uses:
(1) 1743/     ECE :                     ; d6-d7
(1) 1744/     ECE :                     ; --------------------------------------------------------
(1) 1745/     ECE :                     
(1) 1746/     ECE :                     MdMap_Move:
(1) 1747/     ECE : 4DF8 B022           		lea	(RAM_BgBufferM),a6
(1) 1748/     ED2 : 4A40                		tst.w	d0
(1) 1749/     ED4 : 6B0A                		bmi.s	.mars_side
(1) 1750/     ED6 : 4DF8 9660           		lea	(RAM_BgBuffer),a6
(1) 1751/     EDA : C0FC 0038           		mulu.w	#sizeof_mdbg,d0
(1) 1752/     EDE : DCC0                		adda	d0,a6
(1) 1753/     EE0 :                     .mars_side:
(1) 1754/     EE0 :                     ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1755/     EE0 :                     ; 		beq	.not_enabld
(1) 1756/     EE0 : 302E 000C           		move.w	md_bg_wf(a6),d0
(1) 1757/     EE4 : 4A41                		tst.w	d1
(1) 1758/     EE6 : 6A02                		bpl.s	.x_left
(1) 1759/     EE8 : 4241                		clr.w	d1
(1) 1760/     EEA :                     .x_left:
(1) 1761/     EEA : 907C 0140           		sub.w	#320,d0
(1) 1762/     EEE : B240                		cmp.w	d0,d1
(1) 1763/     EF0 : 6502                		bcs.s	.x_right
(1) 1764/     EF2 : 3200                		move.w	d0,d1
(1) 1765/     EF4 :                     .x_right:
(1) 1766/     EF4 : 302E 000E           		move.w	md_bg_hf(a6),d0
(1) 1767/     EF8 : 4A42                		tst.w	d2
(1) 1768/     EFA : 6A02                		bpl.s	.y_left
(1) 1769/     EFC : 4242                		clr.w	d2
(1) 1770/     EFE :                     .y_left:
(1) 1771/     EFE : 907C 00E0           		sub.w	#224,d0
(1) 1772/     F02 : B440                		cmp.w	d0,d2
(1) 1773/     F04 : 6502                		bcs.s	.y_right
(1) 1774/     F06 : 3400                		move.w	d0,d2
(1) 1775/     F08 :                     .y_right:
(1) 1776/     F08 : 3D41 0030           		move.w	d1,md_bg_x(a6)
(1) 1777/     F0C : 3D42 0034           		move.w	d2,md_bg_y(a6)
(1) 1778/     F10 :                     .not_enabld:
(1) 1779/     F10 : 4E75                		rts
(1) 1780/     F12 :                     
(1) 1781/     F12 :                     ; --------------------------------------------------------
(1) 1782/     F12 :                     ; MdMap_Update
(1) 1783/     F12 :                     ;
(1) 1784/     F12 :                     ; Updates backgrounds internally, call this
(1) 1785/     F12 :                     ; BEFORE going into VBlank.
(1) 1786/     F12 :                     ;
(1) 1787/     F12 :                     ; Then later call MdMap_DrawScrl on VBlank,
(1) 1788/     F12 :                     ; this also applies for the 32X as this routine also
(1) 1789/     F12 :                     ; resets the drawing bits.
(1) 1790/     F12 :                     ;
(1) 1791/     F12 :                     ; For the 32X:
(1) 1792/     F12 :                     ; Call System_MarsUpdate AFTER this.
(1) 1793/     F12 :                     ; --------------------------------------------------------
(1) 1794/     F12 :                     
(1) 1795/     F12 :                     MdMap_Update:
(1) 1796/     F12 : 4DF8 B022           		lea	(RAM_BgBufferM),a6
(1) 1797/     F16 : 610A                		bsr.s	.this_bg
(1) 1798/     F18 : 4DF8 9660           		lea	(RAM_BgBuffer),a6
(1) 1799/     F1C : 6104                		bsr.s	.this_bg
(1) 1800/     F1E : DCFC 0038           		adda	#sizeof_mdbg,a6
(1) 1801/     F22 :                     .this_bg:
(1) 1802/     F22 : 082E 0007 0003      		btst	#bitBgOn,md_bg_flags(a6)
(1) 1803/     F28 : 6700 00AE           		beq	.no_bg
(1) 1804/     F2C : 7200                		moveq	#0,d1
(1) 1805/     F2E : 7400                		moveq	#0,d2
(1) 1806/     F30 : 362E 0030           		move.w	md_bg_x(a6),d3
(1) 1807/     F34 : 302E 0018           		move.w	md_bg_x_old(a6),d0
(1) 1808/     F38 : B640                		cmp.w	d0,d3
(1) 1809/     F3A : 6708                		beq.s	.xequ
(1) 1810/     F3C : 3203                		move.w	d3,d1
(1) 1811/     F3E : 9240                		sub.w	d0,d1
(1) 1812/     F40 : 3D43 0018           		move.w	d3,md_bg_x_old(a6)
(1) 1813/     F44 :                     .xequ:
(1) 1814/     F44 : 362E 0034           		move.w	md_bg_y(a6),d3
(1) 1815/     F48 : 302E 001A           		move.w	md_bg_y_old(a6),d0
(1) 1816/     F4C : B640                		cmp.w	d0,d3
(1) 1817/     F4E : 6708                		beq.s	.yequ
(1) 1818/     F50 : 3403                		move.w	d3,d2
(1) 1819/     F52 : 9440                		sub.w	d0,d2
(1) 1820/     F54 : 3D43 001A           		move.w	d3,md_bg_y_old(a6)
(1) 1821/     F58 :                     .yequ:
(1) 1822/     F58 :                     
(1) 1823/     F58 :                     	; Increment drawing beams
(1) 1824/     F58 : 3001                		move.w	d1,d0
(1) 1825/     F5A : 3A2E 000C           		move.w	md_bg_wf(a6),d5
(1) 1826/     F5E : 382E 0010           		move.w	md_bg_xinc_l(a6),d4
(1) 1827/     F62 : 6176                		bsr.s	.beam_incr
(1) 1828/     F64 : 3D44 0010           		move.w	d4,md_bg_xinc_l(a6)
(1) 1829/     F68 : 382E 0012           		move.w	md_bg_xinc_r(a6),d4
(1) 1830/     F6C : 616C                		bsr.s	.beam_incr
(1) 1831/     F6E : 3D44 0012           		move.w	d4,md_bg_xinc_r(a6)
(1) 1832/     F72 : 3002                		move.w	d2,d0
(1) 1833/     F74 : 3A2E 000E           		move.w	md_bg_hf(a6),d5
(1) 1834/     F78 : 382E 0014           		move.w	md_bg_yinc_u(a6),d4
(1) 1835/     F7C : 615C                		bsr.s	.beam_incr
(1) 1836/     F7E : 3D44 0014           		move.w	d4,md_bg_yinc_u(a6)
(1) 1837/     F82 : 382E 0016           		move.w	md_bg_yinc_d(a6),d4
(1) 1838/     F86 : 6152                		bsr.s	.beam_incr
(1) 1839/     F88 : 3D44 0016           		move.w	d4,md_bg_yinc_d(a6)
(1) 1840/     F8C :                     
(1) 1841/     F8C :                     	; Update internal counters
(1) 1842/     F8C : 7600                		moveq	#0,d3
(1) 1843/     F8E : 1616                		move.b	md_bg_bw(a6),d3		; X set
(1) 1844/     F90 : 102E 0004           		move.b	md_bg_xset(a6),d0
(1) 1845/     F94 : D001                		add.b	d1,d0
(1) 1846/     F96 : 1800                		move.b	d0,d4
(1) 1847/     F98 : C843                		and.w	d3,d4
(1) 1848/     F9A : 670C                		beq.s	.x_k
(1) 1849/     F9C : 7800                		moveq	#bitDrwR,d4
(1) 1850/     F9E : 4A41                		tst.w	d1
(1) 1851/     FA0 : 6A02                		bpl.s	.x_r
(1) 1852/     FA2 : 7801                		moveq	#bitDrwL,d4
(1) 1853/     FA4 :                     .x_r:
(1) 1854/     FA4 : 09EE 0003           		bset	d4,md_bg_flags(a6)
(1) 1855/     FA8 :                     .x_k:
(1) 1856/     FA8 : 967C 0001           		sub.w	#1,d3
(1) 1857/     FAC : C003                		and.b	d3,d0
(1) 1858/     FAE : 1D40 0004           		move.b	d0,md_bg_xset(a6)
(1) 1859/     FB2 : 162E 0001           		move.b	md_bg_bh(a6),d3		; Y set
(1) 1860/     FB6 : 102E 0005           		move.b	md_bg_yset(a6),d0
(1) 1861/     FBA : D002                		add.b	d2,d0
(1) 1862/     FBC : 1800                		move.b	d0,d4
(1) 1863/     FBE : C843                		and.w	d3,d4
(1) 1864/     FC0 : 670C                		beq.s	.y_k
(1) 1865/     FC2 : 7802                		moveq	#bitDrwD,d4
(1) 1866/     FC4 : 4A42                		tst.w	d2
(1) 1867/     FC6 : 6A02                		bpl.s	.y_d
(1) 1868/     FC8 : 7803                		moveq	#bitDrwU,d4
(1) 1869/     FCA :                     .y_d:
(1) 1870/     FCA : 09EE 0003           		bset	d4,md_bg_flags(a6)
(1) 1871/     FCE :                     .y_k:
(1) 1872/     FCE : 967C 0001           		sub.w	#1,d3
(1) 1873/     FD2 : C003                		and.b	d3,d0
(1) 1874/     FD4 : 1D40 0005           		move.b	d0,md_bg_yset(a6)
(1) 1875/     FD8 :                     .no_bg:
(1) 1876/     FD8 : 4E75                		rts
(1) 1877/     FDA :                     
(1) 1878/     FDA :                     ; d0 - Increment by
(1) 1879/     FDA :                     ; d4 - X/Y beam
(1) 1880/     FDA :                     ; d5 - Max Width/Height
(1) 1881/     FDA :                     .beam_incr:
(1) 1882/     FDA : D840                		add.w	d0,d4
(1) 1883/     FDC : 4A44                .xd_l:		tst.w	d4
(1) 1884/     FDE : 6A04                		bpl.s	.xd_g
(1) 1885/     FE0 : D845                		add.w	d5,d4
(1) 1886/     FE2 : 60F8                		bra.s	.xd_l
(1) 1887/     FE4 : B845                .xd_g:		cmp.w	d5,d4
(1) 1888/     FE6 : 6D04                		blt.s	.val_h
(1) 1889/     FE8 : 9845                		sub.w	d5,d4
(1) 1890/     FEA : 60F8                		bra.s	.xd_g
(1) 1891/     FEC :                     .val_h:
(1) 1892/     FEC : 4E75                		rts
(1) 1893/     FEE :                     
(1) 1894/     FEE :                     ; --------------------------------------------------------
(1) 1895/     FEE :                     ; MdMap_DrawAll
(1) 1896/     FEE :                     ;
(1) 1897/     FEE :                     ; Call this only if DISPLAY is OFF or in VBlank
(1) 1898/     FEE :                     ;
(1) 1899/     FEE :                     ; Notes:
(1) 1900/     FEE :                     ; - Does NOT check for off-bounds blocks
(1) 1901/     FEE :                     ; - Blocks with ID $00 are skipped.
(1) 1902/     FEE :                     ; --------------------------------------------------------
(1) 1903/     FEE :                     
(1) 1904/     FEE :                     MdMap_DrawAll:
(1) 1905/     FEE : 4DF8 9660           		lea	(RAM_BgBuffer),a6
(1) 1906/     FF2 : 6104                		bsr	.this_bg
(1) 1907/     FF4 : DCFC 0038           		adda	#sizeof_mdbg,a6
(1) 1908/     FF8 :                     .this_bg:
(1) 1909/     FF8 : 082E 0007 0003      		btst	#bitBgOn,md_bg_flags(a6)
(1) 1910/     FFE : 6700 00E8           		beq	.no_bg
(1) 1911/    1002 : 2A6E 0028           		move.l	md_bg_blk(a6),a5
(1) 1912/    1006 : 286E 0020           		move.l	md_bg_low(a6),a4
(1) 1913/    100A : 266E 0024           		move.l	md_bg_hi(a6),a3
(1) 1914/    100E : 302E 0030           		move.w	md_bg_x(a6),d0		; X start
(1) 1915/    1012 : 322E 0034           		move.w	md_bg_y(a6),d1		; Y start
(1) 1916/    1016 : 1416                		move.b	md_bg_bw(a6),d2
(1) 1917/    1018 : 162E 0001           		move.b	md_bg_bh(a6),d3
(1) 1918/    101C : 382E 0008           		move.w	md_bg_w(a6),d4
(1) 1919/    1020 :                     ; 		move.w	md_bg_wf(a6),d5
(1) 1920/    1020 :                     ; 		move.w	md_bg_hf(a6),d6
(1) 1921/    1020 :                     
(1) 1922/    1020 : 7C00                		moveq	#0,d6
(1) 1923/    1022 : 3C00                		move.w	d0,d6
(1) 1924/    1024 : CC7C FFF0           		and.w	#-$10,d6
(1) 1925/    1028 : E44E                		lsr.w	#2,d6
(1) 1926/    102A : CC7C 007F           		and.w	#$7F,d6
(1) 1927/    102E :                     
(1) 1928/    102E : 7A00                		moveq	#0,d5
(1) 1929/    1030 : 3A01                		move.w	d1,d5
(1) 1930/    1032 : CA7C FFF0           		and.w	#-$10,d5
(1) 1931/    1036 : E94D                		lsl.w	#4,d5
(1) 1932/    1038 : CA7C 0F00           		and.w	#$F00,d5
(1) 1933/    103C :                     
(1) 1934/    103C : DC45                		add.w	d5,d6
(1) 1935/    103E : DC6E 001C           		add.w	md_bg_vpos(a6),d6
(1) 1936/    1042 : 3A06                		move.w	d6,d5
(1) 1937/    1044 : E55E                		rol.w	#2,d6
(1) 1938/    1046 : CC7C 0003           		and.w	#%11,d6
(1) 1939/    104A : 4846                		swap	d6
(1) 1940/    104C : CA7C 3FFF           		and.w	#$3FFF,d5
(1) 1941/    1050 : 3C05                		move.w	d5,d6			; d6 - VDP 2nd|1st writes
(1) 1942/    1052 :                     
(1) 1943/    1052 : C47C 00FF           		and.w	#$FF,d2
(1) 1944/    1056 : C1C2                		muls.w	d2,d0
(1) 1945/    1058 : E048                		lsr.w	#8,d0
(1) 1946/    105A : C67C 00FF           		and.w	#$FF,d3
(1) 1947/    105E : C3C3                		muls.w	d3,d1
(1) 1948/    1060 : E049                		lsr.w	#8,d1
(1) 1949/    1062 : C3C4                		muls.w	d4,d1
(1) 1950/    1064 : D081                		add.l	d1,d0
(1) 1951/    1066 : D9C0                		add.l	d0,a4
(1) 1952/    1068 : D7C0                		add.l	d0,a3
(1) 1953/    106A : 323C 0080           		move.w	#$80,d1
(1) 1954/    106E : 3601                		move.w	d1,d3
(1) 1955/    1070 : 4841                		swap	d1
(1) 1956/    1072 : 967C 0001           		sub.w	#1,d3
(1) 1957/    1076 : 7400                		moveq	#0,d2
(1) 1958/    1078 : 342E 001E           		move.w	md_bg_vram(a6),d2	; d2 - VRAM cell pos
(1) 1959/    107C : 4843                		swap	d3
(1) 1960/    107E : 363C 0004           		move.w	#4,d3			; d3 - X wrap | X next block
(1) 1961/    1082 : 383C 0FFF           		move.w	#$0FFF,d4		; d4 - Y wrap | Y next block + bits
(1) 1962/    1086 : 4844                		swap	d4
(1) 1963/    1088 : 383C 0100           		move.w	#$100,d4
(1) 1964/    108C : 3005                		move.w	d5,d0
(1) 1965/    108E : 7A00                		moveq	#0,d5			; d5 - temporal | X-add read
(1) 1966/    1090 : 3E3C 001F           		move.w	#(512/16)-1,d7		; d7 - X cells | Y cells
(1) 1967/    1094 : 4847                		swap	d7
(1) 1968/    1096 : 3E3C 000F           		move.w	#(256/16)-1,d7
(1) 1969/    109A :                     
(1) 1970/    109A :                     	; a6 - Current BG buffer
(1) 1971/    109A :                     	; a5 - Block-data base
(1) 1972/    109A :                     	; a4 - LOW layout data Y
(1) 1973/    109A :                     	; a3 - HI layout data Y
(1) 1974/    109A :                     	; a2 - a4 current
(1) 1975/    109A :                     	; a1 - a3 current
(1) 1976/    109A :                     	; a0 - Block-data read
(1) 1977/    109A :                     
(1) 1978/    109A :                     	; d7 - X loop        | Y loop
(1) 1979/    109A :                     	; d6 - VDP 2nd Write | X/Y VDP pos + addr bits
(1) 1980/    109A :                     	; d5 - X loop-save   | X VDP current
(1) 1981/    109A :                     	; d4 - Y wrap        | Y next block pos
(1) 1982/    109A :                     	; d3 - X wrap        | X next block pos
(1) 1983/    109A :                     	; d2 - Y block size  | VRAM-cell base
(1) 1984/    109A :                     	; d1 - Y-next line   | VRAM-cell read + prio
(1) 1985/    109A :                     	; d0 -    ---        | ---
(1) 1986/    109A :                     
(1) 1987/    109A :                     .y_loop:
(1) 1988/    109A : 4847                		swap	d7
(1) 1989/    109C : 244C                		move.l	a4,a2		; a2 - LOW line
(1) 1990/    109E : 224B                		move.l	a3,a1		; a1 - HI line
(1) 1991/    10A0 : 3A07                		move.w	d7,d5
(1) 1992/    10A2 :                     .x_loop:
(1) 1993/    10A2 : 4845                		swap	d5
(1) 1994/    10A4 : 3202                		move.w	d2,d1
(1) 1995/    10A6 : 1012                		move.b	(a2),d0		; HI block?
(1) 1996/    10A8 : 6608                		bne.s	.got_blk
(1) 1997/    10AA : D27C 8000           		add.w	#$8000,d1
(1) 1998/    10AE : 1011                		move.b	(a1),d0
(1) 1999/    10B0 : 6702                		beq.s	.blank
(1) 2000/    10B2 :                     .got_blk:
(1) 2001/    10B2 : 6136                		bsr	.mk_block
(1) 2002/    10B4 :                     .blank:
(1) 2003/    10B4 : 2003                		move.l	d3,d0
(1) 2004/    10B6 : 4840                		swap	d0
(1) 2005/    10B8 : DA43                		add.w	d3,d5		; next VDP X pos
(1) 2006/    10BA : CA40                		and.w	d0,d5
(1) 2007/    10BC : D4FC 0001           		adda	#1,a2
(1) 2008/    10C0 : D2FC 0001           		adda	#1,a1
(1) 2009/    10C4 : 4845                		swap	d5
(1) 2010/    10C6 : 51CD FFDA           		dbf	d5,.x_loop
(1) 2011/    10CA :                     
(1) 2012/    10CA : 3006                		move.w	d6,d0
(1) 2013/    10CC : C07C 3000           		and.w	#$3000,d0
(1) 2014/    10D0 : DC44                		add.w	d4,d6		; <-- next VDP Y block
(1) 2015/    10D2 : 4844                		swap	d4
(1) 2016/    10D4 : CC44                		and.w	d4,d6
(1) 2017/    10D6 : 8C40                		or.w	d0,d6
(1) 2018/    10D8 : 4844                		swap	d4
(1) 2019/    10DA :                     
(1) 2020/    10DA : 302E 0008           		move.w	md_bg_w(a6),d0 ; ***
(1) 2021/    10DE : D8C0                		adda	d0,a4
(1) 2022/    10E0 : D6C0                		adda	d0,a3
(1) 2023/    10E2 : 4847                		swap	d7
(1) 2024/    10E4 : 51CF FFB4           		dbf	d7,.y_loop
(1) 2025/    10E8 :                     .no_bg:
(1) 2026/    10E8 : 4E75                		rts
(1) 2027/    10EA :                     
(1) 2028/    10EA :                     ; barely got free regs without using stack
(1) 2029/    10EA :                     .mk_block:
(1) 2030/    10EA : 4842                		swap	d2
(1) 2031/    10EC : 204D                		move.l	a5,a0
(1) 2032/    10EE : C07C 00FF           		and.w	#$FF,d0
(1) 2033/    10F2 : E748                		lsl.w	#3,d0		; * 8 bytes
(1) 2034/    10F4 : D0C0                		adda	d0,a0		; a0 - cell word data
(1) 2035/    10F6 : 3006                		move.w	d6,d0
(1) 2036/    10F8 : D045                		add.w	d5,d0
(1) 2037/    10FA : 807C 4000           		or.w	#$4000,d0
(1) 2038/    10FE : 4846                		swap	d6
(1) 2039/    1100 :                     
(1) 2040/    1100 :                     	; d0 - topleft VDP write | $4000
(1) 2041/    1100 :                     	; d6 - right VDP write
(1) 2042/    1100 :                     	; d2 is free
(1) 2043/    1100 :                     	;
(1) 2044/    1100 :                     	; currently working: 16x16
(1) 2045/    1100 : 610C                		bsr.s	.drwy_16	; 1-
(1) 2046/    1102 : D07C 0002           		add.w	#2,d0		; 2-
(1) 2047/    1106 : 6106                		bsr.s	.drwy_16	; -3
(1) 2048/    1108 :                     					; -4
(1) 2049/    1108 : 4846                		swap	d6
(1) 2050/    110A : 4842                		swap	d2
(1) 2051/    110C : 4E75                		rts
(1) 2052/    110E :                     
(1) 2053/    110E :                     ; d0 - left vdp
(1) 2054/    110E :                     ; d6 - right vdp
(1) 2055/    110E :                     .drwy_16:
(1) 2056/    110E : 3400                		move.w	d0,d2
(1) 2057/    1110 : 4840                		swap	d0
(1) 2058/    1112 : 3018                		move.w	(a0)+,d0
(1) 2059/    1114 : D041                		add.w	d1,d0
(1) 2060/    1116 : 33C2 00C0 0004      		move.w	d2,(vdp_ctrl).l
(1) 2061/    111C : 33C6 00C0 0004      		move.w	d6,(vdp_ctrl).l
(1) 2062/    1122 : 33C0 00C0 0000      		move.w	d0,(vdp_data).l
(1) 2063/    1128 : 4841                		swap	d1
(1) 2064/    112A : D441                		add.w	d1,d2		; Next line
(1) 2065/    112C : 4841                		swap	d1
(1) 2066/    112E : 3018                		move.w	(a0)+,d0
(1) 2067/    1130 : D041                		add.w	d1,d0
(1) 2068/    1132 : 33C2 00C0 0004      		move.w	d2,(vdp_ctrl).l
(1) 2069/    1138 : 33C6 00C0 0004      		move.w	d6,(vdp_ctrl).l
(1) 2070/    113E : 33C0 00C0 0000      		move.w	d0,(vdp_data).l
(1) 2071/    1144 : 4840                		swap	d0
(1) 2072/    1146 : 4E75                		rts
(1) 2073/    1148 :                     
(1) 2074/    1148 :                     	; Block: 16x16 as 13
(1) 2075/    1148 :                     	;                 24
(1) 2076/    1148 :                     	; d0 - block ID
(1) 2077/    1148 :                     	; d1 - VRAM-add base
(1) 2078/    1148 :                     	; d6 - VDP out R | VDP out L
(1) 2079/    1148 :                     ; 		and.w	#$FF,d0
(1) 2080/    1148 :                     ; 		lsl.w	#3,d0		; * 8 bytes
(1) 2081/    1148 :                     ; 		move.l	(a5,d0.w),d2
(1) 2082/    1148 :                     ; 		add.l	d1,d2
(1) 2083/    1148 :                     ; 		swap	d2
(1) 2084/    1148 :                     ; 		move.l	4(a5,d0.w),d3
(1) 2085/    1148 :                     ; 		add.l	d1,d3
(1) 2086/    1148 :                     ; 		swap	d3
(1) 2087/    1148 :                     ; 		move.w	d6,d0
(1) 2088/    1148 :                     ; 		swap	d5
(1) 2089/    1148 :                     ; 		add.w	d5,d0
(1) 2090/    1148 :                     ; 		or.w	#$4000,d0
(1) 2091/    1148 :                     ; 		swap	d5
(1) 2092/    1148 :                     ; 		move.l	a0,d1
(1) 2093/    1148 :                     ; 		and.w	d1,d5
(1) 2094/    1148 :                     ; 		add.w	d5,d0
(1) 2095/    1148 :                     ; 		swap	d6
(1) 2096/    1148 :                     ; 		move.w	d0,(vdp_ctrl).l
(1) 2097/    1148 :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 2098/    1148 :                     ; 		move.w	d2,(vdp_data).l
(1) 2099/    1148 :                     ; 		move.w	d3,(vdp_data).l
(1) 2100/    1148 :                     ; 		swap	d2
(1) 2101/    1148 :                     ; 		swap	d3
(1) 2102/    1148 :                     ; 		add.w	#$80,d0		; line add
(1) 2103/    1148 :                     ; 		move.w	d0,(vdp_ctrl).l
(1) 2104/    1148 :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 2105/    1148 :                     ; 		move.w	d2,(vdp_data).l
(1) 2106/    1148 :                     ; 		move.w	d3,(vdp_data).l
(1) 2107/    1148 :                     ; 		swap	d6
(1) 2108/    1148 :                     ; 		rts
(1) 2109/    1148 :                     
(1) 2110/    1148 :                     ; --------------------------------------------------------
(1) 2111/    1148 :                     ; MdMap_DrawScrlMd
(1) 2112/    1148 :                     ;
(1) 2113/    1148 :                     ; Draws map off-screen changes, only on Genesis-side.
(1) 2114/    1148 :                     ;
(1) 2115/    1148 :                     ; CALL THIS ON VBLANK ONLY, MUST BE QUICK.
(1) 2116/    1148 :                     ; --------------------------------------------------------
(1) 2117/    1148 :                     
(1) 2118/    1148 :                     MdMap_DrawScrlMd:
(1) 2119/    1148 : 4DF8 9660           		lea	(RAM_BgBuffer),a6
(1) 2120/    114C : 4BF9 00C0 0000      		lea	(vdp_data),a5
(1) 2121/    1152 : 6104                		bsr.s	.this_bg
(1) 2122/    1154 : DCFC 0038           		adda	#sizeof_mdbg,a6
(1) 2123/    1158 :                     	; SH2-side handles the
(1) 2124/    1158 :                     	; RAM_BgBufferM's drawing
(1) 2125/    1158 :                     
(1) 2126/    1158 :                     .this_bg:
(1) 2127/    1158 : 1E2E 0003           		move.b	md_bg_flags(a6),d7
(1) 2128/    115C : 0807 0007           		btst	#bitBgOn,d7
(1) 2129/    1160 : 6758                		beq	.no_bg
(1) 2130/    1162 : 302E 0030           		move.w	md_bg_x(a6),d0		; X start
(1) 2131/    1166 : 322E 0034           		move.w	md_bg_y(a6),d1		; Y start
(1) 2132/    116A : 342E 0010           		move.w	md_bg_xinc_l(a6),d2
(1) 2133/    116E : 362E 0014           		move.w	md_bg_yinc_u(a6),d3
(1) 2134/    1172 : 0887 0003           		bclr	#bitDrwU,d7
(1) 2135/    1176 : 6704                		beq.s	.no_u
(1) 2136/    1178 : 6100 00F4           		bsr	.mk_row
(1) 2137/    117C :                     .no_u:
(1) 2138/    117C : 0887 0002           		bclr	#bitDrwD,d7
(1) 2139/    1180 : 670C                		beq.s	.no_d
(1) 2140/    1182 : 362E 0016           		move.w	md_bg_yinc_d(a6),d3
(1) 2141/    1186 : D27C 00E0           		add.w	#224,d1			; X add
(1) 2142/    118A : 6100 00E2           		bsr	.mk_row
(1) 2143/    118E :                     .no_d:
(1) 2144/    118E : 302E 0030           		move.w	md_bg_x(a6),d0		; X start
(1) 2145/    1192 : 322E 0034           		move.w	md_bg_y(a6),d1		; Y start
(1) 2146/    1196 : 342E 0010           		move.w	md_bg_xinc_l(a6),d2
(1) 2147/    119A : 362E 0014           		move.w	md_bg_yinc_u(a6),d3
(1) 2148/    119E : 0887 0001           		bclr	#bitDrwL,d7
(1) 2149/    11A2 : 6702                		beq.s	.no_l
(1) 2150/    11A4 : 6116                		bsr.s	.mk_clmn
(1) 2151/    11A6 :                     .no_l:
(1) 2152/    11A6 : 0887 0000           		bclr	#bitDrwR,d7
(1) 2153/    11AA : 670A                		beq.s	.no_r
(1) 2154/    11AC : 342E 0012           		move.w	md_bg_xinc_r(a6),d2
(1) 2155/    11B0 : D07C 0140           		add.w	#320,d0			; X add
(1) 2156/    11B4 : 6106                		bsr.s	.mk_clmn
(1) 2157/    11B6 :                     .no_r:
(1) 2158/    11B6 :                     
(1) 2159/    11B6 : 1D47 0003           		move.b	d7,md_bg_flags(a6)
(1) 2160/    11BA :                     .no_bg:
(1) 2161/    11BA : 4E75                		rts
(1) 2162/    11BC :                     
(1) 2163/    11BC :                     ; ------------------------------------------------
(1) 2164/    11BC :                     ; Make column
(1) 2165/    11BC :                     ; d0 - X
(1) 2166/    11BC :                     ; d1 - Y
(1) 2167/    11BC :                     ; d2 - X increment
(1) 2168/    11BC :                     ; d3 - Y increment
(1) 2169/    11BC :                     ; ------------------------------------------------
(1) 2170/    11BC :                     
(1) 2171/    11BC :                     .mk_clmn:
(1) 2172/    11BC :                     ; 		btst	#bitMarsBg,d7
(1) 2173/    11BC :                     ; 		bne	.mars_ret_c
(1) 2174/    11BC : 4847                		swap	d7
(1) 2175/    11BE : 6100 016A           		bsr	.get_coords
(1) 2176/    11C2 : 4840                		swap	d0
(1) 2177/    11C4 : 3004                		move.w	d4,d0
(1) 2178/    11C6 : 4840                		swap	d0
(1) 2179/    11C8 : 363C 0FFF           		move.w	#$FFF,d3
(1) 2180/    11CC : 4843                		swap	d3
(1) 2181/    11CE : 363C 0100           		move.w	#$100,d3
(1) 2182/    11D2 :                     
(1) 2183/    11D2 :                     	; d0 -    X curr | Current cell X/Y (1st)
(1) 2184/    11D2 :                     	; d1 -    Y curr | VDP 1st write
(1) 2185/    11D2 :                     	; d2 - Cell VRAM | VDP 2nd write
(1) 2186/    11D2 :                     	; d3 -    Y wrap | Y add
(1) 2187/    11D2 :                     	; d4 -         *****
(1) 2188/    11D2 :                     	; d5 -         *****
(1) 2189/    11D2 :                     	; d6 -         *****
(1) 2190/    11D2 :                     	; d7 - lastflags | loop blocks
(1) 2191/    11D2 :                     
(1) 2192/    11D2 : 3E3C 000F           		move.w	#(256/16)-1,d7
(1) 2193/    11D6 :                     .y_blk:
(1) 2194/    11D6 : 7800                		moveq	#0,d4
(1) 2195/    11D8 : 7A00                		moveq	#0,d5
(1) 2196/    11DA : 1C13                		move.b	(a3),d6
(1) 2197/    11DC : 6616                		bne.s	.vld
(1) 2198/    11DE : 1C12                		move.b	(a2),d6
(1) 2199/    11E0 : 6606                		bne.s	.prio
(1) 2200/    11E2 :                     .blnk:
(1) 2201/    11E2 : 7800                		moveq	#0,d4
(1) 2202/    11E4 : 7A00                		moveq	#0,d5
(1) 2203/    11E6 : 602E                		bra.s	.frce
(1) 2204/    11E8 :                     .prio:
(1) 2205/    11E8 : 283C 8000 8000      		move.l	#$80008000,d4
(1) 2206/    11EE : 2A3C 8000 8000      		move.l	#$80008000,d5
(1) 2207/    11F4 :                     .vld:
(1) 2208/    11F4 : 204C                		move.l	a4,a0
(1) 2209/    11F6 : CC7C 00FF           		and.w	#$FF,d6
(1) 2210/    11FA : E74E                		lsl.w	#3,d6
(1) 2211/    11FC : D0C6                		adda	d6,a0
(1) 2212/    11FE : 4842                		swap	d2
(1) 2213/    1200 : D858                		add.w	(a0)+,d4
(1) 2214/    1202 : DA58                		add.w	(a0)+,d5
(1) 2215/    1204 : D842                		add.w	d2,d4
(1) 2216/    1206 : DA42                		add.w	d2,d5
(1) 2217/    1208 : 4844                		swap	d4
(1) 2218/    120A : 4845                		swap	d5
(1) 2219/    120C : D858                		add.w	(a0)+,d4
(1) 2220/    120E : DA58                		add.w	(a0)+,d5
(1) 2221/    1210 : D842                		add.w	d2,d4
(1) 2222/    1212 : DA42                		add.w	d2,d5
(1) 2223/    1214 : 4842                		swap	d2
(1) 2224/    1216 :                     .frce:
(1) 2225/    1216 : 3C00                		move.w	d0,d6
(1) 2226/    1218 : DC41                		add.w	d1,d6
(1) 2227/    121A : 8C7C 4000           		or.w	#$4000,d6
(1) 2228/    121E : 3B46 0004           		move.w	d6,4(a5)
(1) 2229/    1222 : 3B42 0004           		move.w	d2,4(a5)
(1) 2230/    1226 : 2A84                		move.l	d4,(a5)
(1) 2231/    1228 : DC7C 0080           		add.w	#$80,d6
(1) 2232/    122C : 3B46 0004           		move.w	d6,4(a5)
(1) 2233/    1230 : 3B42 0004           		move.w	d2,4(a5)
(1) 2234/    1234 : 2A85                		move.l	d5,(a5)
(1) 2235/    1236 : 2803                		move.l	d3,d4		; Next Y block
(1) 2236/    1238 : 4844                		swap	d4
(1) 2237/    123A : D043                		add.w	d3,d0
(1) 2238/    123C : C044                		and.w	d4,d0
(1) 2239/    123E : 3C2E 0008           		move.w	md_bg_w(a6),d6
(1) 2240/    1242 : D6C6                		adda	d6,a3
(1) 2241/    1244 : D4C6                		adda	d6,a2
(1) 2242/    1246 : 4841                		swap	d1		; <-- TODO: improve this later.
(1) 2243/    1248 : D27C 0010           		add.w	#$10,d1
(1) 2244/    124C : B26E 000E           		cmp.w	md_bg_hf(a6),d1
(1) 2245/    1250 : 6D12                		blt.s	.y_low
(1) 2246/    1252 : 4840                		swap	d0
(1) 2247/    1254 : 4241                		clr.w	d1
(1) 2248/    1256 : 266E 0020           		move.l	md_bg_low(a6),a3
(1) 2249/    125A : 246E 0024           		move.l	md_bg_hi(a6),a2
(1) 2250/    125E : D4C0                		adda	d0,a2
(1) 2251/    1260 : D6C0                		adda	d0,a3
(1) 2252/    1262 : 4840                		swap	d0
(1) 2253/    1264 :                     .y_low:
(1) 2254/    1264 : 4841                		swap	d1
(1) 2255/    1266 :                     
(1) 2256/    1266 : 51CF FF6E           		dbf	d7,.y_blk
(1) 2257/    126A : 4847                		swap	d7
(1) 2258/    126C :                     .mars_ret_c:
(1) 2259/    126C : 4E75                		rts
(1) 2260/    126E :                     
(1) 2261/    126E :                     ; ------------------------------------------------
(1) 2262/    126E :                     ; Make row
(1) 2263/    126E :                     ; d0 - X
(1) 2264/    126E :                     ; d1 - Y
(1) 2265/    126E :                     ; d2 - X increment
(1) 2266/    126E :                     ; d3 - Y increment
(1) 2267/    126E :                     ; ------------------------------------------------
(1) 2268/    126E :                     
(1) 2269/    126E :                     .mk_row:
(1) 2270/    126E :                     ; 		btst	#bitMarsBg,d7
(1) 2271/    126E :                     ; 		bne.s	.mars_ret_c
(1) 2272/    126E : 4847                		swap	d7
(1) 2273/    1270 : 6100 00B8           		bsr	.get_coords
(1) 2274/    1274 : 4841                		swap	d1
(1) 2275/    1276 : 3205                		move.w	d5,d1
(1) 2276/    1278 : 4841                		swap	d1
(1) 2277/    127A : 363C 007F           		move.w	#$7F,d3
(1) 2278/    127E : 4843                		swap	d3
(1) 2279/    1280 : 363C 0004           		move.w	#4,d3
(1) 2280/    1284 :                     
(1) 2281/    1284 :                     	; d0 -    X curr | Current cell X/Y (1st)
(1) 2282/    1284 :                     	; d1 -    Y curr | VDP 1st write
(1) 2283/    1284 :                     	; d2 - Cell VRAM | VDP 2nd write
(1) 2284/    1284 :                     	; d3 -    X wrap | X add
(1) 2285/    1284 :                     	; d4 -         *****
(1) 2286/    1284 :                     	; d5 -         *****
(1) 2287/    1284 :                     	; d6 - loopflags | *****
(1) 2288/    1284 :                     	; d7 - lastflags | loop blocks
(1) 2289/    1284 :                     
(1) 2290/    1284 : 3C00                		move.w	d0,d6
(1) 2291/    1286 : CC7C FF00           		and.w	#-$100,d6	; Merge d1
(1) 2292/    128A : D246                		add.w	d6,d1
(1) 2293/    128C : 2A03                		move.l	d3,d5
(1) 2294/    128E : 4845                		swap	d5
(1) 2295/    1290 : C045                		and.w	d5,d0
(1) 2296/    1292 : 3E3C 0014           		move.w	#((320+16)/16)-1,d7
(1) 2297/    1296 :                     .x_blk:
(1) 2298/    1296 : 7800                		moveq	#0,d4
(1) 2299/    1298 : 7A00                		moveq	#0,d5
(1) 2300/    129A : 1C13                		move.b	(a3),d6
(1) 2301/    129C : 6616                		bne.s	.xvld
(1) 2302/    129E : 1C12                		move.b	(a2),d6
(1) 2303/    12A0 : 6606                		bne.s	.xprio
(1) 2304/    12A2 :                     .xblnk:
(1) 2305/    12A2 : 7800                		moveq	#0,d4
(1) 2306/    12A4 : 7A00                		moveq	#0,d5
(1) 2307/    12A6 : 602E                		bra.s	.xfrce
(1) 2308/    12A8 :                     .xprio:
(1) 2309/    12A8 : 283C 8000 8000      		move.l	#$80008000,d4
(1) 2310/    12AE : 2A3C 8000 8000      		move.l	#$80008000,d5
(1) 2311/    12B4 :                     .xvld:
(1) 2312/    12B4 : 204C                		move.l	a4,a0
(1) 2313/    12B6 : CC7C 00FF           		and.w	#$FF,d6
(1) 2314/    12BA : E74E                		lsl.w	#3,d6
(1) 2315/    12BC : D0C6                		adda	d6,a0
(1) 2316/    12BE : 4842                		swap	d2
(1) 2317/    12C0 : D858                		add.w	(a0)+,d4
(1) 2318/    12C2 : DA58                		add.w	(a0)+,d5
(1) 2319/    12C4 : D842                		add.w	d2,d4
(1) 2320/    12C6 : DA42                		add.w	d2,d5
(1) 2321/    12C8 : 4844                		swap	d4
(1) 2322/    12CA : 4845                		swap	d5
(1) 2323/    12CC : D858                		add.w	(a0)+,d4
(1) 2324/    12CE : DA58                		add.w	(a0)+,d5
(1) 2325/    12D0 : D842                		add.w	d2,d4
(1) 2326/    12D2 : DA42                		add.w	d2,d5
(1) 2327/    12D4 : 4842                		swap	d2
(1) 2328/    12D6 :                     .xfrce:
(1) 2329/    12D6 : 3C00                		move.w	d0,d6
(1) 2330/    12D8 : DC41                		add.w	d1,d6
(1) 2331/    12DA : 8C7C 4000           		or.w	#$4000,d6
(1) 2332/    12DE : 3B46 0004           		move.w	d6,4(a5)
(1) 2333/    12E2 : 3B42 0004           		move.w	d2,4(a5)
(1) 2334/    12E6 : 2A84                		move.l	d4,(a5)
(1) 2335/    12E8 : DC7C 0080           		add.w	#$80,d6
(1) 2336/    12EC : 3B46 0004           		move.w	d6,4(a5)
(1) 2337/    12F0 : 3B42 0004           		move.w	d2,4(a5)
(1) 2338/    12F4 : 2A85                		move.l	d5,(a5)
(1) 2339/    12F6 : D043                		add.w	d3,d0
(1) 2340/    12F8 : 4843                		swap	d3
(1) 2341/    12FA : C043                		and.w	d3,d0
(1) 2342/    12FC : 4843                		swap	d3
(1) 2343/    12FE :                     
(1) 2344/    12FE :                     	; X wrap
(1) 2345/    12FE : 4840                		swap	d0
(1) 2346/    1300 : D07C 0010           		add.w	#$10,d0
(1) 2347/    1304 : B06E 000C           		cmp.w	md_bg_wf(a6),d0
(1) 2348/    1308 : 6D0E                		blt.s	.x_low
(1) 2349/    130A : 906E 000C           		sub.w	md_bg_wf(a6),d0
(1) 2350/    130E : 7800                		moveq	#0,d4
(1) 2351/    1310 : 382E 0008           		move.w	md_bg_w(a6),d4
(1) 2352/    1314 : 95C4                		sub.l	d4,a2
(1) 2353/    1316 : 97C4                		sub.l	d4,a3
(1) 2354/    1318 :                     .x_low:
(1) 2355/    1318 : D6FC 0001           		adda	#1,a3
(1) 2356/    131C : D4FC 0001           		adda	#1,a2
(1) 2357/    1320 :                     .x_new:
(1) 2358/    1320 : 4840                		swap	d0
(1) 2359/    1322 :                     
(1) 2360/    1322 : 51CF FF72           		dbf	d7,.x_blk
(1) 2361/    1326 : 4847                		swap	d7
(1) 2362/    1328 : 4E75                		rts
(1) 2363/    132A :                     
(1) 2364/    132A :                     ; ------------------------------------------------
(1) 2365/    132A :                     ; Input
(1) 2366/    132A :                     ; d0 - X position
(1) 2367/    132A :                     ; d1 - Y position
(1) 2368/    132A :                     ; d2 - X increment beam
(1) 2369/    132A :                     ; d3 - Y increment beam
(1) 2370/    132A :                     ;
(1) 2371/    132A :                     ; Out:
(1) 2372/    132A :                     ; d4 - X LEFT increment
(1) 2373/    132A :                     ; d5 - Y TOP increment
(1) 2374/    132A :                     
(1) 2375/    132A :                     .get_coords:
(1) 2376/    132A : 286E 0028           		move.l	md_bg_blk(a6),a4
(1) 2377/    132E : 266E 0020           		move.l	md_bg_low(a6),a3
(1) 2378/    1332 : 246E 0024           		move.l	md_bg_hi(a6),a2
(1) 2379/    1336 : C07C FFF0           		and.w	#-$10,d0		; block X/Y limit
(1) 2380/    133A : C27C FFF0           		and.w	#-$10,d1
(1) 2381/    133E : C47C FFF0           		and.w	#-$10,d2
(1) 2382/    1342 : C67C FFF0           		and.w	#-$10,d3
(1) 2383/    1346 : 4840                		swap	d0
(1) 2384/    1348 : 4841                		swap	d1
(1) 2385/    134A : 3002                		move.w	d2,d0
(1) 2386/    134C : 3203                		move.w	d3,d1
(1) 2387/    134E : 4840                		swap	d0
(1) 2388/    1350 : 4841                		swap	d1
(1) 2389/    1352 :                     
(1) 2390/    1352 : 7800                		moveq	#0,d4
(1) 2391/    1354 : 7A00                		moveq	#0,d5
(1) 2392/    1356 : 1C16                		move.b	md_bg_bw(a6),d6
(1) 2393/    1358 : 1E2E 0001           		move.b	md_bg_bh(a6),d7
(1) 2394/    135C : CC7C 00FF           		and.w	#$FF,d6
(1) 2395/    1360 : CE7C 00FF           		and.w	#$FF,d7
(1) 2396/    1364 :                     
(1) 2397/    1364 : 3802                		move.w	d2,d4
(1) 2398/    1366 : C9C6                		muls.w	d6,d4
(1) 2399/    1368 : E044                		asr.w	#8,d4
(1) 2400/    136A : 3A03                		move.w	d3,d5
(1) 2401/    136C : CBC7                		muls.w	d7,d5
(1) 2402/    136E : E045                		asr.w	#8,d5
(1) 2403/    1370 : CBEE 0008           		muls.w	md_bg_w(a6),d5
(1) 2404/    1374 : 7600                		moveq	#0,d3
(1) 2405/    1376 : 2604                		move.l	d4,d3
(1) 2406/    1378 : D685                		add.l	d5,d3
(1) 2407/    137A : D7C3                		add.l	d3,a3
(1) 2408/    137C : D5C3                		add.l	d3,a2
(1) 2409/    137E :                     
(1) 2410/    137E : 342E 001E           		move.w	md_bg_vram(a6),d2
(1) 2411/    1382 : 4842                		swap	d2
(1) 2412/    1384 : E449                		lsr.w	#2,d1			; Y >> 2
(1) 2413/    1386 : ED49                		lsl.w	#6,d1			; Y * $40
(1) 2414/    1388 : E448                		lsr.w	#2,d0			; X >> 2
(1) 2415/    138A : C27C 0FFF           		and.w	#$FFF,d1
(1) 2416/    138E : C07C 007C           		and.w	#$7C,d0
(1) 2417/    1392 : D041                		add.w	d1,d0
(1) 2418/    1394 : 322E 001C           		move.w	md_bg_vpos(a6),d1
(1) 2419/    1398 : 3401                		move.w	d1,d2
(1) 2420/    139A : C27C 3FFF           		and.w	#$3FFF,d1
(1) 2421/    139E : E55A                		rol.w	#2,d2
(1) 2422/    13A0 : C47C 0003           		and.w	#%11,d2
(1) 2423/    13A4 : 4E75                		rts
(1) 2424/    13A6 :                     
(1) 2425/    13A6 :                     ; ====================================================================
(1) 2426/    13A6 :                     ; ----------------------------------------------------------------
(1) 2427/    13A6 :                     ; Objects system
(1) 2428/    13A6 :                     ;
(1) 2429/    13A6 :                     ; MD and MARS
(1) 2430/    13A6 :                     ; ----------------------------------------------------------------
(1) 2431/    13A6 :                     
(1) 2432/    13A6 :                     ; --------------------------------------------------------
(1) 2433/    13A6 :                     ; Init objects
(1) 2434/    13A6 :                     ; --------------------------------------------------------
(1) 2435/    13A6 :                     
(1) 2436/    13A6 :                     Objects_Init:
(1) 2437/    13A6 : 4DF8 9000           		lea	(RAM_Objects),a6
(1) 2438/    13AA : 3E3C 065F           		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 2439/    13AE :                     .clr:
(1) 2440/    13AE : 421E                		clr.b	(a6)+
(1) 2441/    13B0 : 51CF FFFC           		dbf	d7,.clr
(1) 2442/    13B4 : 4DF8 9B54           		lea	(RAM_ObjDispList),a6
(1) 2443/    13B8 : 3E3C 000F           		move.w	#MAX_MDOBJ-1,d7
(1) 2444/    13BC :                     .clr_d:
(1) 2445/    13BC : 425E                		clr.w	(a6)+
(1) 2446/    13BE : 51CF FFFC           		dbf	d7,.clr_d
(1) 2447/    13C2 : 4278 A994           		clr.w	(RAM_SprDrwCntr).w
(1) 2448/    13C6 : 4E75                		rts
(1) 2449/    13C8 :                     
(1) 2450/    13C8 :                     ; --------------------------------------------------------
(1) 2451/    13C8 :                     ; Process objects
(1) 2452/    13C8 :                     ; --------------------------------------------------------
(1) 2453/    13C8 :                     
(1) 2454/    13C8 :                     Objects_Run:
(1) 2455/    13C8 : 4DF8 9000           		lea	(RAM_Objects),a6
(1) 2456/    13CC : 3E3C 000F           		move.w	#MAX_MDOBJ-1,d7
(1) 2457/    13D0 :                     .next_one:
(1) 2458/    13D0 : 2C16                		move.l	obj_code(a6),d6
(1) 2459/    13D2 : 6708                		beq.s	.no_code	; Free slot
(1) 2460/    13D4 : 2F07                		move.l	d7,-(sp)
(1) 2461/    13D6 : 2A46                		move.l	d6,a5
(1) 2462/    13D8 : 4E95                		jsr	(a5)
(1) 2463/    13DA : 2E1F                		move.l	(sp)+,d7
(1) 2464/    13DC :                     .no_code:
(1) 2465/    13DC : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 2466/    13E0 : 51CF FFEE           		dbf	d7,.next_one
(1) 2467/    13E4 : 4E75                		rts
(1) 2468/    13E6 :                     
(1) 2469/    13E6 :                     ; --------------------------------------------------------
(1) 2470/    13E6 :                     ; Draw ALL Objects from display list
(1) 2471/    13E6 :                     ;
(1) 2472/    13E6 :                     ; Call this BEFORE VBlank.
(1) 2473/    13E6 :                     ; --------------------------------------------------------
(1) 2474/    13E6 :                     
(1) 2475/    13E6 :                     Objects_Show:
(1) 2476/    13E6 : 7E01                		moveq	#1,d7				; d7 - MD Link
(1) 2477/    13E8 : 4DF8 9FD4           		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 2478/    13EC :                     
(1) 2479/    13EC : 3C38 A994           		move.w	(RAM_SprDrwCntr),d6
(1) 2480/    13F0 : 6732                		beq.s	.no_sprdrw
(1) 2481/    13F2 : 4278 A994           		clr.w	(RAM_SprDrwCntr).w
(1) 2482/    13F6 : 4BF8 9B74           		lea	(RAM_SprDrwPz),a5
(1) 2483/    13FA : 9C7C 0001           		sub.w	#1,d6
(1) 2484/    13FE :                     .nexts:
(1) 2485/    13FE : BE7C 0046           		cmp.w	#70,d7
(1) 2486/    1402 : 6C20                		bge.s	.no_sprdrw
(1) 2487/    1404 : 301D                		move.w	(a5)+,d0
(1) 2488/    1406 : 321D                		move.w	(a5)+,d1	; custom
(1) 2489/    1408 : C27C 00FF           		and.w	#$FF,d1
(1) 2490/    140C : E149                		lsl.w	#8,d1
(1) 2491/    140E : 8247                		or.w	d7,d1
(1) 2492/    1410 : 341D                		move.w	(a5)+,d2
(1) 2493/    1412 : 361D                		move.w	(a5)+,d3
(1) 2494/    1414 : 3CC0                		move.w	d0,(a6)+
(1) 2495/    1416 : 3CC1                		move.w	d1,(a6)+
(1) 2496/    1418 : 3CC2                		move.w	d2,(a6)+
(1) 2497/    141A : 3CC3                		move.w	d3,(a6)+
(1) 2498/    141C : DE7C 0001           		add.w	#1,d7
(1) 2499/    1420 : 51CE FFDC           		dbf	d6,.nexts
(1) 2500/    1424 :                     .no_sprdrw:
(1) 2501/    1424 :                     
(1) 2502/    1424 :                     	; Draw mappings from sprites
(1) 2503/    1424 : 4BF8 9B54           		lea	(RAM_ObjDispList),a5
(1) 2504/    1428 : 49F8 B23A           		lea	(RAM_MdDreq+Dreq_SuperSpr),a4	; a4 - 32X SUPER Sprites
(1) 2505/    142C : 3C3C 000F           		move.w	#MAX_MDOBJ-1,d6
(1) 2506/    1430 :                     .next:
(1) 2507/    1430 : 3015                		move.w	(a5),d0
(1) 2508/    1432 : 6700 00E2           		beq	.finish
(1) 2509/    1436 : 72FF                		moveq	#-1,d1
(1) 2510/    1438 : 3200                		move.w	d0,d1
(1) 2511/    143A : 2441                		move.l	d1,a2
(1) 2512/    143C : 206A 0010           		move.l	obj_map(a2),a0		; Read mapping
(1) 2513/    1440 : 082A 0007 0023      		btst	#bitobj_Mars,obj_set(a2)
(1) 2514/    1446 : 6656                		bne.s	.mars_mode
(1) 2515/    1448 : BE7C 0046           		cmp.w	#70,d7
(1) 2516/    144C : 6C00 00C2           		bge	.mk_spr
(1) 2517/    1450 : 302A 001E           		move.w	obj_frame(a2),d0
(1) 2518/    1454 : D040                		add.w	d0,d0
(1) 2519/    1456 : 3030 0000           		move.w	(a0,d0.w),d0
(1) 2520/    145A : D0C0                		adda	d0,a0
(1) 2521/    145C : 3A18                		move.w	(a0)+,d5
(1) 2522/    145E : 6700 00B0           		beq	.mk_spr
(1) 2523/    1462 : 9A7C 0001           		sub.w	#1,d5
(1) 2524/    1466 :                     .mk_pz:
(1) 2525/    1466 :                     	; TODO: H/V flip
(1) 2526/    1466 : 1018                		move.b	(a0)+,d0
(1) 2527/    1468 : 4880                		ext.w	d0
(1) 2528/    146A : D06A 000C           		add.w	obj_y(a2),d0
(1) 2529/    146E : D07C 0080           		add.w	#$80,d0
(1) 2530/    1472 : 1218                		move.b	(a0)+,d1
(1) 2531/    1474 : E149                		lsl.w	#8,d1
(1) 2532/    1476 : 8247                		or.w	d7,d1
(1) 2533/    1478 : 3418                		move.w	(a0)+,d2
(1) 2534/    147A : D46A 0014           		add.w	obj_vram(a2),d2
(1) 2535/    147E : D0FC 0002           		adda	#2,a0
(1) 2536/    1482 : 3618                		move.w	(a0)+,d3
(1) 2537/    1484 : D66A 0008           		add.w	obj_x(a2),d3
(1) 2538/    1488 : D67C 0080           		add.w	#$80,d3
(1) 2539/    148C : 3CC0                		move.w	d0,(a6)+
(1) 2540/    148E : 3CC1                		move.w	d1,(a6)+
(1) 2541/    1490 : 3CC2                		move.w	d2,(a6)+
(1) 2542/    1492 : 3CC3                		move.w	d3,(a6)+
(1) 2543/    1494 : DE7C 0001           		add.w	#1,d7
(1) 2544/    1498 : 51CD FFCC           		dbf	d5,.mk_pz
(1) 2545/    149C : 6072                		bra.s	.mk_spr
(1) 2546/    149E :                     
(1) 2547/    149E :                     .mars_mode:
(1) 2548/    149E : 2958 0010           		move.l	(a0)+,marsspr_data(a4)
(1) 2549/    14A2 : 3958 0008           		move.w	(a0)+,marsspr_dwidth(a4)
(1) 2550/    14A6 : 3958 000A           		move.w	(a0)+,marsspr_indx(a4)
(1) 2551/    14AA : 1418                		move.b	(a0)+,d2
(1) 2552/    14AC : 1618                		move.b	(a0)+,d3
(1) 2553/    14AE : 1942 0002           		move.b	d2,marsspr_xs(a4)
(1) 2554/    14B2 : 1943 0003           		move.b	d3,marsspr_ys(a4)
(1) 2555/    14B6 : 302A 001E           		move.w	obj_frame(a2),d0	; Read frame
(1) 2556/    14BA : 1880                		move.b	d0,marsspr_xfrm(a4)
(1) 2557/    14BC : E058                		ror.w	#8,d0
(1) 2558/    14BE : 1940 0001           		move.b	d0,marsspr_yfrm(a4)
(1) 2559/    14C2 : 382A 0008           		move.w	obj_x(a2),d4
(1) 2560/    14C6 : 3A2A 000C           		move.w	obj_y(a2),d5
(1) 2561/    14CA : C47C 00FF           		and.w	#$FF,d2
(1) 2562/    14CE : C67C 00FF           		and.w	#$FF,d3
(1) 2563/    14D2 : E24A                		lsr.w	#1,d2
(1) 2564/    14D4 : E24B                		lsr.w	#1,d3
(1) 2565/    14D6 :                     ; 		divu.w	#2,d2			; **
(1) 2566/    14D6 : 9842                		sub.w	d2,d4
(1) 2567/    14D8 :                     ; 		divu.w	#2,d3			; **
(1) 2568/    14D8 : 9A43                		sub.w	d3,d5
(1) 2569/    14DA :                     ; 		move.l	obj_size(a2),d2		; d2 - UDLR sizes
(1) 2570/    14DA :                     ; 		move.w	d2,d3			; Grab LR
(1) 2571/    14DA :                     ; 		lsr.w	#5,d3
(1) 2572/    14DA :                     ; 		and.w	#%11111000,d3
(1) 2573/    14DA :                     ; 		sub.w	d3,d4			; Subtract X
(1) 2574/    14DA :                     ; 		swap	d2
(1) 2575/    14DA :                     ; 		move.w	d2,d3			; Grab UD
(1) 2576/    14DA :                     ; 		lsr.w	#8,d3
(1) 2577/    14DA :                     ; 		lsl.b	#3,d3
(1) 2578/    14DA :                     ; 		and.w	#$FF,d3
(1) 2579/    14DA :                     ; 		sub.w	d3,d5			; Subtract Y
(1) 2580/    14DA : 43F8 B022           		lea	(RAM_BgBufferM),a1
(1) 2581/    14DE : 9869 0030           		sub.w	md_bg_x(a1),d4
(1) 2582/    14E2 : 9A69 0034           		sub.w	md_bg_y(a1),d5
(1) 2583/    14E6 : 3944 0004           		move.w	d4,marsspr_x(a4)
(1) 2584/    14EA : 3945 0006           		move.w	d5,marsspr_y(a4)
(1) 2585/    14EE : 7800                		moveq	#0,d4
(1) 2586/    14F0 : 082A 0000 0023      		btst	#bitobj_flipH,obj_set(a2)
(1) 2587/    14F6 : 6704                		beq.s	.flip_h
(1) 2588/    14F8 : 08C4 0000           		bset	#0,d4
(1) 2589/    14FC :                     .flip_h:
(1) 2590/    14FC : 082A 0001 0023      		btst	#bitobj_flipV,obj_set(a2)
(1) 2591/    1502 : 6704                		beq.s	.flip_v
(1) 2592/    1504 : 08C4 0001           		bset	#1,d4
(1) 2593/    1508 :                     .flip_v:
(1) 2594/    1508 : 3944 000C           		move.w	d4,marsspr_flags(a4)
(1) 2595/    150C : D8FC 0014           		adda	#sizeof_marsspr,a4	; Next SuperSprite
(1) 2596/    1510 :                     .mk_spr:
(1) 2597/    1510 : 425D                		clr.w	(a5)+			; Clear request
(1) 2598/    1512 : 51CE FF1C           		dbf	d6,.next
(1) 2599/    1516 :                     .finish:
(1) 2600/    1516 : 4DF8 9FD4           		lea	(RAM_Sprites),a6	; a6 - Genesis sprites
(1) 2601/    151A : 3C07                		move.w	d7,d6
(1) 2602/    151C : BE7C 0046           		cmp.w	#70,d7
(1) 2603/    1520 : 6C0A                		bge.s	.ran_out
(1) 2604/    1522 : 9C7C 0001           		sub.w	#1,d6
(1) 2605/    1526 : E74E                		lsl.w	#3,d6
(1) 2606/    1528 : DCC6                		adda	d6,a6
(1) 2607/    152A : 4296                		clr.l	(a6)			; TODO: endoflist check
(1) 2608/    152C :                     .ran_out:
(1) 2609/    152C : 4E75                		rts
(1) 2610/    152E :                     
(1) 2611/    152E :                     ; ----------------------------------------------------------------
(1) 2612/    152E :                     ; Subroutines
(1) 2613/    152E :                     ; ----------------------------------------------------------------
(1) 2614/    152E :                     
(1) 2615/    152E :                     ; --------------------------------------------------------
(1) 2616/    152E :                     ; object_Display
(1) 2617/    152E :                     ;
(1) 2618/    152E :                     ; Builds a sprite using map data specified in
(1) 2619/    152E :                     ; obj_map(a6)
(1) 2620/    152E :                     ;
(1) 2621/    152E :                     ; *** GENESIS map ***
(1) 2622/    152E :                     ; mapdata:
(1) 2623/    152E :                     ;       dc.w .frame0-mapdata
(1) 2624/    152E :                     ;       dc.w .frame1-mapdata
(1) 2625/    152E :                     ;       ...
(1) 2626/    152E :                     ; .frame0:
(1) 2627/    152E :                     ;       dc.w numofpz
(1) 2628/    152E :                     ;       dc.b YY,SS
(1) 2629/    152E :                     ;       dc.w vram_normal
(1) 2630/    152E :                     ;       dc.w vram_half
(1) 2631/    152E :                     ;       dc.w XXXX
(1) 2632/    152E :                     ;       align 2
(1) 2633/    152E :                     ;
(1) 2634/    152E :                     ; *** 32X map ***
(1) 2635/    152E :                     ; mapdata:
(1) 2636/    152E :                     ; 	dc.l SH2_ADDR|TH ; Spritesheet location (TH opt.)
(1) 2637/    152E :                     ; 	dc.w 512	 ; Spritesheet WIDTH
(1) 2638/    152E :                     ; 	dc.b 64,72	 ; Frame width and height
(1) 2639/    152E :                     ; 	dc.w $80	 ; Palette index
(1) 2640/    152E :                     ;
(1) 2641/    152E :                     ; obj_frame(a6) is in YYXX direction
(1) 2642/    152E :                     ;
(1) 2643/    152E :                     ; Input:
(1) 2644/    152E :                     ; a6 - Object
(1) 2645/    152E :                     ;
(1) 2646/    152E :                     ; Uses:
(1) 2647/    152E :                     ; a5,d7
(1) 2648/    152E :                     ; --------------------------------------------------------
(1) 2649/    152E :                     
(1) 2650/    152E :                     object_Display:
(1) 2651/    152E : 4BF8 9B54           		lea	(RAM_ObjDispList),a5
(1) 2652/    1532 : 3E3C 000F           		move.w	#MAX_MDOBJ-1,d7
(1) 2653/    1536 :                     .srch:
(1) 2654/    1536 : 4A55                		tst.w	(a5)
(1) 2655/    1538 : 6708                		beq.s	.this_one
(1) 2656/    153A : DAFC 0002           		adda	#2,a5
(1) 2657/    153E : 51CF FFF6           		dbf	d7,.srch
(1) 2658/    1542 :                     .this_one:
(1) 2659/    1542 : 3A8E                		move.w	a6,(a5)
(1) 2660/    1544 : 4E75                		rts
(1) 2661/    1546 :                     
(1) 2662/    1546 :                     ; --------------------------------------------------------
(1) 2663/    1546 :                     ; object_MkSprPz
(1) 2664/    1546 :                     ;
(1) 2665/    1546 :                     ; Makes separate sprite pieces using
(1) 2666/    1546 :                     ;
(1) 2667/    1546 :                     ; Input:
(1) 2668/    1546 :                     ; d0 - X pos
(1) 2669/    1546 :                     ; d1 - Y pos
(1) 2670/    1546 :                     ; d2 - VRAM
(1) 2671/    1546 :                     ; d3 - Size
(1) 2672/    1546 :                     :
(1) 2673/    1546 :                     ; Uses:
(1) 2674/    1546 :                     ; a5,d7
(1) 2675/    1546 :                     ; --------------------------------------------------------
(1) 2676/    1546 :                     
(1) 2677/    1546 :                     object_MkSprPz:
(1) 2678/    1546 : 3E38 A994           		move.w	(RAM_SprDrwCntr).w,d7
(1) 2679/    154A : BE7C 0046           		cmp.w	#70,d7
(1) 2680/    154E : 6C22                		bge.s	.nope
(1) 2681/    1550 : E74F                		lsl.w	#3,d7
(1) 2682/    1552 : 4BF8 9B74           		lea	(RAM_SprDrwPz),a5
(1) 2683/    1556 : DAC7                		adda	d7,a5
(1) 2684/    1558 : D07C 0080           		add.w	#$80,d0
(1) 2685/    155C : D27C 0080           		add.w	#$80,d1
(1) 2686/    1560 : C67C 00FF           		and.w	#$FF,d3
(1) 2687/    1564 :                     ; 		lsl.w	#8,d3
(1) 2688/    1564 : 3AC1                		move.w	d1,(a5)+
(1) 2689/    1566 : 3AC3                		move.w	d3,(a5)+
(1) 2690/    1568 : 3AC2                		move.w	d2,(a5)+
(1) 2691/    156A : 3AC0                		move.w	d0,(a5)+
(1) 2692/    156C : 0678 0001 A994      		add.w	#1,(RAM_SprDrwCntr).w
(1) 2693/    1572 :                     .nope:
(1) 2694/    1572 : 4E75                		rts
(1) 2695/    1574 :                     
(1) 2696/    1574 :                     ; --------------------------------------------------------
(1) 2697/    1574 :                     ; Object_Animate
(1) 2698/    1574 :                     ;
(1) 2699/    1574 :                     ; Animates the sprite
(1) 2700/    1574 :                     ;
(1) 2701/    1574 :                     ; Input
(1) 2702/    1574 :                     ; a0 | LONG - Animation data
(1) 2703/    1574 :                     ;
(1) 2704/    1574 :                     ; Output
(1) 2705/    1574 :                     ; d0 | WORD - Frame
(1) 2706/    1574 :                     ;
(1) 2707/    1574 :                     ; Uses:
(1) 2708/    1574 :                     ; d2
(1) 2709/    1574 :                     ; --------------------------------------------------------
(1) 2710/    1574 :                     
(1) 2711/    1574 :                     ; NOTE: to restart an animation
(1) 2712/    1574 :                     ; clear obj_anim_indx(a6) manually
(1) 2713/    1574 :                     
(1) 2714/    1574 :                     Object_Animate:
(1) 2715/    1574 :                     ;  		tst.l	d1
(1) 2716/    1574 :                     ;   		beq.s	.return
(1) 2717/    1574 : 7400                 		moveq	#0,d2
(1) 2718/    1576 : 142E 001D            		move.b	obj_anim_id+1(a6),d2
(1) 2719/    157A : B42E 001C            		cmp.b	obj_anim_id(a6),d2
(1) 2720/    157E : 670E                 		beq.s	.sameThing
(1) 2721/    1580 : 1D6E 001C 001D       		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2722/    1586 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2723/    158A : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2724/    158E :                     .sameThing:
(1) 2725/    158E : 142E 001C            		move.b	obj_anim_id(a6),d2
(1) 2726/    1592 : B43C 00FF            		cmp.b	#-1,d2
(1) 2727/    1596 : 6748                 		beq.s	.return
(1) 2728/    1598 : D442                 		add.w	d2,d2
(1) 2729/    159A : 3430 2000            		move.w	(a0,d2.w),d2
(1) 2730/    159E : 41F0 2000            		lea	(a0,d2.w),a0
(1) 2731/    15A2 :                     
(1) 2732/    15A2 : 3418                 		move.w	(a0)+,d2
(1) 2733/    15A4 : B47C FFFF            		cmp.w	#-1,d2
(1) 2734/    15A8 : 670C                 		beq.s	.keepspd
(1) 2735/    15AA : 042E 0001 0020       		sub.b	#1,obj_anim_spd(a6)
(1) 2736/    15B0 : 6A2E                 		bpl.s	.return
(1) 2737/    15B2 : 1D42 0020           		move.b	d2,obj_anim_spd(a6)
(1) 2738/    15B6 :                     .keepspd:
(1) 2739/    15B6 : 7200                 		moveq	#0,d1
(1) 2740/    15B8 : 342E 001A            		move.w	obj_anim_indx(a6),d2
(1) 2741/    15BC : D442                 		add.w	d2,d2
(1) 2742/    15BE : 3210                 		move.w	(a0),d1
(1) 2743/    15C0 : D0C2                 		adda	d2,a0
(1) 2744/    15C2 : 3010                 		move.w	(a0),d0
(1) 2745/    15C4 : B07C FFFF            		cmp.w	#-1,d0
(1) 2746/    15C8 : 6718                 		beq.s	.noAnim		; loop
(1) 2747/    15CA : B07C FFFE            		cmp.w	#-2,d0
(1) 2748/    15CE : 6720                 		beq.s	.lastFrame	; finish
(1) 2749/    15D0 : B07C FFFD            		cmp.w	#-3,d0
(1) 2750/    15D4 : 6720                 		beq.s	.goToFrame
(1) 2751/    15D6 :                     
(1) 2752/    15D6 : 3D40 001E            		move.w	d0,obj_frame(a6)
(1) 2753/    15DA : 066E 0001 001A       		add.w	#1,obj_anim_indx(a6)
(1) 2754/    15E0 :                     .return:
(1) 2755/    15E0 : 4E75                 		rts
(1) 2756/    15E2 :                     
(1) 2757/    15E2 :                     .noAnim:
(1) 2758/    15E2 : 3D7C 0001 001A       		move.w	#1,obj_anim_indx(a6)
(1) 2759/    15E8 : 3001                 		move.w	d1,d0
(1) 2760/    15EA : 3D40 001E            		move.w	d0,obj_frame(a6)
(1) 2761/    15EE : 4E75                		rts
(1) 2762/    15F0 :                     .lastFrame:
(1) 2763/    15F0 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2764/    15F4 : 4E75                		rts
(1) 2765/    15F6 :                     .goToFrame:
(1) 2766/    15F6 : 426E 001A           		clr.w	obj_anim_indx(a6)
(1) 2767/    15FA : 3D68 0002 001A      		move.w	2(a0),obj_anim_indx(a6)
(1) 2768/    1600 : 4E75                		rts
(1) 2769/    1602 :                     
(1) 2770/    1602 :                     ; --------------------------------------------------------
(1) 2771/    1602 :                     ; object_Speed
(1) 2772/    1602 :                     ;
(1) 2773/    1602 :                     ; Moves the object using speed settings
(1) 2774/    1602 :                     ;
(1) 2775/    1602 :                     ; Input:
(1) 2776/    1602 :                     ; a6 - Object
(1) 2777/    1602 :                     ;
(1) 2778/    1602 :                     ; Uses:
(1) 2779/    1602 :                     ; d7
(1) 2780/    1602 :                     ; --------------------------------------------------------
(1) 2781/    1602 :                     
(1) 2782/    1602 :                     object_UpdX:
(1) 2783/    1602 : 7E00                		moveq	#0,d7
(1) 2784/    1604 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2785/    1608 : 48C7                		ext.l	d7
(1) 2786/    160A : E187                		asl.l	#8,d7
(1) 2787/    160C : DFAE 0008           		add.l	d7,obj_x(a6)
(1) 2788/    1610 : 4E75                		rts
(1) 2789/    1612 :                     object_Speed:
(1) 2790/    1612 : 61EE                		bsr.s	object_UpdX
(1) 2791/    1614 :                     object_UpdY:
(1) 2792/    1614 : 7E00                		moveq	#0,d7
(1) 2793/    1616 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2794/    161A : 48C7                		ext.l	d7
(1) 2795/    161C : E187                		asl.l	#8,d7
(1) 2796/    161E : DFAE 000C           		add.l	d7,obj_y(a6)
(1) 2797/    1622 : 4E75                		rts
(1) 2798/    1624 :                     
(1) 2799/    1624 :                     ; --------------------------------------------------------
(1) 2800/    1624 :                     ; object_ColM_Floor
(1) 2801/    1624 :                     ;
(1) 2802/    1624 :                     ; Check object collision on 32X map's floor
(1) 2803/    1624 :                     ;
(1) 2804/    1624 :                     ; Input:
(1) 2805/    1624 :                     ; a6 - Object to check
(1) 2806/    1624 :                     ;
(1) 2807/    1624 :                     ; Returns:
(1) 2808/    1624 :                     ; beq  - No collision
(1) 2809/    1624 :                     ; bne  - Found collision
(1) 2810/    1624 :                     ; d4.b - Collision block number
(1) 2811/    1624 :                     ; d5.w - Y-pos center snap
(1) 2812/    1624 :                     ;
(1) 2813/    1624 :                     ; Uses:
(1) 2814/    1624 :                     ; d4-d7,a4-a5
(1) 2815/    1624 :                     ; --------------------------------------------------------
(1) 2816/    1624 :                     
(1) 2817/    1624 :                     ; 32X MAP SIDE
(1) 2818/    1624 :                     
(1) 2819/    1624 :                     object_ColM_Floor:
(1) 2820/    1624 : 4BF8 B022           		lea	(RAM_BgBufferM),a5
(1) 2821/    1628 : 7A00                		moveq	#0,d5
(1) 2822/    162A : 7800                		moveq	#0,d4
(1) 2823/    162C : 286D 002C           		move.l	md_bg_col(a5),a4
(1) 2824/    1630 : 3E2D 000C           		move.w	md_bg_wf(a5),d7
(1) 2825/    1634 : 9E7C 0001           		sub.w	#1,d7
(1) 2826/    1638 : 382E 0008           		move.w	obj_x(a6),d4
(1) 2827/    163C : 6A02                		bpl.s	.v_x
(1) 2828/    163E : 4244                		clr.w	d4
(1) 2829/    1640 :                     .v_x:
(1) 2830/    1640 : B847                		cmp.w	d7,d4
(1) 2831/    1642 : 6D02                		blt.s	.v_xr
(1) 2832/    1644 : 3807                		move.w	d7,d4
(1) 2833/    1646 :                     .v_xr:
(1) 2834/    1646 : 3E2D 000E           		move.w	md_bg_hf(a5),d7
(1) 2835/    164A : 9E7C 0001           		sub.w	#1,d7
(1) 2836/    164E : 3A2E 000C           		move.w	obj_y(a6),d5
(1) 2837/    1652 : 6A02                		bpl.s	.v_y
(1) 2838/    1654 : 4245                		clr.w	d5
(1) 2839/    1656 :                     .v_y:
(1) 2840/    1656 : BA47                		cmp.w	d7,d5
(1) 2841/    1658 : 6D02                		blt.s	.v_yd
(1) 2842/    165A : 3A07                		move.w	d7,d5
(1) 2843/    165C :                     .v_yd:
(1) 2844/    165C : 2E2E 0004           		move.l	obj_size(a6),d7
(1) 2845/    1660 : 4847                		swap	d7		; Add Y
(1) 2846/    1662 : CE7C 00FF           		and.w	#$FF,d7
(1) 2847/    1666 : 3C07                		move.w	d7,d6
(1) 2848/    1668 : E74E                		lsl.w	#3,d6
(1) 2849/    166A : DA46                		add.w	d6,d5
(1) 2850/    166C :                     
(1) 2851/    166C :                     	; d5 - Ypos + size
(1) 2852/    166C :                     	; d6 - Xpos
(1) 2853/    166C :                     	; d7 - Dsize/2
(1) 2854/    166C :                     
(1) 2855/    166C :                     	; 16x16 only
(1) 2856/    166C : E24F                		lsr.w	#1,d7		; Dsize/2
(1) 2857/    166E : E844                		asr.w	#4,d4		; X >> 16
(1) 2858/    1670 : D9C4                		add.l	d4,a4		; Add X
(1) 2859/    1672 : 2805                		move.l	d5,d4		; Copy d5 to d4
(1) 2860/    1674 : E844                		asr.w	#4,d4		; Y >> 16
(1) 2861/    1676 : 7C00                		moveq	#0,d6
(1) 2862/    1678 : 3C2D 0008           		move.w	md_bg_w(a5),d6	; d6: map width
(1) 2863/    167C : C8C6                		mulu.w	d6,d4		; (Y>>16)*(mwidth)
(1) 2864/    167E : D9C4                		add.l	d4,a4		; Add Y
(1) 2865/    1680 : CA7C FFF0           		and.w	#-$10,d5	; Filter Y Snap
(1) 2866/    1684 : 1814                		move.b	(a4),d4		; d4: Start ID
(1) 2867/    1686 : 99C6                		sub.l	d6,a4
(1) 2868/    1688 : 9E7C 0001           		sub.w	#1,d7		; Dsize - 1
(1) 2869/    168C : 6B14                		bmi.s	.valid
(1) 2870/    168E :                     .next:
(1) 2871/    168E : 4847                		swap	d7
(1) 2872/    1690 : 1E14                		move.b	(a4),d7		; New ID != 0?
(1) 2873/    1692 : 6706                		beq.s	.blnk
(1) 2874/    1694 : 1807                		move.b	d7,d4		; Set new ID
(1) 2875/    1696 : 9A7C 0010           		sub.w	#$10,d5		; Decrement Y Snap
(1) 2876/    169A :                     .blnk:
(1) 2877/    169A : 99C6                		sub.l	d6,a4		; Decrement width
(1) 2878/    169C : 4847                		swap	d7
(1) 2879/    169E : 51CF FFEE           		dbf	d7,.next
(1) 2880/    16A2 :                     .valid:
(1) 2881/    16A2 : C87C 00FF           		and.w	#$FF,d4		; Filter ID
(1) 2882/    16A6 : 4E75                		rts
(1) 2883/    16A8 :                     
(1) 2884/    16A8 :                     ; ----------------------------------------
(1) 2885/    16A8 :                     ; object_SetColFloor
(1) 2886/    16A8 :                     ;
(1) 2887/    16A8 :                     ; Snaps the object to the map's floor.
(1) 2888/    16A8 :                     ;
(1) 2889/    16A8 :                     ; Call object_ColM_Floor first
(1) 2890/    16A8 :                     ;
(1) 2891/    16A8 :                     ; Input:
(1) 2892/    16A8 :                     ; d4.b - Collision block
(1) 2893/    16A8 :                     ; d5.w - Y-pos center snap
(1) 2894/    16A8 :                     ; ----------------------------------------
(1) 2895/    16A8 :                     
(1) 2896/    16A8 :                     object_SetColFloor:
(1) 2897/    16A8 : C87C 00FF           		and.w	#$FF,d4
(1) 2898/    16AC : 6744                		beq.s	.no_col
(1) 2899/    16AE : E94C                		lsl.w	#4,d4
(1) 2900/    16B0 : 3E2E 0008           		move.w	obj_x(a6),d7		; Grab CENTER X
(1) 2901/    16B4 : CE7C 000F           		and.w	#$0F,d7			; limit to 16
(1) 2902/    16B8 : 41FA 003A           		lea	slope_data_16(pc),a0
(1) 2903/    16BC : D0C4                		adda	d4,a0
(1) 2904/    16BE : 1830 7000           		move.b	(a0,d7.w),d4
(1) 2905/    16C2 : C87C 000F           		and.w	#$0F,d4
(1) 2906/    16C6 :                     
(1) 2907/    16C6 : 7C00                		moveq	#0,d6
(1) 2908/    16C8 : 3E2E 000C           		move.w	obj_y(a6),d7
(1) 2909/    16CC : 2C2E 0004           		move.l	obj_size(a6),d6
(1) 2910/    16D0 : 4846                		swap	d6
(1) 2911/    16D2 : CC7C 00FF           		and.w	#$FF,d6
(1) 2912/    16D6 : E74E                		lsl.w	#3,d6
(1) 2913/    16D8 : 9A46                		sub.w	d6,d5
(1) 2914/    16DA : DA44                		add.w	d4,d5	; target slope
(1) 2915/    16DC : BE45                		cmp.w	d5,d7
(1) 2916/    16DE : 6F12                		ble.s	.no_col
(1) 2917/    16E0 : 3C3C 0800           		move.w	#$800,d6
(1) 2918/    16E4 : 3D46 0018           		move.w	d6,obj_y_spd(a6)
(1) 2919/    16E8 :                     ; .set_me:
(1) 2920/    16E8 :                     ; 		move.w	obj_x_spd(a6),d6
(1) 2921/    16E8 :                     ; 		bpl.s	.x_spd
(1) 2922/    16E8 :                     ; 		neg.w	d6
(1) 2923/    16E8 :                     ; .x_spd:
(1) 2924/    16E8 :                     
(1) 2925/    16E8 : 08AE 0000 0024      		bclr	#bitobj_air,obj_status(a6)
(1) 2926/    16EE : 3D45 000C           		move.w	d5,obj_y(a6)
(1) 2927/    16F2 :                     .no_col:
(1) 2928/    16F2 : 4E75                		rts
(1) 2929/    16F4 :                     
(1) 2930/    16F4 :                     ; ----------------------------------------
(1) 2931/    16F4 :                     
(1) 2932/    16F4 :                     ; Slope data 16x16
(1) 2933/    16F4 :                     slope_data_16:
(1) 2934/    16F4 : 0000 0000 0000 0000 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    0000 0000 0000 0000 
(1) 2935/    1704 : 0000 0000 0000 0000 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    0000 0000 0000 0000 
(1) 2936/    1714 : 0000 0000 0000 0000 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    0000 0000 0000 0000 
(1) 2937/    1724 : 0F0E 0D0C 0B0A 0908 		dc.b 15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
                    0706 0504 0302 0100 
(1) 2938/    1734 : 0001 0203 0405 0607 		dc.b  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15
                    0809 0A0B 0C0D 0E0F 
(1) 2939/    1744 : 0F0F 0E0E 0D0D 0C0C 		dc.b 15,15,14,14,13,13,12,12,11,11,10,10, 9, 9, 8, 8
                    0B0B 0A0A 0909 0808 
(1) 2940/    1754 : 0707 0606 0505 0404 		dc.b  7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0
                    0303 0202 0101 0000 
(1) 2941/    1764 : 0000 0101 0202 0303 		dc.b  0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
                    0404 0505 0606 0707 
(1) 2942/    1774 : 0808 0909 0A0A 0B0B 		dc.b  8, 8, 9, 9,10,10,11,11,12,12,13,13,14,14,15,15
                    0C0C 0D0D 0E0E 0F0F 
(1) 2943/    1784 :                     		align 2
(1) 2944/    1784 :                     
      32/    1784 :                     		include	"system/md/system.asm"
(1)    1/    1784 :                     ; ====================================================================
(1)    2/    1784 :                     ; ----------------------------------------------------------------
(1)    3/    1784 :                     ; Genesis system routines
(1)    4/    1784 :                     ; ----------------------------------------------------------------
(1)    5/    1784 :                     
(1)    6/    1784 :                     ; ====================================================================
(1)    7/    1784 :                     ; ----------------------------------------------------------------
(1)    8/    1784 :                     ; RAM section
(1)    9/    1784 :                     ; ----------------------------------------------------------------
(1)   10/    1784 :                     
(1)   11/    1784 : (MACRO)             		struct RAM_MdSystem
(1)   11/    1784 : =$1784              GLBL_LASTPC     set *
(1)   11/    1784 :                                     dephase
(1)   11/    1784 : =$1784              GLBL_LASTORG    set *
(1)   11/FFFFFFFFFFFFA9C6 :                                     phase RAM_MDSYSTEM
(1)   12/FFFFFFFFFFFFA9C6 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   13/FFFFFFFFFFFFAA06 :                     RAM_SaveData	ds.b $200			; SRAM data cache
(1)   14/FFFFFFFFFFFFAC06 :                     RAM_DmaCode	ds.b $200
(1)   15/FFFFFFFFFFFFAE06 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   16/FFFFFFFFFFFFAE0A :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   17/FFFFFFFFFFFFAE0E :                     RAM_initflug	ds.l 1				; "INIT" flag
(1)   18/FFFFFFFFFFFFAE12 :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   19/FFFFFFFFFFFFAE18 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   20/FFFFFFFFFFFFAE1E :                     RAM_MdVBlkWait	ds.w 1
(1)   21/FFFFFFFFFFFFAE20 :                     RAM_SysFlags	ds.w 1				; Game engine flags (note: it's a byte)
(1)   22/FFFFFFFFFFFFAE22 :                     sizeof_mdsys	ds.l 0
(1)   23/FFFFFFFFFFFFAE22 : (MACRO)             		finish
(1)   23/FFFFFFFFFFFFA9C6 :                                     !org GLBL_LASTORG
(1)   23/    1784 :                                     phase GLBL_LASTPC
(1)   24/    1784 :                     
(1)   25/    1784 :                     ; ====================================================================
(1)   26/    1784 :                     ; --------------------------------------------------------
(1)   27/    1784 :                     ; Init System
(1)   28/    1784 :                     ; 
(1)   29/    1784 :                     ; Uses:
(1)   30/    1784 :                     ; a0-a2,d0-d1
(1)   31/    1784 :                     ; --------------------------------------------------------
(1)   32/    1784 :                     
(1)   33/    1784 :                     System_Init:
(1)   34/    1784 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)   35/    1788 : 40E7                		move.w	sr,-(sp)
(1)   36/    178A : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)   37/    1792 :                     .wait:
(1)   38/    1792 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(1)   39/    179A : 66F6                		bne.s	.wait
(1)   40/    179C : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)   41/    179E : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)   42/    17A4 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)   43/    17AA : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)   44/    17B0 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; Enable Z80
(1)   45/    17B8 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)   46/    17BC : 33C0 FFFF AE12       		move.w	d0,(RAM_MdMarsVInt).l
(1)   47/    17C2 : 33C0 FFFF AE18      		move.w	d0,(RAM_MdMarsHInt).l
(1)   48/    17C8 :                     ; 		move.l	#$56255769,d0		; Set these random values
(1)   49/    17C8 :                     ; 		move.l	#$95116102,d1
(1)   50/    17C8 :                     ; 		move.l	d0,(RAM_SysRandVal).l
(1)   51/    17C8 :                     ; 		move.l	d1,(RAM_SysRandSeed).l
(1)   52/    17C8 : 203C 0000 1C86      		move.l	#VInt_Default,d0	; Set default ints
(1)   53/    17CE : 223C 0000 1C9E      		move.l	#Hint_Default,d1
(1)   54/    17D4 : 6100 0400           		bsr	System_SetInts
(1)   55/    17D8 : 41F8 A9C6           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)   56/    17DC : 323C 0010           		move.w	#sizeof_input-1/2,d1
(1)   57/    17E0 : 7000                		moveq	#0,d0
(1)   58/    17E2 :                     .clrinput:
(1)   59/    17E2 : 30FC 0000           		move.w	#0,(a0)+
(1)   60/    17E6 : 51C9 FFFA           		dbf	d1,.clrinput
(1)   61/    17EA : 46DF                		move.w	(sp)+,sr
(1)   62/    17EC : 4E75                		rts
(1)   63/    17EE :                     
(1)   64/    17EE :                     ; 		lea	(vdp_ctrl),a6
(1)   65/    17EE :                     ; .wait_in:	move.w	(a6),d4
(1)   66/    17EE :                     ; 		btst	#bitVBlk,d4
(1)   67/    17EE :                     ; 		beq.s	.wait_in
(1)   68/    17EE :                     ; .wait_out:	move.w	(a6),d4
(1)   69/    17EE :                     ; 		btst	#bitVBlk,d4
(1)   70/    17EE :                     ; 		bne.s	.wait_out
(1)   71/    17EE :                     ; 		bra	System_MarsUpdate
(1)   72/    17EE :                     
(1)   73/    17EE :                     ; --------------------------------------------------------
(1)   74/    17EE :                     ; System_WaitFrame
(1)   75/    17EE :                     ;
(1)   76/    17EE :                     ; Call this to wait until the next frame.
(1)   77/    17EE :                     ;
(1)   78/    17EE :                     ; Before entering VBlank:
(1)   79/    17EE :                     ; - The DREQ section from here will be transfered
(1)   80/    17EE :                     ; to the 32X side then processed on the next
(1)   81/    17EE :                     ; frame.
(1)   82/    17EE :                     ;
(1)   83/    17EE :                     ; Inside VBlank this will:
(1)   84/    17EE :                     ; - Update the controller inputs
(1)   85/    17EE :                     ; - Transfer the Genesis palette, sprites and scroll
(1)   86/    17EE :                     ;   data from from RAM to VDP
(1)   87/    17EE :                     ;   (Doesn't require the RV bit)
(1)   88/    17EE :                     ; --------------------------------------------------------
(1)   89/    17EE :                     
(1)   90/    17EE :                     System_WaitFrame:
(1)   91/    17EE : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; <-- VSync IN
(1)   92/    17F4 : 3816                .wait_lag:	move.w	(a6),d4
(1)   93/    17F6 : 0804 0003           		btst	#bitVBlk,d4
(1)   94/    17FA : 66F8                		bne.s	.wait_lag
(1)   95/    17FC :                     ; 		bsr	Video_Mars_WaitFrame
(1)   96/    17FC : 6100 00BC           		bsr	System_MarsUpdate
(1)   97/    1800 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)   98/    1806 : 3816                .wait_in:	move.w	(a6),d4			; We are on DISPLAY, wait for VBlank
(1)   99/    1808 : 0804 0003           		btst	#bitVBlk,d4
(1)  100/    180C : 67F8                		beq.s	.wait_in
(1)  101/    180E : 6100 00AE           		bsr	System_Input		; Read inputs FIRST
(1)  102/    1812 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; *** DMA'd Scroll and Palette
(1)  103/    1818 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  104/    181C : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1)  105/    1820 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  106/    1824 : 3C87                		move.w	d7,(a6)
(1)  107/    1826 : 6100 0082           		bsr	System_DmaEnter_RAM
(1)  108/    182A : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  109/    1830 : 2CBC 96CD 9582      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  110/    1836 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  111/    183A : 3CBC 4000           		move.w	#$4000,(a6)
(1)  112/    183E : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  113/    1842 : 3C9F                		move.w	(sp)+,(a6)
(1)  114/    1844 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  115/    184A : 2CBC 96CB 95A2      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  116/    1850 : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  117/    1854 : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  118/    1858 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  119/    185C : 3C9F                		move.w	(sp)+,(a6)
(1)  120/    185E : 2CBC 9401 93C0      		move.l	#$940193C0,(a6)
(1)  121/    1864 : 2CBC 96CF 95EA      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  122/    186A : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  123/    186E : 3CBC 7800           		move.w	#$7800,(a6)
(1)  124/    1872 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  125/    1876 : 3C9F                		move.w	(sp)+,(a6)
(1)  126/    1878 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  127/    187E : 2CBC 96D2 951A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  128/    1884 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  129/    1888 : 3CBC C000           		move.w	#$C000,(a6)
(1)  130/    188C : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  131/    1890 : 3C9F                		move.w	(sp)+,(a6)
(1)  132/    1892 : 611A                		bsr	System_DmaExit_RAM
(1)  133/    1894 : 3E3C 8100           		move.w	#$8100,d7
(1)  134/    1898 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1).w,d7
(1)  135/    189C : 3C87                		move.w	d7,(a6)
(1)  136/    189E : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_Framecount).l
                    9740                
(1)  137/    18A8 : 4E75                		rts
(1)  138/    18AA :                     
(1)  139/    18AA :                     ; --------------------------------------------------------
(1)  140/    18AA :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  141/    18AA :                     ; (from): ROM or RAM
(1)  142/    18AA :                     ;
(1)  143/    18AA :                     ; Call to these labels BEFORE and AFTER doing
(1)  144/    18AA :                     ; DMA-to-VDP transers.
(1)  145/    18AA :                     ; These calls are not needed for FILL or COPY.
(1)  146/    18AA :                     ;
(1)  147/    18AA :                     ; ** For stock Genesis:
(1)  148/    18AA :                     ;  | The Z80 cannot read from ROM while the
(1)  149/    18AA :                     ;  | DMA ROM-to-VDP transfer is active.
(1)  150/    18AA :                     ;  | THIS INCLUDES RAM TRANSFERS
(1)  151/    18AA :                     ;  | ** Solution:
(1)  152/    18AA :                     ;  | STOP the Z80 entirely OR
(1)  153/    18AA :                     ;  | First stop, set a flag and turn ON the
(1)  154/    18AA :                     ;  | Z80 again, If the Z80 reads the flags it
(1)  155/    18AA :                     ;  | should be stuck on a loop until you clear
(1)  156/    18AA :                     ;  | the flag from here after finishing your
(1)  157/    18AA :                     ;  | DMA transfer(s)
(1)  158/    18AA :                     ;
(1)  159/    18AA :                     ; ** For the 32X:
(1)  160/    18AA :                     ;  | SAME rule for the Genesis, but this time the
(1)  161/    18AA :                     ;  | ROM-to-VDP transfer requires the RV bit to be set.
(1)  162/    18AA :                     ;  | (RAM transfers doesn't require this bit at all.)
(1)  163/    18AA :                     ;  | Setting the RV bit blocks the SH2 from accessing
(1)  164/    18AA :                     ;  | the ROM area, THIS ALSO affects the Z80.
(1)  165/    18AA :                     ;  | ** Solution:
(1)  166/    18AA :                     ;  | First, make sure the SH2 isn't reading from ROM
(1)  167/    18AA :                     ;  | while the bit is active, or it will read garbage
(1)  168/    18AA :                     ;  | data.
(1)  169/    18AA :                     ;  | In the case where you need to read from ROM
(1)  170/    18AA :                     ;  | a lot (Playing PWM's for example):
(1)  171/    18AA :                     ;  | First request an CMD interrupt and tell the
(1)  172/    18AA :                     ;  | SH2 to backup a small amount of sample data
(1)  173/    18AA :                     ;  | and temporally relocate the read point to the
(1)  174/    18AA :                     ;  | backup until you make another
(1)  175/    18AA :                     ;  | interrupt telling that you finished here and set
(1)  176/    18AA :                     ;  | RV back to 0.
(1)  177/    18AA :                     ;
(1)  178/    18AA :                     ; This is where you put your Sound driver's Z80 stop
(1)  179/    18AA :                     ; or pause calls go here
(1)  180/    18AA :                     ; --------------------------------------------------------
(1)  181/    18AA :                     
(1)  182/    18AA :                     System_DmaEnter_RAM:
(1)  183/    18AA : 6000 EACE           		bra	gemaDmaPause
(1)  184/    18AE :                     System_DmaExit_RAM:
(1)  185/    18AE : 6000 EAF2           		bra	gemaDmaResume
(1)  186/    18B2 :                     
(1)  187/    18B2 :                     ; --------------------------------------------------------
(1)  188/    18B2 :                     
(1)  189/    18B2 :                     System_DmaEnter_ROM:
(1)  190/    18B2 : 6000 EB08           		bra	gemaDmaPauseRom
(1)  191/    18B6 :                     System_DmaExit_ROM:
(1)  192/    18B6 : 6000 EB26           		bra	gemaDmaResumeRom
(1)  193/    18BA :                     
(1)  194/    18BA :                     ; ====================================================================
(1)  195/    18BA :                     ; ----------------------------------------------------------------
(1)  196/    18BA :                     ; 32X ONLY
(1)  197/    18BA :                     ; ----------------------------------------------------------------
(1)  198/    18BA :                     
(1)  199/    18BA :                     ; --------------------------------------------------------
(1)  200/    18BA :                     ; System_MarsUpdate
(1)  201/    18BA :                     ; --------------------------------------------------------
(1)  202/    18BA :                     
(1)  203/    18BA :                     System_MarsUpdate:
(1)  209/    18BA : 4E75                		rts
(1)  211/    18BC :                     
(1)  212/    18BC :                     ; --------------------------------------------------------
(1)  213/    18BC :                     ; System_GrabRamCode
(1)  214/    18BC :                     ;
(1)  215/    18BC :                     ; Send new code to the USER side of RAM and
(1)  216/    18BC :                     ; jump into it.
(1)  217/    18BC :                     ;
(1)  218/    18BC :                     ; Input:
(1)  219/    18BC :                     ; d0 - Location of the RAM code to copy
(1)  220/    18BC :                     ;      in the 880000/900000 areas
(1)  221/    18BC :                     ; --------------------------------------------------------
(1)  222/    18BC :                     
(1)  223/    18BC :                     System_GrabRamCode:
(1)  234/    18BC : 4E75                		rts
(1)  236/    18BE :                     
(1)  237/    18BE :                     ; ====================================================================
(1)  238/    18BE :                     ; ----------------------------------------------------------------
(1)  239/    18BE :                     ; Subroutines
(1)  240/    18BE :                     ; ----------------------------------------------------------------
(1)  241/    18BE :                     
(1)  242/    18BE :                     ; --------------------------------------------------------
(1)  243/    18BE :                     ; System_Input
(1)  244/    18BE :                     ;
(1)  245/    18BE :                     ; Reads data from the Controller ports
(1)  246/    18BE :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  247/    18BE :                     ; 
(1)  248/    18BE :                     ; Uses:
(1)  249/    18BE :                     ; d4-d6,a4-a6
(1)  250/    18BE :                     ; --------------------------------------------------------
(1)  251/    18BE :                     
(1)  252/    18BE :                     System_Input:
(1)  253/    18BE :                     ; 		move.w	#$0100,(z80_bus).l
(1)  254/    18BE :                     .wait:
(1)  255/    18BE :                     ; 		btst	#0,(z80_bus).l
(1)  256/    18BE :                     ; 		bne.s	.wait
(1)  257/    18BE : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  258/    18C4 : 4DF8 A9C6           		lea	(RAM_InputData),a6	; a6 - Output
(1)  259/    18C8 : 6108                		bsr.s	.this_one
(1)  260/    18CA : DAFC 0002           		adda	#2,a5
(1)  261/    18CE : DCFC 0010           		adda	#sizeof_input,a6
(1)  262/    18D2 :                     ; 		bsr.s	.this_one
(1)  263/    18D2 :                     ; ; 		move.w	#0,(z80_bus).l
(1)  264/    18D2 :                     ; 		rts
(1)  265/    18D2 :                     
(1)  266/    18D2 :                     ; --------------------------------------------------------	
(1)  267/    18D2 :                     ; Read port
(1)  268/    18D2 :                     ; 
(1)  269/    18D2 :                     ; a5 - Current port
(1)  270/    18D2 :                     ; a6 - Output data
(1)  271/    18D2 :                     ; --------------------------------------------------------
(1)  272/    18D2 :                     
(1)  273/    18D2 :                     .this_one:
(1)  274/    18D2 : 6100 0166           		bsr	.pick_id
(1)  275/    18D6 : 1C84                		move.b	d4,pad_id(a6)
(1)  276/    18D8 : B87C 000F           		cmp.w	#$F,d4
(1)  277/    18DC : 670E                		beq.s	.exit
(1)  278/    18DE : C87C 000F           		and.w	#$F,d4
(1)  279/    18E2 : D844                		add.w	d4,d4
(1)  280/    18E4 : 3A3B 400C           		move.w	.list(pc,d4.w),d5
(1)  281/    18E8 : 4EFB 5008           		jmp	.list(pc,d5.w)
(1)  282/    18EC :                     .exit:
(1)  283/    18EC : 422E 0001           		clr.b	pad_ver(a6)
(1)  284/    18F0 : 4E75                		rts
(1)  285/    18F2 :                     
(1)  286/    18F2 :                     ; --------------------------------------------------------
(1)  287/    18F2 :                     ; Grab ID
(1)  288/    18F2 :                     ; --------------------------------------------------------
(1)  289/    18F2 :                     
(1)  290/    18F2 :                     .list:
(1)  291/    18F2 : FFFA                		dc.w .exit-.list	; $00
(1)  292/    18F4 : FFFA                		dc.w .exit-.list
(1)  293/    18F6 : FFFA                		dc.w .exit-.list
(1)  294/    18F8 : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  295/    18FA : FFFA                		dc.w .exit-.list	; $04
(1)  296/    18FC : FFFA                		dc.w .exit-.list
(1)  297/    18FE : FFFA                		dc.w .exit-.list
(1)  298/    1900 : FFFA                		dc.w .exit-.list
(1)  299/    1902 : FFFA                		dc.w .exit-.list	; $08
(1)  300/    1904 : FFFA                		dc.w .exit-.list
(1)  301/    1906 : FFFA                		dc.w .exit-.list
(1)  302/    1908 : FFFA                		dc.w .exit-.list
(1)  303/    190A : FFFA                		dc.w .exit-.list	; $0C
(1)  304/    190C : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  305/    190E : FFFA                		dc.w .exit-.list
(1)  306/    1910 : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  307/    1912 :                     
(1)  308/    1912 :                     ; --------------------------------------------------------
(1)  309/    1912 :                     ; ID $03
(1)  310/    1912 :                     ;
(1)  311/    1912 :                     ; Mega Mouse
(1)  312/    1912 :                     ; --------------------------------------------------------
(1)  313/    1912 :                     
(1)  314/    1912 :                     ; *** NOT TESTED ON HARDWARE ***
(1)  315/    1912 :                     .id_03:
(1)  316/    1912 : 1ABC 0020           		move.b	#$20,(a5)
(1)  317/    1916 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  318/    191C : 0815 0004           		btst	#4,(a5)
(1)  319/    1920 : 6700 0094           		beq.w	.invalid
(1)  320/    1924 : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  321/    1928 : 4E71                		nop
(1)  322/    192A : 4E71                		nop
(1)  323/    192C : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  324/    1930 : 4E71                		nop
(1)  325/    1932 : 4E71                		nop
(1)  326/    1934 : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  327/    1938 : 4E71                		nop
(1)  328/    193A : 4E71                		nop
(1)  329/    193C : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  330/    193E : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  331/    1942 : 4E71                		nop
(1)  332/    1944 : 4E71                		nop
(1)  333/    1946 : 1E15                		move.b	(a5),d7
(1)  334/    1948 : CE7C 000F            		and.w	#%1111,d7
(1)  335/    194C : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  336/    1950 : BF46                		eor.w	d7,d6
(1)  337/    1952 : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  338/    1956 : CC47                		and.w	d7,d6
(1)  339/    1958 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  340/    195C : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  341/    1960 : 4E71                		nop
(1)  342/    1962 : 4E71                		nop
(1)  343/    1964 : 1E15                		move.b	(a5),d7
(1)  344/    1966 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  345/    196A : CE7C 000F           		and.w	#%1111,d7
(1)  346/    196E : E94F                		lsl.w	#4,d7
(1)  347/    1970 : 4E71                		nop
(1)  348/    1972 : 1C15                		move.b	(a5),d6
(1)  349/    1974 : CC7C 000F           		and.w	#%1111,d6
(1)  350/    1978 : 8E46                		or.w	d6,d7
(1)  351/    197A : 0805 0000           		btst    #0,d5
(1)  352/    197E : 6704                		beq.s	.x_neg
(1)  353/    1980 : 4407                		neg.b	d7
(1)  354/    1982 : 4447                		neg.w	d7
(1)  355/    1984 :                     .x_neg:
(1)  356/    1984 : 3D47 0006           		move.w	d7,mouse_x(a6)
(1)  357/    1988 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  358/    198C : 4E71                		nop
(1)  359/    198E : 4E71                		nop
(1)  360/    1990 : 1E15                		move.b	(a5),d7
(1)  361/    1992 : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  362/    1996 : CE7C 000F           		and.w	#%1111,d7
(1)  363/    199A : E94F                		lsl.w	#4,d7
(1)  364/    199C : 4E71                		nop
(1)  365/    199E : 1C15                		move.b	(a5),d6
(1)  366/    19A0 : CC7C 000F           		and.w	#%1111,d6
(1)  367/    19A4 : 8E46                		or.w	d6,d7
(1)  368/    19A6 : 0805 0001           		btst    #1,d5
(1)  369/    19AA : 6704                		beq.s	.y_neg
(1)  370/    19AC : 4407                		neg.b	d7
(1)  371/    19AE : 4447                		neg.w	d7
(1)  372/    19B0 :                     .y_neg:
(1)  373/    19B0 : 4447                		neg.w	d7		; Reverse Y
(1)  374/    19B2 : 3D47 0008           		move.w	d7,mouse_y(a6)
(1)  375/    19B6 :                     
(1)  376/    19B6 :                     .invalid:
(1)  377/    19B6 : 1ABC 0060           		move.b	#$60,(a5)
(1)  378/    19BA : 4E75                		rts
(1)  379/    19BC :                     
(1)  380/    19BC :                     ; --------------------------------------------------------
(1)  381/    19BC :                     ; ID $0D
(1)  382/    19BC :                     ; 
(1)  383/    19BC :                     ; Normal controller: 3 button or 6 button.
(1)  384/    19BC :                     ; --------------------------------------------------------
(1)  385/    19BC :                     
(1)  386/    19BC :                     .id_0D:
(1)  387/    19BC : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  388/    19C0 : 4E71                		nop
(1)  389/    19C2 : 4E71                		nop
(1)  390/    19C4 : 1A15                		move.b	(a5),d5
(1)  391/    19C6 : CA7C 003F           		and.w	#%00111111,d5
(1)  392/    19CA : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  393/    19CE : 4E71                		nop
(1)  394/    19D0 : 4E71                		nop
(1)  395/    19D2 : 1815                		move.b	(a5),d4		; The following flips are for
(1)  396/    19D4 : E54C                		lsl.w	#2,d4		; the 6pad's internal counter:
(1)  397/    19D6 : C87C 00C0           		and.w	#%11000000,d4
(1)  398/    19DA : 8845                		or.w	d5,d4
(1)  399/    19DC : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  400/    19E0 : 4644                		not.w	d4
(1)  401/    19E2 : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  402/    19E6 : B905                		eor.b	d4,d5
(1)  403/    19E8 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  404/    19EC : 1D44 0003           		move.b	d4,on_hold+1(a6)
(1)  405/    19F0 : CA04                		and.b	d4,d5
(1)  406/    19F2 : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  407/    19F6 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  408/    19FA : 4E71                		nop
(1)  409/    19FC : 4E71                		nop
(1)  410/    19FE : 1815                		move.b	(a5),d4		; Grab ??|MXYZ
(1)  411/    1A00 : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  412/    1A04 : 4E71                  		nop
(1)  413/    1A06 : 4E71                  		nop
(1)  414/    1A08 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  415/    1A0A : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  416/    1A0E : 4E71                 		nop
(1)  417/    1A10 : 4E71                 		nop
(1)  418/    1A12 : CC7C 000F           		and.w	#$F,d6
(1)  419/    1A16 : E44E                		lsr.w	#2,d6
(1)  420/    1A18 : CC7C 0001           		and.w	#1,d6
(1)  421/    1A1C : 6716                		beq.s	.oldpad
(1)  422/    1A1E : 4604                		not.b	d4
(1)  423/    1A20 : C87C 000F            		and.w	#%1111,d4
(1)  424/    1A24 : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  425/    1A28 : B905                		eor.b	d4,d5
(1)  426/    1A2A : 1D44 0002           		move.b	d4,on_hold(a6)
(1)  427/    1A2E : CA04                		and.b	d4,d5
(1)  428/    1A30 : 1D45 0004           		move.b	d5,on_press(a6)
(1)  429/    1A34 :                     .oldpad:
(1)  430/    1A34 : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  431/    1A38 : 4E75                		rts
(1)  432/    1A3A :                     		
(1)  433/    1A3A :                     ; --------------------------------------------------------
(1)  434/    1A3A :                     ; Grab ID
(1)  435/    1A3A :                     ; --------------------------------------------------------
(1)  436/    1A3A :                     
(1)  437/    1A3A :                     .pick_id:
(1)  438/    1A3A : 7800                		moveq	#0,d4
(1)  439/    1A3C : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  440/    1A40 : 4E71                		nop
(1)  441/    1A42 : 4E71                		nop
(1)  442/    1A44 : 610A                		bsr	.read
(1)  443/    1A46 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  444/    1A4A : 4E71                		nop
(1)  445/    1A4C : 4E71                		nop
(1)  446/    1A4E : D844                		add.w	d4,d4
(1)  447/    1A50 :                     .read:
(1)  448/    1A50 : 1A15                		move.b	(a5),d5
(1)  449/    1A52 : 1C05                		move.b	d5,d6
(1)  450/    1A54 : CC3C 000C           		and.b	#$C,d6
(1)  451/    1A58 : 6702                		beq.s	.step_1
(1)  452/    1A5A : 5244                		addq.w	#1,d4
(1)  453/    1A5C :                     .step_1:
(1)  454/    1A5C : D844                		add.w	d4,d4
(1)  455/    1A5E : 1C05                		move.b	d5,d6
(1)  456/    1A60 : CC7C 0003           		and.w	#3,d6
(1)  457/    1A64 : 6702                		beq.s	.step_2
(1)  458/    1A66 : 5244                		addq.w	#1,d4
(1)  459/    1A68 :                     .step_2:
(1)  460/    1A68 : 4E75                		rts
(1)  461/    1A6A :                     
(1)  462/    1A6A :                     ; --------------------------------------------------------
(1)  463/    1A6A :                     ; System_Random
(1)  464/    1A6A :                     ; 
(1)  465/    1A6A :                     ; Makes a random number.
(1)  466/    1A6A :                     ; 
(1)  467/    1A6A :                     ; Input:
(1)  468/    1A6A :                     ; d0 | Seed
(1)  469/    1A6A :                     ;
(1)  470/    1A6A :                     ; Output:
(1)  471/    1A6A :                     ; d0 | LONG
(1)  472/    1A6A :                     ;
(1)  473/    1A6A :                     ; Uses:
(1)  474/    1A6A :                     ; d4-d5
(1)  475/    1A6A :                     ; --------------------------------------------------------
(1)  476/    1A6A :                     
(1)  477/    1A6A :                     System_Random:
(1)  478/    1A6A : 2F04                		move.l	d4,-(sp)
(1)  479/    1A6C : 2839 FFFF AE0A      		move.l	(RAM_SysRandSeed).l,d4
(1)  480/    1A72 : 6606                		bne.s	.good_s
(1)  481/    1A74 : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  482/    1A7A :                     .good_s:
(1)  483/    1A7A : 2004                		move.l	d4,d0
(1)  484/    1A7C : EB9C                		rol.l	#5,d4
(1)  485/    1A7E : D880                		add.l	d0,d4
(1)  486/    1A80 : E644                		asr.w	#3,d4
(1)  487/    1A82 : D880                		add.l	d0,d4
(1)  488/    1A84 : 3004                		move.w	d4,d0
(1)  489/    1A86 : 4844                		swap	d4
(1)  490/    1A88 : D044                		add.w	d4,d0
(1)  491/    1A8A : 3800                		move.w	d0,d4
(1)  492/    1A8C : 4844                		swap	d4
(1)  493/    1A8E : 23C4 FFFF AE0A      		move.l	d4,(RAM_SysRandSeed).l
(1)  494/    1A94 : 281F                		move.l	(sp)+,d4
(1)  495/    1A96 : 4E75                		rts
(1)  496/    1A98 :                     
(1)  497/    1A98 :                     ; --------------------------------------------------------
(1)  498/    1A98 :                     ; System_SineWave_Cos / System_SineWave
(1)  499/    1A98 :                     ;
(1)  500/    1A98 :                     ; Get sinewave value
(1)  501/    1A98 :                     ;
(1)  502/    1A98 :                     ; Input:
(1)  503/    1A98 :                     ; d0 | WORD - Tan
(1)  504/    1A98 :                     ; d1 | WORD - Multiply
(1)  505/    1A98 :                     ;
(1)  506/    1A98 :                     ; Output:
(1)  507/    1A98 :                     ; d2 | LONG - Result (as 0000.0000)
(1)  508/    1A98 :                     ; --------------------------------------------------------
(1)  509/    1A98 :                     
(1)  510/    1A98 :                     ; TODO: improve this.
(1)  511/    1A98 :                     System_SineWave_Cos:
(1)  512/    1A98 : 48A7 8000           		movem.w	d0,-(sp)
(1)  513/    1A9C : 7400                		moveq	#0,d2
(1)  514/    1A9E : D03C 0040           		add.b	#$40,d0
(1)  515/    1AA2 : 1400                		move.b	d0,d2
(1)  516/    1AA4 : E302                		asl.b	#1,d2
(1)  517/    1AA6 : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  518/    1AAA : C4C1                		mulu.w	d1,d2
(1)  519/    1AAC : 8000                		or.b	d0,d0
(1)  520/    1AAE : 6A02                		bpl.s	.dont_neg
(1)  521/    1AB0 : 4482                		neg.l	d2
(1)  522/    1AB2 :                     .dont_neg:
(1)  523/    1AB2 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  524/    1AB6 : 4E75                		rts
(1)  525/    1AB8 :                     
(1)  526/    1AB8 :                     System_SineWave:
(1)  527/    1AB8 : 48A7 8000           		movem.w	d0,-(sp)
(1)  528/    1ABC : C07C 007F           		and.w	#$7F,d0
(1)  529/    1AC0 : E340                		asl.w	#1,d0
(1)  530/    1AC2 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  531/    1AC6 : C4C1                		mulu.w	d1,d2
(1)  532/    1AC8 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  533/    1ACC : 5182                		subq.l	#8,d2
(1)  534/    1ACE : 8000                		or.b	d0,d0
(1)  535/    1AD0 : 6A02                		bpl.s	.dont_neg
(1)  536/    1AD2 : 4482                		neg.l	d2
(1)  537/    1AD4 :                     .dont_neg:
(1)  538/    1AD4 : 4E75                		rts
(1)  539/    1AD6 :                     
(1)  540/    1AD6 : 0000 0006 000D 0013 MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
                    0019 001F 0026 002C 
                    0032 0038 003E      
(1)  541/    1AEC : 0044 004A 0050 0056 		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
                    005C 0062 0068 006D 
                    0073 0079           
(1)  542/    1B00 : 007E 0084 0089 008E 		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
                    0093 0098 009D 00A2 
                    00A7 00AC           
(1)  543/    1B14 : 00B1 00B5 00B9 00BE 		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
                    00C2 00C6 00CA 00CE 
                    00D1 00D5           
(1)  544/    1B28 : 00D8 00DC 00DF 00E2 		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
                    00E5 00E7 00EA 00ED 
                    00EF 00F1           
(1)  545/    1B3C : 00F3 00F5 00F7 00F8 		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
                    00FA 00FB 00FC 00FD 
                    00FE 00FF           
(1)  546/    1B50 : 00FF 0100 0100 0100 		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
                    0100 0100 00FF 00FF 
                    00FE                
(1)  547/    1B62 : 00FD 00FC 00FB 00FA 		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
                    00F8 00F7 00F5 00F3 
                    00F1 00EF           
(1)  548/    1B76 : 00ED 00EA 00E7 00E5 		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
                    00E2 00DF 00DC 00D8 
                    00D5 00D1           
(1)  549/    1B8A : 00CE 00CA 00C6 00C2 		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
                    00BE 00B9 00B5 00B1 
                    00AC 00A7           
(1)  550/    1B9E : 00A2 009D 0098 0093 		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
                    008E 0089 0084 007E 
                    0079 0073           
(1)  551/    1BB2 : 006D 0068 0062 005C 		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
                    0056 0050 004A 0044 
                    003E 0038           
(1)  552/    1BC6 : 0032 002C 0026 001F 		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
                    0019 0013 000D 0006 
(1)  553/    1BD6 :                     
(1)  554/    1BD6 :                     ; --------------------------------------------------------
(1)  555/    1BD6 :                     ; System_SetInts
(1)  556/    1BD6 :                     ;
(1)  557/    1BD6 :                     ; Set new interrputs
(1)  558/    1BD6 :                     ;
(1)  559/    1BD6 :                     ; d0 | LONG - VBlank
(1)  560/    1BD6 :                     ; d1 | LONG - HBlank
(1)  561/    1BD6 :                     ;
(1)  562/    1BD6 :                     ; Uses:
(1)  563/    1BD6 :                     ; d4
(1)  564/    1BD6 :                     ;
(1)  565/    1BD6 :                     ; Notes:
(1)  566/    1BD6 :                     ; Writing 0 or a negative number will skip change
(1)  567/    1BD6 :                     ; to the interrupt pointer
(1)  568/    1BD6 :                     ; --------------------------------------------------------
(1)  569/    1BD6 :                     
(1)  570/    1BD6 :                     System_SetInts:
(1)  571/    1BD6 : 2800                		move.l	d0,d4
(1)  572/    1BD8 : 670E                		beq.s	.novint
(1)  573/    1BDA : 6B0C                		bmi.s	.novint
(1)  574/    1BDC : 88BC 0088 0000      		or.l	#$880000,d4
(1)  575/    1BE2 : 23C4 FFFF AE14       		move.l	d4,(RAM_MdMarsVInt+2).l
(1)  576/    1BE8 :                     .novint:
(1)  577/    1BE8 : 2801                		move.l	d1,d4
(1)  578/    1BEA : 670E                		beq.s	.nohint
(1)  579/    1BEC : 6B0C                		bmi.s	.nohint
(1)  580/    1BEE : 88BC 0088 0000      		or.l	#$880000,d4
(1)  581/    1BF4 : 23C4 FFFF AE1A      		move.l	d4,(RAM_MdMarsHInt+2).l
(1)  582/    1BFA :                     .nohint:
(1)  583/    1BFA : 4E75                		rts
(1)  584/    1BFC :                     
(1)  585/    1BFC :                     ; --------------------------------------------------------
(1)  586/    1BFC :                     ; System_SramInit
(1)  587/    1BFC :                     ; 
(1)  588/    1BFC :                     ; Init save data
(1)  589/    1BFC :                     ; 
(1)  590/    1BFC :                     ; Uses:
(1)  591/    1BFC :                     ; a4,d4-d5
(1)  592/    1BFC :                     ; --------------------------------------------------------
(1)  593/    1BFC :                     
(1)  594/    1BFC :                     ; TODO: Check if RV bit is needed here...
(1)  595/    1BFC :                     System_SramInit:
(1)  596/    1BFC : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(1)  597/    1C04 : 49F9 0020 0001      		lea	($200001).l,a4
(1)  598/    1C0A : 7800                		moveq	#0,d4
(1)  599/    1C0C : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(1)  600/    1C10 :                     .initsave:
(1)  601/    1C10 : 1884                		move.b	d4,(a4)
(1)  602/    1C12 : D8FC 0002           		adda	#2,a4
(1)  603/    1C16 : 51CD FFF8           		dbf	d5,.initsave
(1)  604/    1C1A : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(1)  605/    1C22 : 4E75                		rts
(1)  606/    1C24 :                     
(1)  607/    1C24 :                     ; ====================================================================
(1)  608/    1C24 :                     ; ----------------------------------------------------------------
(1)  609/    1C24 :                     ; Screen mode subroutines
(1)  610/    1C24 :                     ; ----------------------------------------------------------------
(1)  611/    1C24 :                     
(1)  612/    1C24 :                     ; --------------------------------------------------------
(1)  613/    1C24 :                     ; Initialize current screen mode
(1)  614/    1C24 :                     ; --------------------------------------------------------
(1)  615/    1C24 :                     
(1)  616/    1C24 :                     Mode_Init:
(1)  617/    1C24 : 4EB9 0000 04E4      		jsr	(Video_Clear).l
(1)  618/    1C2A : 49F8 B41A           		lea	(RAM_ModeBuff),a4
(1)  619/    1C2E : 3A3C 07FF           		move.w	#(MAX_MDERAM/2)-1,d5
(1)  620/    1C32 : 7800                		moveq	#0,d4
(1)  621/    1C34 :                     .clr:
(1)  622/    1C34 : 38C4                		move.w	d4,(a4)+
(1)  623/    1C36 : 51CD FFFC           		dbf	d5,.clr
(1)  624/    1C3A :                     
(1)  625/    1C3A : 49F8 B0BA           		lea	(RAM_MdDreq+Dreq_Objects),a4	; Patch
(1)  626/    1C3E : 3A3C 000F           		move.w	#MAX_MODELS-1,d5
(1)  627/    1C42 :                     .clr_mdls:
(1)  628/    1C42 : 2884                		move.l	d4,mdl_data(a4)
(1)  629/    1C44 : D8FC 0018           		adda	#sizeof_mdlobj,a4
(1)  630/    1C48 : 51CD FFF8           		dbf	d5,.clr_mdls
(1)  631/    1C4C :                     
(1)  632/    1C4C : 303C 0000           		move.w	#0,d0
(1)  633/    1C50 : 6000 EFEE           		bra	Video_Mars_GfxMode
(1)  634/    1C54 :                     
(1)  635/    1C54 :                     ; --------------------------------------------------------
(1)  636/    1C54 :                     
(1)  637/    1C54 :                     Mode_FadeOut:
(1)  638/    1C54 : 31FC 0002 A99E      		move.w	#2,(RAM_FadeMdReq).w
(1)  639/    1C5A : 31FC 0002 A9A6      		move.w	#2,(RAM_FadeMarsReq).w
(1)  640/    1C60 : 31FC 0001 A9A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  641/    1C66 : 31FC 0004 A9A8      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  642/    1C6C : 31FC 0000 A9A2      		move.w	#0,(RAM_FadeMdDelay).w
(1)  643/    1C72 : 31FC 0000 A9AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  644/    1C78 :                     .loopw:
(1)  645/    1C78 : 6100 FB74           		bsr	System_WaitFrame
(1)  646/    1C7C : 4EB9 0000 084A      		jsr	(Video_RunFade).l
(1)  647/    1C82 : 66F4                		bne.s	.loopw
(1)  648/    1C84 : 4E75                		rts
(1)  649/    1C86 :                     
(1)  650/    1C86 :                     ; ====================================================================
(1)  651/    1C86 :                     ; ----------------------------------------------------------------
(1)  652/    1C86 :                     ; Default interrupts
(1)  653/    1C86 :                     ; ----------------------------------------------------------------
(1)  654/    1C86 :                     
(1)  655/    1C86 :                     ; --------------------------------------------------------
(1)  656/    1C86 :                     ; VBlank
(1)  657/    1C86 :                     ; --------------------------------------------------------
(1)  658/    1C86 :                     
(1)  659/    1C86 :                     VInt_Default:
(1)  660/    1C86 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  661/    1C8A : 6100 FC32           		bsr	System_Input
(1)  662/    1C8E : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    9740                
(1)  663/    1C98 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6		
(1)  664/    1C9C : 4E73                		rte
(1)  665/    1C9E :                     
(1)  666/    1C9E :                     ; --------------------------------------------------------
(1)  667/    1C9E :                     ; HBlank
(1)  668/    1C9E :                     ; --------------------------------------------------------
(1)  669/    1C9E :                     
(1)  670/    1C9E :                     HInt_Default:
(1)  671/    1C9E : 4E73                		rte
(1)  672/    1CA0 :                     
(1)  673/    1CA0 :                     ; ====================================================================
(1)  674/    1CA0 :                     ; ----------------------------------------------------------------
(1)  675/    1CA0 :                     ; System data
(1)  676/    1CA0 :                     ; ----------------------------------------------------------------
(1)  677/    1CA0 :                     
      33/    1CA0 :                     Md_ReadModes:
      34/    1CA0 : 7000                		moveq	#0,d0
      35/    1CA2 : 3038 C41A           		move.w	(RAM_Glbl_Scrn).w,d0
      36/    1CA6 : C07C 0007           		and.w	#%0111,d0		; <-- current limit
      37/    1CAA : E548                		lsl.w	#2,d0
      38/    1CAC : 207B 0006           		move.l	.pick_boot(pc,d0.w),a0
      39/    1CB0 : 4E90                		jsr	(a0)
      40/    1CB2 : 60EC                		bra.s	Md_ReadModes
      41/    1CB4 :                     .pick_boot:
      42/    1CB4 : 0000 1D00           		dc.l RamCode_Scrn1
      43/    1CB8 : 0000 1D00           		dc.l RamCode_Scrn1
      44/    1CBC : 0000 1D00           		dc.l RamCode_Scrn1
      45/    1CC0 : 0000 1D00           		dc.l RamCode_Scrn1
      46/    1CC4 : 0000 1D00           		dc.l RamCode_Scrn1
      47/    1CC8 : 0000 1D00           		dc.l RamCode_Scrn1
      48/    1CCC : 0000 1D00           		dc.l RamCode_Scrn1
      49/    1CD0 : 0000 1D00           		dc.l RamCode_Scrn1
      50/    1CD4 :                     		align 2
      51/    1CD4 :                     
      52/    1CD4 :                     ; ====================================================================
      53/    1CD4 :                     ; --------------------------------------------------------
      54/    1CD4 :                     ; Screen modes
      55/    1CD4 :                     ; --------------------------------------------------------
      56/    1CD4 :                     
      57/    1CD4 :                     		align $100
      58/    1D00 :                     RamCode_Scrn1:
      59/    1D00 :                     		include "code/screen_1.asm"
(1)    1/    1D00 :                     ; ====================================================================
(1)    2/    1D00 :                     ; ----------------------------------------------------------------
(1)    3/    1D00 :                     ; Titlescreen
(1)    4/    1D00 :                     ; ----------------------------------------------------------------
(1)    5/    1D00 :                     
(1)    6/    1D00 :                     ; ====================================================================
(1)    7/    1D00 :                     ; ------------------------------------------------------
(1)    8/    1D00 :                     ; Settings
(1)    9/    1D00 :                     ; ------------------------------------------------------
(1)   10/    1D00 :                     
(1)   11/    1D00 : =$7B                SET_MENUTOPLINE		equ 123
(1)   12/    1D00 : =$6                 MAX_TITLOPT		equ 6
(1)   13/    1D00 : =$1                 VRAMTTL_PUZBG		equ $0001
(1)   14/    1D00 : =$780               VRAMTTL_CELLHIDE	equ $0780
(1)   15/    1D00 :                     
(1)   16/    1D00 :                     ; ====================================================================
(1)   17/    1D00 :                     ; ------------------------------------------------------
(1)   18/    1D00 :                     ; Structs
(1)   19/    1D00 :                     ; ------------------------------------------------------
(1)   20/    1D00 :                     
(1)   21/    1D00 :                     ; 		struct 0
(1)   22/    1D00 :                     ; strc_xpos	ds.w 1
(1)   23/    1D00 :                     ; strc_ypos	ds.w 1
(1)   24/    1D00 :                     ; 		finish
(1)   25/    1D00 :                     
(1)   26/    1D00 :                     ; ====================================================================
(1)   27/    1D00 :                     ; ------------------------------------------------------
(1)   28/    1D00 :                     ; This screen's RAM
(1)   29/    1D00 :                     ; ------------------------------------------------------
(1)   30/    1D00 :                     
(1)   31/    1D00 : (MACRO)             			struct RAM_ModeBuff
(1)   31/    1D00 : =$1D00              GLBL_LASTPC     set *
(1)   31/    1D00 :                                     dephase
(1)   31/    1D00 : =$1D00              GLBL_LASTORG    set *
(1)   31/FFFFFFFFFFFFB41A :                                     phase RAM_MODEBUFF
(1)   32/FFFFFFFFFFFFB41A :                     RAM_Ttle_SpriteData	ds.w 4*70
(1)   33/FFFFFFFFFFFFB64A :                     RAM_Ttle_HorVal		ds.l 1
(1)   34/FFFFFFFFFFFFB64E :                     RAM_Ttle_VerVal		ds.l 1
(1)   35/FFFFFFFFFFFFB652 :                     RAM_Tite_VerBot		ds.l 1			; 0000.0000
(1)   36/FFFFFFFFFFFFB656 :                     RAM_Tite_VerBgMenu	ds.l 1
(1)   37/FFFFFFFFFFFFB65A :                     RAM_Ttle_VerBg		ds.l 1
(1)   38/FFFFFFFFFFFFB65E :                     RAM_Ttle_HorBg  	ds.l 1
(1)   39/FFFFFFFFFFFFB662 :                     RAM_Ttle_SpdUsr		ds.w 1
(1)   40/FFFFFFFFFFFFB664 :                     RAM_Ttle_SFX		ds.w 1
(1)   41/FFFFFFFFFFFFB666 :                     RAM_Tite_PickOpt	ds.w 1
(1)   42/FFFFFFFFFFFFB668 :                     RAM_Tite_UsrOpt_T	ds.w 1
(1)   43/FFFFFFFFFFFFB66A :                     RAM_Tite_UsrOpt_B	ds.w 1
(1)   44/FFFFFFFFFFFFB66C :                     RAM_Titl_DbgValues	ds.w 17
(1)   45/FFFFFFFFFFFFB68E : (MACRO)             			finish
(1)   45/FFFFFFFFFFFFB41A :                                     !org GLBL_LASTORG
(1)   45/    1D00 :                                     phase GLBL_LASTPC
(1)   46/    1D00 :                     
(1)   47/    1D00 :                     ; ====================================================================
(1)   48/    1D00 :                     ; ------------------------------------------------------
(1)   49/    1D00 :                     ; Code start
(1)   50/    1D00 :                     ; ------------------------------------------------------
(1)   51/    1D00 :                     
(1)   52/    1D00 :                     MD_2DMODE:
(1)   53/    1D00 : 46FC 2700           		move.w	#$2700,sr
(1)   54/    1D04 : 08B9 0006 FFFF A9AF 		bclr	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   55/    1D0C : 6100 E782           		bsr	Video_Update
(1)   56/    1D10 : 6100 E938           		bsr	Video_PrintInit
(1)   57/    1D14 : 6100 FF0E           		bsr	Mode_Init
(1)   58/    1D18 : 6100 F68C           		bsr	Objects_Init
(1)   59/    1D1C :                     
(1)   60/    1D1C :                     	; Load assets
(1)   79/    1D1C : 203C 0003 8000      		move.l	#Art_Title_BG,d0
(1)   80/    1D22 : 343C 7200           		move.w	#(Art_Title_BG_e-Art_Title_BG),d2
(1)   81/    1D26 : 323C 0020           		move.w	#VRAMTTL_PUZBG*$20,d1
(1)   82/    1D2A : 6100 EE14           		bsr	Video_LoadArt
(1)   83/    1D2E : 41FA 0728           		lea	Map_Title_BG(pc),a0
(1)   84/    1D32 : 203C 0001 0000      		move.l	#locate(1,0,0),d0
(1)   85/    1D38 : 223C 0027 001F      		move.l	#mapsize(320,256),d1
(1)   86/    1D3E : 343C 0001           		move.w	#VRAMTTL_PUZBG,d2
(1)   87/    1D42 : 6100 E83E           		bsr	Video_LoadMap
(1)   89/    1D46 :                     
(1)   90/    1D46 : 41FA 03A6           		lea	str_TitleS(pc),a0
(1)   91/    1D4A : 203C 0000 0203      		move.l	#locate(0,2,3),d0
(1)   92/    1D50 : 6100 E924           		bsr	Video_Print
(1)   93/    1D54 : 6100 02AA           		bsr	Title_PrintCursor
(1)   94/    1D58 : 41FA 03AE           		lea	str_TitleSfx(pc),a0	; Print menu
(1)   95/    1D5C : 203C 0000 0205      		move.l	#locate(0,2,5),d0
(1)   96/    1D62 : 6100 E912           		bsr	Video_Print
(1)   97/    1D66 : 6100 0152           		bsr	.sfx_draw
(1)   98/    1D6A :                     
(1)   99/    1D6A : 41FA 06CC           		lea	Pal_Title_BG(pc),a0
(1)  100/    1D6E : 7000                		moveq	#0,d0
(1)  101/    1D70 : 323C 000F           		move.w	#16-1,d1
(1)  102/    1D74 : 6100 EAE6           		bsr	Video_FadePal
(1)  103/    1D78 : 41F8 A514           		lea	(RAM_PaletteFd+$60),a0
(1)  104/    1D7C : 30FC 0000           		move.w	#0,(a0)+
(1)  105/    1D80 : 30FC 0EEE           		move.w	#$EEE,(a0)+
(1)  106/    1D84 : 30FC 0CCC           		move.w	#$CCC,(a0)+
(1)  107/    1D88 : 30FC 0AAA           		move.w	#$AAA,(a0)+
(1)  108/    1D8C : 30FC 0888           		move.w	#$888,(a0)+
(1)  109/    1D90 : 30FC 0222           		move.w	#$222,(a0)+
(1)  110/    1D94 : 4278 A4B4           		clr.w	(RAM_PaletteFd).w		; <-- quick patch
(1)  111/    1D98 : 4278 A534           		clr.w	(RAM_MdMarsPalFd).w
(1)  112/    1D9C :                     
(1)  113/    1D9C :                     
(1)  114/    1D9C :                     
(1)  115/    1D9C :                     	; Set Fade-in settings
(1)  116/    1D9C : 31FC 0001 A9A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  117/    1DA2 : 31FC 0002 A9A8      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  118/    1DA8 : 31FC 0001 A9A2      		move.w	#1,(RAM_FadeMdDelay).w
(1)  119/    1DAE : 31FC 0000 A9AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  120/    1DB4 : 31FC 0001 A99E      		move.w	#1,(RAM_FadeMdReq).w
(1)  121/    1DBA : 31FC 0001 A9A6      		move.w	#1,(RAM_FadeMarsReq).w
(1)  122/    1DC0 : 13FC 0007 FFFF A9B9 		move.b	#%111,(RAM_VdpRegs+$B).l
(1)  123/    1DC8 : 13FC 0000 FFFF A9B5 		move.b	#0,(RAM_VdpRegs+7).l
(1)  124/    1DD0 : 08F9 0004 FFFF A9AE 		bset	#bitHintEnbl,(RAM_VdpRegs).l
(1)  125/    1DD8 : 08F9 0006 FFFF A9AF 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)  126/    1DE0 : 08B9 0005 FFFF A9AF 		bclr	#bitVintEnbl,(RAM_VdpRegs+1).l
(1)  127/    1DE8 : 11FC 007B A9B8      		move.b	#SET_MENUTOPLINE,(RAM_VdpRegs+$A).w	; Hint line
(1)  128/    1DEE : 11FC 0081 A9BA      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  129/    1DF4 : 33FC 9200 00C0 0004 		move.w	#$9200,(vdp_ctrl).l		; Set WINDOW Bottom
(1)  130/    1DFC : 6100 E692           		bsr	Video_Update
(1)  131/    1E00 : 21FC 0000 1C86 AE14 		move.l	#VInt_Default,(RAM_MdMarsVInt+2).w
(1)  132/    1E08 : 21FC 0000 1C9E AE1A 		move.l	#HInt_Default,(RAM_MdMarsHInt+2).w
(1)  133/    1E10 : 6100 F9DC           		bsr 	System_WaitFrame		; Send first DREQ
(1)  134/    1E14 :                     
(1)  135/    1E14 :                     ; ====================================================================
(1)  136/    1E14 :                     ; ------------------------------------------------------
(1)  137/    1E14 :                     ; Loop
(1)  138/    1E14 :                     ; ------------------------------------------------------
(1)  139/    1E14 :                     
(1)  140/    1E14 :                     .loop:
(1)  141/    1E14 :                     ; 		bsr	System_Random
(1)  142/    1E14 :                     ; 		bsr	Objects_Show
(1)  143/    1E14 :                     ; 		bsr	MdMap_Update
(1)  144/    1E14 : 6100 F9D8           .ploop:		bsr	System_WaitFrame
(1)  145/    1E18 : 6100 EA30           		bsr	Video_RunFade
(1)  146/    1E1C : 66F6                		bne.s	.ploop
(1)  147/    1E1E :                     ; 		bsr	Title_AnimateFg
(1)  148/    1E1E : 6100 FC4A           		bsr	System_Random		; <-- reroll every frame
(1)  149/    1E22 :                     ; 		bsr	Objects_Run
(1)  150/    1E22 :                     ; 		bsr	Map_Camera
(1)  151/    1E22 :                     ; 		bsr	DEBUG_GRABZ80
(1)  152/    1E22 :                     
(1)  153/    1E22 : 41F8 B0BA           		lea	(RAM_MdDreq+Dreq_Objects),a0
(1)  154/    1E26 : 0668 0008 000E      		add.w	#8*1,mdl_x_rot(a0)
(1)  155/    1E2C : 0668 0008 0010      		add.w	#8*1,mdl_y_rot(a0)
(1)  156/    1E32 : 0668 0010 0012      		add.w	#8*2,mdl_z_rot(a0)
(1)  157/    1E38 : 6100 01C6           		bsr	Title_PrintCursor
(1)  158/    1E3C :                     
(1)  159/    1E3C :                     	; Controls
(1)  160/    1E3C : 41F8 B668           		lea	(RAM_Tite_UsrOpt_T),a0
(1)  161/    1E40 : 3038 B666           		move.w	(RAM_Tite_PickOpt),d0
(1)  162/    1E44 : D040                		add.w	d0,d0
(1)  163/    1E46 : D0C0                		adda	d0,a0
(1)  164/    1E48 : 3839 FFFF A9CA      		move.w	(Controller_1+on_press).l,d4
(1)  165/    1E4E : C87C 0001           		and.w	#JoyUp,d4
(1)  166/    1E52 : 670C                		beq.s	.no_up
(1)  167/    1E54 : 4A50                		tst.w	(a0)
(1)  168/    1E56 : 6708                		beq.s	.no_up
(1)  169/    1E58 : 0450 0001           		sub.w	#1,(a0)
(1)  170/    1E5C : 6100 01A2           		bsr	Title_PrintCursor
(1)  171/    1E60 :                     .no_up:
(1)  172/    1E60 : 3839 FFFF A9CA      		move.w	(Controller_1+on_press).l,d4
(1)  173/    1E66 : C87C 0002           		and.w	#JoyDown,d4
(1)  174/    1E6A : 670E                		beq.s	.no_down
(1)  175/    1E6C : 0C50 0006           		cmp.w	#MAX_TITLOPT,(a0)	; RECICLADO
(1)  176/    1E70 : 6708                		beq.s	.no_down
(1)  177/    1E72 : 0650 0001           		add.w	#1,(a0)
(1)  178/    1E76 : 6100 0188           		bsr	Title_PrintCursor
(1)  179/    1E7A :                     .no_down:
(1)  180/    1E7A :                     ; 		move.w	(Controller_1+on_press).l,d7
(1)  181/    1E7A :                     ; 		and.w	#JoyA,d7
(1)  182/    1E7A :                     ; 		beq.s	.no_a
(1)  183/    1E7A :                     ; 		bchg	#0,(RAM_Tite_PickOpt+1).w
(1)  184/    1E7A :                     ; .no_a:
(1)  185/    1E7A :                     
(1)  186/    1E7A :                     ; 		tst.w	(RAM_Tite_PickOpt).w
(1)  187/    1E7A :                     ; 		bne.s	.no_r
(1)  188/    1E7A : 3E39 FFFF A9CA      		move.w	(Controller_1+on_press).l,d7
(1)  189/    1E80 : CE7C 0004           		and.w	#JoyLeft,d7
(1)  190/    1E84 : 670E                		beq.s	.no_l
(1)  191/    1E86 : 4A78 B664           		tst.w	(RAM_Ttle_SFX).w
(1)  192/    1E8A : 6708                		beq.s	.no_l
(1)  193/    1E8C : 0478 0001 B664      		sub.w	#1,(RAM_Ttle_SFX).w
(1)  194/    1E92 : 6126                		bsr	.sfx_draw
(1)  195/    1E94 :                     .no_l:
(1)  196/    1E94 : 3E39 FFFF A9CA      		move.w	(Controller_1+on_press).l,d7
(1)  197/    1E9A : CE7C 0008           		and.w	#JoyRight,d7
(1)  198/    1E9E : 6708                		beq.s	.no_r
(1)  199/    1EA0 : 0678 0001 B664      		add.w	#1,(RAM_Ttle_SFX).w
(1)  200/    1EA6 : 6112                		bsr	.sfx_draw
(1)  201/    1EA8 :                     .no_r:
(1)  202/    1EA8 : 3E39 FFFF A9CA      		move.w	(Controller_1+on_press).l,d7
(1)  203/    1EAE : CE7C 0020           		and.w	#JoyC,d7
(1)  204/    1EB2 : 6702                		beq.s	.no_c
(1)  205/    1EB4 : 6112                		bsr	.gema_test
(1)  206/    1EB6 :                     .no_c:
(1)  207/    1EB6 :                     ; 		move.w	(Controller_1+on_press).l,d7
(1)  208/    1EB6 :                     ; 		and.w	#JoyB,d7
(1)  209/    1EB6 :                     ; 		beq.s	.no_b
(1)  210/    1EB6 :                     ; 		bsr	gemaTest
(1)  211/    1EB6 :                     ; .no_b:
(1)  212/    1EB6 :                     
(1)  213/    1EB6 :                     ; 		move.w	(Controller_1+on_press).l,d7
(1)  214/    1EB6 :                     ; 		and.w	#JoyB,d7
(1)  215/    1EB6 :                     ; 		beq.s	.no_b
(1)  216/    1EB6 :                     ; 		moveq	#1,d0
(1)  217/    1EB6 :                     ; 		bsr	.sfx_play
(1)  218/    1EB6 :                     ; .no_b:
(1)  219/    1EB6 :                     ; 		move.w	(Controller_1+on_press).l,d7
(1)  220/    1EB6 :                     ; 		and.w	#JoyA,d7
(1)  221/    1EB6 :                     ; 		beq.s	.no_a
(1)  222/    1EB6 :                     ; 		moveq	#0,d0
(1)  223/    1EB6 :                     ; 		bsr	Sound_TESTCMD
(1)  224/    1EB6 :                     ; .no_a:
(1)  225/    1EB6 :                     
(1)  226/    1EB6 :                     ; 		lea	(RAM_BoxPlayers),a6
(1)  227/    1EB6 :                     ; 		move.w	(Controller_1+on_press),d7
(1)  228/    1EB6 :                     ; 		btst	#bitJoyMode,d7
(1)  229/    1EB6 :                     ; 		beq	.loop3
(1)  230/    1EB6 :                     ; 		move.w	#4,(RAM_MGame_Sfx).w
(1)  231/    1EB6 :                     ; .loop3:
(1)  232/    1EB6 :                     
(1)  233/    1EB6 : 6000 FF5C           		bra	.loop
(1)  234/    1EBA :                     
(1)  235/    1EBA :                     ; 	; Exit
(1)  236/    1EBA :                     ; 		tst.w	(RAM_Tite_PickOpt).w
(1)  237/    1EBA :                     ; 		beq	.loop
(1)  238/    1EBA :                     ; 		move.w	(Controller_1+on_press),d7
(1)  239/    1EBA :                     ; 		btst	#bitJoyStart,d7
(1)  240/    1EBA :                     ; 		beq	.loop
(1)  241/    1EBA :                     ; 		bsr	.fade_out
(1)  242/    1EBA :                     ; 		bsr	Title_PickSetting
(1)  243/    1EBA :                     ; 		move.w	#$2700,sr
(1)  244/    1EBA :                     ; 		move.w	#1,(RAM_Glbl_Scrn).w
(1)  245/    1EBA :                     ; 		rts
(1)  246/    1EBA :                     
(1)  247/    1EBA :                     .sfx_draw:
(1)  248/    1EBA : 41FA 02A0           		lea	str_TitlDrwID(pc),a0	; Print menu
(1)  249/    1EBE : 203C 0000 0A05      		move.l	#locate(0,10,5),d0
(1)  250/    1EC4 : 6000 E7B0           		bra	Video_Print
(1)  251/    1EC8 :                     
(1)  252/    1EC8 :                     .gema_test:
(1)  253/    1EC8 : 3038 B668           		move.w	(RAM_Tite_UsrOpt_T),d0
(1)  254/    1ECC : D040                		add.w	d0,d0
(1)  255/    1ECE : 303B 0006           		move.w	.list(pc,d0.w),d0
(1)  256/    1ED2 : 4EFB 0002           		jmp	.list(pc,d0.w)
(1)  257/    1ED6 :                     .list:
(1)  258/    1ED6 : 000E                		dc.w .play-.list
(1)  259/    1ED8 : 0026                		dc.w .stop-.list
(1)  260/    1EDA : 002E                		dc.w .stopall-.list
(1)  261/    1EDC : 0036                		dc.w .null-.list
(1)  262/    1EDE : 0036                		dc.w .null-.list
(1)  263/    1EE0 : 0036                		dc.w .null-.list
(1)  264/    1EE2 : 0036                		dc.w .null-.list
(1)  265/    1EE4 :                     .play:
(1)  266/    1EE4 : 3038 B664           		move.w	(RAM_Ttle_SFX).w,d0
(1)  267/    1EE8 : 3400                		move.w	d0,d2
(1)  268/    1EEA : 3200                		move.w	d0,d1
(1)  269/    1EEC : D241                		add.w	d1,d1
(1)  270/    1EEE : 303B 101E           		move.w	.tempolist(pc,d1.w),d0
(1)  271/    1EF2 : 6100 E552           		bsr	gemaSetBeats
(1)  272/    1EF6 : 3002                		move.w	d2,d0
(1)  273/    1EF8 : 6000 E510           		bra	gemaPlayTrack
(1)  274/    1EFC :                     .stop:
(1)  275/    1EFC : 3038 B664           		move.w	(RAM_Ttle_SFX).w,d0
(1)  276/    1F00 : 6000 E51E           		bra	gemaStopTrack
(1)  277/    1F04 :                     .stopall:
(1)  278/    1F04 : 3038 B664           		move.w	(RAM_Ttle_SFX).w,d0
(1)  279/    1F08 : 6000 E52C           		bra	gemaStopAll
(1)  280/    1F0C :                     .null:
(1)  281/    1F0C : 4E75                		rts
(1)  282/    1F0E :                     
(1)  283/    1F0E :                     ; GLOBAL SUBBEATS FOR EACH TRACK.
(1)  284/    1F0E :                     .tempolist:
(1)  285/    1F0E : 00E8                		dc.w 200+32
(1)  286/    1F10 : 00E8                		dc.w 200+32
(1)  287/    1F12 : 00E8                		dc.w 200+32
(1)  288/    1F14 : 00E8                		dc.w 200+32
(1)  289/    1F16 : 00E8                		dc.w 200+32
(1)  290/    1F18 : 00E8                		dc.w 200+32
(1)  291/    1F1A : 00D5                		dc.w 200+13 ; $0006
(1)  292/    1F1C : 00E8                		dc.w 200+32
(1)  293/    1F1E : 00E8                		dc.w 200+32
(1)  294/    1F20 : 00E8                		dc.w 200+32
(1)  295/    1F22 : 00E8                		dc.w 200+32
(1)  296/    1F24 : 00E8                		dc.w 200+32
(1)  297/    1F26 : 00E8                		dc.w 200+32
(1)  298/    1F28 : 00E8                		dc.w 200+32
(1)  299/    1F2A : 00E8                		dc.w 200+32
(1)  300/    1F2C : 00E8                		dc.w 200+32
(1)  301/    1F2E :                     
(1)  302/    1F2E : 00E8                		dc.w 200+32
(1)  303/    1F30 : 00E8                		dc.w 200+32
(1)  304/    1F32 : 00E8                		dc.w 200+32
(1)  305/    1F34 : 00E8                		dc.w 200+32
(1)  306/    1F36 : 00E8                		dc.w 200+32
(1)  307/    1F38 : 00E8                		dc.w 200+32
(1)  308/    1F3A : 00E8                		dc.w 200+32
(1)  309/    1F3C : 00E8                		dc.w 200+32
(1)  310/    1F3E : 00E8                		dc.w 200+32
(1)  311/    1F40 : 00E8                		dc.w 200+32
(1)  312/    1F42 : 00E8                		dc.w 200+32
(1)  313/    1F44 : 00E8                		dc.w 200+32
(1)  314/    1F46 : 00E8                		dc.w 200+32
(1)  315/    1F48 : 00E8                		dc.w 200+32
(1)  316/    1F4A : 00E8                		dc.w 200+32
(1)  317/    1F4C : 00E8                		dc.w 200+32
(1)  318/    1F4E :                     
(1)  319/    1F4E :                     ; ====================================================================
(1)  320/    1F4E :                     ; ----------------------------------------------
(1)  321/    1F4E :                     ; common subs
(1)  322/    1F4E :                     ; ----------------------------------------------
(1)  323/    1F4E :                     
(1)  324/    1F4E :                     .fade_in:
(1)  325/    1F4E : 31FC 0001 A99E      		move.w	#1,(RAM_FadeMdReq).w
(1)  326/    1F54 : 31FC 0001 A9A6      		move.w	#1,(RAM_FadeMarsReq).w
(1)  327/    1F5A : 31FC 0001 A9A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  328/    1F60 : 31FC 0001 A9A8      		move.w	#1,(RAM_FadeMarsIncr).w
(1)  329/    1F66 : 31FC 0002 A9A2      		move.w	#2,(RAM_FadeMdDelay).w
(1)  330/    1F6C : 31FC 0000 A9AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  331/    1F72 : 6024                		bra.s	.loop2
(1)  332/    1F74 :                     
(1)  333/    1F74 :                     .fade_out:
(1)  334/    1F74 : 31FC 0002 A99E      		move.w	#2,(RAM_FadeMdReq).w
(1)  335/    1F7A : 31FC 0002 A9A6      		move.w	#2,(RAM_FadeMarsReq).w
(1)  336/    1F80 : 31FC 0001 A9A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  337/    1F86 : 31FC 0001 A9A8      		move.w	#1,(RAM_FadeMarsIncr).w
(1)  338/    1F8C : 31FC 0002 A9A2      		move.w	#2,(RAM_FadeMdDelay).w
(1)  339/    1F92 : 31FC 0000 A9AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  340/    1F98 :                     .loop2:
(1)  341/    1F98 : 6100 F854           		bsr	System_WaitFrame
(1)  342/    1F9C : 6100 E8AC           		bsr	Video_RunFade
(1)  343/    1FA0 : 66F6                		bne.s	.loop2
(1)  344/    1FA2 : 4E75                		rts
(1)  345/    1FA4 :                     
(1)  346/    1FA4 :                     ; ====================================================================
(1)  347/    1FA4 :                     ; ------------------------------------------------------
(1)  348/    1FA4 :                     ; Subroutines
(1)  349/    1FA4 :                     ; ------------------------------------------------------
(1)  350/    1FA4 :                     
(1)  351/    1FA4 :                     ; ------------------------------------------------
(1)  352/    1FA4 :                     ; Animate title
(1)  353/    1FA4 :                     ; ------------------------------------------------
(1)  354/    1FA4 :                     
(1)  355/    1FA4 :                     Title_AnimateFg:
(1)  356/    1FA4 :                     ; 		lea	(RAM_HorScroll),a5
(1)  357/    1FA4 :                     ; 		move.w	#224-1,d7
(1)  358/    1FA4 :                     ; 		move.w	(RAM_Ttle_HorBg).w,d4
(1)  359/    1FA4 :                     ; 		lsr.w	#2,d4
(1)  360/    1FA4 :                     ; 		neg.w	d4
(1)  361/    1FA4 :                     ; .hnextfg:
(1)  362/    1FA4 :                     ; 		move.w	d4,2(a5)
(1)  363/    1FA4 :                     ; 		adda	#4,a5
(1)  364/    1FA4 :                     ; 		dbf	d7,.hnextfg
(1)  365/    1FA4 :                     
(1)  366/    1FA4 : 4BF8 9744           		lea	(RAM_HorScroll),a5
(1)  367/    1FA8 : 3E3C 007A           		move.w	#SET_MENUTOPLINE-1,d7
(1)  368/    1FAC : 3838 B64A           		move.w	(RAM_Ttle_HorVal).w,d4
(1)  369/    1FB0 :                     .hnext:
(1)  370/    1FB0 : 3004                		move.w	d4,d0
(1)  371/    1FB2 : 6100 FB04           		bsr	System_SineWave
(1)  372/    1FB6 : E082                		asr.l	#8,d2
(1)  373/    1FB8 : EE82                		asr.l	#7,d2
(1)  374/    1FBA : 3A82                		move.w	d2,(a5)
(1)  375/    1FBC : DAFC 0004           		adda	#4,a5
(1)  376/    1FC0 : 3A38 B662           		move.w	(RAM_Ttle_SpdUsr).w,d5
(1)  377/    1FC4 : E24D                		lsr.w	#1,d5
(1)  378/    1FC6 : D845                		add.w	d5,d4
(1)  379/    1FC8 :                     ; 		add.w	#2,d4
(1)  380/    1FC8 : 51CF FFE6           		dbf	d7,.hnext
(1)  381/    1FCC :                     ;
(1)  382/    1FCC : 4BF8 9B04           		lea	(RAM_VerScroll),a5
(1)  383/    1FD0 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  384/    1FD4 : 3838 B64E           		move.w	(RAM_Ttle_VerVal).w,d4
(1)  385/    1FD8 :                     .vnext:
(1)  386/    1FD8 : 3004                		move.w	d4,d0
(1)  387/    1FDA : 6100 FADC           		bsr	System_SineWave
(1)  388/    1FDE : E082                		asr.l	#8,d2
(1)  389/    1FE0 : EE82                		asr.l	#7,d2
(1)  390/    1FE2 : 4442                		neg.w	d2
(1)  391/    1FE4 : 3A82                		move.w	d2,(a5)
(1)  392/    1FE6 : DAFC 0004           		adda	#4,a5
(1)  393/    1FEA : D878 B662           		add.w	(RAM_Ttle_SpdUsr).w,d4
(1)  394/    1FEE :                     ; 		add.w	#2,d4
(1)  395/    1FEE : 51CF FFE8           		dbf	d7,.vnext
(1)  396/    1FF2 : 3E38 B662           		move.w	(RAM_Ttle_SpdUsr).w,d7
(1)  397/    1FF6 : DF78 B64E           		add.w	d7,(RAM_Ttle_VerVal).w
(1)  398/    1FFA : DF78 B64A           		add.w	d7,(RAM_Ttle_HorVal).w
(1)  399/    1FFE : 4E75                		rts
(1)  400/    2000 :                     
(1)  401/    2000 :                     Title_PrintCursor:
(1)  402/    2000 : 223C 0000 0206      		move.l	#locate(0,2,6),d1
(1)  403/    2006 : 41FA 0162           		lea	str_Cursor(pc),a0
(1)  404/    200A :                     ; 		btst	#0,(RAM_Tite_PickOpt+1).w
(1)  405/    200A :                     ; 		beq.s	.nocur_0
(1)  406/    200A :                     ; 		lea	str_CursorOut(pc),a0
(1)  407/    200A :                     ; .nocur_0:
(1)  408/    200A : 7000                		moveq	#0,d0
(1)  409/    200C : 3038 B668           		move.w	(RAM_Tite_UsrOpt_T).w,d0
(1)  410/    2010 : D081                		add.l	d1,d0
(1)  411/    2012 : 6000 E662           		bra	Video_Print
(1)  412/    2016 :                     
(1)  413/    2016 :                     ; 		move.l	#locate(0,2,16+1),d1
(1)  414/    2016 :                     ; 		lea	str_Cursor(pc),a0
(1)  415/    2016 :                     ; 		btst	#0,(RAM_Tite_PickOpt+1).w
(1)  416/    2016 :                     ; 		bne.s	.nocur_1
(1)  417/    2016 :                     ; 		lea	str_CursorOut(pc),a0
(1)  418/    2016 :                     ; .nocur_1:
(1)  419/    2016 :                     ; 		moveq	#0,d0
(1)  420/    2016 :                     ; 		move.w	(RAM_Tite_UsrOpt_B).w,d0
(1)  421/    2016 :                     ; 		add.l	d1,d0
(1)  422/    2016 :                     ; 		bra	Video_Print
(1)  423/    2016 :                     
(1)  424/    2016 :                     ; ====================================================================
(1)  425/    2016 :                     ; ------------------------------------------------------
(1)  426/    2016 :                     ; VBlank
(1)  427/    2016 :                     ; ------------------------------------------------------
(1)  428/    2016 :                     
(1)  429/    2016 :                     ; ------------------------------------------------------
(1)  430/    2016 :                     ; HBlank
(1)  431/    2016 :                     ; ------------------------------------------------------
(1)  432/    2016 :                     
(1)  433/    2016 :                     HInt_Title:
(1)  434/    2016 : 46FC 2700           		move.w	#$2700,sr
(1)  435/    201A : 23FC 4000 0010 00C0 		move.l	#$40000010,(vdp_ctrl).l
                    0004                
(1)  436/    2024 :                     	rept (320/16)
(1)  437/    2024 :                     		move.l	#0,(vdp_data).l
(1)  438/    2024 :                     	endm
(1)  437/    2024 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    202E : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    2038 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    2042 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    204C : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    2056 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    2060 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    206A : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    2074 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    207E : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    2088 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    2092 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    209C : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    20A6 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    20B0 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    20BA : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    20C4 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    20CE : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    20D8 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  437/    20E2 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  439/    20EC :                     
(1)  440/    20EC :                     ; 	; Third 2cell is cursor
(1)  441/    20EC :                     ; 		move.w	#0,(vdp_data).l
(1)  442/    20EC :                     ; 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  443/    20EC :                     ; 		move.w	#0,(vdp_data).l
(1)  444/    20EC :                     ; 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  445/    20EC :                     ; 		move.w	(RAM_Tite_VerBot),(vdp_data).l
(1)  446/    20EC :                     ; 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  447/    20EC :                     ; 	rept (320/16)
(1)  448/    20EC :                     ; 		move.w	#0,(vdp_data).l
(1)  449/    20EC :                     ; 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  450/    20EC :                     ; 	endm
(1)  451/    20EC : 4E73                		rte
(1)  452/    20EE :                     
(1)  453/    20EE :                     ; ====================================================================
(1)  454/    20EE :                     ; ------------------------------------------------------
(1)  455/    20EE :                     ; Objects
(1)  456/    20EE :                     ; ------------------------------------------------------
(1)  457/    20EE :                     
(1)  458/    20EE :                     ; ====================================================================
(1)  459/    20EE :                     ; ----------------------------------------------------------------
(1)  460/    20EE :                     ; Small data
(1)  461/    20EE :                     ; ----------------------------------------------------------------
(1)  462/    20EE :                     
(1)  463/    20EE : 4745 4D41 2F4E 696B str_TitleS:	dc.b "GEMA/Nikona sound driver",0
                    6F6E 6120 736F 756E 
                    6420 6472 6976 6572 
                    00                  
(1)  464/    2107 :                     		align 2
(1)  465/    2108 : 5472 6163 6B49 440A str_TitleSfx:	dc.b "TrackID",$A
(1)  466/    2110 : 0A                  		dc.b $A
(1)  467/    2111 : 2020 6765 6D61 506C 		dc.b "  gemaPlayTrack",$A
                    6179 5472 6163 6B0A 
(1)  468/    2121 : 2020 6765 6D61 5374 		dc.b "  gemaStopTrack",$A
                    6F70 5472 6163 6B0A 
(1)  469/    2131 : 2020 6765 6D61 5374 		dc.b "  gemaStopAll",$A
                    6F70 416C 6C0A      
(1)  470/    213F : 2020 3F3F 3F3F 0A   		dc.b "  ????",$A
(1)  471/    2146 : 2020 3F3F 3F3F 0A   		dc.b "  ????",$A
(1)  472/    214D : 2020 3F3F 3F3F 0A   		dc.b "  ????",$A
(1)  473/    2154 : 2020 3F3F 3F3F 00   		dc.b "  ????",0
(1)  474/    215B :                     		align 2
(1)  475/    215C : 5C77 00             str_TitlDrwID:	dc.b "\\w",0
(1)  476/    215F : FFFF B664           		dc.l RAM_Ttle_SFX
(1)  477/    2163 :                     		align 2
(1)  478/    2164 :                     
(1)  479/    2164 : 200A                str_CursorOut:	dc.b " ",$A
(1)  480/    2166 : 200A                		dc.b " ",$A
(1)  481/    2168 : 2000                		dc.b " ",0
(1)  482/    216A :                     		align 2
(1)  483/    216A : 200A                str_Cursor:	dc.b " ",$A
(1)  484/    216C : 3E0A                		dc.b ">",$A
(1)  485/    216E : 2000                		dc.b " ",0
(1)  486/    2170 :                     		align 2
(1)  487/    2170 :                     
(1)  488/    2170 :                     Pal_Title_FG:
(1)  489/    2170 :                     		binclude "data/title/title_pal.bin"
(1)  490/    21D0 :                     		align 2
(1)  491/    21D0 :                     Map_Title_FG:
(1)  492/    21D0 :                     		binclude "data/title/title_map.bin"
(1)  493/    2438 :                     		align 2
(1)  494/    2438 :                     Pal_Title_BG:
(1)  495/    2438 :                     		binclude "data/title/bg_pal.bin"
(1)  496/    2458 :                     		align 2
(1)  497/    2458 :                     Map_Title_BG:
(1)  498/    2458 :                     		binclude "data/title/bg_map.bin"
(1)  499/    2D18 :                     		align 2
(1)  500/    2D18 :                     
(1)  501/    2D18 :                     ; ====================================================================
(1)  502/    2D18 :                     
      60/    2D18 :                     ; RamCode_Scrn2:
      61/    2D18 :                     ; 		include "code/screen_2.asm"
      62/    2D18 :                     
      63/    2D18 :                     ; ====================================================================
      64/    2D18 :                     ; --------------------------------------------------------
      65/    2D18 :                     ; Stuff stored on the 880000+ ROM area
      66/    2D18 :                     ; --------------------------------------------------------
      67/    2D18 :                     
      68/    2D18 :                     		align 4
      69/    2D18 :                     ; 		phase $880000+*
      70/    2D18 :                     Z80_CODE:	include "system/md/z_driver.asm"	; Called once
(1)    1/    2D18 :                     ; --------------------------------------------------------
(1)    2/    2D18 :                     ; GEMA/Nikona sound driver v0.5
(1)    3/    2D18 :                     ; (C)2023 GenesisFan64
(1)    4/    2D18 :                     ;
(1)    5/    2D18 :                     ; Reads custom "miniature" ImpulseTracker files
(1)    6/    2D18 :                     ; and automaticly picks the soundchip(s) to play.
(1)    7/    2D18 :                     ;
(1)    8/    2D18 :                     ; Features:
(1)    9/    2D18 :                     ; - Support for 32X's PWM:
(1)   10/    2D18 :                     ;   | 7 extra pseudo-channels in either MONO
(1)   11/    2D18 :                     ;   | or STEREO.
(1)   12/    2D18 :                     ;   | ** REQUIRES specific code for the SH2 side
(1)   13/    2D18 :                     ;   | and enabling the use of CMD interrupt.
(1)   14/    2D18 :                     ;   | Uses Slave SH2.
(1)   15/    2D18 :                     ; - DMA-protection
(1)   16/    2D18 :                     ;   | This keeps DAC samplerate to a decent
(1)   17/    2D18 :                     ;   | quality.
(1)   18/    2D18 :                     ; - DAC Playback at 16000hz
(1)   19/    2D18 :                     ; - FM special mode with custom frequencies
(1)   20/    2D18 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   21/    2D18 :                     ;
(1)   22/    2D18 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   23/    2D18 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   24/    2D18 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   25/    2D18 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   26/    2D18 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   27/    2D18 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   28/    2D18 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   29/    2D18 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   30/    2D18 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   31/    2D18 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   32/    2D18 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   33/    2D18 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   34/    2D18 :                     ; --------------------------------------------------------
(1)   35/    2D18 :                     
(1)   36/    2D18 :                     Z80_TOP:
(1)   37/    2D18 :                     		cpu Z80			; Enter Z80
(1)   38/       0 :                     		phase 0
(1)   39/       0 :                     
(1)   40/       0 :                     ; --------------------------------------------------------
(1)   41/       0 :                     ; SETTINGS
(1)   42/       0 :                     ; --------------------------------------------------------
(1)   43/       0 :                     
(1)   44/       0 : =11H                MAX_TRKCHN	equ 17		; Max Internal tracker channels: 4PSG + 6FM + 7PWM
(1)   45/       0 : =10H                MAX_INS		equ 16		; Max Cache'd ROM instruments
(1)   46/       0 : =18H                MAX_BLOCKS	equ 24		; Max Cache'd ROM blocks
(1)   47/       0 : =18H                MAX_HEADS	equ 24		; Max Cache'd ROM headers
(1)   48/       0 : =40H                MAX_RCACH	equ 40h		; Max storage for ROM pattern data *1-BIT SIZES ONLY*
(1)   49/       0 : =8H                 MAX_TRFRPZ	equ 8		; Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   50/       0 : =10H                MAX_TBLSIZE	equ 10h		; Max size for chip tables ****
(1)   51/       0 : =0H                 ZSET_TESTME	equ 0		; Set to 1 to "hear"-test the DAC playback
(1)   52/       0 :                     
(1)   53/       0 :                     ; --------------------------------------------------------
(1)   54/       0 :                     ; Structs
(1)   55/       0 :                     ; --------------------------------------------------------
(1)   56/       0 :                     
(1)   57/       0 :                     ; trkBuff struct
(1)   58/       0 :                     ;
(1)   59/       0 :                     ; trk_Status: %ERPx xxx0
(1)   60/       0 :                     ; E - enabled
(1)   61/       0 :                     ; R - Init|Restart track
(1)   62/       0 :                     ; P - refill-on-playback
(1)   63/       0 :                     ; 0 - Use global sub-beat
(1)   64/       0 : =0H                 trk_status	equ 00h	; ** Track Status and flags (MUST BE at 00h)
(1)   65/       0 : =1H                 trk_seqId	equ 01h ; ** Track ID to play.
(1)   66/       0 : =2H                 trk_setBlk	equ 02h	; ** Start on this block
(1)   67/       0 : =3H                 trk_tickSet	equ 03h	; ** Ticks for this track
(1)   68/       0 : =4H                 trk_Blocks	equ 04h ; [W] Current track's blocks
(1)   69/       0 : =6H                 trk_Patt	equ 06h ; [W] Current track's heads and patterns
(1)   70/       0 : =8H                 trk_Instr	equ 08h ; [W] Current track's instruments
(1)   71/       0 : =AH                 trk_Read	equ 0Ah	; [W] Track current pattern-read pos
(1)   72/       0 : =CH                 trk_Rows	equ 0Ch	; [W] Track current row length
(1)   73/       0 : =EH                 trk_cachHalf	equ 0Eh ; ROM-cache halfcheck
(1)   74/       0 : =FH                 trk_cachInc	equ 0Fh ; ROM-cache increment
(1)   75/       0 : =10H                trk_rowPause	equ 10h	; Row-pause timer
(1)   76/       0 : =11H                trk_tickTmr	equ 11h	; Ticks timer
(1)   77/       0 : =12H                trk_currBlk	equ 12h	; Current block
(1)   78/       0 : =13H                trk_Panning	equ 13h ; Global panning for this track %LR000000
(1)   79/       0 : =14H                trk_Priority	equ 14h ; Priority level for this buffer
(1)   80/       0 : =15H                trk_LastBkIns	equ 15h
(1)   81/       0 : =16H                trk_LastBkBlk	equ 16h
(1)   82/       0 : =17H                trk_LastBkHdrs	equ 17h
(1)   83/       0 : =1CH                trk_MaxChnls	equ 1Ch	; MAX avaialble channels
(1)   84/       0 : =1DH                trk_MaxBlks	equ 1Dh ;     ----      blocks
(1)   85/       0 : =1EH                trk_MaxHdrs	equ 1Eh ;     ----      headers
(1)   86/       0 : =1FH                trk_MaxIns	equ 1Fh ;     ----      intruments
(1)   87/       0 : =20H                trk_RomCPatt	equ 20h ; [3b] ROM current pattern data to be cache'd
(1)   88/       0 : =23H                trk_RomPatt	equ 23h ; [3b] ROM TOP pattern data
(1)   89/       0 : =26H                trk_ChnList	equ 26h ; ** [W] Pointer to channel list for this buffer
(1)   90/       0 : =28H                trk_ChnCBlk	equ 28h ; ** [W] Pointer to block storage
(1)   91/       0 : =2AH                trk_ChnCHead	equ 2Ah ; ** [W] Pointer to header storage
(1)   92/       0 : =2CH                trk_ChnCIns	equ 2Ch	; ** [W] Pointer to intrument storage (ALWAYS used)
(1)   93/       0 : =2EH                trk_ChnCach	equ 2Eh	; ** [W] Pointer to pattern storage
(1)   94/       0 :                     
(1)   95/       0 :                     ; chnBuff struct, 8 bytes ONLY
(1)   96/       0 :                     ;
(1)   97/       0 :                     ; chnl_Flags: LR00evin
(1)   98/       0 :                     ; LR - Left/Right panning bits (REVERSE: 0-ON 1-OFF)
(1)   99/       0 :                     ; e  - Effect*
(1)  100/       0 :                     ; v  - Volume*
(1)  101/       0 :                     ; i  - Intrument*
(1)  102/       0 :                     ; n  - Note*
(1)  103/       0 :                     ; * Gets deleted later.
(1)  104/       0 :                     
(1)  105/       0 : =0H                 chnl_Flags	equ 0	; Playback flags
(1)  106/       0 : =1H                 chnl_Chip	equ 1	; Current Chip ID + priority for this channel
(1)  107/       0 : =2H                 chnl_Note	equ 2
(1)  108/       0 : =3H                 chnl_Ins	equ 3	; Starting from 01h
(1)  109/       0 : =4H                 chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)  110/       0 : =5H                 chnl_EffId	equ 5
(1)  111/       0 : =6H                 chnl_EffArg	equ 6
(1)  112/       0 : =7H                 chnl_Type	equ 7	; Impulse-note update bits
(1)  113/       0 :                     
(1)  114/       0 :                     ; --------------------------------------------------------
(1)  115/       0 :                     ; Variables
(1)  116/       0 :                     ; --------------------------------------------------------
(1)  117/       0 :                     
(1)  118/       0 :                     ; Z80 opcode labels for the wave playback routines.
(1)  119/       0 : =0H                 zopcNop		equ	00h
(1)  120/       0 : =8H                 zopcEx		equ	08h
(1)  121/       0 : =C9H                zopcRet		equ 	0C9h
(1)  122/       0 : =D9H                zopcExx		equ	0D9h		; (dac_me ONLY)
(1)  123/       0 : =F5H                zopcPushAf	equ	0F5h		; (dac_fill ONLY)
(1)  124/       0 :                     
(1)  125/       0 :                     ; PSG external control
(1)  126/       0 : =0H                 COM		equ	0
(1)  127/       0 : =4H                 LEV		equ	4
(1)  128/       0 : =8H                 ATK		equ	8
(1)  129/       0 : =CH                 DKY		equ	12
(1)  130/       0 : =10H                SLV		equ	16
(1)  131/       0 : =14H                RRT		equ	20
(1)  132/       0 : =18H                MODE		equ	24
(1)  133/       0 : =1CH                DTL		equ	28
(1)  134/       0 : =20H                DTH		equ	32
(1)  135/       0 : =24H                ALV		equ	36
(1)  136/       0 : =28H                FLG		equ	40
(1)  137/       0 : =2CH                TMR		equ	44
(1)  138/       0 : =30H                PVOL		equ	48
(1)  139/       0 : =34H                PARP		equ	52
(1)  140/       0 : =38H                PTMR		equ	56
(1)  141/       0 :                     
(1)  142/       0 : =0H                 PWCOM		equ	0
(1)  143/       0 : =8H                 PWPTH_V		equ	8	; Volume | Pitch MSB (%VVVVVVPP)
(1)  144/       0 : =10H                PWPHL		equ	16	; Pitch LSB
(1)  145/       0 : =18H                PWOUTF		equ	24	; Output mode/bits + SH2 MSB: ROM $02 or SDRAM $06
(1)  146/       0 : =20H                PWINSH		equ	32	; 24-bit sample address
(1)  147/       0 : =28H                PWINSM		equ	40
(1)  148/       0 : =30H                PWINSL		equ	48
(1)  149/       0 :                     
(1)  150/       0 :                     ; ====================================================================
(1)  151/       0 :                     ; --------------------------------------------------------
(1)  152/       0 :                     ; Code starts here
(1)  153/       0 :                     ; --------------------------------------------------------
(1)  154/       0 :                     
(1)  155/       0 : F3                  		di			; Disable interrputs
(1)  156/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  157/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  158/       6 : 18 7B               		jr	z80_init	; Jump to z80_init
(1)  159/       8 :                     
(1)  160/       8 :                     ; --------------------------------------------------------
(1)  161/       8 :                     ; RST 8 (dac_me)
(1)  162/       8 :                     ; *** self-modifiable code ***
(1)  163/       8 :                     ;
(1)  164/       8 :                     ; Writes wave data to DAC using data stored
(1)  165/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  166/       8 :                     ; opcodes to keep the samplerate stable.
(1)  167/       8 :                     ;
(1)  168/       8 :                     ; Input (EXX):
(1)  169/       8 :                     ;  c - WAVE buffer MSB
(1)  170/       8 :                     ; de - Pitch (xx.00)
(1)  171/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  172/       8 :                     ;
(1)  173/       8 :                     ; Uses (EXX):
(1)  174/       8 :                     ; b
(1)  175/       8 :                     ;
(1)  176/       8 :                     ; Notes:
(1)  177/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  178/       8 :                     ; wave playback.
(1)  179/       8 :                     ;
(1)  180/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  181/       8 :                     ; and
(1)  182/       8 :                     ; call dac_off to disable and enable FM6.
(1)  183/       8 :                     ; --------------------------------------------------------
(1)  184/       8 :                     
(1)  185/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  186/       8 : (MACRO)             		org 8
(1)  187/       8 : D9                  dac_me:		exx			; <-- this changes between EXX(play) and RET(stop)
(1)  188/       9 : 08                  		ex	af,af'		; Swap af
(1)  189/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  190/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  191/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  192/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  193/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  194/      12 : 7E                  		ld	a,(hl)		; Now read byte from the wave buffer
(1)  195/      13 : 32 01 40            		ld	(Zym_data_1),a	; and write it to DAC
(1)  196/      16 : 65                  		ld	h,l		; get hl back
(1)  197/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  198/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  199/      19 : 08                  		ex	af,af'		; return af
(1)  200/      1A : D9                  		exx
(1)  201/      1B : C9                  		ret
(1)  202/      1C :                     
(1)  203/      1C :                     ; --------------------------------------------------------
(1)  204/      1C :                     ; 1Ch
(1)  205/      1C : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1)  206/      1E : E8 00               sbeatPtck	dw 200+32	; Default global subbeats (-32 for PAL)
(1)  207/      20 :                     
(1)  208/      20 :                     ; --------------------------------------------------------
(1)  209/      20 :                     ; RST 20h (dac_me)
(1)  210/      20 :                     ; *** self-modifiable code ***
(1)  211/      20 :                     ;
(1)  212/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  213/      20 :                     ; it playing.
(1)  214/      20 :                     ;
(1)  215/      20 :                     ; *** THIS BREAKS ALL REGISTERS IF REFILL
(1)  216/      20 :                     ; IS REQUESTED ***
(1)  217/      20 :                     ; --------------------------------------------------------
(1)  218/      20 :                     
(1)  219/      20 : (MACRO)             		org 20h
(1)  220/      20 : F5                  dac_fill:	push	af		; <-- changes between PUSH AF(playing) and RET(stopped)
(1)  221/      21 : 3A 2F 00            		ld	a,(dDacFifoMid)	; a - Get mid-way value
(1)  222/      24 : D9                  		exx
(1)  223/      25 : AC                  		xor	h		; Grab LSB.00
(1)  224/      26 : D9                  		exx
(1)  225/      27 : E6 80               		and	80h		; Check if bit changed
(1)  226/      29 : C2 6B 10            		jp	nz,dac_refill	; If yes: Refill and update LSB to check
(1)  227/      2C : F1                  		pop	af
(1)  228/      2D : C9                  		ret
(1)  229/      2E :                     
(1)  230/      2E :                     ; --------------------------------------------------------
(1)  231/      2E :                     ; 02Eh
(1)  232/      2E : 00                  currTickBits	db 0			; 2Eh: Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1)  233/      2F : 00                  dDacFifoMid	db 0			; 2Fh: WAVE play halfway refill flag (00h/80h)
(1)  234/      30 : 00 00 00            dDacPntr	db 0,0,0		; 30h: WAVE play current ROM position
(1)  235/      33 : 00 00 00            dDacCntr	db 0,0,0		; 33h: WAVE play length counter
(1)  236/      36 : 00                  x68ksrclsb	db 0			; 36h: transferRom temporal LSB
(1)  237/      37 : 00                  x68ksrcmid	db 0			; 37h: transferRom temporal MID
(1)  238/      38 :                     
(1)  239/      38 :                     ; --------------------------------------------------------
(1)  240/      38 :                     ; Z80 Interrupt at 0038h
(1)  241/      38 :                     ; --------------------------------------------------------
(1)  242/      38 :                     
(1)  243/      38 : (MACRO)             		org 38h			; Align 38h
(1)  244/      38 : ED 73 36 16         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, use tickFlag+1)
(1)  245/      3C : F3                  		di			; Disable interrupt
(1)  246/      3D : C9                  		ret
(1)  247/      3E :                     
(1)  248/      3E :                     ; --------------------------------------------------------
(1)  249/      3E :                     ; 03Eh
(1)  250/      3E : 00                  trkListPage	db 0			; 3Eh: Current PSGN mode
(1)  251/      3F : 00                  marsUpd		db 0			; 3Fh: Flag to request a PWM transfer
(1)  252/      40 :                     
(1)  253/      40 :                     ; --------------------------------------------------------
(1)  254/      40 :                     ; 68K Read/Write area at 40h
(1)  255/      40 :                     ; --------------------------------------------------------
(1)  256/      40 :                     
(1)  257/      40 : (MACRO)             		org 40h
(1)  258/      40 :                     commZfifo	ds 40h			; Buffer for commands: 40h bytes
(1)  259/      80 : 00                  commZWrite	db 0			; 80h: cmd fifo wptr (from 68k)
(1)  260/      81 : 00                  commZRomBlk	db 0			; 81h: 68k ROM block flag
(1)  261/      82 : 00                  marsBlock	db 0			; 82h: flag to BLOCK PWM transfers.
(1)  262/      83 :                     
(1)  263/      83 :                     ; --------------------------------------------------------
(1)  264/      83 :                     ; Initilize
(1)  265/      83 :                     ; --------------------------------------------------------
(1)  266/      83 :                     
(1)  267/      83 :                     z80_init:
(1)  268/      83 : CD 1D 0D            		call	gema_init		; Init values
(1)  269/      86 : FB                  		ei
(1)  270/      87 :                     
(1)  271/      87 :                     ; --------------------------------------------------------
(1)  272/      87 :                     ; MAIN LOOP
(1)  273/      87 :                     ; --------------------------------------------------------
(1)  274/      87 :                     
(1)  275/      87 :                     drv_loop:
(1)  276/      87 : CF                  		rst	8
(1)  277/      88 : CD C8 0D            		call	get_tick		; Check for Tick on VBlank
(1)  278/      8B : E7                  		rst	20h			; Refill wave
(1)  279/      8C : CF                  		rst	8
(1)  280/      8D : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  281/      8F : 3A 38 16            		ld	a,(tickCnt)
(1)  282/      92 : D6 01               		sub	1
(1)  283/      94 : 38 0B               		jr	c,.noticks
(1)  284/      96 : 32 38 16            		ld	(tickCnt),a
(1)  285/      99 : CD 8A 0E            		call	chip_env		; Process PSG and YM
(1)  286/      9C : CD C8 0D            		call	get_tick		; Check for another tick
(1)  287/      9F : 06 01               		ld 	b,01b			; Set TICK (01b) flag, and clear BEAT
(1)  288/      A1 :                     .noticks:
(1)  289/      A1 : 3A 1D 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  290/      A4 : D6 01               		sub	1
(1)  291/      A6 : 38 06               		jr	c,.nobeats
(1)  292/      A8 : CF                  		rst	8
(1)  293/      A9 : 32 1D 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  294/      AC : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  295/      AE :                     .nobeats:
(1)  296/      AE : CF                  		rst	8
(1)  297/      AF : 78                  		ld	a,b			; Any beat/tick change?
(1)  298/      B0 : B7                  		or	a
(1)  299/      B1 : 28 14               		jr	z,.neither
(1)  300/      B3 : 32 2E 00            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  301/      B6 : CF                  		rst	8
(1)  302/      B7 : CD C8 0D            		call	get_tick
(1)  303/      BA : CD 09 05            		call	set_chips		; Send changes to sound chips
(1)  304/      BD : CD C8 0D            		call	get_tick
(1)  305/      C0 : CF                  		rst	8
(1)  306/      C1 : CD E8 01            		call	upd_track		; Update track data
(1)  307/      C4 : CD C8 0D            		call	get_tick
(1)  308/      C7 :                     .neither:
(1)  309/      C7 : CD 1B 0D            		call	ex_comm			; External communication
(1)  310/      CA : CD C8 0D            		call	get_tick
(1)  311/      CD :                     .next_cmd:
(1)  312/      CD : 3A 80 00            		ld	a,(commZWrite)		; Check command READ and WRITE indexes
(1)  313/      D0 : 47                  		ld	b,a
(1)  314/      D1 : 3A 4F 16            		ld	a,(commZRead)
(1)  315/      D4 : B8                  		cp	b
(1)  316/      D5 : 28 B0               		jr	z,drv_loop		; If both are equal: no requests
(1)  317/      D7 : CF                  		rst	8
(1)  318/      D8 : CD F1 00            		call	.grab_arg
(1)  319/      DB : FE FF               		cp	-1			; Got -1? (Start of command)
(1)  320/      DD : 20 A8               		jr	nz,drv_loop
(1)  321/      DF : CD F1 00            		call	.grab_arg		; Read command number
(1)  322/      E2 : 87                  		add	a,a			; * 2
(1)  323/      E3 : 21 11 01            		ld	hl,.list		; Then jump to one of these...
(1)  324/      E6 : CF                  		rst	8
(1)  325/      E7 : 16 00               		ld	d,0
(1)  326/      E9 : 5F                  		ld	e,a
(1)  327/      EA : 19                  		add	hl,de
(1)  328/      EB : 7E                  		ld	a,(hl)
(1)  329/      EC : 23                  		inc	hl
(1)  330/      ED : 66                  		ld	h,(hl)
(1)  331/      EE : CF                  		rst	8
(1)  332/      EF : 6F                  		ld	l,a
(1)  333/      F0 : E9                  		jp	(hl)
(1)  334/      F1 :                     
(1)  335/      F1 :                     ; --------------------------------------------------------
(1)  336/      F1 :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  337/      F1 :                     ; --------------------------------------------------------
(1)  338/      F1 :                     
(1)  339/      F1 :                     .grab_arg:
(1)  340/      F1 : D5                  		push	de
(1)  341/      F2 : E5                  		push	hl
(1)  342/      F3 :                     .getcbytel:
(1)  343/      F3 : 3A 80 00            		ld	a,(commZWrite)
(1)  344/      F6 : 57                  		ld	d,a
(1)  345/      F7 : CF                  		rst	8
(1)  346/      F8 : 3A 4F 16            		ld	a,(commZRead)
(1)  347/      FB : BA                  		cp	d
(1)  348/      FC : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  349/      FE : CF                  		rst	8
(1)  350/      FF : 16 00               		ld	d,0
(1)  351/     101 : 5F                  		ld	e,a
(1)  352/     102 : 21 40 00            		ld	hl,commZfifo
(1)  353/     105 : 19                  		add	hl,de
(1)  354/     106 : CF                  		rst	8
(1)  355/     107 : 3C                  		inc	a
(1)  356/     108 : E6 3F               		and	3Fh		; ** command list limit
(1)  357/     10A : 32 4F 16            		ld	(commZRead),a
(1)  358/     10D : 7E                  		ld	a,(hl)		; a - the byte we got
(1)  359/     10E : E1                  		pop	hl
(1)  360/     10F : D1                  		pop	de
(1)  361/     110 : C9                  		ret
(1)  362/     111 :                     
(1)  363/     111 :                     ; --------------------------------------------------------
(1)  364/     111 :                     
(1)  365/     111 :                     .list:
(1)  366/     111 : 31 01               		dw .cmnd_0		; 00h -
(1)  367/     113 : 62 01               		dw .cmnd_1		; 01h - Play by track number
(1)  368/     115 : 78 01               		dw .cmnd_2		; 02h - Stop by track number
(1)  369/     117 : 31 01               		dw .cmnd_0		; 03h - Resume by track number
(1)  370/     119 : 31 01               		dw .cmnd_0		; 04h -
(1)  371/     11B : 31 01               		dw .cmnd_0		; 05h -
(1)  372/     11D : 31 01               		dw .cmnd_0		; 06h -
(1)  373/     11F : 31 01               		dw .cmnd_0		; 07h -
(1)  374/     121 : 93 01               		dw .cmnd_8		; 08h - Stop ALL
(1)  375/     123 : 31 01               		dw .cmnd_0		; 09h -
(1)  376/     125 : 31 01               		dw .cmnd_0		; 0Ah -
(1)  377/     127 : 31 01               		dw .cmnd_0		; 0Bh -
(1)  378/     129 : B5 01               		dw .cmnd_C		; 0Ch - Set GLOBAL sub-beats
(1)  379/     12B : 31 01               		dw .cmnd_0		; 0Dh -
(1)  380/     12D : 31 01               		dw .cmnd_0		; 0Eh -
(1)  381/     12F : 31 01               		dw .cmnd_0		; 0Fh -
(1)  382/     131 :                     
(1)  383/     131 :                     ; --------------------------------------------------------
(1)  384/     131 :                     ; Command 00h
(1)  385/     131 :                     ;
(1)  386/     131 :                     ; Reserved for TESTING purposes.
(1)  387/     131 :                     ; --------------------------------------------------------
(1)  388/     131 :                     
(1)  389/     131 :                     ; TEST COMMAND
(1)  390/     131 :                     
(1)  391/     131 :                     .cmnd_0:
(1)  392/     131 :                     ; 		jp	.next_cmd
(1)  393/     131 :                     
(1)  394/     131 :                     ; 	if MARS
(1)  395/     131 :                     ; 		ld	iy,pwmcom
(1)  396/     131 :                     ; 		ld	hl,.tempset
(1)  397/     131 :                     ; 		ld	de,8
(1)  398/     131 :                     ; 		ld	b,e
(1)  399/     131 :                     ; 		dec	b
(1)  400/     131 :                     ; .copyme:
(1)  401/     131 :                     ; 		ld	a,(hl)
(1)  402/     131 :                     ; 		ld	(iy),a
(1)  403/     131 :                     ; 		inc	hl
(1)  404/     131 :                     ; 		add	iy,de
(1)  405/     131 :                     ; 		djnz	.copyme
(1)  406/     131 :                     ; 		ld	a,1
(1)  407/     131 :                     ; 		ld	(marsUpd),a
(1)  408/     131 :                     ; 		jp	.next_cmd
(1)  409/     131 :                     ; .tempset:
(1)  410/     131 :                     ; 		db 0001b
(1)  411/     131 :                     ; 		db 01h
(1)  412/     131 :                     ; 		db 00h
(1)  413/     131 :                     ; 		db 11110000b|02h
(1)  414/     131 :                     ; 		db (SmpIns_TEST>>16)&0FFh
(1)  415/     131 :                     ; 		db (SmpIns_TEST>>8)&0FFh
(1)  416/     131 :                     ; 		db (SmpIns_TEST)&0FFh
(1)  417/     131 :                     ; 	else
(1)  418/     131 :                     ; 		jp	.next_cmd
(1)  419/     131 :                     ; 	endif
(1)  420/     131 :                     
(1)  421/     131 : CD 21 10            		call	dac_off
(1)  422/     134 : FD 21 2A 16         		ld	iy,wave_Start
(1)  423/     138 : 21 57 01            		ld	hl,.tempset
(1)  424/     13B : 06 0B               		ld	b,0Bh
(1)  425/     13D :                     .copyme:
(1)  426/     13D : 7E                  		ld	a,(hl)
(1)  427/     13E : FD 77 00            		ld	(iy),a
(1)  428/     141 : 23                  		inc	hl
(1)  429/     142 : FD 23               		inc	iy
(1)  430/     144 : 10 F7               		djnz	.copyme
(1)  431/     146 : 21 00 01            		ld	hl,100h
(1)  432/     149 : 22 33 16            		ld	(wave_Pitch),hl
(1)  433/     14C : 3E 01               		ld	a,1
(1)  434/     14E : 32 35 16            		ld	(wave_Flags),a
(1)  435/     151 : CD 36 10            		call	dac_play
(1)  436/     154 : C3 CD 00            		jp	.next_cmd
(1)  437/     157 :                     .tempset:
(1)  438/     157 : 6E C5               		dw TEST_WAVE&0FFFFh
(1)  439/     159 : 01                  		db TEST_WAVE>>16&0FFh
(1)  440/     15A : 00 E7               		dw (TEST_WAVE_E-TEST_WAVE)&0FFFFh
(1)  441/     15C : 00                  		db (TEST_WAVE_E-TEST_WAVE)>>16&0FFh
(1)  442/     15D : 00 00               		dw 0
(1)  443/     15F : 00                  		db 0
(1)  444/     160 : 00 01               		dw 0100h;+(ZSET_WTUNE)
(1)  445/     162 :                     
(1)  446/     162 :                     ; --------------------------------------------------------
(1)  447/     162 :                     ; Command 01h:
(1)  448/     162 :                     ;
(1)  449/     162 :                     ; Make new track by sequence number
(1)  450/     162 :                     ; --------------------------------------------------------
(1)  451/     162 :                     
(1)  452/     162 :                     .cmnd_1:
(1)  453/     162 : CD F1 00            		call	.grab_arg	; d0: Sequence ID
(1)  454/     165 : 4F                  		ld	c,a		; copy to c
(1)  455/     166 : CD C6 01            		call	.srch_frid	; Search buffer with same ID or FREE to use.
(1)  456/     169 : FE FF               		cp	-1
(1)  457/     16B : CA CD 00            		jp	z,.next_cmd	; Return if failed.
(1)  458/     16E : 36 C0               		ld	(hl),0C0h	; Flags: Enable+Restart bits
(1)  459/     170 : 23                  		inc	hl
(1)  460/     171 : 71                  		ld	(hl),c		; ** write trk_seqId
(1)  461/     172 : CD DC 04            		call	get_RomTrcks
(1)  462/     175 : C3 CD 00            		jp	.next_cmd
(1)  463/     178 :                     
(1)  464/     178 :                     ; --------------------------------------------------------
(1)  465/     178 :                     ; Command 02h:
(1)  466/     178 :                     ;
(1)  467/     178 :                     ; Stop track by sequence number
(1)  468/     178 :                     ; --------------------------------------------------------
(1)  469/     178 :                     
(1)  470/     178 :                     .cmnd_2:
(1)  471/     178 : CD F1 00            		call	.grab_arg	; d0: Sequence ID
(1)  472/     17B : 4F                  		ld	c,a		; copy to c
(1)  473/     17C : CD C6 01            		call	.srch_frid
(1)  474/     17F : FE FF               		cp	-1
(1)  475/     181 : CA CD 00            		jp	z,.next_cmd
(1)  476/     184 : 7E                  		ld	a,(hl)
(1)  477/     185 : CB 7F               		bit	7,a
(1)  478/     187 : CA CD 00            		jp	z,.next_cmd
(1)  479/     18A : 36 FF               		ld	(hl),-1		; Flags | Enable+Restart bits
(1)  480/     18C : 23                  		inc	hl
(1)  481/     18D : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  482/     18F : CF                  		rst	8
(1)  483/     190 : C3 CD 00            		jp	.next_cmd
(1)  484/     193 :                     
(1)  485/     193 :                     ; --------------------------------------------------------
(1)  486/     193 :                     ; Command 08h:
(1)  487/     193 :                     ;
(1)  488/     193 :                     ; Stop ALL tracks
(1)  489/     193 :                     ; --------------------------------------------------------
(1)  490/     193 :                     
(1)  491/     193 :                     .cmnd_8:
(1)  492/     193 : DD 21 3A 13         		ld	ix,nikona_BuffList
(1)  493/     197 :                     .next_sall:
(1)  494/     197 : DD 7E 00            		ld	a,(ix)
(1)  495/     19A : FE FF               		cp	-1
(1)  496/     19C : CA CD 00            		jp	z,.next_cmd
(1)  497/     19F : DD 66 01            		ld	h,(ix+1)
(1)  498/     1A2 : 6F                  		ld	l,a
(1)  499/     1A3 : 7E                  		ld	a,(hl)
(1)  500/     1A4 : CB 7F               		bit	7,a
(1)  501/     1A6 : 28 05               		jr	z,.not_on
(1)  502/     1A8 : 36 FF               		ld	(hl),-1		; Flags | Enable+Restart bits
(1)  503/     1AA : 23                  		inc	hl
(1)  504/     1AB : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  505/     1AD :                     .not_on:
(1)  506/     1AD : 11 10 00            		ld	de,10h
(1)  507/     1B0 : DD 19               		add	ix,de
(1)  508/     1B2 : C3 97 01            		jp	.next_sall
(1)  509/     1B5 :                     
(1)  510/     1B5 :                     ; --------------------------------------------------------
(1)  511/     1B5 :                     ; Command 0Ch:
(1)  512/     1B5 :                     ;
(1)  513/     1B5 :                     ; Set global sub-beats
(1)  514/     1B5 :                     ; --------------------------------------------------------
(1)  515/     1B5 :                     
(1)  516/     1B5 :                     .cmnd_C:
(1)  517/     1B5 : CD F1 00            		call	.grab_arg	; d0.w: $00xx
(1)  518/     1B8 : 4F                  		ld	c,a
(1)  519/     1B9 : CD F1 00            		call	.grab_arg	; d0.w: $xx00
(1)  520/     1BC : 32 1F 00            		ld	(sbeatPtck+1),a
(1)  521/     1BF : 79                  		ld	a,c
(1)  522/     1C0 : 32 1E 00            		ld	(sbeatPtck),a
(1)  523/     1C3 : C3 CD 00            		jp	.next_cmd
(1)  524/     1C6 :                     
(1)  525/     1C6 :                     ; ------------------------------------------------
(1)  526/     1C6 :                     
(1)  527/     1C6 :                     .srch_frid:
(1)  528/     1C6 : DD 21 3A 13         		ld	ix,nikona_BuffList
(1)  529/     1CA : 11 10 00            		ld	de,10h
(1)  530/     1CD :                     .next:
(1)  531/     1CD : DD 7E 00            		ld	a,(ix)
(1)  532/     1D0 : FE FF               		cp	-1
(1)  533/     1D2 : C8                  		ret	z
(1)  534/     1D3 : DD 66 01            		ld	h,(ix+1)
(1)  535/     1D6 : 6F                  		ld	l,a
(1)  536/     1D7 : DD 19               		add	ix,de
(1)  537/     1D9 : 23                  		inc	hl
(1)  538/     1DA : CF                  		rst	8
(1)  539/     1DB : 7E                  		ld	a,(hl)		; ** a - trk_Id
(1)  540/     1DC : 2B                  		dec	hl
(1)  541/     1DD : B9                  		cp	c
(1)  542/     1DE : 28 05               		jr	z,.found
(1)  543/     1E0 : 7E                  		ld	a,(hl)		; ** a - trk_status
(1)  544/     1E1 : B7                  		or	a
(1)  545/     1E2 : FA CD 01            		jp	m,.next
(1)  546/     1E5 :                     .found:
(1)  547/     1E5 : CF                  		rst	8
(1)  548/     1E6 : AF                  		xor	a
(1)  549/     1E7 : C9                  		ret
(1)  550/     1E8 :                     
(1)  551/     1E8 :                     ; ====================================================================
(1)  552/     1E8 :                     ; ----------------------------------------------------------------
(1)  553/     1E8 :                     ; MAIN Playback section
(1)  554/     1E8 :                     ; ----------------------------------------------------------------
(1)  555/     1E8 :                     
(1)  556/     1E8 :                     ; ============================================================
(1)  557/     1E8 :                     ; --------------------------------------------------------
(1)  558/     1E8 :                     ; Read INTERNAL mini-impulse-tracker data
(1)  559/     1E8 :                     ; --------------------------------------------------------
(1)  560/     1E8 :                     
(1)  561/     1E8 :                     upd_track:
(1)  562/     1E8 : E7                  		rst	20h			; Refill wave
(1)  563/     1E9 : FD 21 3A 13         		ld	iy,nikona_BuffList
(1)  564/     1ED :                     .trk_buffrs:
(1)  565/     1ED : CF                  		rst	8
(1)  566/     1EE : FD 7E 00            		ld	a,(iy)
(1)  567/     1F1 : FE FF               		cp	-1
(1)  568/     1F3 : C8                  		ret	z
(1)  569/     1F4 : FD E5               		push	iy
(1)  570/     1F6 : FD 6E 00            		ld	l,(iy)
(1)  571/     1F9 : FD 66 01            		ld	h,(iy+1)
(1)  572/     1FC : CD 09 02            		call	.read_track
(1)  573/     1FF : CF                  		rst	8
(1)  574/     200 : FD E1               		pop	iy
(1)  575/     202 : 11 10 00            		ld	de,10h
(1)  576/     205 : FD 19               		add	iy,de
(1)  577/     207 : 18 E4               		jr	.trk_buffrs
(1)  578/     209 :                     
(1)  579/     209 :                     ; ----------------------------------------
(1)  580/     209 :                     ; iy - Track buffer
(1)  581/     209 :                     
(1)  582/     209 :                     .read_track:
(1)  583/     209 : CF                  		rst	8
(1)  584/     20A : E5                  		push	hl
(1)  585/     20B : FD E1               		pop	iy
(1)  586/     20D : FD 46 00            		ld	b,(iy+trk_status)	; b - Track status and settings
(1)  587/     210 : CB 78               		bit	7,b			; bit7: Track active?
(1)  588/     212 : C8                  		ret	z
(1)  589/     213 : FE FF               		cp	-1			; Mid-silence request?
(1)  590/     215 : C8                  		ret	z
(1)  591/     216 : 3A 2E 00            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  592/     219 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  593/     21B : 28 04               		jr	z,.sfxmd
(1)  594/     21D : CB 4F               		bit	1,a			; BEAT passed?
(1)  595/     21F : C8                  		ret	z			;
(1)  596/     220 : CF                  		rst	8
(1)  597/     221 :                     .sfxmd:
(1)  598/     221 : CB 47               		bit	0,a			; TICK passed?
(1)  599/     223 : C8                  		ret	z
(1)  600/     224 :                     	; *** Start reading notes ***
(1)  601/     224 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  602/     226 : C4 FF 03            		call	nz,.first_fill
(1)  603/     229 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  604/     22B : C4 F8 03            		call	nz,.effect_fill
(1)  605/     22E : FD 7E 11            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  606/     231 : 3D                  		dec	a
(1)  607/     232 : FD 77 11            		ld	(iy+trk_tickTmr),a
(1)  608/     235 : B7                  		or	a
(1)  609/     236 : C0                  		ret	nz			; If TICK != 0, Exit
(1)  610/     237 : CF                  		rst	8
(1)  611/     238 : FD 7E 03            		ld	a,(iy+trk_tickSet)	; Set new tick timer
(1)  612/     23B : FD 77 11            		ld	(iy+trk_tickTmr),a
(1)  613/     23E : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  614/     241 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  615/     244 : 79                  		ld	a,c			; Check rowcount
(1)  616/     245 : B0                  		or	b
(1)  617/     246 : 20 13               		jr	nz,.row_active
(1)  618/     248 : FD 7E 12            		ld	a,(iy+trk_currBlk)	; If bc == 0: Next block
(1)  619/     24B : 3C                  		inc	a
(1)  620/     24C : FD 77 12            		ld 	(iy+trk_currBlk),a
(1)  621/     24F : CD 7C 03            		call	.set_track
(1)  622/     252 : FE FF               		cp	-1			; Track finished?
(1)  623/     254 : C8                  		ret	z
(1)  624/     255 : FD 4E 0C            		ld	c,(iy+trk_Rows)
(1)  625/     258 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  626/     25B :                     .row_active:
(1)  627/     25B : CF                  		rst	8
(1)  628/     25C : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  629/     25F : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  630/     262 :                     
(1)  631/     262 :                     ; --------------------------------
(1)  632/     262 :                     ; Main reading loop
(1)  633/     262 :                     ; --------------------------------
(1)  634/     262 :                     
(1)  635/     262 :                     .next_note:
(1)  636/     262 : FD 7E 10            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  637/     265 : B7                  		or	a
(1)  638/     266 : 20 16               		jr	nz,.decrow
(1)  639/     268 : 7E                  		ld	a,(hl)			; Check if timer or note
(1)  640/     269 : B7                  		or	a
(1)  641/     26A : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  642/     26C : FA 89 02            		jp	m,.has_note		; 80h-0FFh: note data
(1)  643/     26F : FD 77 10            		ld	(iy+trk_rowPause),a
(1)  644/     272 :                     
(1)  645/     272 :                     ; --------------------------------
(1)  646/     272 :                     ; Exit
(1)  647/     272 :                     ; --------------------------------
(1)  648/     272 :                     
(1)  649/     272 :                     .exit:
(1)  650/     272 : CF                  		rst	8
(1)  651/     273 : CD 44 03            		call	.inc_cpatt
(1)  652/     276 : FD 75 0A            		ld	(iy+trk_Read),l		; Update read location
(1)  653/     279 : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  654/     27C : 18 03               		jr	.decrow_e
(1)  655/     27E :                     .decrow:
(1)  656/     27E : FD 35 10            		dec	(iy+trk_rowPause)
(1)  657/     281 :                     .decrow_e:
(1)  658/     281 : 0B                  		dec	bc			; Decrement this row
(1)  659/     282 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row and exit.
(1)  660/     285 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  661/     288 : C9                  		ret
(1)  662/     289 :                     
(1)  663/     289 :                     ; --------------------------------
(1)  664/     289 :                     ; New note request
(1)  665/     289 :                     ; --------------------------------
(1)  666/     289 :                     
(1)  667/     289 :                     .has_note:
(1)  668/     289 : CF                  		rst	8
(1)  669/     28A : C5                  		push	bc			; Save rowcount
(1)  670/     28B : 4F                  		ld	c,a			; Backup control|channel to c
(1)  671/     28C : CD 44 03            		call	.inc_cpatt		; Increment hl
(1)  672/     28F : 79                  		ld	a,c			; Read control|channel
(1)  673/     290 : FD 5E 26            		ld	e,(iy+trk_ChnList)	; Point to track-data
(1)  674/     293 : FD 56 27            		ld	d,(iy+(trk_ChnList+1))
(1)  675/     296 : D5                  		push	de
(1)  676/     297 : DD E1               		pop	ix
(1)  677/     299 : E6 3F               		and	00111111b		; Filter channel bits
(1)  678/     29B : 87                  		add	a,a
(1)  679/     29C : 87                  		add	a,a
(1)  680/     29D : 87                  		add	a,a			; * 8
(1)  681/     29E : 16 00               		ld 	d,0
(1)  682/     2A0 : 5F                  		ld	e,a
(1)  683/     2A1 : CF                  		rst	8
(1)  684/     2A2 : DD 19               		add	ix,de
(1)  685/     2A4 : DD 46 07            		ld	b,(ix+chnl_Type)	; b - Current TYPE byte
(1)  686/     2A7 : CB 71               		bit	6,c			; Next byte is new type?
(1)  687/     2A9 : 28 08               		jr	z,.old_type
(1)  688/     2AB : 7E                  		ld	a,(hl)
(1)  689/     2AC : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  690/     2AF : 47                  		ld	b,a			; Set to b
(1)  691/     2B0 : CD 44 03            		call	.inc_cpatt
(1)  692/     2B3 :                     .old_type:
(1)  693/     2B3 :                     	; b - evinEVIN
(1)  694/     2B3 :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  695/     2B3 :                     	;     evin: byte is already stored on track-channel buffer
(1)  696/     2B3 :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  697/     2B3 : CF                  		rst	8
(1)  698/     2B4 : CB 40               		bit	0,b
(1)  699/     2B6 : 28 07               		jr	z,.no_note
(1)  700/     2B8 : 7E                  		ld	a,(hl)
(1)  701/     2B9 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  702/     2BC : CD 44 03            		call	.inc_cpatt
(1)  703/     2BF :                     .no_note:
(1)  704/     2BF : CB 48               		bit	1,b
(1)  705/     2C1 : 28 07               		jr	z,.no_ins
(1)  706/     2C3 : 7E                  		ld	a,(hl)
(1)  707/     2C4 : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  708/     2C7 : CD 44 03            		call	.inc_cpatt
(1)  709/     2CA :                     .no_ins:
(1)  710/     2CA : CB 50               		bit	2,b
(1)  711/     2CC : 28 07               		jr	z,.no_vol
(1)  712/     2CE : 7E                  		ld	a,(hl)
(1)  713/     2CF : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  714/     2D2 : CD 44 03            		call	.inc_cpatt
(1)  715/     2D5 :                     .no_vol:
(1)  716/     2D5 : CB 58               		bit	3,b
(1)  717/     2D7 : 28 0F               		jr	z,.no_eff
(1)  718/     2D9 : 7E                  		ld	a,(hl)
(1)  719/     2DA : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  720/     2DD : CD 44 03            		call	.inc_cpatt
(1)  721/     2E0 : CF                  		rst	8
(1)  722/     2E1 : 7E                  		ld	a,(hl)
(1)  723/     2E2 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  724/     2E5 : CD 44 03            		call	.inc_cpatt
(1)  725/     2E8 :                     .no_eff:
(1)  726/     2E8 : 78                  		ld	a,b		; Merge the Impulse recycle bits into main bits
(1)  727/     2E9 : 0F                  		rrca
(1)  728/     2EA : 0F                  		rrca
(1)  729/     2EB : 0F                  		rrca
(1)  730/     2EC : 0F                  		rrca
(1)  731/     2ED : E6 0F               		and	00001111b
(1)  732/     2EF : 4F                  		ld	c,a
(1)  733/     2F0 : 78                  		ld	a,b
(1)  734/     2F1 : E6 0F               		and	00001111b
(1)  735/     2F3 : B1                  		or	c
(1)  736/     2F4 : CF                  		rst	8
(1)  737/     2F5 : 4F                  		ld	c,a
(1)  738/     2F6 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  739/     2F9 : B1                  		or	c
(1)  740/     2FA : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  741/     2FD : C1                  		pop	bc		; Restore rowcount
(1)  742/     2FE :                     
(1)  743/     2FE :                     	; Check for effects that affect
(1)  744/     2FE :                     	; internal playback:
(1)  745/     2FE :                     	; Jump, Ticks, etc.
(1)  746/     2FE : E6 08               		and	1000b		; Only check for the EFFECT bit
(1)  747/     300 : CA 62 02            		jp	z,.next_note
(1)  748/     303 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  749/     306 : B7                  		or	a		; 00h = invalid effect
(1)  750/     307 : CA 62 02            		jp	z,.next_note
(1)  751/     30A : FE 01               		cp	1		; Effect A: Tick set
(1)  752/     30C : CC 1C 03            		call	z,.eff_A
(1)  753/     30F : FE 02               		cp	2		; Effect B: Position Jump
(1)  754/     311 : CC 2B 03            		call	z,.eff_B
(1)  755/     314 : FE 03               		cp	3		; Effect C: Pattern break
(1)  756/     316 : CA 41 03            		jp	z,.eff_C	; <-- JUMP and exit.
(1)  757/     319 : C3 62 02            		jp	.next_note
(1)  758/     31C :                     
(1)  759/     31C :                     ; ----------------------------------------
(1)  760/     31C :                     ; Effect A: Set ticks
(1)  761/     31C :                     ; ----------------------------------------
(1)  762/     31C :                     
(1)  763/     31C :                     .eff_A:
(1)  764/     31C : CF                  		rst	8
(1)  765/     31D : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  766/     320 : FD 73 03            		ld	(iy+trk_tickSet),e	; set for both Set and Timer.
(1)  767/     323 : FD 73 11            		ld	(iy+trk_tickTmr),e
(1)  768/     326 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  769/     32A : C9                  		ret
(1)  770/     32B :                     
(1)  771/     32B :                     ; ----------------------------------------
(1)  772/     32B :                     ; Effect B: jump to a new block
(1)  773/     32B :                     ; ----------------------------------------
(1)  774/     32B :                     
(1)  775/     32B :                     .eff_B:
(1)  776/     32B : F5                  		push	af			; Save Flagbits
(1)  777/     32C : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  778/     32F : FD 73 12            		ld 	(iy+trk_currBlk),e
(1)  779/     332 : CF                  		rst	8
(1)  780/     333 : FD 36 10 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  781/     337 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  782/     33B : FD CB 00 EE         		set	5,(iy+trk_status)	; set fill-from-effect flag on exit
(1)  783/     33F : F1                  		pop	af
(1)  784/     340 : C9                  		ret
(1)  785/     341 :                     
(1)  786/     341 :                     ; ----------------------------------------
(1)  787/     341 :                     ; Effect C: Pattern break/exit
(1)  788/     341 :                     ;
(1)  789/     341 :                     ; Only used on SFX, arguments ignored.
(1)  790/     341 :                     ; ----------------------------------------
(1)  791/     341 :                     
(1)  792/     341 :                     .eff_C:
(1)  793/     341 : C3 E1 03            		jp	.track_end
(1)  794/     344 :                     
(1)  795/     344 :                     ; ----------------------------------------
(1)  796/     344 :                     ; Increment the current patt position
(1)  797/     344 :                     ; and recieve more data
(1)  798/     344 :                     ;
(1)  799/     344 :                     ; Breaks:
(1)  800/     344 :                     ; a,e
(1)  801/     344 :                     ; ----------------------------------------
(1)  802/     344 :                     
(1)  803/     344 :                     .inc_cpatt:
(1)  804/     344 : FD 5E 2E            		ld	e,(iy+trk_ChnCach)
(1)  805/     347 : 7D                  		ld	a,l
(1)  806/     348 : 3C                  		inc	a
(1)  807/     349 : E6 3F               		and	MAX_RCACH-1
(1)  808/     34B : FE 3E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  809/     34D : 30 03               		jr	nc,.ran_out
(1)  810/     34F : B3                  		or	e
(1)  811/     350 : 6F                  		ld	l,a
(1)  812/     351 : C9                  		ret
(1)  813/     352 :                     .ran_out:
(1)  814/     352 : FD 6E 2E            		ld	l,(iy+trk_ChnCach)
(1)  815/     355 : E5                  		push	hl
(1)  816/     356 : C5                  		push	bc
(1)  817/     357 : 06 00               		ld	b,0
(1)  818/     359 : 4F                  		ld	c,a
(1)  819/     35A : CF                  		rst	8
(1)  820/     35B : 5D                  		ld	e,l
(1)  821/     35C : 54                  		ld	d,h
(1)  822/     35D : FD 6E 20            		ld	l,(iy+trk_RomCPatt)
(1)  823/     360 : FD 66 21            		ld	h,(iy+(trk_RomCPatt+1))
(1)  824/     363 : FD 7E 22            		ld	a,(iy+(trk_RomCPatt+2))
(1)  825/     366 : 09                  		add	hl,bc
(1)  826/     367 : CE 00               		adc	a,0
(1)  827/     369 : FD 75 20            		ld	(iy+trk_RomCPatt),l
(1)  828/     36C : FD 74 21            		ld	(iy+(trk_RomCPatt+1)),h
(1)  829/     36F : CF                  		rst	8
(1)  830/     370 : FD 77 22            		ld	(iy+(trk_RomCPatt+2)),a
(1)  831/     373 : 01 40 00            		ld	bc,MAX_RCACH
(1)  832/     376 : CD 09 0E            		call	transferRom	; *** ROM ACCESS ***
(1)  833/     379 : C1                  		pop	bc
(1)  834/     37A : E1                  		pop	hl
(1)  835/     37B : C9                  		ret
(1)  836/     37C :                     
(1)  837/     37C :                     ; ----------------------------------------
(1)  838/     37C :                     ; Set track pattern by trk_currBlk
(1)  839/     37C :                     ; ----------------------------------------
(1)  840/     37C :                     
(1)  841/     37C :                     .set_track:
(1)  842/     37C : CF                  		rst	8
(1)  843/     37D : 16 00               		ld	d,0
(1)  844/     37F : FD 5E 12            		ld	e,(iy+trk_currBlk)	; e - current block
(1)  845/     382 : FD 6E 04            		ld	l,(iy+trk_Blocks)	; hl - block data
(1)  846/     385 : FD 66 05            		ld	h,(iy+(trk_Blocks+1))
(1)  847/     388 : 19                  		add	hl,de
(1)  848/     389 : 7E                  		ld	a,(hl)			; Read byte
(1)  849/     38A : FE FF               		cp	-1			; If block == -1, end track
(1)  850/     38C : CA E1 03            		jp	z,.track_end
(1)  851/     38F : E7                  		rst	20h			; dacfill
(1)  852/     390 : 07                  		rlca
(1)  853/     391 : 07                  		rlca
(1)  854/     392 : 57                  		ld	d,a
(1)  855/     393 : E6 FC               		and	11111100b
(1)  856/     395 : 5F                  		ld	e,a
(1)  857/     396 : 7A                  		ld	a,d
(1)  858/     397 : E6 03               		and	00000011b
(1)  859/     399 : 57                  		ld	d,a
(1)  860/     39A : FD 6E 06            		ld	l,(iy+trk_Patt)		; Read CACHE patt heads
(1)  861/     39D : FD 66 07            		ld	h,(iy+(trk_Patt+1))
(1)  862/     3A0 : CF                  		rst	8
(1)  863/     3A1 : 19                  		add	hl,de
(1)  864/     3A2 : 5E                  		ld	e,(hl)			; de - Pos
(1)  865/     3A3 : 23                  		inc	hl
(1)  866/     3A4 : 56                  		ld	d,(hl)
(1)  867/     3A5 : 23                  		inc	hl
(1)  868/     3A6 : 7E                  		ld	a,(hl)
(1)  869/     3A7 : 23                  		inc	hl
(1)  870/     3A8 : FD 77 0C            		ld	(iy+trk_Rows),a
(1)  871/     3AB : CF                  		rst	8
(1)  872/     3AC : 7E                  		ld	a,(hl)
(1)  873/     3AD : 23                  		inc	hl
(1)  874/     3AE : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1)  875/     3B1 : FD 6E 23            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1)  876/     3B4 : FD 66 24            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1)  877/     3B7 : CF                  		rst	8
(1)  878/     3B8 : FD 7E 25            		ld	a,(iy+(trk_RomPatt+2))
(1)  879/     3BB : 19                  		add	hl,de
(1)  880/     3BC : CE 00               		adc	a,0
(1)  881/     3BE : FD 75 20            		ld	(iy+trk_RomCPatt),l
(1)  882/     3C1 : FD 74 21            		ld	(iy+(trk_RomCPatt+1)),h
(1)  883/     3C4 : FD 77 22            		ld	(iy+(trk_RomCPatt+2)),a
(1)  884/     3C7 : FD 5E 2E            		ld	e,(iy+trk_ChnCach)
(1)  885/     3CA : FD 56 2F            		ld	d,(iy+(trk_ChnCach+1))
(1)  886/     3CD : CF                  		rst	8
(1)  887/     3CE : FD 73 0A            		ld	(iy+trk_Read),e
(1)  888/     3D1 : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1)  889/     3D4 : 0E 40               		ld	c,MAX_RCACH
(1)  890/     3D6 : FD 36 0E 00         		ld	(iy+trk_cachHalf),0
(1)  891/     3DA : FD 36 10 00         		ld	(iy+trk_rowPause),0
(1)  892/     3DE : C3 09 0E            		jp	transferRom		; ** ROM access **
(1)  893/     3E1 :                     
(1)  894/     3E1 :                     ; ----------------------------------------
(1)  895/     3E1 :                     
(1)  896/     3E1 :                     .track_end:
(1)  897/     3E1 : CD B4 04            		call	track_out
(1)  898/     3E4 : CF                  		rst	8
(1)  899/     3E5 : FD 36 10 00         		ld	(iy+trk_rowPause),0
(1)  900/     3E9 : FD 36 11 00         		ld	(iy+trk_tickTmr),0
(1)  901/     3ED : FD 36 00 00         		ld	(iy+trk_Status),0
(1)  902/     3F1 : 01 00 00            		ld	bc,0			; Set bc rowcount to 0
(1)  903/     3F4 : CF                  		rst	8
(1)  904/     3F5 : 3E FF               		ld	a,-1			; Return -1
(1)  905/     3F7 : C9                  		ret
(1)  906/     3F8 :                     
(1)  907/     3F8 :                     ; ----------------------------------------
(1)  908/     3F8 :                     ; Track refill
(1)  909/     3F8 :                     ; ----------------------------------------
(1)  910/     3F8 :                     
(1)  911/     3F8 :                     .effect_fill:
(1)  912/     3F8 : FD CB 00 AE         		res	5,(iy+trk_status)	; Reset refill-from-effect flag
(1)  913/     3FC : C3 7C 03            		jp	.set_track
(1)  914/     3FF :                     
(1)  915/     3FF :                     ; ----------------------------------------
(1)  916/     3FF :                     ; Track Start/Reset
(1)  917/     3FF :                     ;
(1)  918/     3FF :                     ; iy - Track buffer
(1)  919/     3FF :                     ; ----------------------------------------
(1)  920/     3FF :                     
(1)  921/     3FF :                     .first_fill:
(1)  922/     3FF : FD CB 00 B6         		res	6,(iy+trk_status)	; Reset FILL flag
(1)  923/     403 : CD B4 04            		call	track_out
(1)  924/     406 : FD 36 11 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1)  925/     40A : FD 7E 02            		ld	a,(iy+trk_setBlk)	; Make start block as current block
(1)  926/     40D : CF                  		rst	8
(1)  927/     40E : FD 77 12            		ld 	(iy+trk_currBlk),a	; block
(1)  928/     411 : 11 00 00            		ld	de,0
(1)  929/     414 : 21 EA 15            		ld	hl,trkListCach		; Read MASTER Nicona track list
(1)  930/     417 : FD 7E 01            		ld	a,(iy+trk_seqId)
(1)  931/     41A : E6 0F               		and	00001111b		; Filter sequence bits
(1)  932/     41C : 87                  		add	a,a			; *4
(1)  933/     41D : 87                  		add	a,a
(1)  934/     41E : CF                  		rst	8
(1)  935/     41F : 5F                  		ld	e,a
(1)  936/     420 : 19                  		add	hl,de
(1)  937/     421 : 7E                  		ld	a,(hl)
(1)  938/     422 : 23                  		inc	hl
(1)  939/     423 : CB 7F               		bit	7,a
(1)  940/     425 : 28 04               		jr	z,.no_glbl
(1)  941/     427 : FD CB 00 C6         		set	0,(iy+trk_status)	; Enable GLOBAL sub-beats
(1)  942/     42B :                     .no_glbl:
(1)  943/     42B : E6 7F               		and	01111111b
(1)  944/     42D : FD 77 03            		ld	(iy+trk_tickSet),a
(1)  945/     430 : 7E                  		ld	a,(hl)			; Read and temporally
(1)  946/     431 : 23                  		inc	hl			; grab it's pointers
(1)  947/     432 : 4E                  		ld	c,(hl)
(1)  948/     433 : CF                  		rst	8
(1)  949/     434 : 23                  		inc	hl
(1)  950/     435 : 6E                  		ld	l,(hl)
(1)  951/     436 : 61                  		ld	h,c
(1)  952/     437 : CF                  		rst	8
(1)  953/     438 : 11 3B 16            		ld	de,headerOut
(1)  954/     43B : 0E 0C               		ld	c,0Ch
(1)  955/     43D : CD 09 0E            		call	transferRom		; ** ROM access **
(1)  956/     440 : DD 21 46 16         		ld	ix,headerOut_e-1
(1)  957/     444 :                     
(1)  958/     444 :                     	; headerOut:
(1)  959/     444 :                     	; dc.l .blk,.pat,.ins
(1)  960/     444 :                     	; *** READING BACKWARDS ***
(1)  961/     444 : CD A0 04            		call	.grab_rhead		; Instrument data
(1)  962/     447 : FD 4E 1F            		ld	c,(iy+trk_MaxIns)
(1)  963/     44A : CB 21               		sla	c			; *8
(1)  964/     44C : CB 21               		sla	c
(1)  965/     44E : CB 21               		sla	c
(1)  966/     450 : 78                  		ld	a,b
(1)  967/     451 : FD 5E 2C            		ld	e,(iy+trk_ChnCIns)
(1)  968/     454 : FD 56 2D            		ld	d,(iy+(trk_ChnCIns+1))
(1)  969/     457 : FD 73 08            		ld	(iy+trk_Instr),e
(1)  970/     45A : FD 72 09            		ld	(iy+(trk_Instr+1)),d
(1)  971/     45D : CF                  		rst	8
(1)  972/     45E : CD 09 0E            		call	transferRom		; ** ROM access **
(1)  973/     461 : E7                  		rst	20h			; Wave refill
(1)  974/     462 : CD A0 04            		call	.grab_rhead		; Pattern data
(1)  975/     465 : FD 4E 1E            		ld	c,(iy+trk_MaxHdrs)
(1)  976/     468 : CB 21               		sla	c			; *4
(1)  977/     46A : CB 21               		sla	c
(1)  978/     46C : 78                  		ld	a,b
(1)  979/     46D : FD 75 23            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1)  980/     470 : FD 74 24            		ld	(iy+(trk_RomPatt+1)),h
(1)  981/     473 : FD 77 25            		ld	(iy+(trk_RomPatt+2)),a
(1)  982/     476 : FD 5E 2A            		ld	e,(iy+trk_ChnCHead)
(1)  983/     479 : FD 56 2B            		ld	d,(iy+(trk_ChnCHead+1))
(1)  984/     47C : FD 73 06            		ld	(iy+trk_Patt),e
(1)  985/     47F : FD 72 07            		ld	(iy+(trk_Patt+1)),d
(1)  986/     482 : CF                  		rst	8
(1)  987/     483 : CD 09 0E            		call	transferRom		; ** ROM access **
(1)  988/     486 : CD A0 04            		call	.grab_rhead		; Block data
(1)  989/     489 : FD 4E 1D            		ld	c,(iy+trk_MaxBlks)
(1)  990/     48C : 78                  		ld	a,b
(1)  991/     48D : FD 5E 28            		ld	e,(iy+trk_ChnCBlk)
(1)  992/     490 : FD 56 29            		ld	d,(iy+(trk_ChnCBlk+1))
(1)  993/     493 : FD 73 04            		ld	(iy+trk_Blocks),e
(1)  994/     496 : FD 72 05            		ld	(iy+(trk_Blocks+1)),d
(1)  995/     499 : CF                  		rst	8
(1)  996/     49A : CD 09 0E            		call	transferRom		; ** ROM access **
(1)  997/     49D : C3 7C 03            		jp	.set_track
(1)  998/     4A0 :                     
(1)  999/     4A0 :                     ; Read 68K pointer:
(1) 1000/     4A0 :                     ; hl - 00xxxx
(1) 1001/     4A0 :                     ;  b - xx0000
(1) 1002/     4A0 :                     .grab_rhead:
(1) 1003/     4A0 : DD 6E 00            		ld	l,(ix)
(1) 1004/     4A3 : DD 2B               		dec	ix
(1) 1005/     4A5 : CF                  		rst	8
(1) 1006/     4A6 : DD 66 00            		ld	h,(ix)
(1) 1007/     4A9 : DD 2B               		dec	ix
(1) 1008/     4AB : DD 46 00            		ld	b,(ix)
(1) 1009/     4AE : DD 2B               		dec	ix
(1) 1010/     4B0 :                     ; 		ld	c,(ix)
(1) 1011/     4B0 : CF                  		rst	8
(1) 1012/     4B1 : DD 2B               		dec	ix
(1) 1013/     4B3 : C9                  		ret
(1) 1014/     4B4 :                     
(1) 1015/     4B4 :                     ; ----------------------------------------
(1) 1016/     4B4 :                     ; Reset tracker channels
(1) 1017/     4B4 :                     ;
(1) 1018/     4B4 :                     ; iy - Track buffer
(1) 1019/     4B4 :                     ;
(1) 1020/     4B4 :                     ; Breaks:
(1) 1021/     4B4 :                     ; ix
(1) 1022/     4B4 :                     ; ----------------------------------------
(1) 1023/     4B4 :                     
(1) 1024/     4B4 :                     track_out:
(1) 1025/     4B4 :                     ; 		push	iy
(1) 1026/     4B4 : FD 5E 26            		ld	e,(iy+trk_ChnList)	; Point to track-data
(1) 1027/     4B7 : FD 56 27            		ld	d,(iy+(trk_ChnList+1))
(1) 1028/     4BA : D5                  		push	de
(1) 1029/     4BB : DD E1               		pop	ix
(1) 1030/     4BD : CF                  		rst	8
(1) 1031/     4BE : 11 08 00            		ld	de,8
(1) 1032/     4C1 : FD 46 1C            		ld	b,(iy+trk_MaxChnls)	; MAX_TRKCHN
(1) 1033/     4C4 : AF                  		xor	a
(1) 1034/     4C5 :                     .clrfe:
(1) 1035/     4C5 :                     ; 		ld	a,(ix+chnl_Ins)
(1) 1036/     4C5 :                     ; 		or	a
(1) 1037/     4C5 :                     ; 		jr	z,.nochip
(1) 1038/     4C5 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1039/     4C9 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1040/     4CD : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1041/     4D1 : CF                  		rst	8
(1) 1042/     4D2 :                     .nochip:
(1) 1043/     4D2 : DD 19               		add	ix,de
(1) 1044/     4D4 : 10 EF               		djnz	.clrfe
(1) 1045/     4D6 : 3E 01               		ld	a,1
(1) 1046/     4D8 : 32 3F 00            		ld	(marsUpd),a
(1) 1047/     4DB :                     ; 		pop	iy
(1) 1048/     4DB : C9                  		ret
(1) 1049/     4DC :                     
(1) 1050/     4DC :                     ; ----------------------------------------
(1) 1051/     4DC :                     ; Load tracklist from ROM
(1) 1052/     4DC :                     ;
(1) 1053/     4DC :                     ; a - SeqID
(1) 1054/     4DC :                     ; ----------------------------------------
(1) 1055/     4DC :                     
(1) 1056/     4DC :                     get_RomTrcks:
(1) 1057/     4DC : E6 F0               		and	11110000b
(1) 1058/     4DE : 5F                  		ld	e,a
(1) 1059/     4DF : 3A 3E 00            		ld	a,(trkListPage)
(1) 1060/     4E2 : BB                  		cp	e
(1) 1061/     4E3 : C8                  		ret	z
(1) 1062/     4E4 :                     init_RomTrcks:
(1) 1063/     4E4 : 7B                  		ld	a,e
(1) 1064/     4E5 : 32 3E 00            		ld	(trkListPage),a
(1) 1065/     4E8 : 07                  		rlca
(1) 1066/     4E9 : 07                  		rlca			; 10h*4=40h
(1) 1067/     4EA : E6 C0               		and	11000000b
(1) 1068/     4EC : 5F                  		ld	e,a
(1) 1069/     4ED : 7A                  		ld	a,d
(1) 1070/     4EE : CF                  		rst	8
(1) 1071/     4EF : E6 03               		and	00000011b	; * 40h
(1) 1072/     4F1 : 57                  		ld	d,a
(1) 1073/     4F2 : 21 5C 13            		ld	hl,nikona_SetMstrList
(1) 1074/     4F5 : 23                  		inc	hl
(1) 1075/     4F6 : 7E                  		ld	a,(hl)
(1) 1076/     4F7 : 23                  		inc	hl
(1) 1077/     4F8 : 4E                  		ld	c,(hl)
(1) 1078/     4F9 : 23                  		inc	hl
(1) 1079/     4FA : 6E                  		ld	l,(hl)
(1) 1080/     4FB : CF                  		rst	8
(1) 1081/     4FC : 61                  		ld	h,c
(1) 1082/     4FD : 19                  		add	hl,de
(1) 1083/     4FE : CE 00               		adc	a,0
(1) 1084/     500 : 11 EA 15            		ld	de,trkListCach
(1) 1085/     503 : 01 40 00            		ld	bc,4*10h
(1) 1086/     506 : C3 09 0E            		jp	transferRom	; *** ROM ACCESS ***
(1) 1087/     509 :                     
(1) 1088/     509 :                     ; ============================================================
(1) 1089/     509 :                     ; --------------------------------------------------------
(1) 1090/     509 :                     ; Convert notes to soundchips
(1) 1091/     509 :                     ; --------------------------------------------------------
(1) 1092/     509 :                     
(1) 1093/     509 :                     set_chips:
(1) 1094/     509 : E7                  		rst	20h			; Refill wave
(1) 1095/     50A : FD 21 3A 13         		ld	iy,nikona_BuffList
(1) 1096/     50E :                     .trk_buffrs:
(1) 1097/     50E : CF                  		rst	8
(1) 1098/     50F : FD 7E 00            		ld	a,(iy)
(1) 1099/     512 : FE FF               		cp	-1
(1) 1100/     514 : 28 15               		jr	z,proc_chips
(1) 1101/     516 : FD E5               		push	iy
(1) 1102/     518 : FD 6E 00            		ld	l,(iy)
(1) 1103/     51B : FD 66 01            		ld	h,(iy+1)
(1) 1104/     51E : CD 4B 05            		call	tblbuff_read
(1) 1105/     521 : CF                  		rst	8
(1) 1106/     522 : FD E1               		pop	iy
(1) 1107/     524 : 11 10 00            		ld	de,10h
(1) 1108/     527 : FD 19               		add	iy,de
(1) 1109/     529 : 18 E3               		jr	.trk_buffrs
(1) 1110/     52B :                     proc_chips:
(1) 1111/     52B : E7                  		rst	20h
(1) 1112/     52C : FD 21 A2 13         		ld	iy,tblPSGN		; PSG Noise (FIRST)
(1) 1113/     530 : CD E8 06            		call	dtbl_singl
(1) 1114/     533 : 00                  		nop
(1) 1115/     534 : 00                  		nop
(1) 1116/     535 : FD 21 70 13         		ld	iy,tblPSG		; PSG Squares
(1) 1117/     539 : CD D4 06            		call	dtbl_multi
(1) 1118/     53C : FD 21 B2 13         		ld	iy,tblFM
(1) 1119/     540 : CD D4 06            		call	dtbl_multi
(1) 1120/     543 : FD 21 14 14         		ld	iy,tblPWM
(1) 1121/     547 : CD D4 06            		call	dtbl_multi
(1) 1122/     54A : C9                  		ret
(1) 1123/     54B :                     
(1) 1124/     54B :                     ; ----------------------------------------
(1) 1125/     54B :                     ; Read current track
(1) 1126/     54B :                     tblbuff_read:
(1) 1127/     54B :                     ; 		rst	20h
(1) 1128/     54B : E5                  		push	hl
(1) 1129/     54C : FD E1               		pop	iy
(1) 1130/     54E : FD 46 00            		ld	b,(iy+trk_status)	; bit7: Track active?
(1) 1131/     551 : CB 78               		bit	7,b
(1) 1132/     553 : C8                  		ret	z
(1) 1133/     554 :                     ; 		ret
(1) 1134/     554 :                     ; .go_read:
(1) 1135/     554 : 78                  		ld	a,b			; trk_Status == -1?
(1) 1136/     555 : FE FF               		cp	-1
(1) 1137/     557 : C2 61 05            		jp	nz,.track_cont
(1) 1138/     55A : CD B4 04            		call	track_out
(1) 1139/     55D : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1140/     561 :                     .track_cont:
(1) 1141/     561 : CF                  		rst	8
(1) 1142/     562 : FD 6E 26            		ld	l,(iy+trk_ChnList)
(1) 1143/     565 : FD 66 27            		ld	h,(iy+(trk_ChnList+1))
(1) 1144/     568 : E5                  		push	hl
(1) 1145/     569 : DD E1               		pop	ix			; iy - channel list
(1) 1146/     56B : FD 46 1C            		ld	b,(iy+trk_MaxChnls)	;MAX_TRKCHN
(1) 1147/     56E :                     
(1) 1148/     56E :                     ; ** Needs special delays to
(1) 1149/     56E :                     ; keep the samplerate
(1) 1150/     56E :                     .next_chnl:
(1) 1151/     56E : C5                  		push	bc
(1) 1152/     56F : DD 7E 00            		ld	a,(ix)			; ** chnl_Flags
(1) 1153/     572 : E6 0F               		and	00001111b
(1) 1154/     574 : C4 81 05            		call	nz,.do_chip
(1) 1155/     577 : C1                  		pop	bc
(1) 1156/     578 : 11 08 00            		ld	de,8
(1) 1157/     57B : DD 19               		add	ix,de
(1) 1158/     57D : CF                  		rst	8	; wave sync
(1) 1159/     57E : 10 EE               		djnz	.next_chnl
(1) 1160/     580 : C9                  		ret
(1) 1161/     581 :                     
(1) 1162/     581 :                     ; ----------------------------------------
(1) 1163/     581 :                     ; iy - Track buffer
(1) 1164/     581 :                     ; ix - Current channel
(1) 1165/     581 :                     
(1) 1166/     581 :                     .do_chip:
(1) 1167/     581 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1168/     584 : B7                  		or	a
(1) 1169/     585 : C8                  		ret	z
(1) 1170/     586 : FD 56 1F            		ld	d,(iy+trk_MaxIns)
(1) 1171/     589 : BA                  		cp	d
(1) 1172/     58A : C8                  		ret	z
(1) 1173/     58B : D0                  		ret	nc
(1) 1174/     58C : 3D                  		dec	a			; ins-1
(1) 1175/     58D : 0F                  		rrca				; * 08h
(1) 1176/     58E : 0F                  		rrca
(1) 1177/     58F : 0F                  		rrca
(1) 1178/     590 : 0F                  		rrca
(1) 1179/     591 : CF                  		rst	8
(1) 1180/     592 : 0F                  		rrca
(1) 1181/     593 : 57                  		ld	d,a
(1) 1182/     594 : E6 F8               		and	11111000b
(1) 1183/     596 : 5F                  		ld	e,a
(1) 1184/     597 : 7A                  		ld	a,d
(1) 1185/     598 : E6 07               		and	00000111b
(1) 1186/     59A : 57                  		ld	d,a
(1) 1187/     59B : FD 6E 08            		ld	l,(iy+trk_Instr)	; hl - Intrument data
(1) 1188/     59E : FD 66 09            		ld	h,(iy+(trk_Instr+1))
(1) 1189/     5A1 : 7B                  		ld	a,e
(1) 1190/     5A2 : 19                  		add	hl,de
(1) 1191/     5A3 : CF                  		rst	8
(1) 1192/     5A4 : E5                  		push	hl			; <-- save ins pos
(1) 1193/     5A5 : CD B7 05            		call	.grab_link
(1) 1194/     5A8 : D1                  		pop	de			; --> recover as de
(1) 1195/     5A9 : FE FF               		cp	-1			; Found any link?
(1) 1196/     5AB : C8                  		ret	z
(1) 1197/     5AC : FD 7E 14            		ld	a,(iy+trk_Priority)	; a - Set priority level
(1) 1198/     5AF : 23                  		inc	hl			; Skip link
(1) 1199/     5B0 : 23                  		inc	hl
(1) 1200/     5B1 : 77                  		ld	(hl),a			; Write priority
(1) 1201/     5B2 : 23                  		inc	hl
(1) 1202/     5B3 : 73                  		ld	(hl),e			; Write Instrument pointer
(1) 1203/     5B4 : 23                  		inc	hl
(1) 1204/     5B5 : 72                  		ld	(hl),d
(1) 1205/     5B6 : C9                  		ret
(1) 1206/     5B7 :                     
(1) 1207/     5B7 :                     ; ----------------------------------------
(1) 1208/     5B7 :                     ; Search for a linked channel on the
(1) 1209/     5B7 :                     ; chip table
(1) 1210/     5B7 :                     ;
(1) 1211/     5B7 :                     ; Input:
(1) 1212/     5B7 :                     ; hl - Intrument position
(1) 1213/     5B7 :                     ;
(1) 1214/     5B7 :                     ; Returns:
(1) 1215/     5B7 :                     ; hl - Channel table to use
(1) 1216/     5B7 :                     ;  a - Return value:
(1) 1217/     5B7 :                     ;       0 - Found
(1) 1218/     5B7 :                     ;      -1 - Not found
(1) 1219/     5B7 :                     ; ----------------------------------------
(1) 1220/     5B7 :                     
(1) 1221/     5B7 :                     .grab_link:
(1) 1222/     5B7 : 7E                  		ld	a,(hl)
(1) 1223/     5B8 : E6 F0               		and	11110000b
(1) 1224/     5BA : 5F                  		ld	e,a			; e - NEW chip
(1) 1225/     5BB : CF                  		rst	8
(1) 1226/     5BC : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - Check OUR chip
(1) 1227/     5BF : E6 F0               		and	11110000b		; Filter chip bits
(1) 1228/     5C1 : CA 38 06            		jp	z,.new_chip		; If zero: Set new chip
(1) 1229/     5C4 : BB                  		cp 	e
(1) 1230/     5C5 : CA DA 05            		jp	z,.srch_link		; If same: Grab our link
(1) 1231/     5C8 : 57                  		ld	d,a			; d - OLD chip
(1) 1232/     5C9 : D5                  		push	de
(1) 1233/     5CA : CD DA 05            		call	.srch_link		; Search our link (first)
(1) 1234/     5CD : D1                  		pop	de
(1) 1235/     5CE : FE FF               		cp	-1
(1) 1236/     5D0 : C8                  		ret	z
(1) 1237/     5D1 : CD BB 06            		call	.reset_link
(1) 1238/     5D4 : DD 36 01 00         		ld	(ix+chnl_Chip),0
(1) 1239/     5D8 : 18 5D               		jr	.do_newchip
(1) 1240/     5DA :                     
(1) 1241/     5DA :                     ; ** RELINK **
(1) 1242/     5DA :                     ; e - Our current chip
(1) 1243/     5DA :                     .srch_link:
(1) 1244/     5DA : CF                  		rst	8
(1) 1245/     5DB : CD A1 06            		call	.pick_tbl	; Pick our table
(1) 1246/     5DE : B7                  		or	a
(1) 1247/     5DF : FA 23 06            		jp	m,.singl_link
(1) 1248/     5E2 : DD E5               		push	ix		; copy ix to bc
(1) 1249/     5E4 : C1                  		pop	bc
(1) 1250/     5E5 :                     .srch_lloop:
(1) 1251/     5E5 : CF                  		rst	8
(1) 1252/     5E6 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1253/     5E7 : FE FF               		cp	-1		; If -1, return -1
(1) 1254/     5E9 : 28 49               		jr	z,.refill
(1) 1255/     5EB : B9                  		cp	c
(1) 1256/     5EC : 20 07               		jr	nz,.invldl
(1) 1257/     5EE : 23                  		inc	hl
(1) 1258/     5EF : CF                  		rst	8
(1) 1259/     5F0 : 7E                  		ld	a,(hl)
(1) 1260/     5F1 : 2B                  		dec	hl
(1) 1261/     5F2 : B8                  		cp	b
(1) 1262/     5F3 : 28 09               		jr	z,.reroll
(1) 1263/     5F5 :                     .invldl:
(1) 1264/     5F5 : D5                  		push	de
(1) 1265/     5F6 : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1266/     5F9 : CF                  		rst	8
(1) 1267/     5FA : 19                  		add	hl,de
(1) 1268/     5FB : D1                  		pop	de
(1) 1269/     5FC : 18 E7               		jr	.srch_lloop
(1) 1270/     5FE :                     .reroll:
(1) 1271/     5FE :                     	; *** PSG3 tone 3 check ***
(1) 1272/     5FE : 7B                  		ld	a,e
(1) 1273/     5FF : FE 80               		cp	80h		; PSG?
(1) 1274/     601 : 28 02               		jr	z,.chk_psg
(1) 1275/     603 : 18 2C               		jr	.rnot_psg
(1) 1276/     605 :                     .chk_psg:
(1) 1277/     605 : 3A 39 16            		ld	a,(psgHatMode)
(1) 1278/     608 : E6 03               		and	011b
(1) 1279/     60A : FE 03               		cp	011b
(1) 1280/     60C : 20 23               		jr	nz,.rnot_psg
(1) 1281/     60E : E5                  		push	hl
(1) 1282/     60F : CF                  		rst	8
(1) 1283/     610 : 11 05 00            		ld	de,5		; <-- fake "iy+05h"
(1) 1284/     613 : 19                  		add	hl,de
(1) 1285/     614 : 7E                  		ld	a,(hl)
(1) 1286/     615 : E1                  		pop	hl
(1) 1287/     616 : FE 02               		cp	2
(1) 1288/     618 : 20 17               		jr	nz,.rnot_psg
(1) 1289/     61A : CF                  		rst	8
(1) 1290/     61B : 16 80               		ld	d,80h		; Set PSG silence
(1) 1291/     61D : CD BB 06            		call	.reset_link
(1) 1292/     620 : 3E FF               		ld	a,-1		; Return FULL
(1) 1293/     622 : C9                  		ret
(1) 1294/     623 :                     ; PSGN/FM3/FM6
(1) 1295/     623 :                     .singl_link:
(1) 1296/     623 : DD E5               		push	ix			; copy ix to bc
(1) 1297/     625 : C1                  		pop	bc
(1) 1298/     626 : 23                  		inc	hl			; Read MSB first
(1) 1299/     627 : CF                  		rst	8
(1) 1300/     628 : 7E                  		ld	a,(hl)
(1) 1301/     629 : 2B                  		dec	hl
(1) 1302/     62A : B8                  		cp	b			; MSB match?
(1) 1303/     62B : 20 07               		jr	nz,.refill
(1) 1304/     62D : 7E                  		ld	a,(hl)			; Read LSB
(1) 1305/     62E : B9                  		cp	c
(1) 1306/     62F : 20 03               		jr	nz,.refill
(1) 1307/     631 :                     .rnot_psg:
(1) 1308/     631 : CF                  		rst	8
(1) 1309/     632 : AF                  		xor	a
(1) 1310/     633 : C9                  		ret
(1) 1311/     634 :                     ; ***
(1) 1312/     634 :                     .refill:
(1) 1313/     634 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1314/     637 :                     .do_newchip:
(1) 1315/     637 : 7B                  		ld	a,e
(1) 1316/     638 :                     
(1) 1317/     638 :                     ; *** NEW CHIP ***
(1) 1318/     638 :                     ; e - Chip to set
(1) 1319/     638 :                     .new_chip:
(1) 1320/     638 : 7B                  		ld	a,e			; Read NEW chip
(1) 1321/     639 : B7                  		or	a			; If non-minus, exit.
(1) 1322/     63A : F0                  		ret	p
(1) 1323/     63B : CD A1 06            		call	.pick_tbl
(1) 1324/     63E : CF                  		rst	8
(1) 1325/     63F : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1326/     642 : B7                  		or	a
(1) 1327/     643 : FA 8E 06            		jp	m,.singl_free
(1) 1328/     646 : E5                  		push	hl
(1) 1329/     647 :                     ; PASS 1
(1) 1330/     647 :                     .srch_free:
(1) 1331/     647 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1332/     648 : FE FF               		cp	-1			; If -1, return -1
(1) 1333/     64A : 28 0C               		jr	z,.pass_2
(1) 1334/     64C : 23                  		inc	hl
(1) 1335/     64D : 46                  		ld	b,(hl)			; Read MSB
(1) 1336/     64E : CF                  		rst	8
(1) 1337/     64F : 2B                  		dec	hl
(1) 1338/     650 : B0                  		or	b
(1) 1339/     651 : 28 28               		jr	z,.new_link_z
(1) 1340/     653 : CD 6F 06            		call	.nextsrch_tbl
(1) 1341/     656 : 18 EF               		jr	.srch_free
(1) 1342/     658 :                     ; PASS 2
(1) 1343/     658 :                     .pass_2:
(1) 1344/     658 : CF                  		rst	8
(1) 1345/     659 : E1                  		pop	hl
(1) 1346/     65A :                     .next_prio:
(1) 1347/     65A : 7E                  		ld	a,(hl)		; Read LSB
(1) 1348/     65B : FE FF               		cp	-1		; If -1, return -1
(1) 1349/     65D : C8                  		ret	z
(1) 1350/     65E : 23                  		inc	hl
(1) 1351/     65F : 23                  		inc	hl
(1) 1352/     660 : 7E                  		ld	a,(hl)
(1) 1353/     661 : 2B                  		dec	hl
(1) 1354/     662 : 2B                  		dec	hl
(1) 1355/     663 : B9                  		cp	c
(1) 1356/     664 : 38 17               		jr	c,.new_link
(1) 1357/     666 : B7                  		or	a
(1) 1358/     667 : 28 14               		jr	z,.new_link
(1) 1359/     669 : CF                  		rst	8
(1) 1360/     66A : CD 6F 06            		call	.nextsrch_tbl
(1) 1361/     66D : 18 EB               		jr	.next_prio
(1) 1362/     66F :                     
(1) 1363/     66F :                     .nextsrch_tbl:
(1) 1364/     66F : D5                  		push	de
(1) 1365/     670 : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1366/     673 : 19                  		add	hl,de
(1) 1367/     674 : D1                  		pop	de
(1) 1368/     675 : CF                  		rst	8
(1) 1369/     676 : 00                  		nop	; wave sync
(1) 1370/     677 : 00                  		nop
(1) 1371/     678 : 00                  		nop
(1) 1372/     679 : 00                  		nop
(1) 1373/     67A : C9                  		ret
(1) 1374/     67B :                     .new_link_z:
(1) 1375/     67B : 33                  		inc	sp		; dummy pop
(1) 1376/     67C : 33                  		inc	sp
(1) 1377/     67D :                     .new_link:
(1) 1378/     67D : CF                  		rst	8
(1) 1379/     67E : 23                  		inc	hl
(1) 1380/     67F : 23                  		inc	hl
(1) 1381/     680 :                     ; hl+2
(1) 1382/     680 :                     .l_hiprio:
(1) 1383/     680 :                     	; TODO: check this later.
(1) 1384/     680 :                     ; 		ld	a,e
(1) 1385/     680 :                     ; 		and	11110000b
(1) 1386/     680 :                     ; 		cp	80h
(1) 1387/     680 :                     ; 		jr	nz,.not_psg
(1) 1388/     680 :                     ; 		ld	a,(psgHatMode)
(1) 1389/     680 :                     ; 		and	011b
(1) 1390/     680 :                     ; 		cp	011b
(1) 1391/     680 :                     ; 		jr	nz,.not_psg
(1) 1392/     680 :                     ; 		rst	8
(1) 1393/     680 :                     ; 		push	de		; W
(1) 1394/     680 :                     ; 		ld	de,5
(1) 1395/     680 :                     ; 		add	hl,de
(1) 1396/     680 :                     ; 		ld	a,(hl)
(1) 1397/     680 :                     ; 		scf
(1) 1398/     680 :                     ; 		ccf
(1) 1399/     680 :                     ; 		sbc	hl,de
(1) 1400/     680 :                     ; 		pop	de
(1) 1401/     680 :                     ; 		rst	8
(1) 1402/     680 :                     ; 		cp	2
(1) 1403/     680 :                     ; 		jr	nz,.not_psg
(1) 1404/     680 :                     ; 		ld	a,-1
(1) 1405/     680 :                     ; 		ret
(1) 1406/     680 :                     ; .not_psg:
(1) 1407/     680 : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1408/     683 : DD E5               		push	ix
(1) 1409/     685 : D1                  		pop	de
(1) 1410/     686 : CF                  		rst	8
(1) 1411/     687 : 71                  		ld	(hl),c		; write priority
(1) 1412/     688 : 2B                  		dec	hl		; -1
(1) 1413/     689 : 72                  		ld 	(hl),d		; MSB
(1) 1414/     68A : 2B                  		dec	hl
(1) 1415/     68B : 73                  		ld	(hl),e		; LSB
(1) 1416/     68C : AF                  		xor	a
(1) 1417/     68D : C9                  		ret
(1) 1418/     68E :                     ; Single slot
(1) 1419/     68E :                     .singl_free:
(1) 1420/     68E : CF                  		rst	8
(1) 1421/     68F : 46                  		ld	b,(hl)
(1) 1422/     690 : 23                  		inc	hl
(1) 1423/     691 : 7E                  		ld	a,(hl)
(1) 1424/     692 : 23                  		inc	hl
(1) 1425/     693 : B0                  		or	b
(1) 1426/     694 : 28 EA               		jr	z,.l_hiprio
(1) 1427/     696 : 7E                  		ld	a,(hl)
(1) 1428/     697 : B9                  		cp	c
(1) 1429/     698 : 38 E6               		jr	c,.l_hiprio		; PRIORITY
(1) 1430/     69A : B7                  		or	a
(1) 1431/     69B : 28 E3               		jr	z,.l_hiprio
(1) 1432/     69D :                     .sngl_sprio:
(1) 1433/     69D : CF                  		rst	8
(1) 1434/     69E : 3E FF               		ld	a,-1
(1) 1435/     6A0 : C9                  		ret
(1) 1436/     6A1 :                     
(1) 1437/     6A1 :                     ; Pick chip table
(1) 1438/     6A1 :                     ; In:
(1) 1439/     6A1 :                     ;  e - ID
(1) 1440/     6A1 :                     ;
(1) 1441/     6A1 :                     ; Out:
(1) 1442/     6A1 :                     ; hl - Table
(1) 1443/     6A1 :                     .pick_tbl:
(1) 1444/     6A1 : D5                  		push	de
(1) 1445/     6A2 : 0F                  		rrca
(1) 1446/     6A3 : 0F                  		rrca
(1) 1447/     6A4 : 0F                  		rrca
(1) 1448/     6A5 : 0F                  		rrca
(1) 1449/     6A6 : E6 07               		and	00000111b
(1) 1450/     6A8 : 87                  		add	a,a
(1) 1451/     6A9 : 21 60 13            		ld	hl,tblList
(1) 1452/     6AC : E5                  		push	hl
(1) 1453/     6AD : 16 00               		ld	d,0
(1) 1454/     6AF : 5F                  		ld	e,a
(1) 1455/     6B0 : 19                  		add	hl,de
(1) 1456/     6B1 : 5E                  		ld	e,(hl)
(1) 1457/     6B2 : 23                  		inc	hl
(1) 1458/     6B3 : 7E                  		ld	a,(hl)
(1) 1459/     6B4 : 57                  		ld	d,a
(1) 1460/     6B5 : CB BA               		res	7,d
(1) 1461/     6B7 : E1                  		pop	hl
(1) 1462/     6B8 : 19                  		add	hl,de
(1) 1463/     6B9 : D1                  		pop	de
(1) 1464/     6BA : C9                  		ret
(1) 1465/     6BB :                     
(1) 1466/     6BB :                     ; d - Silence chip
(1) 1467/     6BB :                     ;
(1) 1468/     6BB :                     ; Uses:
(1) 1469/     6BB :                     ; bc
(1) 1470/     6BB :                     .reset_link:
(1) 1471/     6BB : CF                  		rst	8
(1) 1472/     6BC : 36 00               		ld	(hl),0			; Delete link
(1) 1473/     6BE : 23                  		inc	hl
(1) 1474/     6BF : 36 00               		ld	(hl),0
(1) 1475/     6C1 : 23                  		inc	hl
(1) 1476/     6C2 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1477/     6C3 : 01 06 00            		ld	bc,8-2			; Go to 08h
(1) 1478/     6C6 : 09                  		add	hl,bc
(1) 1479/     6C7 : CF                  		rst	8
(1) 1480/     6C8 : 06 04               		ld	b,8/2
(1) 1481/     6CA :                     .clrfull:
(1) 1482/     6CA : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1483/     6CC : 23                  		inc	hl
(1) 1484/     6CD : 36 00               		ld	(hl),0
(1) 1485/     6CF : 23                  		inc	hl
(1) 1486/     6D0 : CF                  		rst	8
(1) 1487/     6D1 : 10 F7               		djnz	.clrfull
(1) 1488/     6D3 : C9                  		ret
(1) 1489/     6D4 :                     
(1) 1490/     6D4 :                     ; ============================================
(1) 1491/     6D4 :                     ; ----------------------------------------
(1) 1492/     6D4 :                     ; Process chip using it's table
(1) 1493/     6D4 :                     ;
(1) 1494/     6D4 :                     ; iy - table to read
(1) 1495/     6D4 :                     ;  c - Chip ID
(1) 1496/     6D4 :                     ; ----------------------------------------
(1) 1497/     6D4 :                     
(1) 1498/     6D4 :                     dtbl_multi:
(1) 1499/     6D4 : FD 7E 00            		ld	a,(iy)
(1) 1500/     6D7 : FE FF               		cp	-1
(1) 1501/     6D9 : C8                  		ret	z
(1) 1502/     6DA : CD E9 06            		call	dtbl_frommul
(1) 1503/     6DD : CF                  		rst	8
(1) 1504/     6DE : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1505/     6E1 : FD 19               		add	iy,de
(1) 1506/     6E3 : 00                  		nop
(1) 1507/     6E4 : 00                  		nop
(1) 1508/     6E5 : CF                  		rst	8
(1) 1509/     6E6 : 18 EC               		jr	dtbl_multi
(1) 1510/     6E8 :                     dtbl_singl:
(1) 1511/     6E8 : CF                  		rst	8
(1) 1512/     6E9 :                     
(1) 1513/     6E9 :                     dtbl_frommul:
(1) 1514/     6E9 : FD 5E 00            		ld	e,(iy)
(1) 1515/     6EC : FD 56 01            		ld	d,(iy+1)
(1) 1516/     6EF : 7A                  		ld	a,d
(1) 1517/     6F0 : B3                  		or	e
(1) 1518/     6F1 : 20 54               		jr	nz,.linked
(1) 1519/     6F3 : FD 7E 02            		ld	a,(iy+2)	; Any 80h+ Flag?
(1) 1520/     6F6 : B7                  		or	a
(1) 1521/     6F7 : F0                  		ret	p
(1) 1522/     6F8 : FD 7E 02            		ld	a,(iy+2)	; a - chip type
(1) 1523/     6FB : CF                  		rst	8
(1) 1524/     6FC : FD 36 02 00         		ld	(iy+2),0	; Reset priority
(1) 1525/     700 :                     
(1) 1526/     700 :                     ; ----------------------------------------
(1) 1527/     700 :                     ; chip-silence request
(1) 1528/     700 :                     ; iy - Table
(1) 1529/     700 : E6 F0               		and	11110000b
(1) 1530/     702 : FE 80               		cp	80h
(1) 1531/     704 : 28 1A               		jr	z,.siln_psg
(1) 1532/     706 : FE 90               		cp	90h
(1) 1533/     708 : 28 12               		jr	z,.siln_psg_n
(1) 1534/     70A : FE A0               		cp	0A0h
(1) 1535/     70C : 28 1C               		jr	z,.siln_fm
(1) 1536/     70E : FE B0               		cp	0B0h
(1) 1537/     710 : 28 18               		jr	z,.siln_fm
(1) 1538/     712 : CF                  		rst	8
(1) 1539/     713 : FE C0               		cp	0C0h
(1) 1540/     715 : 28 10               		jr	z,.siln_dac
(1) 1541/     717 : FE D0               		cp	0D0h
(1) 1542/     719 : 28 15               		jr	z,.siln_pwm
(1) 1543/     71B : C9                  		ret
(1) 1544/     71C :                     .siln_psg_n:
(1) 1545/     71C : AF                  		xor	a
(1) 1546/     71D : 32 39 16            		ld	(psgHatMode),a
(1) 1547/     720 :                     .siln_psg:
(1) 1548/     720 : CF                  		rst	8
(1) 1549/     721 : DD 21 AE 15         		ld	ix,psgcom
(1) 1550/     725 : 18 14               		jr	.rcyl_com
(1) 1551/     727 :                     
(1) 1552/     727 :                     ; --------------------------------
(1) 1553/     727 :                     
(1) 1554/     727 :                     .siln_dac:
(1) 1555/     727 : CD 21 10            		call	dac_off
(1) 1556/     72A :                     .siln_fm:
(1) 1557/     72A : CD 13 0C            		call	.fm_keyoff
(1) 1558/     72D : C3 1B 0C            		jp	.fm_tloff
(1) 1559/     730 :                     
(1) 1560/     730 :                     ; --------------------------------
(1) 1561/     730 :                     
(1) 1562/     730 :                     .siln_pwm:
(1) 1563/     730 : 3E 01               		ld	a,1
(1) 1564/     732 : 32 3F 00            		ld	(marsUpd),a
(1) 1565/     735 : CF                  		rst	8
(1) 1566/     736 : DD 21 76 15         		ld	ix,pwmcom
(1) 1567/     73A : CF                  		rst	8
(1) 1568/     73B :                     .rcyl_com:
(1) 1569/     73B : 06 00               		ld	b,0
(1) 1570/     73D : FD 4E 05            		ld	c,(iy+05h)
(1) 1571/     740 : DD 09               		add	ix,bc
(1) 1572/     742 : DD 36 00 04         		ld	(ix),100b
(1) 1573/     746 : C9                  		ret
(1) 1574/     747 :                     
(1) 1575/     747 :                     ; ----------------------------------------
(1) 1576/     747 :                     ; Process channel now
(1) 1577/     747 :                     ; iy - Table
(1) 1578/     747 :                     ; ix - Tracker channel
(1) 1579/     747 :                     .linked:
(1) 1580/     747 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1581/     748 : 47                  		ld	b,a		; b - flags to check
(1) 1582/     749 : E6 0F               		and	00001111b	; Filter flags
(1) 1583/     74B : C8                  		ret	z
(1) 1584/     74C : 78                  		ld	a,b
(1) 1585/     74D : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1586/     74F : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1587/     750 : D5                  		push	de
(1) 1588/     751 : DD E1               		pop	ix
(1) 1589/     753 : FD 6E 03            		ld	l,(iy+03h)
(1) 1590/     756 : FD 66 04            		ld	h,(iy+04h)
(1) 1591/     759 : E7                  		rst	20h
(1) 1592/     75A :                     
(1) 1593/     75A :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1594/     75A :                     	; iy - Our chip table
(1) 1595/     75A :                     	; ix - Track channel
(1) 1596/     75A :                     	; hl - Intrument data
(1) 1597/     75A : CB 40               		bit	0,b		; Note
(1) 1598/     75C : C4 75 0B            		call	nz,.note
(1) 1599/     75F : CB 48               		bit	1,b		; Intrument
(1) 1600/     761 : C4 F4 09            		call	nz,.inst
(1) 1601/     764 : CF                  		rst	8
(1) 1602/     765 : CB 50               		bit	2,b		; Volume
(1) 1603/     767 : C4 EA 09            		call	nz,.volu
(1) 1604/     76A : CB 58               		bit	3,b		; Effect
(1) 1605/     76C : C4 AD 09            		call	nz,.effc
(1) 1606/     76F : 78                  		ld	a,b
(1) 1607/     770 : E6 0F               		and	00001111b
(1) 1608/     772 : C8                  		ret	z
(1) 1609/     773 : CF                  		rst	8
(1) 1610/     774 :                     
(1) 1611/     774 :                     ; ----------------------------------------
(1) 1612/     774 :                     ; Process channel now
(1) 1613/     774 :                     ;
(1) 1614/     774 :                     ; b - Note bits
(1) 1615/     774 :                     ; ----------------------------------------
(1) 1616/     774 :                     
(1) 1617/     774 : 7E                  		ld	a,(hl)
(1) 1618/     775 : E6 F0               		and	11110000b
(1) 1619/     777 : FE 80               		cp	80h
(1) 1620/     779 : 28 38               		jr	z,.mk_psg
(1) 1621/     77B : FE 90               		cp	90h
(1) 1622/     77D : 28 16               		jr	z,.mk_psgn
(1) 1623/     77F : FE A0               		cp	0A0h
(1) 1624/     781 : CA 18 08            		jp	z,.mk_fm
(1) 1625/     784 : FE B0               		cp	0B0h
(1) 1626/     786 : CA 6A 08            		jp	z,.mk_fmspc
(1) 1627/     789 : CF                  		rst	8
(1) 1628/     78A : FE C0               		cp	0C0h
(1) 1629/     78C : CA F2 08            		jp	z,.mk_dac
(1) 1630/     78F : FE D0               		cp	0D0h
(1) 1631/     791 : CA 27 09            		jp	z,.mk_pwm
(1) 1632/     794 : C9                  		ret
(1) 1633/     795 :                     
(1) 1634/     795 :                     ; --------------------------------
(1) 1635/     795 :                     
(1) 1636/     795 :                     .mk_psgn:
(1) 1637/     795 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1638/     798 : DD E5               		push	ix
(1) 1639/     79A : DD 21 B1 15         		ld	ix,psgcom+3	; <-- direct ix point
(1) 1640/     79E : CF                  		rst	8
(1) 1641/     79F : FE FE               		cp	-2
(1) 1642/     7A1 : 28 51               		jr	z,.kycut_psgn
(1) 1643/     7A3 : FE FF               		cp	-1
(1) 1644/     7A5 : 28 3D               		jr	z,.kyoff_psgn
(1) 1645/     7A7 : 5F                  		ld	e,a
(1) 1646/     7A8 : 3A 39 16            		ld	a,(psgHatMode)	; Tone 3?
(1) 1647/     7AB : E6 03               		and	011b
(1) 1648/     7AD : FE 03               		cp	011b
(1) 1649/     7AF : 20 28               		jr	nz,.psg_keyon	; Normal
(1) 1650/     7B1 : 18 19               		jr	.from_psgn	; Tone 3
(1) 1651/     7B3 :                     .mk_psg:
(1) 1652/     7B3 : CF                  		rst	8
(1) 1653/     7B4 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1654/     7B7 : DD E5               		push	ix
(1) 1655/     7B9 : DD 21 AE 15         		ld	ix,psgcom	; ix - psgcom
(1) 1656/     7BD : FD 5E 05            		ld	e,(iy+05h)
(1) 1657/     7C0 : 16 00               		ld	d,0
(1) 1658/     7C2 : DD 19               		add	ix,de
(1) 1659/     7C4 : FE FE               		cp	-2
(1) 1660/     7C6 : 28 31               		jr	z,.kycut_psg
(1) 1661/     7C8 : FE FF               		cp	-1
(1) 1662/     7CA : 28 1D               		jr	z,.kyoff_psg
(1) 1663/     7CC :                     .from_psgn:
(1) 1664/     7CC : CF                  		rst	8
(1) 1665/     7CD : FD 5E 06            		ld	e,(iy+06h)	; Read pitch
(1) 1666/     7D0 : FD 56 07            		ld	d,(iy+07h)
(1) 1667/     7D3 : DD 73 1C            		ld	(ix+DTL),e
(1) 1668/     7D6 : DD 72 20            		ld	(ix+DTH),d
(1) 1669/     7D9 :                     .psg_keyon:
(1) 1670/     7D9 : CD 04 08            		call	.dopsg_vol
(1) 1671/     7DC : CF                  		rst	8
(1) 1672/     7DD : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1673/     7E1 : DD E1               		pop	ix
(1) 1674/     7E3 : C9                  		ret
(1) 1675/     7E4 :                     ; -1
(1) 1676/     7E4 :                     .kyoff_psgn:
(1) 1677/     7E4 : 3E 00               		ld	a,000b
(1) 1678/     7E6 : 32 39 16            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1679/     7E9 :                     .kyoff_psg:
(1) 1680/     7E9 : CF                  		rst	8
(1) 1681/     7EA : 0E 02               		ld	c,010b
(1) 1682/     7EC : DD 71 00            		ld	(ix),c
(1) 1683/     7EF : DD E1               		pop	ix
(1) 1684/     7F1 : C3 F7 0C            		jp	.chnl_ulnkoff
(1) 1685/     7F4 :                     ; -2
(1) 1686/     7F4 :                     .kycut_psgn:
(1) 1687/     7F4 : 3E 00               		ld	a,000b
(1) 1688/     7F6 : 32 39 16            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1689/     7F9 :                     .kycut_psg:
(1) 1690/     7F9 : CF                  		rst	8
(1) 1691/     7FA : 0E 04               		ld	c,100b
(1) 1692/     7FC : DD 71 00            		ld	(ix),c
(1) 1693/     7FF : DD E1               		pop	ix
(1) 1694/     801 : C3 08 0D            		jp	.chnl_ulnkcut
(1) 1695/     804 :                     
(1) 1696/     804 :                     .dopsg_vol:
(1) 1697/     804 : FD 7E 08            		ld	a,(iy+08h)	; Set volume
(1) 1698/     807 : ED 44               		neg	a
(1) 1699/     809 : 4F                  		ld	c,a
(1) 1700/     80A : CF                  		rst	8
(1) 1701/     80B : FE 40               		cp	40h
(1) 1702/     80D : 20 02               		jr	nz,.vmuch
(1) 1703/     80F : 0E FF               		ld	c,-1
(1) 1704/     811 :                     .vmuch:
(1) 1705/     811 : 79                  		ld	a,c
(1) 1706/     812 : 87                  		add	a,a
(1) 1707/     813 : 87                  		add	a,a
(1) 1708/     814 : DD 77 30            		ld	(ix+PVOL),a
(1) 1709/     817 : C9                  		ret
(1) 1710/     818 :                     
(1) 1711/     818 :                     ; --------------------------------
(1) 1712/     818 :                     
(1) 1713/     818 :                     .mk_fm:
(1) 1714/     818 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1715/     81B : FE FE               		cp	-2
(1) 1716/     81D : CA E9 08            		jp	z,.fm_cut
(1) 1717/     820 : FE FF               		cp	-1
(1) 1718/     822 : CA E3 08            		jp	z,.fm_off
(1) 1719/     825 : CF                  		rst	8
(1) 1720/     826 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1721/     829 : 78                  		ld	a,b		; Note bit?
(1) 1722/     82A : E6 01               		and	0001b
(1) 1723/     82C : 28 29               		jr	z,.nofm_note
(1) 1724/     82E : FD 46 05            		ld	b,(iy+05h)	; Check channel 3
(1) 1725/     831 : 78                  		ld	a,b
(1) 1726/     832 : FE 02               		cp	2
(1) 1727/     834 : 20 0B               		jr	nz,.not_dspc
(1) 1728/     836 : 11 00 27            		ld	de,2700h	; CH3 off
(1) 1729/     839 : CD F6 0F            		call	fm_send_1
(1) 1730/     83C : 3E 00               		ld	a,0
(1) 1731/     83E : 32 3A 16            		ld	(fmSpecial),a
(1) 1732/     841 :                     .not_dspc:
(1) 1733/     841 : 78                  		ld	a,b
(1) 1734/     842 : FE 06               		cp	6
(1) 1735/     844 : 20 04               		jr	nz,.not_dac
(1) 1736/     846 : CF                  		rst	8
(1) 1737/     847 : CD 21 10            		call	dac_off
(1) 1738/     84A :                     .not_dac:
(1) 1739/     84A : CD 13 0C            		call	.fm_keyoff
(1) 1740/     84D : FD 6E 06            		ld	l,(iy+06h)	; Read pitch
(1) 1741/     850 : FD 66 07            		ld	h,(iy+07h)
(1) 1742/     853 : CD 32 0C            		call	.fm_setfreq
(1) 1743/     856 : CF                  		rst	8
(1) 1744/     857 :                     .nofm_note:
(1) 1745/     857 : CD C3 0C            		call	.fm_wrtalpan	; Panning and effects
(1) 1746/     85A : CD 49 0C            		call	.fm_wrtlvol	; FM volume control
(1) 1750/     85D : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Eh - keys
(1) 1751/     860 : E6 F0               		and	11110000b
(1) 1752/     862 : B1                  		or	c
(1) 1753/     863 : CF                  		rst	8
(1) 1754/     864 : 5F                  		ld	e,a
(1) 1755/     865 : 16 28               		ld	d,28h
(1) 1756/     867 : C3 F6 0F            		jp	fm_send_1
(1) 1758/     86A :                     
(1) 1759/     86A :                     ; --------------------------------
(1) 1760/     86A :                     
(1) 1761/     86A :                     .mk_fmspc:
(1) 1762/     86A : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1763/     86D : FE FE               		cp	-2
(1) 1764/     86F : CA E9 08            		jp	z,.fm_cut
(1) 1765/     872 : FE FF               		cp	-1
(1) 1766/     874 : CA E3 08            		jp	z,.fm_off
(1) 1767/     877 : CF                  		rst	8
(1) 1768/     878 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1769/     87B : 78                  		ld	a,b
(1) 1770/     87C : E6 01               		and	0001b
(1) 1771/     87E : 28 D7               		jr	z,.nofm_note
(1) 1772/     880 : CD 13 0C            		call	.fm_keyoff
(1) 1773/     883 : 21 2C 13            		ld	hl,fmcach_list	; Manual freqs
(1) 1774/     886 : FD 7E 05            		ld	a,(iy+05h)
(1) 1775/     889 : E6 07               		and	0111b
(1) 1776/     88B : 16 00               		ld	d,0
(1) 1777/     88D : 87                  		add	a,a
(1) 1778/     88E : 5F                  		ld	e,a
(1) 1779/     88F : 19                  		add	hl,de
(1) 1780/     890 : 7E                  		ld	a,(hl)
(1) 1781/     891 : 23                  		inc	hl
(1) 1782/     892 : 66                  		ld	h,(hl)
(1) 1783/     893 : 6F                  		ld	l,a
(1) 1784/     894 : 11 20 00            		ld	de,20h		; point to regs
(1) 1785/     897 : 19                  		add	hl,de
(1) 1786/     898 : CF                  		rst	8
(1) 1787/     899 : 16 AD               		ld	d,0ADh
(1) 1788/     89B : 5E                  		ld	e,(hl)
(1) 1789/     89C : CD F6 0F            		call	fm_send_1
(1) 1790/     89F : 23                  		inc	hl
(1) 1791/     8A0 : 16 A9               		ld	d,0A9h
(1) 1792/     8A2 : 5E                  		ld	e,(hl)
(1) 1793/     8A3 : CD F6 0F            		call	fm_send_1
(1) 1794/     8A6 : 23                  		inc	hl
(1) 1795/     8A7 : CF                  		rst	8
(1) 1796/     8A8 : 16 AC               		ld	d,0ACh
(1) 1797/     8AA : 5E                  		ld	e,(hl)
(1) 1798/     8AB : CD F6 0F            		call	fm_send_1
(1) 1799/     8AE : 23                  		inc	hl
(1) 1800/     8AF : 16 A8               		ld	d,0A8h
(1) 1801/     8B1 : 5E                  		ld	e,(hl)
(1) 1802/     8B2 : CD F6 0F            		call	fm_send_1
(1) 1803/     8B5 : 23                  		inc	hl
(1) 1804/     8B6 : CF                  		rst	8
(1) 1805/     8B7 : 16 AE               		ld	d,0AEh
(1) 1806/     8B9 : 5E                  		ld	e,(hl)
(1) 1807/     8BA : CD F6 0F            		call	fm_send_1
(1) 1808/     8BD : 23                  		inc	hl
(1) 1809/     8BE : 16 AA               		ld	d,0AAh
(1) 1810/     8C0 : 5E                  		ld	e,(hl)
(1) 1811/     8C1 : CD F6 0F            		call	fm_send_1
(1) 1812/     8C4 : 23                  		inc	hl
(1) 1813/     8C5 : CF                  		rst	8
(1) 1814/     8C6 : 16 A6               		ld	d,0A6h
(1) 1815/     8C8 : 5E                  		ld	e,(hl)
(1) 1816/     8C9 : CD F6 0F            		call	fm_send_1
(1) 1817/     8CC : 23                  		inc	hl
(1) 1818/     8CD : 16 A2               		ld	d,0A2h
(1) 1819/     8CF : 5E                  		ld	e,(hl)
(1) 1820/     8D0 : CD F6 0F            		call	fm_send_1
(1) 1821/     8D3 : 23                  		inc	hl
(1) 1822/     8D4 : CF                  		rst	8
(1) 1823/     8D5 : 11 40 27            		ld	de,2740h	; CH3 on
(1) 1824/     8D8 : CD F6 0F            		call	fm_send_1
(1) 1825/     8DB : 3E 01               		ld	a,1
(1) 1826/     8DD : 32 3A 16            		ld	(fmSpecial),a
(1) 1827/     8E0 : C3 57 08            		jp	.nofm_note
(1) 1828/     8E3 :                     
(1) 1829/     8E3 :                     ; --------------------------------
(1) 1830/     8E3 :                     
(1) 1831/     8E3 :                     .fm_off:
(1) 1832/     8E3 : CD 13 0C            		call	.fm_keyoff
(1) 1833/     8E6 : C3 F7 0C            		jp	.chnl_ulnkoff
(1) 1834/     8E9 :                     .fm_cut:
(1) 1835/     8E9 : CD 13 0C            		call	.fm_keyoff
(1) 1836/     8EC : CD 1B 0C            		call	.fm_tloff
(1) 1837/     8EF : C3 08 0D            		jp	.chnl_ulnkcut
(1) 1838/     8F2 :                     
(1) 1839/     8F2 :                     ; --------------------------------
(1) 1840/     8F2 :                     
(1) 1841/     8F2 :                     .mk_dac:
(1) 1842/     8F2 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1843/     8F5 : FE FE               		cp	-2
(1) 1844/     8F7 : CA 1E 09            		jp	z,.dac_cut
(1) 1845/     8FA : FE FF               		cp	-1
(1) 1846/     8FC : CA 24 09            		jp	z,.dac_off
(1) 1847/     8FF : 78                  		ld	a,b		; Note ONLY?
(1) 1848/     900 : E6 01               		and	0001b
(1) 1849/     902 : C8                  		ret	z
(1) 1850/     903 : CD 21 10            		call	dac_off
(1) 1851/     906 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 1852/     909 : 2F                  		cpl				; REVERSE bits
(1) 1853/     90A : E6 C0               		and	11000000b
(1) 1854/     90C : 5F                  		ld	e,a
(1) 1855/     90D : 16 B6               		ld	d,0B6h		; Channel 6
(1) 1856/     90F : CD 01 10            		call	fm_send_2
(1) 1857/     912 : FD 6E 06            		ld	l,(iy+06h)	; Read pitch
(1) 1858/     915 : FD 66 07            		ld	h,(iy+07h)
(1) 1859/     918 : 22 33 16            		ld	(wave_Pitch),hl
(1) 1860/     91B :                     ; 		ld	a,(iy+0Ah)
(1) 1861/     91B :                     ; 		ld	(wave_Flags),a
(1) 1862/     91B : C3 36 10            		jp	dac_play
(1) 1863/     91E :                     .dac_cut:
(1) 1864/     91E : CD 21 10            		call	dac_off
(1) 1865/     921 : C3 F7 0C            		jp	.chnl_ulnkoff
(1) 1866/     924 :                     .dac_off:
(1) 1867/     924 : C3 08 0D            		jp	.chnl_ulnkcut
(1) 1868/     927 :                     
(1) 1869/     927 :                     ; --------------------------------
(1) 1870/     927 :                     
(1) 1871/     927 :                     .mk_pwm:
(1) 1872/     927 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1873/     92A : 16 00               		ld	d,0
(1) 1874/     92C : FD 5E 05            		ld	e,(iy+05h)
(1) 1875/     92F : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 1876/     932 : DD E5               		push	ix
(1) 1877/     934 : DD 21 76 15         		ld	ix,pwmcom
(1) 1878/     938 : DD 19               		add	ix,de
(1) 1879/     93A : FE FE               		cp	-2
(1) 1880/     93C : CA 9E 09            		jp	z,.pwm_cut
(1) 1881/     93F : FE FF               		cp	-1
(1) 1882/     941 : CA 8F 09            		jp	z,.pwm_off
(1) 1883/     944 : CF                  		rst	8
(1) 1884/     945 : 78                  		ld	a,b		; Note ONLY?
(1) 1885/     946 : E6 01               		and	0001b
(1) 1886/     948 : 28 42               		jr	z,.nopwm_note
(1) 1887/     94A : 79                  		ld	a,c
(1) 1888/     94B : 0F                  		rrca
(1) 1889/     94C : 0F                  		rrca
(1) 1890/     94D : 2F                  		cpl
(1) 1891/     94E : E6 30               		and	00110000b
(1) 1892/     950 : 5F                  		ld	e,a
(1) 1893/     951 : FD 6E 06            		ld	l,(iy+06h)	; Read pitch
(1) 1894/     954 : FD 66 07            		ld	h,(iy+07h)
(1) 1895/     957 : CF                  		rst	8
(1) 1896/     958 : FD 7E 08            		ld	a,(iy+08h)	; Read volume
(1) 1897/     95B : ED 44               		neg	a
(1) 1898/     95D : 87                  		add	a,a
(1) 1899/     95E : 87                  		add	a,a
(1) 1900/     95F : 30 02               		jr	nc,.pwv_much
(1) 1901/     961 : 3E FF               		ld	a,-1
(1) 1902/     963 :                     .pwv_much:
(1) 1903/     963 :                     ; 		add	a,a
(1) 1904/     963 : E6 FC               		and	11111100b
(1) 1905/     965 : FD 77 08            		ld	(iy+08h),a	; vvvvvv00b
(1) 1906/     968 : CF                  		rst	8
(1) 1907/     969 : B4                  		or	h		; Merge MSB freq
(1) 1908/     96A : 01 08 00            		ld	bc,8
(1) 1909/     96D : DD 36 00 01         		ld	(ix),001b	; KeyON
(1) 1910/     971 : DD 09               		add	ix,bc
(1) 1911/     973 : DD 77 00            		ld	(ix),a
(1) 1912/     976 : DD 09               		add	ix,bc
(1) 1913/     978 : DD 75 00            		ld	(ix),l
(1) 1914/     97B : DD 09               		add	ix,bc
(1) 1915/     97D : CF                  		rst	8
(1) 1916/     97E : DD 7E 00            		ld	a,(ix)
(1) 1917/     981 : E6 CF               		and	11001111b
(1) 1918/     983 : B3                  		or	e
(1) 1919/     984 : DD 77 00            		ld	(ix),a
(1) 1920/     987 : 3E 01               		ld	a,1
(1) 1921/     989 : 32 3F 00            		ld	(marsUpd),a
(1) 1922/     98C :                     .nopwm_note:
(1) 1923/     98C : DD E1               		pop	ix
(1) 1924/     98E : C9                  		ret
(1) 1925/     98F :                     ; -1
(1) 1926/     98F :                     .pwm_off:
(1) 1927/     98F : CF                  		rst	8
(1) 1928/     990 : DD 36 00 02         		ld	(ix),010b
(1) 1929/     994 : 3E 01               		ld	a,1
(1) 1930/     996 : 32 3F 00            		ld	(marsUpd),a
(1) 1931/     999 : DD E1               		pop	ix
(1) 1932/     99B : C3 F7 0C            		jp	.chnl_ulnkoff
(1) 1933/     99E :                     ; -2
(1) 1934/     99E :                     .pwm_cut:
(1) 1935/     99E : CF                  		rst	8
(1) 1936/     99F : DD 36 00 04         		ld	(ix),100b
(1) 1937/     9A3 : 3E 01               		ld	a,1
(1) 1938/     9A5 : 32 3F 00            		ld	(marsUpd),a
(1) 1939/     9A8 : DD E1               		pop	ix
(1) 1940/     9AA : C3 08 0D            		jp	.chnl_ulnkcut
(1) 1941/     9AD :                     
(1) 1942/     9AD :                     ; ----------------------------------------
(1) 1943/     9AD :                     ; NEW effect
(1) 1944/     9AD :                     ; ----------------------------------------
(1) 1945/     9AD :                     
(1) 1946/     9AD :                     ; TODO: agregar mas efectos para la ver 1.0
(1) 1947/     9AD :                     .effc:
(1) 1948/     9AD : DD 7E 06            		ld	a,(ix+chnl_EffArg)
(1) 1949/     9B0 : 5F                  		ld	e,a			; e - effect data
(1) 1950/     9B1 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1) 1951/     9B4 : 57                  		ld	d,a			; d - effect id
(1) 1952/     9B5 : CF                  		rst	8
(1) 1953/     9B6 :                     ; 		cp	4
(1) 1954/     9B6 :                     ; 		jr	z,.effc_D
(1) 1955/     9B6 : FE 18               		cp	24			; Effect X?
(1) 1956/     9B8 : CA BD 09            		jp	z,.effc_X
(1) 1957/     9BB : C9                  		ret
(1) 1958/     9BC :                     
(1) 1959/     9BC :                     ; ----------------------------------------
(1) 1960/     9BC :                     ; Effect D
(1) 1961/     9BC :                     ;
(1) 1962/     9BC :                     ; Volume slide
(1) 1963/     9BC :                     
(1) 1964/     9BC :                     ; .effc_D:
(1) 1965/     9BC :                     ; 		ld	d,(iy+0Ah)
(1) 1966/     9BC :                     ; 		ld	a,e
(1) 1967/     9BC :                     ; 		or	a
(1) 1968/     9BC :                     ; 		jr	z,.D_cont	; 00h = slide continue
(1) 1969/     9BC :                     ; 		rst	8
(1) 1970/     9BC :                     ; 		ld	d,a
(1) 1971/     9BC :                     ; 		ld	(iy+0Ah),d	; Store slide setting
(1) 1972/     9BC :                     ; .D_cont:
(1) 1973/     9BC :                     ; 		ld	a,d
(1) 1974/     9BC :                     ; 		or	a
(1) 1975/     9BC :                     ; 		ret	z
(1) 1976/     9BC :                     ; 		ld	c,(iy+08h)	; Current volume
(1) 1977/     9BC :                     ; 		and	00001111b
(1) 1978/     9BC :                     ; 		jr	z,.n_down
(1) 1979/     9BC :                     ; 		rst	8
(1) 1980/     9BC :                     ; 		ld	a,c
(1) 1981/     9BC :                     ; 		sla	d
(1) 1982/     9BC :                     ; 		add	a,d
(1) 1983/     9BC :                     ; 		cp	40h
(1) 1984/     9BC :                     ; 		jr	c,.wr_dvol
(1) 1985/     9BC :                     ; 		ld	a,40h
(1) 1986/     9BC :                     ; 		jr	.wr_dvol
(1) 1987/     9BC :                     ; .n_down:
(1) 1988/     9BC :                     ; 		rst	8
(1) 1989/     9BC :                     ; 		ld	a,d
(1) 1990/     9BC :                     ; 		and	11110000b
(1) 1991/     9BC :                     ; 		jr	z,.n_up
(1) 1992/     9BC :                     ; 		ld	a,c
(1) 1993/     9BC :                     ; 		sla	d
(1) 1994/     9BC :                     ; 		sub	a,d
(1) 1995/     9BC :                     ; 		or	a
(1) 1996/     9BC :                     ; 		jp	p,.wr_dvol
(1) 1997/     9BC :                     ; 		rst	8
(1) 1998/     9BC :                     ; 		xor	a
(1) 1999/     9BC :                     ; 		jr	.wr_dvol
(1) 2000/     9BC :                     ; .n_up:
(1) 2001/     9BC :                     ; 		ret
(1) 2002/     9BC :                     ; .wr_dvol:
(1) 2003/     9BC :                     ; 		ld	(iy+08h),a
(1) 2004/     9BC : C9                  		ret
(1) 2005/     9BD :                     
(1) 2006/     9BD :                     ; ----------------------------------------
(1) 2007/     9BD :                     ; Effect X
(1) 2008/     9BD :                     ;
(1) 2009/     9BD :                     ; Panning arg:
(1) 2010/     9BD :                     ; 00h LEFT <- 80h MIDDLE -> FFh RIGHT
(1) 2011/     9BD :                     ;
(1) 2012/     9BD :                     ; FM style %LR000000 (REVERSE: 0-on 1-off)
(1) 2013/     9BD :                     
(1) 2014/     9BD :                     .effc_X:
(1) 2015/     9BD : 16 00               		ld	d,0
(1) 2016/     9BF : 7E                  		ld	a,(hl)
(1) 2017/     9C0 : FE 80               		cp	80h
(1) 2018/     9C2 : 28 14               		jr	z,.res_pan
(1) 2019/     9C4 : FE 90               		cp	90h
(1) 2020/     9C6 : 28 10               		jr	z,.res_pan
(1) 2021/     9C8 : CF                  		rst	8
(1) 2022/     9C9 : E5                  		push	hl
(1) 2023/     9CA : 21 E2 09            		ld	hl,.fm_panlist
(1) 2024/     9CD : 7B                  		ld	a,e
(1) 2025/     9CE : 07                  		rlca
(1) 2026/     9CF : 07                  		rlca
(1) 2027/     9D0 : 07                  		rlca
(1) 2028/     9D1 : E6 07               		and	0111b
(1) 2029/     9D3 :                     ; 		ld	d,0
(1) 2030/     9D3 : 5F                  		ld	e,a
(1) 2031/     9D4 : CF                  		rst	8
(1) 2032/     9D5 : 19                  		add	hl,de
(1) 2033/     9D6 : 56                  		ld	d,(hl)
(1) 2034/     9D7 : E1                  		pop	hl
(1) 2035/     9D8 :                     .res_pan:
(1) 2036/     9D8 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2037/     9DB : E6 3F               		and	00111111b
(1) 2038/     9DD : B2                  		or	d
(1) 2039/     9DE : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2040/     9E1 : C9                  		ret
(1) 2041/     9E2 :                     
(1) 2042/     9E2 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2043/     9E2 :                     .fm_panlist:
(1) 2044/     9E2 : 40                  		db 01000000b
(1) 2045/     9E3 : 40                  		db 01000000b
(1) 2046/     9E4 : 40                  		db 01000000b
(1) 2047/     9E5 : 00                  		db 00000000b
(1) 2048/     9E6 : 00                  		db 00000000b
(1) 2049/     9E7 : 80                  		db 10000000b
(1) 2050/     9E8 : 80                  		db 10000000b
(1) 2051/     9E9 : 80                  		db 10000000b
(1) 2052/     9EA :                     
(1) 2053/     9EA :                     ; ----------------------------------------
(1) 2054/     9EA :                     ; NEW volume
(1) 2055/     9EA :                     ; ----------------------------------------
(1) 2056/     9EA :                     
(1) 2057/     9EA :                     .volu:
(1) 2058/     9EA : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2059/     9ED : D6 40               		sub	a,64
(1) 2060/     9EF : FD 77 08            		ld	(iy+08h),a	; <-- BASE volume
(1) 2061/     9F2 : CF                  		rst	8
(1) 2062/     9F3 : C9                  		ret
(1) 2063/     9F4 :                     
(1) 2064/     9F4 :                     ; ----------------------------------------
(1) 2065/     9F4 :                     ; NEW instrument
(1) 2066/     9F4 :                     ; ----------------------------------------
(1) 2067/     9F4 :                     
(1) 2068/     9F4 :                     .inst:
(1) 2069/     9F4 : 7E                  		ld	a,(hl)
(1) 2070/     9F5 : E6 F0               		and	11110000b
(1) 2071/     9F7 : FE 80               		cp	80h
(1) 2072/     9F9 : 28 1E               		jr	z,.ps_ins
(1) 2073/     9FB : FE 90               		cp	90h
(1) 2074/     9FD : 28 14               		jr	z,.pn_ins
(1) 2075/     9FF : FE A0               		cp	0A0h
(1) 2076/     A01 : 28 4C               		jr	z,.fm_ins
(1) 2077/     A03 : FE B0               		cp	0B0h
(1) 2078/     A05 : 28 48               		jr	z,.fm_ins
(1) 2079/     A07 : FE C0               		cp	0C0h
(1) 2080/     A09 : CA DB 0A            		jp	z,.dac_ins
(1) 2081/     A0C : CF                  		rst	8
(1) 2082/     A0D : FE D0               		cp	0D0h
(1) 2083/     A0F : CA 33 0B            		jp	z,.pwm_ins
(1) 2084/     A12 :                     .invl_ins:
(1) 2085/     A12 : C9                  		ret
(1) 2086/     A13 :                     ; PSG
(1) 2087/     A13 :                     .pn_ins:
(1) 2088/     A13 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2089/     A14 : E6 07               		and	0111b
(1) 2090/     A16 : 32 39 16            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2091/     A19 :                     .ps_ins:
(1) 2092/     A19 : CF                  		rst	8
(1) 2093/     A1A : DD E5               		push	ix
(1) 2094/     A1C : E5                  		push	hl
(1) 2095/     A1D : 23                  		inc	hl		; Skip ID
(1) 2096/     A1E : DD 21 AE 15         		ld	ix,psgcom	; Read psg control
(1) 2097/     A22 : FD 5E 05            		ld	e,(iy+05h)
(1) 2098/     A25 : 16 00               		ld	d,0
(1) 2099/     A27 : DD 19               		add	ix,de
(1) 2100/     A29 : 7E                  		ld	a,(hl)
(1) 2101/     A2A : CF                  		rst	8
(1) 2102/     A2B : 23                  		inc	hl
(1) 2103/     A2C : 7E                  		ld	a,(hl)
(1) 2104/     A2D : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2105/     A30 : 23                  		inc	hl
(1) 2106/     A31 : 7E                  		ld	a,(hl)
(1) 2107/     A32 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2108/     A35 : 23                  		inc	hl
(1) 2109/     A36 : 7E                  		ld	a,(hl)
(1) 2110/     A37 : CF                  		rst	8
(1) 2111/     A38 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2112/     A3B : 23                  		inc	hl
(1) 2113/     A3C : 7E                  		ld	a,(hl)
(1) 2114/     A3D : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2115/     A40 : 23                  		inc	hl
(1) 2116/     A41 : 7E                  		ld	a,(hl)
(1) 2117/     A42 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2118/     A45 : 23                  		inc	hl
(1) 2119/     A46 : 7E                  		ld	a,(hl)
(1) 2120/     A47 : CF                  		rst	8
(1) 2121/     A48 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2122/     A4B : E1                  		pop	hl
(1) 2123/     A4C : DD E1               		pop	ix
(1) 2124/     A4E : C9                  		ret
(1) 2125/     A4F :                     
(1) 2126/     A4F :                     ; --------
(1) 2127/     A4F :                     
(1) 2128/     A4F :                     .fm_ins:
(1) 2129/     A4F : DD E5               		push	ix
(1) 2130/     A51 : E5                  		push	hl
(1) 2131/     A52 : C5                  		push	bc
(1) 2132/     A53 :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2133/     A53 : FD 46 02            		ld	b,(iy+02h)
(1) 2134/     A56 : FD 7E 05            		ld	a,(iy+05h)
(1) 2135/     A59 : E6 07               		and	0111b
(1) 2136/     A5B : 16 00               		ld	d,0
(1) 2137/     A5D : 87                  		add	a,a
(1) 2138/     A5E : 5F                  		ld	e,a
(1) 2139/     A5F : DD 21 2C 13         		ld	ix,fmcach_list
(1) 2140/     A63 : DD 19               		add	ix,de
(1) 2141/     A65 : CF                  		rst	8
(1) 2142/     A66 : DD 5E 00            		ld	e,(ix)
(1) 2143/     A69 : DD 23               		inc	ix
(1) 2144/     A6B : DD 56 00            		ld	d,(ix)
(1) 2145/     A6E : D5                  		push	de
(1) 2146/     A6F :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2147/     A6F :                     ; 		cp	b
(1) 2148/     A6F :                     ; 		jr	z,.same_patch
(1) 2149/     A6F :                     ; 		ld	(iy+0Bh),b
(1) 2150/     A6F : 23                  		inc	hl		; Skip id and pitch
(1) 2151/     A70 : 23                  		inc	hl
(1) 2152/     A71 : CF                  		rst	8
(1) 2153/     A72 : 46                  		ld	b,(hl)
(1) 2154/     A73 : 23                  		inc	hl
(1) 2155/     A74 : 4E                  		ld	c,(hl)
(1) 2156/     A75 : 23                  		inc	hl
(1) 2157/     A76 : 6E                  		ld	l,(hl)
(1) 2158/     A77 : 61                  		ld	h,c
(1) 2159/     A78 : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2160/     A7B : BC                  		cp	h
(1) 2161/     A7C : 20 0D               		jr	nz,.new_romdat
(1) 2162/     A7E : CF                  		rst	8
(1) 2163/     A7F : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2164/     A82 : BD                  		cp	l
(1) 2165/     A83 : 20 06               		jr	nz,.new_romdat
(1) 2166/     A85 : FD 7E 09            		ld	a,(iy+09h)
(1) 2167/     A88 : B8                  		cp	b
(1) 2168/     A89 : 28 11               		jr	z,.same_patch
(1) 2169/     A8B :                     .new_romdat:
(1) 2170/     A8B : CF                  		rst	8
(1) 2171/     A8C : FD 70 09            		ld	(iy+09h),b
(1) 2172/     A8F : FD 74 0A            		ld	(iy+0Ah),h
(1) 2173/     A92 : FD 75 0B            		ld	(iy+0Bh),l
(1) 2174/     A95 : 78                  		ld	a,b
(1) 2175/     A96 : 01 28 00            		ld	bc,28h		; <- size
(1) 2176/     A99 : CD 09 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 2177/     A9C :                     .same_patch:
(1) 2178/     A9C : E1                  		pop	hl
(1) 2179/     A9D : FD 7E 05            		ld	a,(iy+05h)
(1) 2180/     AA0 : 4F                  		ld	c,a		; c - FM Key ID
(1) 2181/     AA1 :                     ; 		call	.fm_keyoff
(1) 2182/     AA1 :                     
(1) 2183/     AA1 :                     	; hl - fmcach intrument
(1) 2184/     AA1 :                     	; de - FM reg and data: 3000h
(1) 2185/     AA1 :                     	;  c - FM keyChannel
(1) 2186/     AA1 : 79                  		ld	a,c
(1) 2187/     AA2 : E6 03               		and	011b
(1) 2188/     AA4 : F6 30               		or	30h		; Start at reg 30h
(1) 2189/     AA6 : 57                  		ld	d,a
(1) 2190/     AA7 : 1E 00               		ld	e,0
(1) 2191/     AA9 : CF                  		rst	8
(1) 2192/     AAA : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2193/     AAC : CD CB 0A            		call	.fm_setrlist
(1) 2194/     AAF :                     ; 		ld	b,4
(1) 2195/     AAF :                     ; 		call	.fm_setrlist
(1) 2196/     AAF :                     ; 		ld	b,5*4
(1) 2197/     AAF :                     ; 		call	.fm_setrlist
(1) 2198/     AAF : CF                  		rst	8
(1) 2199/     AB0 : 7E                  		ld	a,(hl)		; 0B0h
(1) 2200/     AB1 : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2201/     AB4 : 23                  		inc	hl
(1) 2202/     AB5 : 7E                  		ld	a,(hl)		; 0B4h
(1) 2203/     AB6 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2204/     AB9 : 23                  		inc	hl
(1) 2205/     ABA : 7E                  		ld	a,(hl)
(1) 2206/     ABB : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2207/     ABE : 23                  		inc	hl
(1) 2208/     ABF : 7E                  		ld	a,(hl)		; 028h keys
(1) 2209/     AC0 : E6 F0               		and	11110000b
(1) 2210/     AC2 : CF                  		rst	8
(1) 2211/     AC3 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2212/     AC6 :                     ; .same_patch:
(1) 2213/     AC6 : C1                  		pop	bc
(1) 2214/     AC7 : E1                  		pop	hl
(1) 2215/     AC8 : DD E1               		pop	ix
(1) 2216/     ACA : C9                  		ret
(1) 2217/     ACB :                     ; b - numof_regs
(1) 2218/     ACB :                     .fm_setrlist:
(1) 2219/     ACB : 5E                  		ld	e,(hl)
(1) 2220/     ACC : 23                  		inc	hl
(1) 2221/     ACD : CD ED 0F            		call	fm_autoreg
(1) 2222/     AD0 : 00                  		nop
(1) 2223/     AD1 : 00                  		nop
(1) 2224/     AD2 : CF                  		rst	8
(1) 2225/     AD3 : 00                  		nop
(1) 2226/     AD4 : 14                  		inc	d		; +4
(1) 2227/     AD5 : 14                  		inc	d
(1) 2228/     AD6 : 14                  		inc	d
(1) 2229/     AD7 : 14                  		inc	d
(1) 2230/     AD8 : 10 F1               		djnz	.fm_setrlist
(1) 2231/     ADA : C9                  		ret
(1) 2232/     ADB :                     ; --------
(1) 2233/     ADB :                     
(1) 2234/     ADB :                     .dac_ins:
(1) 2235/     ADB : DD 5E 03            		ld	e,(ix+chnl_Ins)	; b - current Ins
(1) 2236/     ADE :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2237/     ADE :                     ; 		cp	e
(1) 2238/     ADE :                     ; 		jr	z,.same_dac
(1) 2239/     ADE : FD 73 0B            		ld	(iy+0Bh),e
(1) 2240/     AE1 : E5                  		push	hl
(1) 2241/     AE2 : C5                  		push	bc
(1) 2242/     AE3 : 7E                  		ld	a,(hl)
(1) 2243/     AE4 : E6 0F               		and	01111b
(1) 2244/     AE6 :                     ; 		ld	(iy+0Ah),a
(1) 2245/     AE6 : 32 35 16            		ld	(wave_Flags),a
(1) 2246/     AE9 : CF                  		rst	8
(1) 2247/     AEA : 23                  		inc	hl
(1) 2248/     AEB : 23                  		inc	hl
(1) 2249/     AEC : 5E                  		ld	e,(hl)
(1) 2250/     AED : 23                  		inc	hl
(1) 2251/     AEE : 7E                  		ld	a,(hl)
(1) 2252/     AEF : 23                  		inc	hl
(1) 2253/     AF0 : 6E                  		ld	l,(hl)
(1) 2254/     AF1 : 67                  		ld	h,a
(1) 2255/     AF2 : E5                  		push	hl
(1) 2256/     AF3 : 7B                  		ld	a,e
(1) 2257/     AF4 : 01 06 00            		ld	bc,6		; Skip header
(1) 2258/     AF7 : CF                  		rst	8
(1) 2259/     AF8 : 09                  		add	hl,bc
(1) 2260/     AF9 : CE 00               		adc	a,0
(1) 2261/     AFB : 22 2A 16            		ld	(wave_Start),hl	; Set START point
(1) 2262/     AFE : 32 2C 16            		ld	(wave_Start+2),a
(1) 2263/     B01 : E1                  		pop	hl
(1) 2264/     B02 : 7B                  		ld	a,e
(1) 2265/     B03 : 11 49 16            		ld	de,sampleHead
(1) 2266/     B06 : 01 06 00            		ld	bc,6
(1) 2267/     B09 : D5                  		push	de
(1) 2268/     B0A : CD 09 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 2269/     B0D : E1                  		pop	hl
(1) 2270/     B0E :                     	; hl - temporal header
(1) 2271/     B0E : CF                  		rst	8
(1) 2272/     B0F : 5E                  		ld	e,(hl)
(1) 2273/     B10 : 23                  		inc	hl
(1) 2274/     B11 : 56                  		ld	d,(hl)
(1) 2275/     B12 : 23                  		inc	hl
(1) 2276/     B13 : 7E                  		ld	a,(hl)
(1) 2277/     B14 : 23                  		inc	hl
(1) 2278/     B15 : ED 53 2D 16         		ld	(wave_Len),de	; LEN
(1) 2279/     B19 : 32 2F 16            		ld	(wave_Len+2),a
(1) 2280/     B1C : 5E                  		ld	e,(hl)
(1) 2281/     B1D : 23                  		inc	hl
(1) 2282/     B1E : CF                  		rst	8
(1) 2283/     B1F : 56                  		ld	d,(hl)
(1) 2284/     B20 : 23                  		inc	hl
(1) 2285/     B21 : 7E                  		ld	a,(hl)
(1) 2286/     B22 : 23                  		inc	hl
(1) 2287/     B23 : ED 53 30 16         		ld	(wave_Loop),de	; LOOP
(1) 2288/     B27 : 32 32 16            		ld	(wave_Loop+2),a
(1) 2289/     B2A : 11 06 28            		ld	de,2806h	; keys off
(1) 2290/     B2D : CD F6 0F            		call	fm_send_1
(1) 2291/     B30 : C1                  		pop	bc
(1) 2292/     B31 : E1                  		pop	hl
(1) 2293/     B32 :                     ; .same_dac:
(1) 2294/     B32 : C9                  		ret
(1) 2295/     B33 :                     
(1) 2296/     B33 :                     ; --------
(1) 2297/     B33 :                     
(1) 2298/     B33 :                     .pwm_ins:
(1) 2299/     B33 : DD E5               		push	ix
(1) 2300/     B35 : E5                  		push	hl
(1) 2301/     B36 : C5                  		push	bc
(1) 2302/     B37 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 2303/     B38 : E6 03               		and	00000011b
(1) 2304/     B3A : 0F                  		rrca
(1) 2305/     B3B : 0F                  		rrca
(1) 2306/     B3C : 4F                  		ld	c,a
(1) 2307/     B3D :                     ; 		ld	(iy+0Ah),a	; 0Ah flags: %SlLR
(1) 2308/     B3D : CF                  		rst	8
(1) 2309/     B3E : 23                  		inc	hl		; Skip ID and Pitch
(1) 2310/     B3F : 23                  		inc	hl
(1) 2311/     B40 : 56                  		ld	d,(hl)
(1) 2312/     B41 : 23                  		inc	hl
(1) 2313/     B42 : 5E                  		ld	e,(hl)
(1) 2314/     B43 : 23                  		inc	hl
(1) 2315/     B44 : 7E                  		ld	a,(hl)
(1) 2316/     B45 : 23                  		inc	hl
(1) 2317/     B46 : 6E                  		ld	l,(hl)
(1) 2318/     B47 : 67                  		ld	h,a
(1) 2319/     B48 : 79                  		ld	a,c
(1) 2320/     B49 : B2                  		or	d
(1) 2321/     B4A : 57                  		ld	d,a
(1) 2322/     B4B :                     	; de,hl - 32-bit PWM pointer
(1) 2323/     B4B : DD 21 76 15         		ld	ix,pwmcom
(1) 2324/     B4F : 06 00               		ld	b,0
(1) 2325/     B51 : FD 4E 05            		ld	c,(iy+05h)
(1) 2326/     B54 : DD 09               		add	ix,bc
(1) 2327/     B56 : 01 18 00            		ld	bc,24
(1) 2328/     B59 : DD 09               		add	ix,bc	; Move to index 24
(1) 2329/     B5B : 01 08 00            		ld	bc,8
(1) 2330/     B5E : DD 72 00            		ld	(ix),d
(1) 2331/     B61 : DD 09               		add	ix,bc
(1) 2332/     B63 : DD 73 00            		ld	(ix),e
(1) 2333/     B66 : DD 09               		add	ix,bc
(1) 2334/     B68 : DD 74 00            		ld	(ix),h
(1) 2335/     B6B : DD 09               		add	ix,bc
(1) 2336/     B6D : DD 75 00            		ld	(ix),l
(1) 2337/     B70 : C1                  		pop	bc
(1) 2338/     B71 : E1                  		pop	hl
(1) 2339/     B72 : DD E1               		pop	ix
(1) 2340/     B74 : C9                  		ret
(1) 2341/     B75 :                     
(1) 2342/     B75 :                     ; ----------------------------------------
(1) 2343/     B75 :                     ; NEW note
(1) 2344/     B75 :                     ; ----------------------------------------
(1) 2345/     B75 :                     
(1) 2346/     B75 :                     .note:
(1) 2347/     B75 : 78                  		ld	a,b		; Volume bit?
(1) 2348/     B76 : E6 04               		and	0100b
(1) 2349/     B78 : 20 05               		jr	nz,.fm_hasvol
(1) 2350/     B7A : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 2351/     B7E : CF                  		rst	8
(1) 2352/     B7F :                     .fm_hasvol:
(1) 2353/     B7F : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2354/     B82 : 4F                  		ld	c,a
(1) 2355/     B83 : FE FF               		cp	-1
(1) 2356/     B85 : C8                  		ret	z
(1) 2357/     B86 : FE FE               		cp	-2
(1) 2358/     B88 : C8                  		ret	z
(1) 2359/     B89 : 7E                  		ld	a,(hl)
(1) 2360/     B8A : E6 F0               		and	11110000b
(1) 2361/     B8C : FE 80               		cp	80h
(1) 2362/     B8E : 28 17               		jr	z,.n_psg
(1) 2363/     B90 : CF                  		rst	8
(1) 2364/     B91 : FE 90               		cp	90h
(1) 2365/     B93 : 28 0D               		jr	z,.n_psgn
(1) 2366/     B95 : FE A0               		cp	0A0h
(1) 2367/     B97 : 28 28               		jr	z,.n_fm
(1) 2368/     B99 :                     ; 		cp	0B0h		; ** Can't use notes on FM3 **
(1) 2369/     B99 :                     ; 		jr	z,.n_fm
(1) 2370/     B99 : FE C0               		cp	0C0h
(1) 2371/     B9B : 28 5B               		jr	z,.n_dac
(1) 2372/     B9D : FE D0               		cp	0D0h
(1) 2373/     B9F : 28 57               		jr	z,.n_dac
(1) 2374/     BA1 : C9                  		ret
(1) 2375/     BA2 :                     
(1) 2376/     BA2 :                     ; --------------------------------
(1) 2377/     BA2 :                     
(1) 2378/     BA2 :                     .n_psgn:
(1) 2379/     BA2 : 79                  		ld	a,c
(1) 2380/     BA3 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 2381/     BA5 : 18 01               		jr	.n_stfreq
(1) 2382/     BA7 :                     .n_psg:
(1) 2383/     BA7 : 79                  		ld	a,c
(1) 2384/     BA8 :                     .n_stfreq:
(1) 2385/     BA8 : E5                  		push	hl
(1) 2386/     BA9 : 23                  		inc	hl		; Skip ID
(1) 2387/     BAA : 5E                  		ld	e,(hl)		; Read pitch
(1) 2388/     BAB : 83                  		add	a,e		; Note + pitch
(1) 2389/     BAC : CF                  		rst	8
(1) 2390/     BAD : 87                  		add	a,a		; * 2
(1) 2391/     BAE : 16 00               		ld	d,0		; de - note*2
(1) 2392/     BB0 : 5F                  		ld	e,a
(1) 2393/     BB1 : 21 4A 11            		ld	hl,psgFreq_List
(1) 2394/     BB4 : 19                  		add	hl,de
(1) 2395/     BB5 : 5E                  		ld	e,(hl)		; Read pitch
(1) 2396/     BB6 : 23                  		inc	hl
(1) 2397/     BB7 : 56                  		ld	d,(hl)
(1) 2398/     BB8 : CF                  		rst	8
(1) 2399/     BB9 : E1                  		pop	hl
(1) 2400/     BBA : FD 73 06            		ld	(iy+06h),e	; Save frequency to 06h
(1) 2401/     BBD : FD 72 07            		ld	(iy+07h),d
(1) 2402/     BC0 : C9                  		ret
(1) 2403/     BC1 :                     .n_fm:
(1) 2404/     BC1 : 79                  		ld	a,c
(1) 2405/     BC2 : E5                  		push	hl
(1) 2406/     BC3 : 23                  		inc	hl		; Skip ID
(1) 2407/     BC4 : 5E                  		ld	e,(hl)		; Read pitch
(1) 2408/     BC5 : CF                  		rst	8
(1) 2409/     BC6 : 83                  		add	a,e		; Note + pitch
(1) 2410/     BC7 :                     	; Search for octave and note
(1) 2411/     BC7 : 0E 00               		ld	c,0		; c - octave
(1) 2412/     BC9 : 16 07               		ld	d,7
(1) 2413/     BCB :                     .get_oct:
(1) 2414/     BCB : 5F                  		ld	e,a		; e - note
(1) 2415/     BCC : D6 0C               		sub	12
(1) 2416/     BCE : B7                  		or	a
(1) 2417/     BCF : FA DB 0B            		jp	m,.fnd_oct
(1) 2418/     BD2 : 0C                  		inc	c
(1) 2419/     BD3 : CF                  		rst	8
(1) 2420/     BD4 : 00                  		nop	; wave sync
(1) 2421/     BD5 : 00                  		nop
(1) 2422/     BD6 : 00                  		nop
(1) 2423/     BD7 : 00                  		nop
(1) 2424/     BD8 : 15                  		dec	d
(1) 2425/     BD9 : 20 F0               		jr	nz,.get_oct
(1) 2426/     BDB :                     .fnd_oct:
(1) 2427/     BDB : 7B                  		ld	a,e
(1) 2428/     BDC : 87                  		add	a,a		; Note * 2
(1) 2429/     BDD : 5F                  		ld	e,a
(1) 2430/     BDE : 16 00               		ld	d,0
(1) 2431/     BE0 : 21 32 11            		ld	hl,fmFreq_List
(1) 2432/     BE3 : 19                  		add	hl,de
(1) 2433/     BE4 : CF                  		rst	8
(1) 2434/     BE5 : 79                  		ld	a,c		; a - Octave << 3
(1) 2435/     BE6 : 87                  		add	a,a
(1) 2436/     BE7 : 87                  		add	a,a
(1) 2437/     BE8 : 87                  		add	a,a
(1) 2438/     BE9 : 5E                  		ld	e,(hl)
(1) 2439/     BEA : 23                  		inc	hl
(1) 2440/     BEB : 66                  		ld	h,(hl)
(1) 2441/     BEC : B4                  		or	h
(1) 2442/     BED : 67                  		ld	h,a
(1) 2443/     BEE : CF                  		rst	8
(1) 2444/     BEF : 6B                  		ld	l,e
(1) 2445/     BF0 : FD 75 06            		ld	(iy+06h),l	; Save frequency to 06h
(1) 2446/     BF3 : FD 74 07            		ld	(iy+07h),h
(1) 2447/     BF6 : E1                  		pop	hl
(1) 2448/     BF7 : C9                  		ret
(1) 2449/     BF8 :                     
(1) 2450/     BF8 :                     ; *** Both DAC and PWM ***
(1) 2451/     BF8 :                     .n_dac:
(1) 2452/     BF8 : 79                  		ld	a,c
(1) 2453/     BF9 : E5                  		push	hl
(1) 2454/     BFA : 23                  		inc	hl		; Skip ID
(1) 2455/     BFB : 5E                  		ld	e,(hl)		; Read pitch
(1) 2456/     BFC : 83                  		add	a,e		; Note + pitch
(1) 2457/     BFD : CF                  		rst	8
(1) 2458/     BFE : 21 3C 12            		ld	hl,wavFreq_List
(1) 2459/     C01 : 87                  		add	a,a
(1) 2460/     C02 : 16 00               		ld	d,0
(1) 2461/     C04 : 5F                  		ld	e,a
(1) 2462/     C05 : 19                  		add	hl,de
(1) 2463/     C06 : 7E                  		ld	a,(hl)
(1) 2464/     C07 : 23                  		inc	hl
(1) 2465/     C08 : CF                  		rst	8
(1) 2466/     C09 : 66                  		ld	h,(hl)
(1) 2467/     C0A : 6F                  		ld	l,a
(1) 2468/     C0B : FD 75 06            		ld	(iy+06h),l	; Save frequency to 06h
(1) 2469/     C0E : FD 74 07            		ld	(iy+07h),h
(1) 2470/     C11 : E1                  		pop	hl
(1) 2471/     C12 : C9                  		ret
(1) 2472/     C13 :                     
(1) 2473/     C13 :                     ; ----------------------------------------
(1) 2474/     C13 :                     
(1) 2475/     C13 :                     .fm_keyoff:
(1) 2476/     C13 : 16 28               		ld	d,28h
(1) 2477/     C15 : FD 5E 05            		ld	e,(iy+05h)
(1) 2478/     C18 : C3 F6 0F            		jp	fm_send_1
(1) 2479/     C1B :                     .fm_tloff:
(1) 2480/     C1B : 06 04               		ld	b,4
(1) 2481/     C1D : FD 4E 05            		ld	c,(iy+05h)
(1) 2482/     C20 : 79                  		ld	a,c
(1) 2483/     C21 : E6 03               		and	011b
(1) 2484/     C23 : F6 40               		or	40h	; TL regs
(1) 2485/     C25 :                     .tl_down:
(1) 2486/     C25 : 57                  		ld	d,a
(1) 2487/     C26 : 1E 7F               		ld	e,7Fh
(1) 2488/     C28 : CD ED 0F            		call	fm_autoreg
(1) 2489/     C2B : CF                  		rst	8
(1) 2490/     C2C : 7A                  		ld	a,d
(1) 2491/     C2D : C6 04               		add	a,4
(1) 2492/     C2F : 10 F4               		djnz	.tl_down
(1) 2493/     C31 : C9                  		ret
(1) 2494/     C32 :                     ; c - KeyID
(1) 2495/     C32 :                     .fm_setfreq:
(1) 2496/     C32 : 79                  		ld	a,c
(1) 2497/     C33 : E6 03               		and	011b
(1) 2498/     C35 : F6 A4               		or	0A4h
(1) 2499/     C37 : 57                  		ld	d,a
(1) 2500/     C38 : 5C                  		ld	e,h
(1) 2501/     C39 : CF                  		rst	8
(1) 2502/     C3A : CD ED 0F            		call	fm_autoreg
(1) 2503/     C3D : 79                  		ld	a,c
(1) 2504/     C3E : E6 03               		and	011b
(1) 2505/     C40 : F6 A0               		or	0A0h
(1) 2506/     C42 : 57                  		ld	d,a
(1) 2507/     C43 : 5D                  		ld	e,l
(1) 2508/     C44 : CD ED 0F            		call	fm_autoreg
(1) 2509/     C47 : CF                  		rst	8
(1) 2510/     C48 : C9                  		ret
(1) 2511/     C49 :                     
(1) 2512/     C49 :                     ; --------------------------------
(1) 2513/     C49 :                     ; WRITE TL volume
(1) 2514/     C49 :                     
(1) 2515/     C49 :                     .fm_wrtlvol:
(1) 2516/     C49 : 21 2C 13            		ld	hl,fmcach_list
(1) 2517/     C4C : FD 7E 05            		ld	a,(iy+05h)
(1) 2518/     C4F : E6 07               		and	0111b
(1) 2519/     C51 : 16 00               		ld	d,0
(1) 2520/     C53 : CF                  		rst	8
(1) 2521/     C54 : 87                  		add	a,a
(1) 2522/     C55 : 5F                  		ld	e,a
(1) 2523/     C56 : 19                  		add	hl,de
(1) 2524/     C57 : 7E                  		ld	a,(hl)
(1) 2525/     C58 : 23                  		inc	hl
(1) 2526/     C59 : 66                  		ld	h,(hl)
(1) 2527/     C5A : 6F                  		ld	l,a
(1) 2528/     C5B : 23                  		inc	hl
(1) 2529/     C5C : 23                  		inc	hl
(1) 2530/     C5D : 23                  		inc	hl
(1) 2531/     C5E : CF                  		rst	8
(1) 2532/     C5F : 23                  		inc	hl		; Point to TL's
(1) 2533/     C60 : FD 7E 05            		ld	a,(iy+05h)
(1) 2534/     C63 : E6 03               		and	011b
(1) 2535/     C65 : F6 40               		or	40h		; TL registers
(1) 2536/     C67 : 57                  		ld	d,a
(1) 2537/     C68 :                     ; d - 40h+
(1) 2538/     C68 :                     ; hl - TL data
(1) 2539/     C68 :                     ; .fm_wrtlvol:
(1) 2540/     C68 : C5                  		push	bc
(1) 2541/     C69 : E5                  		push	hl
(1) 2542/     C6A : 21 BB 0C            		ld	hl,.fm_cindx
(1) 2543/     C6D : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2544/     C70 : E6 07               		and	0111b
(1) 2545/     C72 : 06 00               		ld	b,0
(1) 2546/     C74 : 4F                  		ld	c,a
(1) 2547/     C75 : 09                  		add	hl,bc
(1) 2548/     C76 : FD 7E 08            		ld	a,(iy+08h)
(1) 2549/     C79 : CB 2F               		sra	a		; volume / 2
(1) 2550/     C7B : E6 7F               		and	01111111b
(1) 2551/     C7D : 4F                  		ld	c,a
(1) 2552/     C7E : CF                  		rst	8
(1) 2553/     C7F : 46                  		ld	b,(hl)
(1) 2554/     C80 : E1                  		pop	hl
(1) 2555/     C81 : CB 08               		rrc	b		; OP1
(1) 2556/     C83 : DC AE 0C            		call	c,.write_tl
(1) 2557/     C86 : 23                  		inc	hl
(1) 2558/     C87 : 14                  		inc	d
(1) 2559/     C88 : 14                  		inc	d
(1) 2560/     C89 : CF                  		rst	8
(1) 2561/     C8A : 14                  		inc	d
(1) 2562/     C8B : 14                  		inc	d
(1) 2563/     C8C : CB 08               		rrc	b		; OP2
(1) 2564/     C8E : DC AE 0C            		call	c,.write_tl
(1) 2565/     C91 : 23                  		inc	hl
(1) 2566/     C92 : 14                  		inc	d
(1) 2567/     C93 : 14                  		inc	d
(1) 2568/     C94 : 14                  		inc	d
(1) 2569/     C95 : 14                  		inc	d
(1) 2570/     C96 : CB 08               		rrc	b		; OP3
(1) 2571/     C98 : DC AE 0C            		call	c,.write_tl
(1) 2572/     C9B : 23                  		inc	hl
(1) 2573/     C9C : CF                  		rst	8
(1) 2574/     C9D : 14                  		inc	d
(1) 2575/     C9E : 14                  		inc	d
(1) 2576/     C9F : 14                  		inc	d
(1) 2577/     CA0 : 14                  		inc	d
(1) 2578/     CA1 : CB 08               		rrc	b		; OP4
(1) 2579/     CA3 : DC AE 0C            		call	c,.write_tl
(1) 2580/     CA6 : 23                  		inc	hl
(1) 2581/     CA7 : 14                  		inc	d
(1) 2582/     CA8 : 14                  		inc	d
(1) 2583/     CA9 : 14                  		inc	d
(1) 2584/     CAA : 14                  		inc	d
(1) 2585/     CAB : CF                  		rst	8
(1) 2586/     CAC : C1                  		pop	bc
(1) 2587/     CAD : C9                  		ret
(1) 2588/     CAE :                     .write_tl:
(1) 2589/     CAE : 7E                  		ld	a,(hl)
(1) 2590/     CAF : 91                  		sub	a,c
(1) 2591/     CB0 : C5                  		push	bc
(1) 2592/     CB1 : 5F                  		ld	e,a
(1) 2593/     CB2 : FD 4E 05            		ld	c,(iy+05h)
(1) 2594/     CB5 : CD ED 0F            		call	fm_autoreg
(1) 2595/     CB8 : CF                  		rst	8
(1) 2596/     CB9 : C1                  		pop	bc
(1) 2597/     CBA : C9                  		ret
(1) 2598/     CBB :                     ; Jump carry list
(1) 2599/     CBB :                     .fm_cindx:
(1) 2600/     CBB : 08                  		db 1000b
(1) 2601/     CBC : 08                  		db 1000b
(1) 2602/     CBD : 08                  		db 1000b
(1) 2603/     CBE : 08                  		db 1000b
(1) 2604/     CBF : 0C                  		db 1100b
(1) 2605/     CC0 : 0E                  		db 1110b
(1) 2606/     CC1 : 0E                  		db 1110b
(1) 2607/     CC2 : 0F                  		db 1111b
(1) 2608/     CC3 :                     ; c - KeyId
(1) 2609/     CC3 :                     .fm_wrtalpan:
(1) 2610/     CC3 : FD 7E 0C            		ld	a,(iy+0Ch)	; 0B0h algorithm
(1) 2611/     CC6 : 5F                  		ld	e,a
(1) 2612/     CC7 : 79                  		ld	a,c
(1) 2613/     CC8 : E6 03               		and	011b
(1) 2614/     CCA : F6 B0               		or	0B0h
(1) 2615/     CCC : 57                  		ld	d,a
(1) 2616/     CCD : CD ED 0F            		call	fm_autoreg
(1) 2617/     CD0 : CF                  		rst	8
(1) 2618/     CD1 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2619/     CD4 : 2F                  		cpl				; REVERSE bits
(1) 2620/     CD5 : E6 C0               		and	11000000b
(1) 2621/     CD7 : 5F                  		ld	e,a
(1) 2622/     CD8 : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %LRaa0ppp
(1) 2623/     CDB : E6 3F               		and	00111111b
(1) 2624/     CDD : B3                  		or	e
(1) 2625/     CDE : 5F                  		ld	e,a
(1) 2626/     CDF : 79                  		ld	a,c
(1) 2627/     CE0 : E6 03               		and	011b
(1) 2628/     CE2 : F6 B4               		or	0B4h
(1) 2629/     CE4 : 57                  		ld	d,a
(1) 2630/     CE5 : CD ED 0F            		call	fm_autoreg
(1) 2631/     CE8 : CF                  		rst	8
(1) 2632/     CE9 : FD 7E 0E            		ld	a,(iy+0Eh)
(1) 2633/     CEC : CB 5F               		bit	3,a
(1) 2634/     CEE : 28 06               		jr	z,.no_lfo
(1) 2635/     CF0 : 5F                  		ld	e,a
(1) 2636/     CF1 : 16 22               		ld	d,22h
(1) 2637/     CF3 : CD F6 0F            		call	fm_send_1
(1) 2638/     CF6 :                     .no_lfo:
(1) 2639/     CF6 : C9                  		ret
(1) 2640/     CF7 :                     
(1) 2641/     CF7 :                     ; ----------------------------------------
(1) 2642/     CF7 :                     
(1) 2643/     CF7 :                     .chnl_ulnkoff:
(1) 2644/     CF7 : 0E 00               		ld	c,0
(1) 2645/     CF9 :                     .chnl_ulnk:
(1) 2646/     CF9 : CF                  		rst	8
(1) 2647/     CFA : AF                  		xor	a
(1) 2648/     CFB : DD 77 01            		ld	(ix+chnl_Chip),a
(1) 2649/     CFE : FD 77 00            		ld	(iy),a		; Delete link, chip and prio
(1) 2650/     D01 : FD 77 01            		ld	(iy+1),a
(1) 2651/     D04 : FD 71 02            		ld	(iy+2),c
(1) 2652/     D07 : C9                  		ret
(1) 2653/     D08 :                     .chnl_ulnkcut:
(1) 2654/     D08 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 2655/     D0B : CD F9 0C            		call	.chnl_ulnk
(1) 2656/     D0E : FD 77 08            		ld	(iy+08h),a
(1) 2657/     D11 : FD 77 09            		ld	(iy+09h),a
(1) 2658/     D14 : FD 77 0A            		ld	(iy+0Ah),a
(1) 2659/     D17 : FD 77 0B            		ld	(iy+0Bh),a
(1) 2660/     D1A :                     ; 		push	iy
(1) 2661/     D1A :                     ; 		pop	hl
(1) 2662/     D1A :                     ; 		ld	bc,8-2		; Go to 08h
(1) 2663/     D1A :                     ; 		add	hl,bc
(1) 2664/     D1A :                     ; 		rst	8
(1) 2665/     D1A :                     ; 		ld	b,8/2
(1) 2666/     D1A :                     ; .clrfull:
(1) 2667/     D1A :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 2668/     D1A :                     ; 		inc	hl
(1) 2669/     D1A :                     ; 		ld	(hl),0
(1) 2670/     D1A :                     ; 		inc	hl
(1) 2671/     D1A :                     ; 		rst	8
(1) 2672/     D1A :                     ; 		djnz	.clrfull
(1) 2673/     D1A : C9                  		ret
(1) 2674/     D1B :                     
(1) 2675/     D1B :                     ; ============================================================
(1) 2676/     D1B :                     ; --------------------------------------------------------
(1) 2677/     D1B :                     ; Communicate with the 32X from here.
(1) 2678/     D1B :                     ; --------------------------------------------------------
(1) 2679/     D1B :                     
(1) 2680/     D1B :                     ex_comm:
(1) 2681/     D1B : CF                  		rst	8
(1) 2795/     D1C : C9                  		ret
(1) 2796/     D1D :                     
(1) 2797/     D1D :                     ; ====================================================================
(1) 2798/     D1D :                     ; ----------------------------------------------------------------
(1) 2799/     D1D :                     ; Subroutines
(1) 2800/     D1D :                     ; ----------------------------------------------------------------
(1) 2801/     D1D :                     
(1) 2802/     D1D :                     ; --------------------------------------------------------
(1) 2803/     D1D :                     ; Init sound engine
(1) 2804/     D1D :                     ; --------------------------------------------------------
(1) 2805/     D1D :                     
(1) 2806/     D1D :                     gema_init:
(1) 2807/     D1D : CD 21 10            		call	dac_off
(1) 2808/     D20 : 3E 00               		ld	a,0
(1) 2809/     D22 : 32 3F 00            		ld	(marsUpd),a
(1) 2810/     D25 : 21 00 1D            		ld	hl,dWaveBuff	; hl - Wave buffer START
(1) 2811/     D28 : 11 01 1D            		ld	de,dWaveBuff+1	; de - Wave next byte
(1) 2812/     D2B : 01 FF 00            		ld	bc,100h-1	; bc - length for copying
(1) 2813/     D2E : 36 80               		ld	(hl),80h	; Set first byte
(1) 2814/     D30 : ED B0               		ldir			; Start copying
(1) 2815/     D32 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 2816/     D35 : 36 9F               		ld	(hl),09Fh
(1) 2817/     D37 : 36 BF               		ld	(hl),0BFh
(1) 2818/     D39 : 36 DF               		ld	(hl),0DFh
(1) 2819/     D3B : 36 FF               		ld	(hl),0FFh
(1) 2820/     D3D : 11 0B 22            		ld	de,2208h|3	; Set Default LFO
(1) 2821/     D40 : CD F6 0F            		call	fm_send_1
(1) 2822/     D43 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 2823/     D46 : CD F6 0F            		call	fm_send_1
(1) 2824/     D49 : 11 00 28            		ld	de,2800h	; FM KEYS off
(1) 2825/     D4C : CD F6 0F            		call	fm_send_1
(1) 2826/     D4F : 1C                  		inc	e
(1) 2827/     D50 : CD F6 0F            		call	fm_send_1
(1) 2828/     D53 : 1C                  		inc	e
(1) 2829/     D54 : CD F6 0F            		call	fm_send_1
(1) 2830/     D57 : 1C                  		inc	e
(1) 2831/     D58 : 1C                  		inc	e
(1) 2832/     D59 : CD F6 0F            		call	fm_send_1
(1) 2833/     D5C : 1C                  		inc	e
(1) 2834/     D5D : CD F6 0F            		call	fm_send_1
(1) 2835/     D60 : 1C                  		inc	e
(1) 2836/     D61 : CD F6 0F            		call	fm_send_1
(1) 2837/     D64 : 21 00 60            		ld	hl,6000h
(1) 2838/     D67 : 3E 01               		ld	a,1
(1) 2839/     D69 : 77                  		ld	(hl),a
(1) 2840/     D6A : 77                  		ld	(hl),a
(1) 2841/     D6B : 77                  		ld	(hl),a
(1) 2842/     D6C : 77                  		ld	(hl),a
(1) 2843/     D6D : 77                  		ld	(hl),a
(1) 2844/     D6E : 77                  		ld	(hl),a
(1) 2845/     D6F : 77                  		ld	(hl),a
(1) 2846/     D70 : 77                  		ld	(hl),a
(1) 2847/     D71 : 77                  		ld	(hl),a
(1) 2848/     D72 : FD 21 3A 13         		ld	iy,nikona_BuffList
(1) 2849/     D76 : 0E 01               		ld	c,1		; Start at this priority
(1) 2850/     D78 :                     .setup_list:
(1) 2851/     D78 : FD 7E 00            		ld	a,(iy)
(1) 2852/     D7B : FE FF               		cp	-1
(1) 2853/     D7D : 28 44               		jr	z,.end_setup
(1) 2854/     D7F : FD 23               		inc	iy
(1) 2855/     D81 : 6F                  		ld	l,a
(1) 2856/     D82 : FD 66 00            		ld	h,(iy)
(1) 2857/     D85 : E5                  		push	hl
(1) 2858/     D86 : DD E1               		pop	ix
(1) 2859/     D88 : DD 71 14            		ld	(ix+trk_Priority),c
(1) 2860/     D8B : DD 36 01 FF         		ld	(ix+trk_seqId),-1	; Reset sequence ID
(1) 2861/     D8F : FD 23               		inc	iy
(1) 2862/     D91 : 11 26 00            		ld	de,trk_ChnList		; ** settings
(1) 2863/     D94 : 19                  		add	hl,de
(1) 2864/     D95 :                     	; iy - src
(1) 2865/     D95 :                     	; hl - dst
(1) 2866/     D95 : 06 0A               		ld	b,5*2
(1) 2867/     D97 :                     .st_copy:
(1) 2868/     D97 : FD 7E 00            		ld	a,(iy)
(1) 2869/     D9A : 77                  		ld	(hl),a
(1) 2870/     D9B : FD 23               		inc	iy
(1) 2871/     D9D : 23                  		inc	hl
(1) 2872/     D9E : 10 F7               		djnz	.st_copy
(1) 2873/     DA0 : 0C                  		inc	c
(1) 2874/     DA1 : FD 7E 00            		ld	a,(iy)			; MAX blocks
(1) 2875/     DA4 : DD 77 1D            		ld	(ix+trk_MaxBlks),a
(1) 2876/     DA7 : FD 23               		inc	iy
(1) 2877/     DA9 : FD 7E 00            		ld	a,(iy)			; MAX heads
(1) 2878/     DAC : DD 77 1E            		ld	(ix+trk_MaxHdrs),a
(1) 2879/     DAF : FD 23               		inc	iy
(1) 2880/     DB1 : FD 7E 00            		ld	a,(iy)			; MAX intruments
(1) 2881/     DB4 : DD 77 1F            		ld	(ix+trk_MaxIns),a
(1) 2882/     DB7 : FD 23               		inc	iy
(1) 2883/     DB9 : FD 7E 00            		ld	a,(iy)			; MAX channels
(1) 2884/     DBC : DD 77 1C            		ld	(ix+trk_MaxChnls),a
(1) 2885/     DBF : FD 23               		inc	iy
(1) 2886/     DC1 : 18 B5               		jr	.setup_list
(1) 2887/     DC3 :                     .end_setup:
(1) 2888/     DC3 : 1E 00               		ld	e,0
(1) 2889/     DC5 : C3 E4 04            		jp	init_RomTrcks
(1) 2890/     DC8 :                     
(1) 2891/     DC8 :                     ; --------------------------------------------------------
(1) 2892/     DC8 :                     ; get_tick
(1) 2893/     DC8 :                     ;
(1) 2894/     DC8 :                     ; Checks if VBlank triggred a TICK
(1) 2895/     DC8 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 2896/     DC8 :                     ; --------------------------------------------------------
(1) 2897/     DC8 :                     
(1) 2898/     DC8 :                     get_tick:
(1) 2899/     DC8 : F3                  		di				; Disable ints
(1) 2900/     DC9 : F5                  		push	af
(1) 2901/     DCA : E5                  		push	hl
(1) 2902/     DCB : 21 37 16            		ld	hl,tickFlag		; read last TICK flag
(1) 2903/     DCE : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 2904/     DCF : B7                  		or 	a
(1) 2905/     DD0 : 28 13               		jr	z,.ctnotick
(1) 2906/     DD2 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 2907/     DD4 : 23                  		inc	hl			; Move to tickCnt
(1) 2908/     DD5 : 34                  		inc	(hl)			; and increment
(1) 2909/     DD6 : CF                  		rst	8
(1) 2910/     DD7 : D5                  		push	de
(1) 2911/     DD8 : 2A 1C 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 2912/     DDB : ED 5B 1E 00         		ld	de,(sbeatPtck)
(1) 2913/     DDF : CF                  		rst	8
(1) 2914/     DE0 : 19                  		add	hl,de
(1) 2915/     DE1 : 22 1C 00            		ld	(sbeatAcc),hl
(1) 2916/     DE4 : D1                  		pop	de
(1) 2917/     DE5 :                     .ctnotick:
(1) 2918/     DE5 : E1                  		pop	hl
(1) 2919/     DE6 : F1                  		pop	af
(1) 2920/     DE7 : FB                  		ei				; Enable ints again
(1) 2921/     DE8 : C9                  		ret
(1) 2922/     DE9 :                     
(1) 2923/     DE9 :                     ; --------------------------------------------------------
(1) 2924/     DE9 :                     ; showRom
(1) 2925/     DE9 :                     ; Get ROM bank position.
(1) 2926/     DE9 :                     ;
(1) 2927/     DE9 :                     ; Input:
(1) 2928/     DE9 :                     ;  b - 68k address $xx0000
(1) 2929/     DE9 :                     ; hl - 68k address $00xxxx
(1) 2930/     DE9 :                     ;
(1) 2931/     DE9 :                     ; Output:
(1) 2932/     DE9 :                     ; hl - ROM position ready to use for reading
(1) 2933/     DE9 :                     ; --------------------------------------------------------
(1) 2934/     DE9 :                     
(1) 2935/     DE9 :                     showRom:
(1) 2936/     DE9 : CF                  		rst	8
(1) 2937/     DEA : D5                  		push	de
(1) 2938/     DEB : C5                  		push	bc
(1) 2939/     DEC : 11 00 60            		ld	de,6000h
(1) 2940/     DEF : 7C                  		ld	a,h
(1) 2941/     DF0 : 07                  		rlca
(1) 2942/     DF1 : CF                  		rst	8
(1) 2943/     DF2 : 12                  		ld	(de),a
(1) 2944/     DF3 : 78                  		ld	a,b
(1) 2945/     DF4 : 12                  		ld	(de),a
(1) 2946/     DF5 : 1F                  		rra
(1) 2947/     DF6 : 12                  		ld	(de),a
(1) 2948/     DF7 : 1F                  		rra
(1) 2949/     DF8 : 12                  		ld	(de),a
(1) 2950/     DF9 : 1F                  		rra
(1) 2951/     DFA : CF                  		rst	8
(1) 2952/     DFB : 12                  		ld	(de),a
(1) 2953/     DFC : 1F                  		rra
(1) 2954/     DFD : 12                  		ld	(de),a
(1) 2955/     DFE : 1F                  		rra
(1) 2956/     DFF : 12                  		ld	(de),a
(1) 2957/     E00 : 1F                  		rra
(1) 2958/     E01 : 12                  		ld	(de),a
(1) 2959/     E02 : 1F                  		rra
(1) 2960/     E03 : 12                  		ld	(de),a
(1) 2961/     E04 : C1                  		pop	bc
(1) 2962/     E05 : D1                  		pop	de
(1) 2963/     E06 : CB FC               		set	7,h
(1) 2964/     E08 : C9                  		ret
(1) 2965/     E09 :                     
(1) 2966/     E09 :                     ; --------------------------------------------------------
(1) 2967/     E09 :                     ; transferRom
(1) 2968/     E09 :                     ;
(1) 2969/     E09 :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 2970/     E09 :                     ; to 68k that we want to access ROM
(1) 2971/     E09 :                     ;
(1) 2972/     E09 :                     ; Input:
(1) 2973/     E09 :                     ; a  - 68K Address $xx0000
(1) 2974/     E09 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 2975/     E09 :                     ; hl - 68K Address $00xxxx
(1) 2976/     E09 :                     ; de - Destination pointer
(1) 2977/     E09 :                     ;
(1) 2978/     E09 :                     ; Uses:
(1) 2979/     E09 :                     ; b
(1) 2980/     E09 :                     ;
(1) 2981/     E09 :                     ; Notes:
(1) 2982/     E09 :                     ; call RST 20h first if transfering anything other
(1) 2983/     E09 :                     ; than sample data, just to be safe.
(1) 2984/     E09 :                     ; --------------------------------------------------------
(1) 2985/     E09 :                     
(1) 2986/     E09 :                     transferRom:
(1) 2987/     E09 : CF                  		rst	8
(1) 2988/     E0A : DD E5               		push	ix
(1) 2989/     E0C : DD 21 81 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 2990/     E10 : 22 36 00            		ld	(x68ksrclsb),hl	; save hl copy
(1) 2991/     E13 : CB BC               		res	7,h
(1) 2992/     E15 : 06 00               		ld	b,0
(1) 2993/     E17 : 0B                  		dec	bc
(1) 2994/     E18 : 09                  		add	hl,bc
(1) 2995/     E19 : CB 7C               		bit	7,h
(1) 2996/     E1B : 20 0B               		jr	nz,.double
(1) 2997/     E1D : 2A 36 00            		ld	hl,(x68ksrclsb)	; single transfer
(1) 2998/     E20 : 0C                  		inc	c
(1) 2999/     E21 : 47                  		ld	b,a
(1) 3000/     E22 : CD 4C 0E            		call	.transfer
(1) 3001/     E25 : DD E1               		pop	ix
(1) 3002/     E27 : C9                  		ret
(1) 3003/     E28 :                     .double:
(1) 3004/     E28 : CF                  		rst	8
(1) 3005/     E29 : 47                  		ld	b,a		; double transfer
(1) 3006/     E2A : C5                  		push	bc
(1) 3007/     E2B : E5                  		push	hl
(1) 3008/     E2C : 79                  		ld	a,c
(1) 3009/     E2D : 95                  		sub	a,l
(1) 3010/     E2E : 4F                  		ld	c,a
(1) 3011/     E2F : 2A 36 00            		ld	hl,(x68ksrclsb)
(1) 3012/     E32 : CD 4C 0E            		call	.transfer
(1) 3013/     E35 : E1                  		pop	hl
(1) 3014/     E36 : C1                  		pop	bc
(1) 3015/     E37 :                     ; 		rst	8
(1) 3016/     E37 : 4D                  		ld	c,l
(1) 3017/     E38 : 0C                  		inc	c
(1) 3018/     E39 : 3A 37 00            		ld	a,(x68ksrcmid)
(1) 3019/     E3C : E6 80               		and	80h
(1) 3020/     E3E : C6 80               		add	a,80h
(1) 3021/     E40 : 67                  		ld	h,a
(1) 3022/     E41 : 2E 00               		ld	l,0
(1) 3023/     E43 : 30 01               		jr	nc,.x68knocarry
(1) 3024/     E45 : 04                  		inc	b
(1) 3025/     E46 :                     .x68knocarry:
(1) 3026/     E46 : CD 4C 0E            		call	.transfer
(1) 3027/     E49 : DD E1               		pop	ix
(1) 3028/     E4B : C9                  		ret
(1) 3029/     E4C :                     
(1) 3030/     E4C :                     ; ------------------------------------------------
(1) 3031/     E4C :                     ; b  - Source ROM xx0000
(1) 3032/     E4C :                     ;  c - Bytes to transfer (00h not allowed)
(1) 3033/     E4C :                     ; hl - Source ROM 00xxxx (OR'd with 8000h)
(1) 3034/     E4C :                     ; de - Destination address
(1) 3035/     E4C :                     ; ix - Location of the ROM block flag(s)
(1) 3036/     E4C :                     ;
(1) 3037/     E4C :                     ; Uses:
(1) 3038/     E4C :                     ; a
(1) 3039/     E4C :                     ; ------------------------------------------------
(1) 3040/     E4C :                     
(1) 3041/     E4C :                     .transfer:
(1) 3042/     E4C : CD E9 0D            		call	showRom		; Pick ROM bank
(1) 3043/     E4F :                     
(1) 3044/     E4F :                     	; Transfer ROM data in packets
(1) 3045/     E4F :                     	; while playing the cache'd sample
(1) 3046/     E4F :                     	; *** CRITICAL PROCESS ***
(1) 3047/     E4F :                     	;
(1) 3048/     E4F :                     	; pseudo-reference
(1) 3049/     E4F :                     	; for ldir:
(1) 3050/     E4F :                     	; ld (de),(hl)	; load (hl) to (de), no a
(1) 3051/     E4F :                     	; inc de	; next de
(1) 3052/     E4F :                     	; inc hl	; next hl
(1) 3053/     E4F :                     	; dec bc	; decrement bc
(1) 3054/     E4F :                     	;
(1) 3055/     E4F : 06 00               		ld	b,0
(1) 3056/     E51 : 79                  		ld	a,c		; a - Size counter
(1) 3057/     E52 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3058/     E54 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3059/     E56 :                     .x68kloop:
(1) 3060/     E56 : CF                  		rst	8
(1) 3061/     E57 : 00                  		nop
(1) 3062/     E58 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3063/     E5A : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3064/     E5E : C4 78 0E            		call	nz,.x68klpwt
(1) 3065/     E61 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3066/     E63 : CF                  		rst	8
(1) 3067/     E64 : 00                  		nop
(1) 3068/     E65 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3069/     E67 : D2 56 0E            		jp	nc,.x68kloop
(1) 3070/     E6A :                     ; last block
(1) 3071/     E6A :                     .x68klast:
(1) 3072/     E6A : CF                  		rst	8
(1) 3073/     E6B : C6 08               		add	a,MAX_TRFRPZ
(1) 3074/     E6D : 4F                  		ld	c,a
(1) 3075/     E6E : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3076/     E72 : C4 78 0E            		call	nz,.x68klpwt
(1) 3077/     E75 : ED B0               		ldir
(1) 3078/     E77 : C9                  		ret
(1) 3079/     E78 :                     
(1) 3080/     E78 :                     ; Wait here until Genesis unlocks ROM
(1) 3081/     E78 :                     .x68klpwt:
(1) 3082/     E78 : CF                  		rst	8
(1) 3083/     E79 : 00                  		nop
(1) 3084/     E7A : 00                  		nop
(1) 3085/     E7B : 00                  		nop
(1) 3086/     E7C : 00                  		nop
(1) 3087/     E7D :                     .x68kpwtlp:
(1) 3088/     E7D : CF                  		rst	8
(1) 3089/     E7E : 00                  		nop
(1) 3090/     E7F : 00                  		nop
(1) 3091/     E80 : 00                  		nop
(1) 3092/     E81 : 00                  		nop
(1) 3093/     E82 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3094/     E86 : 20 F5               		jr	nz,.x68kpwtlp
(1) 3095/     E88 : CF                  		rst	8
(1) 3096/     E89 : C9                  		ret
(1) 3097/     E8A :                     
(1) 3098/     E8A :                     ; ====================================================================
(1) 3099/     E8A :                     ; ----------------------------------------------------------------
(1) 3100/     E8A :                     ; Sound chip routines
(1) 3101/     E8A :                     ; ----------------------------------------------------------------
(1) 3102/     E8A :                     
(1) 3103/     E8A :                     ; --------------------------------------------------------
(1) 3104/     E8A :                     ; chip_env
(1) 3105/     E8A :                     ;
(1) 3106/     E8A :                     ; Process PSG and FM
(1) 3107/     E8A :                     ; --------------------------------------------------------
(1) 3108/     E8A :                     
(1) 3109/     E8A :                     chip_env:
(1) 3110/     E8A : FD 21 B1 15         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3111/     E8E : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3112/     E92 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3113/     E94 : 06 04               		ld	b,4			; b - 4 channels
(1) 3114/     E96 :                     .vloop:
(1) 3115/     E96 : CF                  		rst	8
(1) 3116/     E97 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3117/     E9A : FD 36 00 00         		ld	(iy+COM),0
(1) 3118/     E9E :                     
(1) 3119/     E9E :                     	; ----------------------------
(1) 3120/     E9E :                     	; bit 2 - stop sound
(1) 3121/     E9E : CB 53               		bit	2,e
(1) 3122/     EA0 : 28 0C               		jr	z,.ckof
(1) 3123/     EA2 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3124/     EA6 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3125/     EAA : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3126/     EAE :                     .ckof:
(1) 3127/     EAE :                     
(1) 3128/     EAE :                     	; ----------------------------
(1) 3129/     EAE :                     	; bit 1 - key off
(1) 3130/     EAE : CB 4B               		bit	1,e
(1) 3131/     EB0 : 28 0F               		jr      z,.ckon
(1) 3132/     EB2 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3133/     EB5 : B7                  		or	a
(1) 3134/     EB6 : 28 09               		jr	z,.ckon
(1) 3135/     EB8 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3136/     EBC : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3137/     EC0 : CF                  		rst	8
(1) 3138/     EC1 :                     .ckon:
(1) 3139/     EC1 :                     
(1) 3140/     EC1 :                     	; ----------------------------
(1) 3141/     EC1 :                     	; bit 0 - key on
(1) 3142/     EC1 : CB 43               		bit	0,e
(1) 3143/     EC3 : 28 1A               		jr	z,.envproc
(1) 3144/     EC5 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3145/     EC9 : 78                  		ld	a,b
(1) 3146/     ECA : FE 04               		cp	4			; NOISE channel?
(1) 3147/     ECC : 20 08               		jr	nz,.nskip
(1) 3148/     ECE : CF                  		rst	8			; Set NOISE mode
(1) 3149/     ECF : 3A 39 16            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3150/     ED2 : B1                  		or	c
(1) 3151/     ED3 : DD 77 00            		ld	(ix),a
(1) 3152/     ED6 :                     .nskip:
(1) 3153/     ED6 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3154/     EDA : CF                  		rst	8
(1) 3155/     EDB : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3156/     EDF :                     .nblock:
(1) 3157/     EDF :                     
(1) 3158/     EDF :                     	; ----------------------------
(1) 3159/     EDF :                     	; Process effects
(1) 3160/     EDF :                     	; ----------------------------
(1) 3161/     EDF :                     .envproc:
(1) 3162/     EDF : FD 7E 18            		ld	a,(iy+MODE)
(1) 3163/     EE2 : B7                  		or	a			; no modes
(1) 3164/     EE3 : CA 69 0F            		jp	z,.vedlp
(1) 3165/     EE6 : FE 01               		cp 	001b			; Attack mode
(1) 3166/     EE8 : 20 2C               		jr	nz,.chk2
(1) 3167/     EEA : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3168/     EEE : FD 5E 24            		ld	e,(iy+ALV)
(1) 3169/     EF1 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3170/     EF4 : B7                  		or	a
(1) 3171/     EF5 : 28 16               		jr	z,.atkend
(1) 3172/     EF7 : 57                  		ld	d,a			; c - attack rate
(1) 3173/     EF8 : 7B                  		ld	a,e			; a - attack level
(1) 3174/     EF9 : CF                  		rst	8
(1) 3175/     EFA : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3176/     EFD : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3177/     EFE : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3178/     F00 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3179/     F02 : BB                  		cp	e			; attack rate == level?
(1) 3180/     F03 : 38 08               		jr	c,.atkend
(1) 3181/     F05 : 28 06               		jr	z,.atkend
(1) 3182/     F07 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3183/     F0A : CF                  		rst	8
(1) 3184/     F0B : 18 5C               		jr	.vedlp
(1) 3185/     F0D :                     .atkend:
(1) 3186/     F0D : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3187/     F10 :                     .atkzero:
(1) 3188/     F10 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3189/     F14 : 18 53               		jr	.vedlp
(1) 3190/     F16 :                     .chk2:
(1) 3191/     F16 :                     
(1) 3192/     F16 : FE 02               		cp	010b			; Decay mode
(1) 3193/     F18 : 20 31               		jr	nz,.chk4
(1) 3194/     F1A :                     .dectmr:
(1) 3195/     F1A : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3196/     F1E : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3197/     F21 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3198/     F24 : BB                  		cp	e
(1) 3199/     F25 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3200/     F27 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3201/     F29 : CF                  		rst	8
(1) 3202/     F2A : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3203/     F2D : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3204/     F2F : BB                  		cp	e			; compare level
(1) 3205/     F30 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3206/     F32 : 18 08               		jr	.dksav
(1) 3207/     F34 :                     .dkadd:
(1) 3208/     F34 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3209/     F37 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3210/     F39 : BB                  		cp	e			; compare level
(1) 3211/     F3A : 30 05               		jr	nc,.dkyend
(1) 3212/     F3C :                     .dksav:
(1) 3213/     F3C : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3214/     F3F : 18 28               		jr	.vedlp
(1) 3215/     F41 :                     .dkyend:
(1) 3216/     F41 : CF                  		rst	8
(1) 3217/     F42 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3218/     F45 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3219/     F49 : 18 1E               		jr	.vedlp
(1) 3220/     F4B :                     .chk4:
(1) 3221/     F4B : FE 04               		cp	100b			; Sustain phase
(1) 3222/     F4D : 20 1A               		jr	nz,.vedlp
(1) 3223/     F4F : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3224/     F53 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3225/     F56 : CF                  		rst	8
(1) 3226/     F57 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3227/     F5A : 38 05               		jr	c,.killenv		; release done
(1) 3228/     F5C : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3229/     F5F : 18 08               		jr	.vedlp
(1) 3230/     F61 :                     .killenv:
(1) 3231/     F61 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3232/     F65 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3233/     F69 :                     .vedlp:
(1) 3234/     F69 :                     
(1) 3235/     F69 :                     	; ----------------------------
(1) 3236/     F69 :                     	; PSG UPDATE
(1) 3237/     F69 :                     	; ----------------------------
(1) 3238/     F69 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3239/     F6C : B7                  		or	a
(1) 3240/     F6D : 28 72               		jr	z,.noupd
(1) 3241/     F6F : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3242/     F73 : 59                  		ld	e,c
(1) 3243/     F74 : 3A 39 16            		ld	a,(psgHatMode)
(1) 3244/     F77 : 57                  		ld	d,a
(1) 3245/     F78 : E6 03               		and	011b
(1) 3246/     F7A : FE 03               		cp	011b
(1) 3247/     F7C : 20 1D               		jr	nz,.normal
(1) 3248/     F7E : CF                  		rst	8
(1) 3249/     F7F : 78                  		ld	a,b		; Channel 4?
(1) 3250/     F80 : FE 03               		cp	3
(1) 3251/     F82 : 28 13               		jr	z,.silnc_3
(1) 3252/     F84 : FE 04               		cp	4
(1) 3253/     F86 : 20 18               		jr	nz,.do_nfreq
(1) 3254/     F88 : 3A 39 16            		ld	a,(psgHatMode)
(1) 3255/     F8B : 57                  		ld	d,a
(1) 3256/     F8C : E6 03               		and	011b
(1) 3257/     F8E : CF                  		rst	8
(1) 3258/     F8F : FE 03               		cp	011b
(1) 3259/     F91 : 20 30               		jr	nz,.vonly
(1) 3260/     F93 : 1E C0               		ld	e,0C0h
(1) 3261/     F95 : 18 09               		jr	.do_nfreq
(1) 3262/     F97 :                     .silnc_3:
(1) 3263/     F97 : 3E FF               		ld	a,-1
(1) 3264/     F99 : 18 32               		jr	.vlmuch
(1) 3265/     F9B :                     .normal:
(1) 3266/     F9B : 78                  		ld	a,b
(1) 3267/     F9C : FE 04               		cp	4
(1) 3268/     F9E : 28 23               		jr	z,.vonly
(1) 3269/     FA0 :                     .do_nfreq:
(1) 3270/     FA0 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3271/     FA3 : FD 66 20            		ld	h,(iy+DTH)
(1) 3272/     FA6 :                     
(1) 3273/     FA6 :                     	; freq effects go here
(1) 3274/     FA6 :                     	; (save e FIRST.)
(1) 3275/     FA6 :                     	;	push	de
(1) 3276/     FA6 :                     	;	pop	de
(1) 3277/     FA6 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3278/     FA7 : E6 0F               		and	00001111b
(1) 3279/     FA9 : B3                  		or	e		; OR with channel set in e
(1) 3280/     FAA : CF                  		rst	8
(1) 3281/     FAB : DD 77 00            		ld	(ix),a		; write it
(1) 3282/     FAE : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3283/     FAF : 0F                  		rrca
(1) 3284/     FB0 : 0F                  		rrca
(1) 3285/     FB1 : 0F                  		rrca
(1) 3286/     FB2 : 0F                  		rrca
(1) 3287/     FB3 : E6 0F               		and	00001111b
(1) 3288/     FB5 : 5F                  		ld	e,a
(1) 3289/     FB6 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3290/     FB7 : CF                  		rst	8
(1) 3291/     FB8 : 07                  		rlca
(1) 3292/     FB9 : 07                  		rlca
(1) 3293/     FBA : 07                  		rlca
(1) 3294/     FBB : 07                  		rlca
(1) 3295/     FBC : E6 30               		and	00110000b
(1) 3296/     FBE : B3                  		or	e
(1) 3297/     FBF : DD 77 00            		ld	(ix),a
(1) 3298/     FC2 : CF                  		rst	8
(1) 3299/     FC3 :                     .vonly:
(1) 3300/     FC3 : FD 7E 04            		ld	a,(iy+LEV)		; c - Level
(1) 3301/     FC6 : FD 86 30            		add	a,(iy+PVOL)		; Add MASTER volume
(1) 3302/     FC9 : 30 02               		jr	nc,.vlmuch
(1) 3303/     FCB : 3E FF               		ld	a,-1
(1) 3304/     FCD :                     .vlmuch:
(1) 3305/     FCD : CB 3F               		srl	a			; (Level >> 4)
(1) 3306/     FCF : CB 3F               		srl	a
(1) 3307/     FD1 : CB 3F               		srl	a
(1) 3308/     FD3 : CF                  		rst	8
(1) 3309/     FD4 : CB 3F               		srl	a
(1) 3310/     FD6 : E6 0F               		and	00001111b		; Filter volume value
(1) 3311/     FD8 : B1                  		or	c			; and OR with current channel
(1) 3312/     FD9 : F6 90               		or	90h			; Set volume-set mode
(1) 3314/     FDB : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3316/     FDE : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3317/     FE1 :                     .noupd:
(1) 3318/     FE1 :                     	; ----------------------------
(1) 3319/     FE1 : FD 2B               		dec	iy			; next COM to check
(1) 3320/     FE3 : 79                  		ld	a,c
(1) 3321/     FE4 : CF                  		rst	8
(1) 3322/     FE5 : D6 20               		sub	a,20h			; next PSG backwards
(1) 3323/     FE7 : 4F                  		ld	c,a
(1) 3324/     FE8 : 05                  		dec	b
(1) 3325/     FE9 : C2 96 0E            		jp	nz,.vloop
(1) 3326/     FEC : C9                  		ret
(1) 3327/     FED :                     
(1) 3328/     FED :                     ; ---------------------------------------------
(1) 3329/     FED :                     ; FM register writes
(1) 3330/     FED :                     ;
(1) 3331/     FED :                     ; Input:
(1) 3332/     FED :                     ; d - ctrl
(1) 3333/     FED :                     ; e - data
(1) 3334/     FED :                     ; ---------------------------------------------
(1) 3335/     FED :                     
(1) 3336/     FED :                     ; c - KeyID
(1) 3337/     FED :                     fm_autoreg:
(1) 3338/     FED : CB 51               		bit	2,c
(1) 3339/     FEF : CC F6 0F            		call	z,fm_send_1
(1) 3340/     FF2 : C4 01 10            		call	nz,fm_send_2
(1) 3341/     FF5 : C9                  		ret
(1) 3342/     FF6 :                     ; Channels 1-3 and global registers
(1) 3343/     FF6 :                     fm_send_1:
(1) 3344/     FF6 : 7A                  		ld	a,d
(1) 3345/     FF7 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3346/     FFA : 00                  		nop
(1) 3347/     FFB : 7B                  		ld	a,e
(1) 3348/     FFC : 32 01 40            		ld	(Zym_data_1),a
(1) 3349/     FFF : 00                  		nop
(1) 3350/    1000 : C9                  		ret
(1) 3351/    1001 :                     ; Channels 4-6
(1) 3352/    1001 :                     fm_send_2:
(1) 3353/    1001 : 7A                  		ld	a,d
(1) 3354/    1002 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3355/    1005 : 00                  		nop
(1) 3356/    1006 : 7B                  		ld	a,e
(1) 3357/    1007 : 32 03 40            		ld	(Zym_data_2),a
(1) 3358/    100A : 00                  		nop
(1) 3359/    100B : C9                  		ret
(1) 3360/    100C :                     
(1) 3361/    100C :                     ; --------------------------------------------------------
(1) 3362/    100C :                     ; brute-force WAVE ON/OFF playback
(1) 3363/    100C :                     ; --------------------------------------------------------
(1) 3364/    100C :                     
(1) 3365/    100C :                     dac_on:
(1) 3366/    100C : 3E 2B               		ld	a,2Bh
(1) 3367/    100E : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3368/    1011 : 3E 80               		ld	a,80h
(1) 3369/    1013 : 32 01 40            		ld	(Zym_data_1),a
(1) 3370/    1016 : 3E D9               		ld 	a,zopcExx
(1) 3371/    1018 : 32 08 00            		ld	(dac_me),a
(1) 3372/    101B : 3E F5               		ld 	a,zopcPushAf
(1) 3373/    101D : 32 20 00            		ld	(dac_fill),a
(1) 3374/    1020 : C9                  		ret
(1) 3375/    1021 :                     dac_off:
(1) 3376/    1021 : 3E 2B               		ld	a,2Bh
(1) 3377/    1023 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3378/    1026 : 3E 00               		ld	a,00h
(1) 3379/    1028 : 32 01 40            		ld	(Zym_data_1),a
(1) 3380/    102B : 3E C9               		ld 	a,zopcRet
(1) 3381/    102D : 32 08 00            		ld	(dac_me),a
(1) 3382/    1030 : 3E C9               		ld 	a,zopcRet
(1) 3383/    1032 : 32 20 00            		ld	(dac_fill),a
(1) 3384/    1035 : C9                  		ret
(1) 3385/    1036 :                     
(1) 3386/    1036 :                     ; --------------------------------------------------------
(1) 3387/    1036 :                     ; dac_play
(1) 3388/    1036 :                     ;
(1) 3389/    1036 :                     ; Plays a new sample
(1) 3390/    1036 :                     ;
(1) 3391/    1036 :                     ; NOTE:
(1) 3392/    1036 :                     ; Set wave_Flags and wave_Pitch externally
(1) 3393/    1036 :                     ; getting here.
(1) 3394/    1036 :                     ; --------------------------------------------------------
(1) 3395/    1036 :                     
(1) 3396/    1036 :                     dac_play:
(1) 3397/    1036 : F3                  		di
(1) 3398/    1037 : CD 21 10            		call	dac_off
(1) 3399/    103A : D9                  		exx				; flip exx regs
(1) 3400/    103B : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 3401/    103E : ED 5B 33 16         		ld	de,(wave_Pitch)		; de - Pitch
(1) 3402/    1042 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 3403/    1045 : D9                  		exx				; move them back
(1) 3404/    1046 : 2A 2A 16            		ld	hl,(wave_Start)
(1) 3405/    1049 : 3A 2C 16            		ld 	a,(wave_Start+2)
(1) 3406/    104C : 22 30 00            		ld	(dDacPntr),hl
(1) 3407/    104F : 32 32 00            		ld	(dDacPntr+2),a
(1) 3408/    1052 : 2A 2D 16            		ld	hl,(wave_Len)
(1) 3409/    1055 : 3A 2F 16            		ld 	a,(wave_Len+2)
(1) 3410/    1058 : 22 33 00            		ld	(dDacCntr),hl
(1) 3411/    105B : 32 35 00            		ld	(dDacCntr+2),a
(1) 3412/    105E : AF                  		xor	a
(1) 3413/    105F : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3414/    1062 : CD 6A 10            		call	dac_firstfill
(1) 3415/    1065 : CD 0C 10            		call	dac_on
(1) 3416/    1068 : FB                  		ei
(1) 3417/    1069 : C9                  		ret
(1) 3418/    106A :                     
(1) 3419/    106A :                     ; --------------------------------------------------------
(1) 3420/    106A :                     
(1) 3421/    106A :                     dac_firstfill:
(1) 3422/    106A : F5                  		push	af
(1) 3423/    106B :                     dac_refill:
(1) 3424/    106B : CF                  		rst	8
(1) 3425/    106C : C5                  		push	bc
(1) 3426/    106D : D5                  		push	de
(1) 3427/    106E : E5                  		push	hl
(1) 3428/    106F : 3A 35 16            		ld	a,(wave_Flags)	; Already finished?
(1) 3429/    1072 : FE 07               		cp	111b
(1) 3430/    1074 : D2 2A 11            		jp	nc,.dacfill_end
(1) 3431/    1077 : 3A 35 00            		ld	a,(dDacCntr+2)	; Last bytes
(1) 3432/    107A : 2A 33 00            		ld	hl,(dDacCntr)
(1) 3433/    107D : 01 80 00            		ld	bc,80h
(1) 3434/    1080 : 37                  		scf
(1) 3435/    1081 : 3F                  		ccf
(1) 3436/    1082 : ED 42               		sbc	hl,bc
(1) 3437/    1084 : DE 00               		sbc	a,0
(1) 3438/    1086 : 32 35 00            		ld	(dDacCntr+2),a
(1) 3439/    1089 : 22 33 00            		ld	(dDacCntr),hl
(1) 3440/    108C : 16 1D               		ld	d,dWaveBuff>>8
(1) 3441/    108E : B7                  		or	a
(1) 3442/    108F : FA B9 10            		jp	m,.dac_over
(1) 3443/    1092 : 3A 2F 00            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 3444/    1095 : 5F                  		ld	e,a
(1) 3445/    1096 : C6 80               		add 	a,80h
(1) 3446/    1098 : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3447/    109B : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3448/    109E : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3449/    10A1 : CD 09 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 3450/    10A4 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3451/    10A7 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3452/    10AA : 01 80 00            		ld	bc,80h
(1) 3453/    10AD : 09                  		add	hl,bc
(1) 3454/    10AE : CE 00               		adc	a,0
(1) 3455/    10B0 : 22 30 00            		ld	(dDacPntr),hl
(1) 3456/    10B3 : 32 32 00            		ld	(dDacPntr+2),a
(1) 3457/    10B6 : C3 2D 11            		jp	.dacfill_ret
(1) 3458/    10B9 :                     
(1) 3459/    10B9 :                     ; NOTE:
(1) 3460/    10B9 :                     ; This doesn't finish at the exact
(1) 3461/    10B9 :                     ; the END point.
(1) 3462/    10B9 :                     .dac_over:
(1) 3463/    10B9 : 16 1D               		ld	d,dWaveBuff>>8
(1) 3464/    10BB : 3A 35 16            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 3465/    10BE : E6 01               		and	001b
(1) 3466/    10C0 : C2 E3 10            		jp	nz,.dacfill_loop
(1) 3467/    10C3 : 7D                  		ld	a,l
(1) 3468/    10C4 : C6 80               		add	a,80h
(1) 3469/    10C6 : 4F                  		ld	c,a
(1) 3470/    10C7 : 06 00               		ld	b,0
(1) 3471/    10C9 : C5                  		push	bc
(1) 3472/    10CA : 3A 2F 00            		ld	a,(dDacFifoMid)
(1) 3473/    10CD : 5F                  		ld	e,a
(1) 3474/    10CE : C6 80               		add	a,80h
(1) 3475/    10D0 : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3476/    10D3 : C1                  		pop	bc
(1) 3477/    10D4 : 79                  		ld	a,c
(1) 3478/    10D5 : B0                  		or	b
(1) 3479/    10D6 : 28 52               		jr	z,.dacfill_end
(1) 3480/    10D8 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3481/    10DB : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3482/    10DE : CD 09 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 3483/    10E1 : 18 47               		jr	.dacfill_end
(1) 3484/    10E3 :                     .dacfill_loop:
(1) 3485/    10E3 :                     	; loop sample
(1) 3486/    10E3 : C5                  		push	bc
(1) 3487/    10E4 : D5                  		push	de
(1) 3488/    10E5 : 3A 32 16            		ld	a,(wave_Loop+2)
(1) 3489/    10E8 : 4F                  		ld	c,a
(1) 3490/    10E9 : ED 5B 30 16         		ld	de,(wave_Loop)
(1) 3491/    10ED : 2A 2A 16            		ld	hl,(wave_Start)
(1) 3492/    10F0 : 3A 2C 16            		ld 	a,(wave_Start+2)
(1) 3493/    10F3 : 81                  		add	a,c
(1) 3494/    10F4 : 19                  		add	hl,de
(1) 3495/    10F5 : CE 00               		adc	a,0
(1) 3496/    10F7 : 22 30 00            		ld	(dDacPntr),hl
(1) 3497/    10FA : 32 32 00            		ld	(dDacPntr+2),a
(1) 3498/    10FD : 2A 2D 16            		ld	hl,(wave_Len)
(1) 3499/    1100 : 3A 2F 16            		ld 	a,(wave_Len+2)
(1) 3500/    1103 : 91                  		sub	a,c
(1) 3501/    1104 : 37                  		scf
(1) 3502/    1105 : 3F                  		ccf
(1) 3503/    1106 : ED 52               		sbc	hl,de
(1) 3504/    1108 : DE 00               		sbc	a,0
(1) 3505/    110A : 22 33 00            		ld	(dDacCntr),hl
(1) 3506/    110D : 32 35 00            		ld	(dDacCntr+2),a
(1) 3507/    1110 : D1                  		pop	de
(1) 3508/    1111 : C1                  		pop	bc
(1) 3509/    1112 : 78                  		ld	a,b
(1) 3510/    1113 : B1                  		or	c
(1) 3511/    1114 : 28 17               		jr	z,.dacfill_ret
(1) 3512/    1116 : 3A 2F 00            		ld	a,(dDacFifoMid)
(1) 3513/    1119 : 5F                  		ld	e,a
(1) 3514/    111A : C6 80               		add	a,80h
(1) 3515/    111C : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3516/    111F : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3517/    1122 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3518/    1125 : CD 09 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 3519/    1128 : 18 03               		jr	.dacfill_ret
(1) 3520/    112A :                     
(1) 3521/    112A :                     .dacfill_end:
(1) 3522/    112A : CD 21 10            		call	dac_off		; DAC finished
(1) 3523/    112D :                     
(1) 3524/    112D :                     .dacfill_ret:
(1) 3525/    112D : E1                  		pop	hl
(1) 3526/    112E : D1                  		pop	de
(1) 3527/    112F : C1                  		pop	bc
(1) 3528/    1130 : F1                  		pop	af
(1) 3529/    1131 : C9                  		ret
(1) 3530/    1132 :                     
(1) 3531/    1132 :                     ; ====================================================================
(1) 3532/    1132 :                     ; ----------------------------------------------------------------
(1) 3533/    1132 :                     ; Tables
(1) 3534/    1132 :                     ; ----------------------------------------------------------------
(1) 3535/    1132 :                     
(1) 3536/    1132 : 84 02               fmFreq_List:	dw 644
(1) 3537/    1134 : A9 02               		dw 681
(1) 3538/    1136 : D2 02               		dw 722
(1) 3539/    1138 : FD 02               		dw 765
(1) 3540/    113A : 2A 03               		dw 810
(1) 3541/    113C : 5A 03               		dw 858
(1) 3542/    113E : 8E 03               		dw 910
(1) 3543/    1140 : C4 03               		dw 964
(1) 3544/    1142 : FD 03               		dw 1021
(1) 3545/    1144 : 39 04               		dw 1081
(1) 3546/    1146 : 7A 04               		dw 1146
(1) 3547/    1148 : BE 04               		dw 1214
(1) 3548/    114A :                     psgFreq_List:
(1) 3549/    114A : FF FF               		dw -1		; C-0 00
(1) 3550/    114C : FF FF               		dw -1
(1) 3551/    114E : FF FF               		dw -1
(1) 3552/    1150 : FF FF               		dw -1
(1) 3553/    1152 : FF FF               		dw -1
(1) 3554/    1154 : FF FF               		dw -1
(1) 3555/    1156 : FF FF               		dw -1
(1) 3556/    1158 : FF FF               		dw -1
(1) 3557/    115A : FF FF               		dw -1
(1) 3558/    115C : FF FF               		dw -1
(1) 3559/    115E : FF FF               		dw -1
(1) 3560/    1160 : FF FF               		dw -1
(1) 3561/    1162 : FF FF               		dw -1		; C-1 0C
(1) 3562/    1164 : FF FF               		dw -1
(1) 3563/    1166 : FF FF               		dw -1
(1) 3564/    1168 : FF FF               		dw -1
(1) 3565/    116A : FF FF               		dw -1
(1) 3566/    116C : FF FF               		dw -1
(1) 3567/    116E : FF FF               		dw -1
(1) 3568/    1170 : FF FF               		dw -1
(1) 3569/    1172 : FF FF               		dw -1
(1) 3570/    1174 : FF FF               		dw -1
(1) 3571/    1176 : FF FF               		dw -1
(1) 3572/    1178 : FF FF               		dw -1
(1) 3573/    117A : FF FF               		dw -1		; C-2 18
(1) 3574/    117C : FF FF               		dw -1
(1) 3575/    117E : FF FF               		dw -1
(1) 3576/    1180 : FF FF               		dw -1
(1) 3577/    1182 : FF FF               		dw -1
(1) 3578/    1184 : FF FF               		dw -1
(1) 3579/    1186 : FF FF               		dw -1
(1) 3580/    1188 : FF FF               		dw -1
(1) 3581/    118A : FF FF               		dw -1
(1) 3582/    118C : FF FF               		dw -1
(1) 3583/    118E : FF FF               		dw -1
(1) 3584/    1190 : FF FF               		dw -1
(1) 3585/    1192 : FF FF               		dw -1		; C-3 24
(1) 3586/    1194 : FF FF               		dw -1
(1) 3587/    1196 : FF FF               		dw -1
(1) 3588/    1198 : FF FF               		dw -1
(1) 3589/    119A : FF FF               		dw -1
(1) 3590/    119C : FF FF               		dw -1
(1) 3591/    119E : FF FF               		dw -1
(1) 3592/    11A0 : FF FF               		dw -1
(1) 3593/    11A2 : FF FF               		dw -1
(1) 3594/    11A4 : F8 03               		dw 3F8h
(1) 3595/    11A6 : BF 03               		dw 3BFh
(1) 3596/    11A8 : 89 03               		dw 389h
(1) 3597/    11AA : 56 03               		dw 356h		; C-4 30
(1) 3598/    11AC : 26 03               		dw 326h
(1) 3599/    11AE : F9 02               		dw 2F9h
(1) 3600/    11B0 : CE 02               		dw 2CEh
(1) 3601/    11B2 : A5 02               		dw 2A5h
(1) 3602/    11B4 : 80 02               		dw 280h
(1) 3603/    11B6 : 5C 02               		dw 25Ch
(1) 3604/    11B8 : 3A 02               		dw 23Ah
(1) 3605/    11BA : 1A 02               		dw 21Ah
(1) 3606/    11BC : FB 01               		dw 1FBh
(1) 3607/    11BE : DF 01               		dw 1DFh
(1) 3608/    11C0 : C4 01               		dw 1C4h
(1) 3609/    11C2 : AB 01               		dw 1ABh		; C-5 3C
(1) 3610/    11C4 : 93 01               		dw 193h
(1) 3611/    11C6 : 7D 01               		dw 17Dh
(1) 3612/    11C8 : 67 01               		dw 167h
(1) 3613/    11CA : 53 01               		dw 153h
(1) 3614/    11CC : 40 01               		dw 140h
(1) 3615/    11CE : 2E 01               		dw 12Eh
(1) 3616/    11D0 : 1D 01               		dw 11Dh
(1) 3617/    11D2 : 0D 01               		dw 10Dh
(1) 3618/    11D4 : FE 00               		dw 0FEh
(1) 3619/    11D6 : EF 00               		dw 0EFh
(1) 3620/    11D8 : E2 00               		dw 0E2h
(1) 3621/    11DA : D6 00               		dw 0D6h		; C-6 48
(1) 3622/    11DC : C9 00               		dw 0C9h
(1) 3623/    11DE : BE 00               		dw 0BEh
(1) 3624/    11E0 : B4 00               		dw 0B4h
(1) 3625/    11E2 : A9 00               		dw 0A9h
(1) 3626/    11E4 : A0 00               		dw 0A0h
(1) 3627/    11E6 : 97 00               		dw 097h
(1) 3628/    11E8 : 8F 00               		dw 08Fh
(1) 3629/    11EA : 87 00               		dw 087h
(1) 3630/    11EC : 7F 00               		dw 07Fh
(1) 3631/    11EE : 78 00               		dw 078h
(1) 3632/    11F0 : 71 00               		dw 071h
(1) 3633/    11F2 : 6B 00               		dw 06Bh		; C-7 54
(1) 3634/    11F4 : 65 00               		dw 065h
(1) 3635/    11F6 : 5F 00               		dw 05Fh
(1) 3636/    11F8 : 5A 00               		dw 05Ah
(1) 3637/    11FA : 55 00               		dw 055h
(1) 3638/    11FC : 50 00               		dw 050h
(1) 3639/    11FE : 4B 00               		dw 04Bh
(1) 3640/    1200 : 47 00               		dw 047h
(1) 3641/    1202 : 43 00               		dw 043h
(1) 3642/    1204 : 40 00               		dw 040h
(1) 3643/    1206 : 3C 00               		dw 03Ch
(1) 3644/    1208 : 39 00               		dw 039h
(1) 3645/    120A : 36 00               		dw 036h		; C-8 60
(1) 3646/    120C : 33 00               		dw 033h
(1) 3647/    120E : 30 00               		dw 030h
(1) 3648/    1210 : 2D 00               		dw 02Dh
(1) 3649/    1212 : 2B 00               		dw 02Bh
(1) 3650/    1214 : 28 00               		dw 028h
(1) 3651/    1216 : 26 00               		dw 026h
(1) 3652/    1218 : 24 00               		dw 024h
(1) 3653/    121A : 22 00               		dw 022h
(1) 3654/    121C : 20 00               		dw 020h
(1) 3655/    121E : 1F 00               		dw 01Fh
(1) 3656/    1220 : 1D 00               		dw 01Dh
(1) 3657/    1222 : 1B 00               		dw 01Bh		; C-9 6C
(1) 3658/    1224 : 1A 00               		dw 01Ah
(1) 3659/    1226 : 18 00               		dw 018h
(1) 3660/    1228 : 17 00               		dw 017h
(1) 3661/    122A : 16 00               		dw 016h
(1) 3662/    122C : 15 00               		dw 015h
(1) 3663/    122E : 13 00               		dw 013h
(1) 3664/    1230 : 12 00               		dw 012h
(1) 3665/    1232 : 11 00               		dw 011h
(1) 3666/    1234 : 10 00                		dw 010h
(1) 3667/    1236 : 09 00                		dw 009h
(1) 3668/    1238 : 08 00                		dw 008h
(1) 3669/    123A : 06 00               		dw 006h
(1) 3670/    123C :                     
(1) 3671/    123C : 00 01               wavFreq_List:	dw 100h		; C-0
(1) 3672/    123E : 00 01               		dw 100h
(1) 3673/    1240 : 00 01               		dw 100h
(1) 3674/    1242 : 00 01               		dw 100h
(1) 3675/    1244 : 00 01               		dw 100h
(1) 3676/    1246 : 00 01               		dw 100h
(1) 3677/    1248 : 00 01               		dw 100h
(1) 3678/    124A : 00 01               		dw 100h
(1) 3679/    124C : 00 01               		dw 100h
(1) 3680/    124E : 00 01               		dw 100h
(1) 3681/    1250 : 00 01               		dw 100h
(1) 3682/    1252 : 00 01               		dw 100h
(1) 3683/    1254 : 00 01               		dw 100h		; C-1
(1) 3684/    1256 : 00 01               		dw 100h
(1) 3685/    1258 : 00 01               		dw 100h
(1) 3686/    125A : 00 01               		dw 100h
(1) 3687/    125C : 00 01               		dw 100h
(1) 3688/    125E : 00 01               		dw 100h
(1) 3689/    1260 : 00 01               		dw 100h
(1) 3690/    1262 : 00 01               		dw 100h
(1) 3691/    1264 : 00 01               		dw 100h
(1) 3692/    1266 : 00 01               		dw 100h
(1) 3693/    1268 : 00 01               		dw 100h
(1) 3694/    126A : 00 01               		dw 100h
(1) 3695/    126C : 00 01               		dw 100h		; C-2
(1) 3696/    126E : 00 01               		dw 100h
(1) 3697/    1270 : 00 01               		dw 100h
(1) 3698/    1272 : 00 01               		dw 100h
(1) 3699/    1274 : 00 01               		dw 100h
(1) 3700/    1276 : 00 01               		dw 100h
(1) 3701/    1278 : 00 01               		dw 100h
(1) 3702/    127A : 00 01               		dw 100h
(1) 3703/    127C : 00 01               		dw 100h
(1) 3704/    127E : 00 01               		dw 100h
(1) 3705/    1280 : 36 00               		dw 036h
(1) 3706/    1282 : 3B 00               		dw 03Bh
(1) 3707/    1284 : 3E 00               		dw 03Eh		; C-3
(1) 3708/    1286 : 43 00               		dw 043h		; C#3
(1) 3709/    1288 : 46 00               		dw 046h		; D-3
(1) 3710/    128A : 49 00               		dw 049h		; D#3
(1) 3711/    128C : 4E 00               		dw 04Eh		; E-3
(1) 3712/    128E : 54 00               		dw 054h		; F-3
(1) 3713/    1290 : 58 00               		dw 058h		; F#3
(1) 3714/    1292 : 5E 00               		dw 05Eh		; G-3 -17
(1) 3715/    1294 : 63 00               		dw 063h		; G#3
(1) 3716/    1296 : 68 00               		dw 068h		; A-3
(1) 3717/    1298 : 70 00               		dw 070h		; A#3
(1) 3718/    129A : 75 00               		dw 075h		; B-3
(1) 3719/    129C : 85 00               		dw 085h		; C-4 -12
(1) 3720/    129E : 87 00               		dw 087h		; C#4
(1) 3721/    12A0 : 8C 00               		dw 08Ch		; D-4
(1) 3722/    12A2 : 9A 00               		dw 09Ah		; D#4
(1) 3723/    12A4 : 9E 00               		dw 09Eh		; E-4
(1) 3724/    12A6 : AD 00               		dw 0ADh		; F-4
(1) 3725/    12A8 : B2 00               		dw 0B2h		; F#4
(1) 3726/    12AA : C0 00               		dw 0C0h		; G-4
(1) 3727/    12AC : CC 00               		dw 0CCh		; G#4
(1) 3728/    12AE : D7 00               		dw 0D7h		; A-4
(1) 3729/    12B0 : E6 00               		dw 0E6h		; A#4
(1) 3730/    12B2 : F0 00               		dw 0F0h		; B-4
(1) 3731/    12B4 : 00 01               		dw 100h		; C-5 ****
(1) 3732/    12B6 : 10 01               		dw 110h		; C#5
(1) 3733/    12B8 : 20 01               		dw 120h		; D-5
(1) 3734/    12BA : 2E 01               		dw 12Eh		; D#5
(1) 3735/    12BC : 42 01               		dw 142h		; E-5
(1) 3736/    12BE : 5A 01               		dw 15Ah		; F-5
(1) 3737/    12C0 : 6A 01               		dw 16Ah		; F#5 +6
(1) 3738/    12C2 : 7F 01               		dw 17Fh		; G-5
(1) 3739/    12C4 : 91 01               		dw 191h		; G#5
(1) 3740/    12C6 : AC 01               		dw 1ACh		; A-5
(1) 3741/    12C8 : C2 01               		dw 1C2h		; A#5
(1) 3742/    12CA : E0 01               		dw 1E0h		; B-5
(1) 3743/    12CC : F8 01               		dw 1F8h		; C-6 +12
(1) 3744/    12CE : 10 02               		dw 210h		; C#6
(1) 3745/    12D0 : 40 02               		dw 240h		; D-6
(1) 3746/    12D2 : 60 02               		dw 260h		; D#6
(1) 3747/    12D4 : 80 02               		dw 280h		; E-6
(1) 3748/    12D6 : A0 02               		dw 2A0h		; F-6
(1) 3749/    12D8 : D0 02               		dw 2D0h		; F#6
(1) 3750/    12DA : F8 02               		dw 2F8h		; G-6
(1) 3751/    12DC : 20 03               		dw 320h		; G#6
(1) 3752/    12DE : 50 03               		dw 350h		; A-6
(1) 3753/    12E0 : 80 03               		dw 380h		; A#6
(1) 3754/    12E2 : C0 03               		dw 3C0h		; B-6
(1) 3755/    12E4 : 00 04               		dw 400h		; C-7
(1) 3756/    12E6 : 00 01               		dw 100h
(1) 3757/    12E8 : 00 01               		dw 100h
(1) 3758/    12EA : 00 01               		dw 100h
(1) 3759/    12EC : 00 01               		dw 100h
(1) 3760/    12EE : 00 01               		dw 100h
(1) 3761/    12F0 : 00 01               		dw 100h
(1) 3762/    12F2 : 00 01               		dw 100h
(1) 3763/    12F4 : 00 01               		dw 100h
(1) 3764/    12F6 : 00 01               		dw 100h
(1) 3765/    12F8 : 00 01               		dw 100h
(1) 3766/    12FA : 00 01               		dw 100h
(1) 3767/    12FC : 00 01               		dw 100h		; C-8
(1) 3768/    12FE : 00 01               		dw 100h
(1) 3769/    1300 : 00 01               		dw 100h
(1) 3770/    1302 : 00 01               		dw 100h
(1) 3771/    1304 : 00 01               		dw 100h
(1) 3772/    1306 : 00 01               		dw 100h
(1) 3773/    1308 : 00 01               		dw 100h
(1) 3774/    130A : 00 01               		dw 100h
(1) 3775/    130C : 00 01               		dw 100h
(1) 3776/    130E : 00 01               		dw 100h
(1) 3777/    1310 : 00 01               		dw 100h
(1) 3778/    1312 : 00 01               		dw 100h
(1) 3779/    1314 : 00 01               		dw 100h		; C-9
(1) 3780/    1316 : 00 01               		dw 100h
(1) 3781/    1318 : 00 01               		dw 100h
(1) 3782/    131A : 00 01               		dw 100h
(1) 3783/    131C : 00 01               		dw 100h
(1) 3784/    131E : 00 01               		dw 100h
(1) 3785/    1320 : 00 01               		dw 100h
(1) 3786/    1322 : 00 01               		dw 100h
(1) 3787/    1324 : 00 01               		dw 100h
(1) 3788/    1326 : 00 01               		dw 100h
(1) 3789/    1328 : 00 01               		dw 100h
(1) 3790/    132A : 00 01               		dw 100h
(1) 3791/    132C :                     
(1) 3792/    132C : 86 14               fmcach_list:	dw fmcach_1
(1) 3793/    132E : AE 14               		dw fmcach_2
(1) 3794/    1330 : D6 14               		dw fmcach_3
(1) 3795/    1332 : 00 00               		dw 0		; <-- skipped
(1) 3796/    1334 : FE 14               		dw fmcach_4
(1) 3797/    1336 : 26 15               		dw fmcach_5
(1) 3798/    1338 : 4E 15               		dw fmcach_6
(1) 3799/    133A :                     
(1) 3800/    133A :                     ; ====================================================================
(1) 3801/    133A :                     ; ----------------------------------------------------------------
(1) 3802/    133A :                     ; MASTER buffers list
(1) 3803/    133A :                     ;
(1) 3804/    133A :                     ; dw track_buffer
(1) 3805/    133A :                     ; dw channel_list,block_cache,header_cache,instr_cache,track_cache
(1) 3806/    133A :                     ; db max_blocks,max_headers,max_instr,max_chnls
(1) 3807/    133A :                     ;
(1) 3808/    133A :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 3809/    133A :                     ; ----------------------------------------------------------------
(1) 3810/    133A :                     
(1) 3811/    133A :                     nikona_BuffList:
(1) 3812/    133A : 50 16 E0 16 18 1B   	dw trkBuff_0,trkChnl_0,trkBlks_0,trkHdrs_0,trkInsD_0,trkCach_0
                    78 18 98 19 00 1E 
(1) 3813/    1346 : 18 18 10 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3814/    134A : 80 16 68 17 30 1B   	dw trkBuff_1,trkChnl_1,trkBlks_1,trkHdrs_1,trkInsD_1,trkCach_1
                    D8 18 18 1A 40 1E 
(1) 3815/    1356 : 18 18 10 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3816/    135A :                     ; 	dw trkBuff_2,trkChnl_2,trkBlks_2,trkHdrs_2,trkInsD_2,trkCach_2
(1) 3817/    135A :                     ; 	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3818/    135A : FF FF               	dw -1
(1) 3819/    135C :                     
(1) 3820/    135C :                     nikona_SetMstrList:
(1) 3821/    135C : 00                  	db 0				; ** 32-bit 68k address **
(1) 3822/    135D : 00                  	db (Gema_MasterList>>16)&0FFh
(1) 3823/    135E : 80                  	db (Gema_MasterList>>8)&0FFh
(1) 3824/    135F : 00                  	db Gema_MasterList&0FFh
(1) 3825/    1360 :                     
(1) 3826/    1360 :                     ; ====================================================================
(1) 3827/    1360 :                     ; ----------------------------------------------------------------
(1) 3828/    1360 :                     ; Buffer section
(1) 3829/    1360 :                     ; ----------------------------------------------------------------
(1) 3830/    1360 :                     
(1) 3831/    1360 :                     ; --------------------------------------------------------
(1) 3832/    1360 :                     ; Channel table struct:
(1) 3833/    1360 :                     ; 00  - Linked tracker channel
(1) 3834/    1360 :                     ; 02  - 00h-7Fh: Priority level / 80h+ Silence request (chip ID)
(1) 3835/    1360 :                     ; 03  - Intrument cache pointer
(1) 3836/    1360 :                     ; 05  - Chip index (YM2612: KEY index)
(1) 3837/    1360 :                     ; 06  - Frequency/Note value
(1) 3838/    1360 :                     ; 08  - Current volume: 00-max
(1) 3839/    1360 :                     ; 09  - FREE
(1) 3840/    1360 :                     ; 0A  - FREE
(1) 3841/    1360 :                     ; 0B  - FREE
(1) 3842/    1360 :                     ; 0C+ - Misc. settings for the current chip
(1) 3843/    1360 :                     
(1) 3844/    1360 :                     ; PSG   80h
(1) 3845/    1360 :                     ; PSGN  90h
(1) 3846/    1360 :                     ; FM   0A0h
(1) 3847/    1360 :                     ; FM3  0B0h
(1) 3848/    1360 :                     ; DAC  0C0h
(1) 3849/    1360 :                     ; PWM  0D0h
(1) 3850/    1360 :                     ; --------------------------------------------------------
(1) 3851/    1360 :                     
(1) 3852/    1360 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 3853/    1362 : 42 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 3854/    1364 : 52 00               		dw tblFM-tblList		; 0A0h
(1) 3855/    1366 : 92 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 3856/    1368 : A2 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 3857/    136A : B4 00               		dw tblPWM-tblList		; 0D0h
(1) 3858/    136C : 00 00               		dw 0
(1) 3859/    136E : 00 00               		dw 0
(1) 3860/    1370 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3861/    1378 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3862/    1380 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3863/    1388 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3864/    1390 : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
                    00 00 
(1) 3865/    1398 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3866/    13A0 : FF FF               		dw -1	; end-of-list
(1) 3867/    13A2 : 00 00 00 00 00 03   tblPSGN:	db 00h,00h,00h,00h,00h,03h,00h,03h	; Noise
                    00 03 
(1) 3868/    13AA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3869/    13B2 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3870/    13BA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3871/    13C2 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3872/    13CA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3873/    13D2 : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 4 <--
                    00 00 
(1) 3874/    13DA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3875/    13E2 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 5
                    00 00 
(1) 3876/    13EA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3877/    13F2 : 00 00 00 00 00 02   tblFM3:		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3 <--
                    00 00 
(1) 3878/    13FA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3879/    1402 : 00 00 00 00 00 06   tblFM6:		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 6 <--
                    00 00 
(1) 3880/    140A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3881/    1412 : FF FF               		dw -1	; end-of-list
(1) 3882/    1414 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3883/    141C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3884/    1424 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3885/    142C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3886/    1434 : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
                    00 00 
(1) 3887/    143C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3888/    1444 : 00 00 00 00 00 03   		db 00h,00h,00h,00h,00h,03h,00h,00h	; Channel 4
                    00 00 
(1) 3889/    144C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3890/    1454 : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 5
                    00 00 
(1) 3891/    145C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3892/    1464 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 6
                    00 00 
(1) 3893/    146C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3894/    1474 : 00 00 00 00 00 06   		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 7
                    00 00 
(1) 3895/    147C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3896/    1484 : FF FF               		dw -1	; end-of-list
(1) 3897/    1486 :                     
(1) 3898/    1486 :                     ; FM patch storage
(1) 3899/    1486 :                     fmcach_1	ds 28h
(1) 3900/    14AE :                     fmcach_2	ds 28h
(1) 3901/    14D6 :                     fmcach_3	ds 28h
(1) 3902/    14FE :                     fmcach_4	ds 28h
(1) 3903/    1526 :                     fmcach_5	ds 28h
(1) 3904/    154E :                     fmcach_6	ds 28h
(1) 3905/    1576 :                     
(1) 3906/    1576 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: KeyOn/KeyOff/KeyCut bits
                    00 00 
(1) 3907/    157E : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
                    00 00 
(1) 3908/    1586 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
                    00 00 
(1) 3909/    158E : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags: Stereo/Loop/Left/Right | 32-bit**
                    00 00 
(1) 3910/    1596 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - **sample location
                    00 00 
(1) 3911/    159E : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3912/    15A6 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3913/    15AE :                     
(1) 3914/    15AE : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 3915/    15B2 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 3916/    15B6 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 3917/    15BA : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 3918/    15BE : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 3919/    15C2 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 3920/    15C6 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 3921/    15CA : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 3922/    15CE : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 3923/    15D2 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 3924/    15D6 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 3925/    15DA : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 3926/    15DE : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 3927/    15E2 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 3928/    15E6 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 3929/    15EA :                     
(1) 3930/    15EA :                     ; mailboxes	ds 40h		; GEMS style mailboxes/events
(1) 3931/    15EA :                     trkListCach	ds 4*10h	; 40h bytes
(1) 3932/    162A : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 3933/    162C : 00                  		db 0
(1) 3934/    162D : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 3935/    162F : 00                  		db 0
(1) 3936/    1630 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 3937/    1632 : 00                  		db 0
(1) 3938/    1633 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 3939/    1635 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 3940/    1636 :                     
(1) 3941/    1636 :                     
(1) 3942/    1636 : 00                  tickSpSet	db 0		; **
(1) 3943/    1637 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 3944/    1638 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 3945/    1639 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 3946/    163A : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 3947/    163B :                     headerOut	ds 00Ch		; Temporal storage for 68k pointers
(1) 3948/    1647 :                     headerOut_e	ds 2
(1) 3949/    1649 :                     sampleHead	ds 006h
(1) 3950/    164F : 00                  commZRead	db 0			; cmd fifo READ pointer (here)
(1) 3951/    1650 :                     
(1) 3952/    1650 :                     ; --------------------------------------------------------
(1) 3953/    1650 :                     ; * USER customizable section *
(1) 3954/    1650 :                     ;
(1) 3955/    1650 :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 3956/    1650 :                     ; --------------------------------------------------------
(1) 3957/    1650 :                     
(1) 3958/    1650 :                     trkBuff_0	ds 30h			; TRACK BUFFER 0
(1) 3959/    1680 :                     trkBuff_1	ds 30h			; TRACK BUFFER 1
(1) 3960/    16B0 :                     trkBuff_2	ds 30h			; TRACK BUFFER 2
(1) 3961/    16E0 :                     ; trkBuff_3	ds 30h			; TRACK BUFFER 3
(1) 3962/    16E0 :                     trkChnl_0	ds 8*MAX_TRKCHN
(1) 3963/    1768 :                     trkChnl_1	ds 8*MAX_TRKCHN
(1) 3964/    17F0 :                     trkChnl_2	ds 8*MAX_TRKCHN
(1) 3965/    1878 :                     ; trkChnl_3	ds 8*MAX_TRKCHN
(1) 3966/    1878 :                     trkHdrs_0	ds 4*MAX_HEADS		; dw point,rowcntr
(1) 3967/    18D8 :                     trkHdrs_1	ds 4*MAX_HEADS
(1) 3968/    1938 :                     trkHdrs_2	ds 4*MAX_HEADS
(1) 3969/    1998 :                     ; trkHdrs_3	ds 4*MAX_HEADS
(1) 3970/    1998 :                     trkInsD_0	ds 8*MAX_INS
(1) 3971/    1A18 :                     trkInsD_1	ds 8*MAX_INS
(1) 3972/    1A98 :                     trkInsD_2	ds 8*MAX_INS
(1) 3973/    1B18 :                     ; trkInsD_3	ds 8*MAX_INS
(1) 3974/    1B18 :                     trkBlks_0	ds MAX_BLOCKS
(1) 3975/    1B30 :                     trkBlks_1	ds MAX_BLOCKS
(1) 3976/    1B48 :                     trkBlks_2	ds MAX_BLOCKS
(1) 3977/    1B60 :                     ; trkBlks_3	ds MAX_BLOCKS
(1) 3978/    1B60 :                     
(1) 3979/    1B60 :                     ; ====================================================================
(1) 3980/    1B60 :                     ; ----------------------------------------------------------------
(1) 3981/    1B60 :                     ; WAVE playback buffer
(1) 3982/    1B60 :                     ;
(1) 3983/    1B60 :                     ; Located at 200h
(1) 3984/    1B60 :                     ; ----------------------------------------------------------------
(1) 3985/    1B60 :                     
(1) 3986/    1B60 : (MACRO)             		org 1D00h
(1) 3986/    1B60 : 00                                                  db 0
(1) 3986/    1B61 : 00                                                  db 0
(1) 3986/    1B62 : 00                                                  db 0
(1) 3986/    1B63 : 00                                                  db 0
(1) 3986/    1B64 : 00                                                  db 0
(1) 3986/    1B65 : 00                                                  db 0
(1) 3986/    1B66 : 00                                                  db 0
(1) 3986/    1B67 : 00                                                  db 0
(1) 3986/    1B68 : 00                                                  db 0
(1) 3986/    1B69 : 00                                                  db 0
(1) 3986/    1B6A : 00                                                  db 0
(1) 3986/    1B6B : 00                                                  db 0
(1) 3986/    1B6C : 00                                                  db 0
(1) 3986/    1B6D : 00                                                  db 0
(1) 3986/    1B6E : 00                                                  db 0
(1) 3986/    1B6F : 00                                                  db 0
(1) 3986/    1B70 : 00                                                  db 0
(1) 3986/    1B71 : 00                                                  db 0
(1) 3986/    1B72 : 00                                                  db 0
(1) 3986/    1B73 : 00                                                  db 0
(1) 3986/    1B74 : 00                                                  db 0
(1) 3986/    1B75 : 00                                                  db 0
(1) 3986/    1B76 : 00                                                  db 0
(1) 3986/    1B77 : 00                                                  db 0
(1) 3986/    1B78 : 00                                                  db 0
(1) 3986/    1B79 : 00                                                  db 0
(1) 3986/    1B7A : 00                                                  db 0
(1) 3986/    1B7B : 00                                                  db 0
(1) 3986/    1B7C : 00                                                  db 0
(1) 3986/    1B7D : 00                                                  db 0
(1) 3986/    1B7E : 00                                                  db 0
(1) 3986/    1B7F : 00                                                  db 0
(1) 3986/    1B80 : 00                                                  db 0
(1) 3986/    1B81 : 00                                                  db 0
(1) 3986/    1B82 : 00                                                  db 0
(1) 3986/    1B83 : 00                                                  db 0
(1) 3986/    1B84 : 00                                                  db 0
(1) 3986/    1B85 : 00                                                  db 0
(1) 3986/    1B86 : 00                                                  db 0
(1) 3986/    1B87 : 00                                                  db 0
(1) 3986/    1B88 : 00                                                  db 0
(1) 3986/    1B89 : 00                                                  db 0
(1) 3986/    1B8A : 00                                                  db 0
(1) 3986/    1B8B : 00                                                  db 0
(1) 3986/    1B8C : 00                                                  db 0
(1) 3986/    1B8D : 00                                                  db 0
(1) 3986/    1B8E : 00                                                  db 0
(1) 3986/    1B8F : 00                                                  db 0
(1) 3986/    1B90 : 00                                                  db 0
(1) 3986/    1B91 : 00                                                  db 0
(1) 3986/    1B92 : 00                                                  db 0
(1) 3986/    1B93 : 00                                                  db 0
(1) 3986/    1B94 : 00                                                  db 0
(1) 3986/    1B95 : 00                                                  db 0
(1) 3986/    1B96 : 00                                                  db 0
(1) 3986/    1B97 : 00                                                  db 0
(1) 3986/    1B98 : 00                                                  db 0
(1) 3986/    1B99 : 00                                                  db 0
(1) 3986/    1B9A : 00                                                  db 0
(1) 3986/    1B9B : 00                                                  db 0
(1) 3986/    1B9C : 00                                                  db 0
(1) 3986/    1B9D : 00                                                  db 0
(1) 3986/    1B9E : 00                                                  db 0
(1) 3986/    1B9F : 00                                                  db 0
(1) 3986/    1BA0 : 00                                                  db 0
(1) 3986/    1BA1 : 00                                                  db 0
(1) 3986/    1BA2 : 00                                                  db 0
(1) 3986/    1BA3 : 00                                                  db 0
(1) 3986/    1BA4 : 00                                                  db 0
(1) 3986/    1BA5 : 00                                                  db 0
(1) 3986/    1BA6 : 00                                                  db 0
(1) 3986/    1BA7 : 00                                                  db 0
(1) 3986/    1BA8 : 00                                                  db 0
(1) 3986/    1BA9 : 00                                                  db 0
(1) 3986/    1BAA : 00                                                  db 0
(1) 3986/    1BAB : 00                                                  db 0
(1) 3986/    1BAC : 00                                                  db 0
(1) 3986/    1BAD : 00                                                  db 0
(1) 3986/    1BAE : 00                                                  db 0
(1) 3986/    1BAF : 00                                                  db 0
(1) 3986/    1BB0 : 00                                                  db 0
(1) 3986/    1BB1 : 00                                                  db 0
(1) 3986/    1BB2 : 00                                                  db 0
(1) 3986/    1BB3 : 00                                                  db 0
(1) 3986/    1BB4 : 00                                                  db 0
(1) 3986/    1BB5 : 00                                                  db 0
(1) 3986/    1BB6 : 00                                                  db 0
(1) 3986/    1BB7 : 00                                                  db 0
(1) 3986/    1BB8 : 00                                                  db 0
(1) 3986/    1BB9 : 00                                                  db 0
(1) 3986/    1BBA : 00                                                  db 0
(1) 3986/    1BBB : 00                                                  db 0
(1) 3986/    1BBC : 00                                                  db 0
(1) 3986/    1BBD : 00                                                  db 0
(1) 3986/    1BBE : 00                                                  db 0
(1) 3986/    1BBF : 00                                                  db 0
(1) 3986/    1BC0 : 00                                                  db 0
(1) 3986/    1BC1 : 00                                                  db 0
(1) 3986/    1BC2 : 00                                                  db 0
(1) 3986/    1BC3 : 00                                                  db 0
(1) 3986/    1BC4 : 00                                                  db 0
(1) 3986/    1BC5 : 00                                                  db 0
(1) 3986/    1BC6 : 00                                                  db 0
(1) 3986/    1BC7 : 00                                                  db 0
(1) 3986/    1BC8 : 00                                                  db 0
(1) 3986/    1BC9 : 00                                                  db 0
(1) 3986/    1BCA : 00                                                  db 0
(1) 3986/    1BCB : 00                                                  db 0
(1) 3986/    1BCC : 00                                                  db 0
(1) 3986/    1BCD : 00                                                  db 0
(1) 3986/    1BCE : 00                                                  db 0
(1) 3986/    1BCF : 00                                                  db 0
(1) 3986/    1BD0 : 00                                                  db 0
(1) 3986/    1BD1 : 00                                                  db 0
(1) 3986/    1BD2 : 00                                                  db 0
(1) 3986/    1BD3 : 00                                                  db 0
(1) 3986/    1BD4 : 00                                                  db 0
(1) 3986/    1BD5 : 00                                                  db 0
(1) 3986/    1BD6 : 00                                                  db 0
(1) 3986/    1BD7 : 00                                                  db 0
(1) 3986/    1BD8 : 00                                                  db 0
(1) 3986/    1BD9 : 00                                                  db 0
(1) 3986/    1BDA : 00                                                  db 0
(1) 3986/    1BDB : 00                                                  db 0
(1) 3986/    1BDC : 00                                                  db 0
(1) 3986/    1BDD : 00                                                  db 0
(1) 3986/    1BDE : 00                                                  db 0
(1) 3986/    1BDF : 00                                                  db 0
(1) 3986/    1BE0 : 00                                                  db 0
(1) 3986/    1BE1 : 00                                                  db 0
(1) 3986/    1BE2 : 00                                                  db 0
(1) 3986/    1BE3 : 00                                                  db 0
(1) 3986/    1BE4 : 00                                                  db 0
(1) 3986/    1BE5 : 00                                                  db 0
(1) 3986/    1BE6 : 00                                                  db 0
(1) 3986/    1BE7 : 00                                                  db 0
(1) 3986/    1BE8 : 00                                                  db 0
(1) 3986/    1BE9 : 00                                                  db 0
(1) 3986/    1BEA : 00                                                  db 0
(1) 3986/    1BEB : 00                                                  db 0
(1) 3986/    1BEC : 00                                                  db 0
(1) 3986/    1BED : 00                                                  db 0
(1) 3986/    1BEE : 00                                                  db 0
(1) 3986/    1BEF : 00                                                  db 0
(1) 3986/    1BF0 : 00                                                  db 0
(1) 3986/    1BF1 : 00                                                  db 0
(1) 3986/    1BF2 : 00                                                  db 0
(1) 3986/    1BF3 : 00                                                  db 0
(1) 3986/    1BF4 : 00                                                  db 0
(1) 3986/    1BF5 : 00                                                  db 0
(1) 3986/    1BF6 : 00                                                  db 0
(1) 3986/    1BF7 : 00                                                  db 0
(1) 3986/    1BF8 : 00                                                  db 0
(1) 3986/    1BF9 : 00                                                  db 0
(1) 3986/    1BFA : 00                                                  db 0
(1) 3986/    1BFB : 00                                                  db 0
(1) 3986/    1BFC : 00                                                  db 0
(1) 3986/    1BFD : 00                                                  db 0
(1) 3986/    1BFE : 00                                                  db 0
(1) 3986/    1BFF : 00                                                  db 0
(1) 3986/    1C00 : 00                                                  db 0
(1) 3986/    1C01 : 00                                                  db 0
(1) 3986/    1C02 : 00                                                  db 0
(1) 3986/    1C03 : 00                                                  db 0
(1) 3986/    1C04 : 00                                                  db 0
(1) 3986/    1C05 : 00                                                  db 0
(1) 3986/    1C06 : 00                                                  db 0
(1) 3986/    1C07 : 00                                                  db 0
(1) 3986/    1C08 : 00                                                  db 0
(1) 3986/    1C09 : 00                                                  db 0
(1) 3986/    1C0A : 00                                                  db 0
(1) 3986/    1C0B : 00                                                  db 0
(1) 3986/    1C0C : 00                                                  db 0
(1) 3986/    1C0D : 00                                                  db 0
(1) 3986/    1C0E : 00                                                  db 0
(1) 3986/    1C0F : 00                                                  db 0
(1) 3986/    1C10 : 00                                                  db 0
(1) 3986/    1C11 : 00                                                  db 0
(1) 3986/    1C12 : 00                                                  db 0
(1) 3986/    1C13 : 00                                                  db 0
(1) 3986/    1C14 : 00                                                  db 0
(1) 3986/    1C15 : 00                                                  db 0
(1) 3986/    1C16 : 00                                                  db 0
(1) 3986/    1C17 : 00                                                  db 0
(1) 3986/    1C18 : 00                                                  db 0
(1) 3986/    1C19 : 00                                                  db 0
(1) 3986/    1C1A : 00                                                  db 0
(1) 3986/    1C1B : 00                                                  db 0
(1) 3986/    1C1C : 00                                                  db 0
(1) 3986/    1C1D : 00                                                  db 0
(1) 3986/    1C1E : 00                                                  db 0
(1) 3986/    1C1F : 00                                                  db 0
(1) 3986/    1C20 : 00                                                  db 0
(1) 3986/    1C21 : 00                                                  db 0
(1) 3986/    1C22 : 00                                                  db 0
(1) 3986/    1C23 : 00                                                  db 0
(1) 3986/    1C24 : 00                                                  db 0
(1) 3986/    1C25 : 00                                                  db 0
(1) 3986/    1C26 : 00                                                  db 0
(1) 3986/    1C27 : 00                                                  db 0
(1) 3986/    1C28 : 00                                                  db 0
(1) 3986/    1C29 : 00                                                  db 0
(1) 3986/    1C2A : 00                                                  db 0
(1) 3986/    1C2B : 00                                                  db 0
(1) 3986/    1C2C : 00                                                  db 0
(1) 3986/    1C2D : 00                                                  db 0
(1) 3986/    1C2E : 00                                                  db 0
(1) 3986/    1C2F : 00                                                  db 0
(1) 3986/    1C30 : 00                                                  db 0
(1) 3986/    1C31 : 00                                                  db 0
(1) 3986/    1C32 : 00                                                  db 0
(1) 3986/    1C33 : 00                                                  db 0
(1) 3986/    1C34 : 00                                                  db 0
(1) 3986/    1C35 : 00                                                  db 0
(1) 3986/    1C36 : 00                                                  db 0
(1) 3986/    1C37 : 00                                                  db 0
(1) 3986/    1C38 : 00                                                  db 0
(1) 3986/    1C39 : 00                                                  db 0
(1) 3986/    1C3A : 00                                                  db 0
(1) 3986/    1C3B : 00                                                  db 0
(1) 3986/    1C3C : 00                                                  db 0
(1) 3986/    1C3D : 00                                                  db 0
(1) 3986/    1C3E : 00                                                  db 0
(1) 3986/    1C3F : 00                                                  db 0
(1) 3986/    1C40 : 00                                                  db 0
(1) 3986/    1C41 : 00                                                  db 0
(1) 3986/    1C42 : 00                                                  db 0
(1) 3986/    1C43 : 00                                                  db 0
(1) 3986/    1C44 : 00                                                  db 0
(1) 3986/    1C45 : 00                                                  db 0
(1) 3986/    1C46 : 00                                                  db 0
(1) 3986/    1C47 : 00                                                  db 0
(1) 3986/    1C48 : 00                                                  db 0
(1) 3986/    1C49 : 00                                                  db 0
(1) 3986/    1C4A : 00                                                  db 0
(1) 3986/    1C4B : 00                                                  db 0
(1) 3986/    1C4C : 00                                                  db 0
(1) 3986/    1C4D : 00                                                  db 0
(1) 3986/    1C4E : 00                                                  db 0
(1) 3986/    1C4F : 00                                                  db 0
(1) 3986/    1C50 : 00                                                  db 0
(1) 3986/    1C51 : 00                                                  db 0
(1) 3986/    1C52 : 00                                                  db 0
(1) 3986/    1C53 : 00                                                  db 0
(1) 3986/    1C54 : 00                                                  db 0
(1) 3986/    1C55 : 00                                                  db 0
(1) 3986/    1C56 : 00                                                  db 0
(1) 3986/    1C57 : 00                                                  db 0
(1) 3986/    1C58 : 00                                                  db 0
(1) 3986/    1C59 : 00                                                  db 0
(1) 3986/    1C5A : 00                                                  db 0
(1) 3986/    1C5B : 00                                                  db 0
(1) 3986/    1C5C : 00                                                  db 0
(1) 3986/    1C5D : 00                                                  db 0
(1) 3986/    1C5E : 00                                                  db 0
(1) 3986/    1C5F : 00                                                  db 0
(1) 3986/    1C60 : 00                                                  db 0
(1) 3986/    1C61 : 00                                                  db 0
(1) 3986/    1C62 : 00                                                  db 0
(1) 3986/    1C63 : 00                                                  db 0
(1) 3986/    1C64 : 00                                                  db 0
(1) 3986/    1C65 : 00                                                  db 0
(1) 3986/    1C66 : 00                                                  db 0
(1) 3986/    1C67 : 00                                                  db 0
(1) 3986/    1C68 : 00                                                  db 0
(1) 3986/    1C69 : 00                                                  db 0
(1) 3986/    1C6A : 00                                                  db 0
(1) 3986/    1C6B : 00                                                  db 0
(1) 3986/    1C6C : 00                                                  db 0
(1) 3986/    1C6D : 00                                                  db 0
(1) 3986/    1C6E : 00                                                  db 0
(1) 3986/    1C6F : 00                                                  db 0
(1) 3986/    1C70 : 00                                                  db 0
(1) 3986/    1C71 : 00                                                  db 0
(1) 3986/    1C72 : 00                                                  db 0
(1) 3986/    1C73 : 00                                                  db 0
(1) 3986/    1C74 : 00                                                  db 0
(1) 3986/    1C75 : 00                                                  db 0
(1) 3986/    1C76 : 00                                                  db 0
(1) 3986/    1C77 : 00                                                  db 0
(1) 3986/    1C78 : 00                                                  db 0
(1) 3986/    1C79 : 00                                                  db 0
(1) 3986/    1C7A : 00                                                  db 0
(1) 3986/    1C7B : 00                                                  db 0
(1) 3986/    1C7C : 00                                                  db 0
(1) 3986/    1C7D : 00                                                  db 0
(1) 3986/    1C7E : 00                                                  db 0
(1) 3986/    1C7F : 00                                                  db 0
(1) 3986/    1C80 : 00                                                  db 0
(1) 3986/    1C81 : 00                                                  db 0
(1) 3986/    1C82 : 00                                                  db 0
(1) 3986/    1C83 : 00                                                  db 0
(1) 3986/    1C84 : 00                                                  db 0
(1) 3986/    1C85 : 00                                                  db 0
(1) 3986/    1C86 : 00                                                  db 0
(1) 3986/    1C87 : 00                                                  db 0
(1) 3986/    1C88 : 00                                                  db 0
(1) 3986/    1C89 : 00                                                  db 0
(1) 3986/    1C8A : 00                                                  db 0
(1) 3986/    1C8B : 00                                                  db 0
(1) 3986/    1C8C : 00                                                  db 0
(1) 3986/    1C8D : 00                                                  db 0
(1) 3986/    1C8E : 00                                                  db 0
(1) 3986/    1C8F : 00                                                  db 0
(1) 3986/    1C90 : 00                                                  db 0
(1) 3986/    1C91 : 00                                                  db 0
(1) 3986/    1C92 : 00                                                  db 0
(1) 3986/    1C93 : 00                                                  db 0
(1) 3986/    1C94 : 00                                                  db 0
(1) 3986/    1C95 : 00                                                  db 0
(1) 3986/    1C96 : 00                                                  db 0
(1) 3986/    1C97 : 00                                                  db 0
(1) 3986/    1C98 : 00                                                  db 0
(1) 3986/    1C99 : 00                                                  db 0
(1) 3986/    1C9A : 00                                                  db 0
(1) 3986/    1C9B : 00                                                  db 0
(1) 3986/    1C9C : 00                                                  db 0
(1) 3986/    1C9D : 00                                                  db 0
(1) 3986/    1C9E : 00                                                  db 0
(1) 3986/    1C9F : 00                                                  db 0
(1) 3986/    1CA0 : 00                                                  db 0
(1) 3986/    1CA1 : 00                                                  db 0
(1) 3986/    1CA2 : 00                                                  db 0
(1) 3986/    1CA3 : 00                                                  db 0
(1) 3986/    1CA4 : 00                                                  db 0
(1) 3986/    1CA5 : 00                                                  db 0
(1) 3986/    1CA6 : 00                                                  db 0
(1) 3986/    1CA7 : 00                                                  db 0
(1) 3986/    1CA8 : 00                                                  db 0
(1) 3986/    1CA9 : 00                                                  db 0
(1) 3986/    1CAA : 00                                                  db 0
(1) 3986/    1CAB : 00                                                  db 0
(1) 3986/    1CAC : 00                                                  db 0
(1) 3986/    1CAD : 00                                                  db 0
(1) 3986/    1CAE : 00                                                  db 0
(1) 3986/    1CAF : 00                                                  db 0
(1) 3986/    1CB0 : 00                                                  db 0
(1) 3986/    1CB1 : 00                                                  db 0
(1) 3986/    1CB2 : 00                                                  db 0
(1) 3986/    1CB3 : 00                                                  db 0
(1) 3986/    1CB4 : 00                                                  db 0
(1) 3986/    1CB5 : 00                                                  db 0
(1) 3986/    1CB6 : 00                                                  db 0
(1) 3986/    1CB7 : 00                                                  db 0
(1) 3986/    1CB8 : 00                                                  db 0
(1) 3986/    1CB9 : 00                                                  db 0
(1) 3986/    1CBA : 00                                                  db 0
(1) 3986/    1CBB : 00                                                  db 0
(1) 3986/    1CBC : 00                                                  db 0
(1) 3986/    1CBD : 00                                                  db 0
(1) 3986/    1CBE : 00                                                  db 0
(1) 3986/    1CBF : 00                                                  db 0
(1) 3986/    1CC0 : 00                                                  db 0
(1) 3986/    1CC1 : 00                                                  db 0
(1) 3986/    1CC2 : 00                                                  db 0
(1) 3986/    1CC3 : 00                                                  db 0
(1) 3986/    1CC4 : 00                                                  db 0
(1) 3986/    1CC5 : 00                                                  db 0
(1) 3986/    1CC6 : 00                                                  db 0
(1) 3986/    1CC7 : 00                                                  db 0
(1) 3986/    1CC8 : 00                                                  db 0
(1) 3986/    1CC9 : 00                                                  db 0
(1) 3986/    1CCA : 00                                                  db 0
(1) 3986/    1CCB : 00                                                  db 0
(1) 3986/    1CCC : 00                                                  db 0
(1) 3986/    1CCD : 00                                                  db 0
(1) 3986/    1CCE : 00                                                  db 0
(1) 3986/    1CCF : 00                                                  db 0
(1) 3986/    1CD0 : 00                                                  db 0
(1) 3986/    1CD1 : 00                                                  db 0
(1) 3986/    1CD2 : 00                                                  db 0
(1) 3986/    1CD3 : 00                                                  db 0
(1) 3986/    1CD4 : 00                                                  db 0
(1) 3986/    1CD5 : 00                                                  db 0
(1) 3986/    1CD6 : 00                                                  db 0
(1) 3986/    1CD7 : 00                                                  db 0
(1) 3986/    1CD8 : 00                                                  db 0
(1) 3986/    1CD9 : 00                                                  db 0
(1) 3986/    1CDA : 00                                                  db 0
(1) 3986/    1CDB : 00                                                  db 0
(1) 3986/    1CDC : 00                                                  db 0
(1) 3986/    1CDD : 00                                                  db 0
(1) 3986/    1CDE : 00                                                  db 0
(1) 3986/    1CDF : 00                                                  db 0
(1) 3986/    1CE0 : 00                                                  db 0
(1) 3986/    1CE1 : 00                                                  db 0
(1) 3986/    1CE2 : 00                                                  db 0
(1) 3986/    1CE3 : 00                                                  db 0
(1) 3986/    1CE4 : 00                                                  db 0
(1) 3986/    1CE5 : 00                                                  db 0
(1) 3986/    1CE6 : 00                                                  db 0
(1) 3986/    1CE7 : 00                                                  db 0
(1) 3986/    1CE8 : 00                                                  db 0
(1) 3986/    1CE9 : 00                                                  db 0
(1) 3986/    1CEA : 00                                                  db 0
(1) 3986/    1CEB : 00                                                  db 0
(1) 3986/    1CEC : 00                                                  db 0
(1) 3986/    1CED : 00                                                  db 0
(1) 3986/    1CEE : 00                                                  db 0
(1) 3986/    1CEF : 00                                                  db 0
(1) 3986/    1CF0 : 00                                                  db 0
(1) 3986/    1CF1 : 00                                                  db 0
(1) 3986/    1CF2 : 00                                                  db 0
(1) 3986/    1CF3 : 00                                                  db 0
(1) 3986/    1CF4 : 00                                                  db 0
(1) 3986/    1CF5 : 00                                                  db 0
(1) 3986/    1CF6 : 00                                                  db 0
(1) 3986/    1CF7 : 00                                                  db 0
(1) 3986/    1CF8 : 00                                                  db 0
(1) 3986/    1CF9 : 00                                                  db 0
(1) 3986/    1CFA : 00                                                  db 0
(1) 3986/    1CFB : 00                                                  db 0
(1) 3986/    1CFC : 00                                                  db 0
(1) 3986/    1CFD : 00                                                  db 0
(1) 3986/    1CFE : 00                                                  db 0
(1) 3986/    1CFF : 00                                                  db 0
(1) 3986/    1D00 :                     
(1) 3987/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 3988/    1E00 :                     trkCach_0	ds MAX_RCACH	; ** MUST BE aligned **
(1) 3989/    1E40 :                     trkCach_1	ds MAX_RCACH
(1) 3990/    1E80 :                     trkCach_2	ds MAX_RCACH
(1) 3991/    1EC0 :                     trkCach_3	ds MAX_RCACH
(1) 3992/    1F00 :                     
(1) 3993/    1F00 :                     ; --------------------------------------------------------
(1) 3994/    1F00 :                     
(1) 3995/    1F00 :                     		cpu 68000	; EXIT Z80
(1) 3996/    1F00 :                     		padding off
(1) 3997/    4C18 :                     		phase Z80_TOP+*
(1) 3998/    4C18 :                     		align 2
(1) 3999/    4C18 :                     
      71/    4C18 :                     Z80_CODE_END:
      72/    4C18 :                     ; 		include "system/md/sub_dreq.asm"	; DREQ transfer only works on 880000
      73/    4C18 :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/    4C18 :                     ; ================================================================
(1)    2/    4C18 :                     ; ------------------------------------------------------------
(1)    3/    4C18 :                     ; DATA SECTION
(1)    4/    4C18 :                     ;
(1)    5/    4C18 :                     ; SOUND
(1)    6/    4C18 :                     ; ------------------------------------------------------------
(1)    7/    4C18 :                     
(1)    8/    4C18 :                     ; ticks - %gttttttt
(1)    9/    4C18 :                     ;   loc - 68k pointer
(1)   10/    4C18 :                     ;
(1)   11/    4C18 :                     ; t-Ticks
(1)   12/    4C18 :                     ; g-Use global tempo
(1)   13/    4C18 :                     gemaTrk macro ticks,loc
(1)   14/    4C18 :                     	dc.l ((ticks&$FF)<<24)|loc
(1)   15/    4C18 :                     	endm
(1)   16/    4C18 :                     
(1)   17/    4C18 :                     ; gemaHead
(1)   18/    4C18 :                     ; block point, patt point, ins point
(1)   19/    4C18 :                     ; numof_blocks,numof_patts,numof_ins
(1)   20/    4C18 :                     gemaHead macro blk,pat,ins
(1)   21/    4C18 :                     	dc.l blk
(1)   22/    4C18 :                     	dc.l pat
(1)   23/    4C18 :                     	dc.l ins
(1)   24/    4C18 :                     	endm
(1)   25/    4C18 :                     
(1)   26/    4C18 :                     ; Instrument macros
(1)   27/    4C18 :                     ; do note that some 24-bit pointers add 90h to the MSB automaticly.
(1)   28/    4C18 :                     gInsNull macro
(1)   29/    4C18 :                     	dc.b $00,$00,$00,$00
(1)   30/    4C18 :                     	dc.b $00,$00,$00,$00
(1)   31/    4C18 :                     	endm
(1)   32/    4C18 :                     
(1)   33/    4C18 :                     ; alv: attack level
(1)   34/    4C18 :                     ; atk: attack rate
(1)   35/    4C18 :                     ; slv: sustain
(1)   36/    4C18 :                     ; dky: decay rate (up)
(1)   37/    4C18 :                     ; rrt: release rate (down)
(1)   38/    4C18 :                     ; vib: (TODO)
(1)   39/    4C18 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   40/    4C18 :                     	dc.b $80,pitch,alv,atk
(1)   41/    4C18 :                     	dc.b slv,dky,rrt,vib
(1)   42/    4C18 :                     	endm
(1)   43/    4C18 :                     
(1)   44/    4C18 :                     ; same args as gInsPsg
(1)   45/    4C18 :                     ; only one more argument for the noise type:
(1)   46/    4C18 :                     ; mode: noise mode
(1)   47/    4C18 :                     ;       %tmm
(1)   48/    4C18 :                     ;        t  - Bass(0)|Noise(1)
(1)   49/    4C18 :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   50/    4C18 :                     ;
(1)   51/    4C18 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   52/    4C18 :                     	dc.b $90|mode,pitch,alv,atk
(1)   53/    4C18 :                     	dc.b slv,dky,rrt,vib
(1)   54/    4C18 :                     	endm
(1)   55/    4C18 :                     
(1)   56/    4C18 :                     ; 24-bit ROM pointer to FM patch data
(1)   57/    4C18 :                     gInsFm macro pitch,fmins
(1)   58/    4C18 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   59/    4C18 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   60/    4C18 :                     	endm
(1)   61/    4C18 :                     
(1)   62/    4C18 :                     ; Same args as gInsFm, but the last 4 words of the data
(1)   63/    4C18 :                     ; are the custom freqs for each operator in this order:
(1)   64/    4C18 :                     ; OP1 OP2 OP3 OP4
(1)   65/    4C18 :                     ;
(1)   66/    4C18 :                     ; NOTE: pitch is useless here...
(1)   67/    4C18 :                     gInsFm3	macro pitch,fmins
(1)   68/    4C18 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   69/    4C18 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   70/    4C18 :                     	endm
(1)   71/    4C18 :                     
(1)   72/    4C18 :                     ; start: Pointer to sample data:
(1)   73/    4C18 :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   74/    4C18 :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   75/    4C18 :                     ;        dc.b (sound data)	; <-- Then the actual sound data
(1)   76/    4C18 :                     ;
(1)   77/    4C18 :                     ; flags: $00 - No Loop
(1)   78/    4C18 :                     ; 	 $01 - Loop
(1)   79/    4C18 :                     gInsDac	macro pitch,start,flags
(1)   80/    4C18 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   81/    4C18 :                     	dc.b start&$FF,0,0,0
(1)   82/    4C18 :                     	endm
(1)   83/    4C18 :                     
(1)   84/    4C18 :                     ; start: Pointer to sample data:
(1)   85/    4C18 :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   86/    4C18 :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   87/    4C18 :                     ;        dc.b (data)		; Then the actual sound data
(1)   88/    4C18 :                     ;
(1)   89/    4C18 :                     ; flags: %00SL
(1)   90/    4C18 :                     ;            L - Loop sample No/Yes
(1)   91/    4C18 :                     ;           S  - Sample data is on STEREO
(1)   92/    4C18 :                     gInsPwm	macro pitch,start,flags
(1)   93/    4C18 :                      if MARS
(1)   94/    4C18 :                     	dc.b $D0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   95/    4C18 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   96/    4C18 :                      else
(1)   97/    4C18 :                     	dc.b $00,$00,$00,$00
(1)   98/    4C18 :                     	dc.b $00,$00,$00,$00
(1)   99/    4C18 :                      endif
(1)  100/    4C18 :                     	endm
(1)  101/    4C18 :                     
(1)  102/    4C18 :                     ; ------------------------------------------------------------
(1)  103/    4C18 :                     
(1)  104/    4C18 :                     	align $8000
(1)  105/    8000 :                     
(1)  106/    8000 :                     ; ------------------------------------------------------------
(1)  107/    8000 :                     ; Nikona MAIN track-list
(1)  108/    8000 :                     ;
(1)  109/    8000 :                     ; ONLY the ticks can be set here.
(1)  110/    8000 :                     ; You can change the ticks mid-track using effect A
(1)  111/    8000 :                     ;
(1)  112/    8000 :                     ; Add $80 to the ticks value to use the GLOBAL
(1)  113/    8000 :                     ; sub-beats
(1)  114/    8000 :                     ;
(1)  115/    8000 :                     ; To set the sub-beats send the SetBeats command
(1)  116/    8000 :                     ; BEFORE playing your track:
(1)  117/    8000 :                     ; 	move.w	#new_beats,d0
(1)  118/    8000 :                     ; 	bsr	gemaSetBeats
(1)  119/    8000 :                     ; 	move.w	#track_id,d0
(1)  120/    8000 :                     ;	bsr	gemaPlayTrack
(1)  121/    8000 :                     ; ------------------------------------------------------------
(1)  122/    8000 :                     
(1)  123/    8000 :                     Gema_MasterList:
(1)  124/    8000 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0	; Ticks, Track pointer (Default tempo: 150/120)
(1)  124/    8000 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  125/    8004 : (MACRO)             	gemaTrk $80|6,GemaTrk_BodyOver
(1)  125/    8004 : 8601 2434                   dc.l (($80|6&$FF)<<24)|GEMATRK_BODYOVER
(1)  126/    8008 : (MACRO)             	gemaTrk 7,GemaTrk_MOVEME
(1)  126/    8008 : 0701 2C96                   dc.l ((7&$FF)<<24)|GEMATRK_MOVEME
(1)  127/    800C : (MACRO)             	gemaTrk 4,GemaTrk_xtrim
(1)  127/    800C : 0401 3BC8                   dc.l ((4&$FF)<<24)|GEMATRK_XTRIM
(1)  128/    8010 : (MACRO)             	gemaTrk 4,GemaTrk_TEST_6
(1)  128/    8010 : 0401 0808                   dc.l ((4&$FF)<<24)|GEMATRK_TEST_6
(1)  129/    8014 : (MACRO)             	gemaTrk 7,GemaTrk_TEST_1
(1)  129/    8014 : 0700 9CFC                   dc.l ((7&$FF)<<24)|GEMATRK_TEST_1
(1)  130/    8018 : (MACRO)             	gemaTrk $80|3,GemaTrk_TEST_2
(1)  130/    8018 : 8300 8080                   dc.l (($80|3&$FF)<<24)|GEMATRK_TEST_2
(1)  131/    801C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_3
(1)  131/    801C : 0300 D1D6                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_3
(1)  132/    8020 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_4
(1)  132/    8020 : 0300 EAA0                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_4
(1)  133/    8024 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_5
(1)  133/    8024 : 0300 FFBC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_5
(1)  134/    8028 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  134/    8028 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  135/    802C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  135/    802C : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  136/    8030 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  136/    8030 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  137/    8034 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  137/    8034 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  138/    8038 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  138/    8038 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  139/    803C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  139/    803C : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  140/    8040 :                     
(1)  141/    8040 : (MACRO)             	gemaTrk $80|4,GemaTrk_TEST_1
(1)  141/    8040 : 8400 9CFC                   dc.l (($80|4&$FF)<<24)|GEMATRK_TEST_1
(1)  142/    8044 : (MACRO)             	gemaTrk $80|2,GemaTrk_TEST_0
(1)  142/    8044 : 8201 45AC                   dc.l (($80|2&$FF)<<24)|GEMATRK_TEST_0
(1)  143/    8048 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  143/    8048 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  144/    804C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  144/    804C : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  145/    8050 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  145/    8050 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  146/    8054 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  146/    8054 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  147/    8058 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  147/    8058 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  148/    805C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  148/    805C : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  149/    8060 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  149/    8060 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  150/    8064 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  150/    8064 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  151/    8068 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  151/    8068 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  152/    806C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  152/    806C : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  153/    8070 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  153/    8070 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  154/    8074 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  154/    8074 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  155/    8078 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  155/    8078 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  156/    807C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  156/    807C : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  157/    8080 :                     
(1)  158/    8080 :                     ; ------------------------------------------------------------
(1)  159/    8080 :                     ; BGM tracks
(1)  160/    8080 :                     ; ------------------------------------------------------------
(1)  161/    8080 :                     
(1)  162/    8080 :                     GemaTrk_TEST_2:
(1)  163/    8080 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  163/    8080 : 0000 808C                   dc.l .BLK
(1)  163/    8084 : 0000 80A2                   dc.l .PAT
(1)  163/    8088 : 0000 9CC4                   dc.l .INS
(1)  164/    808C :                     .blk:
(1)  165/    808C :                     	binclude "sound/tracks/wegot_blk.bin"
(1)  166/    80A1 :                     	align 2
(1)  167/    80A2 :                     .pat:
(1)  168/    80A2 :                     	binclude "sound/tracks/wegot_patt.bin"
(1)  169/    9CC3 :                     	align 2
(1)  170/    9CC4 :                     .ins:
(1)  171/    9CC4 : (MACRO)             	gInsFm 0,FmIns_Synth_plus
(1)  171/    9CC4 : A000 0147                   dc.b $A0,0,((FMINS_SYNTH_PLUS>>16)&$FF),((FMINS_SYNTH_PLUS>>8)&$FF)
(1)  171/    9CC8 : D500 0000                   dc.b FMINS_SYNTH_PLUS&$FF,$00,$00,$00
(1)  172/    9CCC : (MACRO)             	gInsFm 0,FmIns_Bass_4
(1)  172/    9CCC : A000 0147                   dc.b $A0,0,((FMINS_BASS_4>>16)&$FF),((FMINS_BASS_4>>8)&$FF)
(1)  172/    9CD0 : 9500 0000                   dc.b FMINS_BASS_4&$FF,$00,$00,$00
(1)  173/    9CD4 : (MACRO)             	gInsDac 0,DacIns_wegot_kick,0
(1)  173/    9CD4 : C000 01AC                   dc.b $C0|0,0,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  173/    9CD8 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  174/    9CDC : (MACRO)             	gInsFm 0,FmIns_Bass_club
(1)  174/    9CDC : A000 0147                   dc.b $A0,0,((FMINS_BASS_CLUB>>16)&$FF),((FMINS_BASS_CLUB>>8)&$FF)
(1)  174/    9CE0 : F500 0000                   dc.b FMINS_BASS_CLUB&$FF,$00,$00,$00
(1)  175/    9CE4 : (MACRO)             	gInsFm3 0,FmIns_Sp_Openhat
(1)  175/    9CE4 : B000 0147                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  175/    9CE8 : 1D00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  176/    9CEC : (MACRO)             	gInsPsg 0,$10,$04,$20,$04,$02,$00;gInsFm -12,FmIns_Trumpet_carnival;;
(1)  176/    9CEC : 8000 1004                   dc.b $80,0,$10,$04
(1)  176/    9CF0 : 2004 0200                   dc.b $20,$04,$02,$00
(1)  177/    9CF4 : (MACRO)             	gInsDac 0,DacIns_wegot_crash,0
(1)  177/    9CF4 : C000 0180                   dc.b $C0|0,0,((DACINS_WEGOT_CRASH>>16)&$FF),((DACINS_WEGOT_CRASH>>8)&$FF)
(1)  177/    9CF8 : 0000 0000                   dc.b DACINS_WEGOT_CRASH&$FF,0,0,0
(1)  178/    9CFC :                     
(1)  179/    9CFC :                     GemaTrk_TEST_1:
(1)  180/    9CFC : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  180/    9CFC : 0000 9D08                   dc.l .BLK
(1)  180/    9D00 : 0000 9D17                   dc.l .PAT
(1)  180/    9D04 : 0000 D166                   dc.l .INS
(1)  181/    9D08 :                     .blk:
(1)  182/    9D08 :                     	binclude "sound/tracks/vectr_blk.bin"
(1)  183/    9D17 :                     .pat:
(1)  184/    9D17 :                     	binclude "sound/tracks/vectr_patt.bin"
(1)  185/    D166 :                     .ins:
(1)  186/    D166 : (MACRO)             	gInsPwm -17,SmpIns_Vctr01,%001
(1)  186/    D166 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  186/    D16A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  187/    D16E : (MACRO)             	gInsFm -3,FmIns_brass_eur
(1)  187/    D16E : A0FD 0148                   dc.b $A0,-3,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  187/    D172 : 7500 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  188/    D176 : (MACRO)             	gInsPwm -15,SmpIns_VctrCrash,0
(1)  188/    D176 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  188/    D17A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  189/    D17E : (MACRO)             	gInsPwm -17,SmpIns_Vctr04,%001
(1)  189/    D17E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  189/    D182 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  190/    D186 : (MACRO)             	gInsNull
(1)  190/    D186 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  190/    D18A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  191/    D18E : (MACRO)             	gInsPwm -15,SmpIns_VctrTimpani,%101
(1)  191/    D18E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  191/    D192 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  192/    D196 : (MACRO)             	gInsFm -22,FmIns_Bass_8
(1)  192/    D196 : A0EA 0147                   dc.b $A0,-22,((FMINS_BASS_8>>16)&$FF),((FMINS_BASS_8>>8)&$FF)
(1)  192/    D19A : B500 0000                   dc.b FMINS_BASS_8&$FF,$00,$00,$00
(1)  193/    D19E : (MACRO)             	gInsPsg 0,$40,$08,$10,$01,$01,$00
(1)  193/    D19E : 8000 4008                   dc.b $80,0,$40,$08
(1)  193/    D1A2 : 1001 0100                   dc.b $10,$01,$01,$00
(1)  194/    D1A6 : (MACRO)             	gInsNull;gInsPsgN 0,$40,$08,$10,$01,$01,$00,%110
(1)  194/    D1A6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  194/    D1AA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  195/    D1AE : (MACRO)             	gInsPwm -17,SmpIns_VctrSnare,%000
(1)  195/    D1AE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  195/    D1B2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  196/    D1B6 : (MACRO)             	gInsPwm -17,SmpIns_VctrKick,%000
(1)  196/    D1B6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  196/    D1BA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  197/    D1BE : (MACRO)             	gInsFm3 0,FmIns_Sp_Closedhat
(1)  197/    D1BE : B000 0147                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  197/    D1C2 : 4500 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  198/    D1C6 : (MACRO)             	gInsFm3 0,FmIns_Sp_Openhat
(1)  198/    D1C6 : B000 0147                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  198/    D1CA : 1D00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  199/    D1CE : (MACRO)             	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  199/    D1CE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  199/    D1D2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  200/    D1D6 :                     .ins_e:
(1)  201/    D1D6 :                     
(1)  202/    D1D6 :                     GemaTrk_TEST_3:
(1)  203/    D1D6 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  203/    D1D6 : 0000 D1E2                   dc.l .BLK
(1)  203/    D1DA : 0000 D1F0                   dc.l .PAT
(1)  203/    D1DE : 0000 EA80                   dc.l .INS
(1)  204/    D1E2 :                     .blk:
(1)  205/    D1E2 :                     	binclude "sound/tracks/gigalo_blk.bin"
(1)  206/    D1EF :                     	align 2
(1)  207/    D1F0 :                     .pat:
(1)  208/    D1F0 :                     	binclude "sound/tracks/gigalo_patt.bin"
(1)  209/    EA80 :                     	align 2
(1)  210/    EA80 :                     .ins:
(1)  211/    EA80 : (MACRO)             	gInsPsg 0,$10,$04,$20,$06,$08,$00
(1)  211/    EA80 : 8000 1004                   dc.b $80,0,$10,$04
(1)  211/    EA84 : 2006 0800                   dc.b $20,$06,$08,$00
(1)  212/    EA88 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$04,$20,$00,%100
(1)  212/    EA88 : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  212/    EA8C : 0004 2000                   dc.b $00,$04,$20,$00
(1)  213/    EA90 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$04,$20,$00,%101
(1)  213/    EA90 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  213/    EA94 : 0004 2000                   dc.b $00,$04,$20,$00
(1)  214/    EA98 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$04,$40,$00,%110
(1)  214/    EA98 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  214/    EA9C : 0004 4000                   dc.b $00,$04,$40,$00
(1)  215/    EAA0 :                     
(1)  216/    EAA0 :                     GemaTrk_TEST_4:
(1)  217/    EAA0 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  217/    EAA0 : 0000 EAAC                   dc.l .BLK
(1)  217/    EAA4 : 0000 EABE                   dc.l .PAT
(1)  217/    EAA8 : 0000 FFA4                   dc.l .INS
(1)  218/    EAAC :                     .blk:
(1)  219/    EAAC :                     	binclude "sound/tracks/temple_blk.bin"
(1)  220/    EABE :                     	align 2
(1)  221/    EABE :                     .pat:
(1)  222/    EABE :                     	binclude "sound/tracks/temple_patt.bin"
(1)  223/    FFA4 :                     	align 2
(1)  224/    FFA4 :                     .ins:
(1)  225/    FFA4 : (MACRO)             	gInsPsg 0,$00,$08,$20,$06,$03,$00
(1)  225/    FFA4 : 8000 0008                   dc.b $80,0,$00,$08
(1)  225/    FFA8 : 2006 0300                   dc.b $20,$06,$03,$00
(1)  226/    FFAC : (MACRO)             	gInsPsg 0,$00,$00,$30,$04,$04,$00
(1)  226/    FFAC : 8000 0000                   dc.b $80,0,$00,$00
(1)  226/    FFB0 : 3004 0400                   dc.b $30,$04,$04,$00
(1)  227/    FFB4 : (MACRO)             	gInsPsgN 0,$00,$30,$08,$10,$38,$01,%101
(1)  227/    FFB4 : 9500 0030                   dc.b $90|%101,0,$00,$30
(1)  227/    FFB8 : 0810 3801                   dc.b $08,$10,$38,$01
(1)  228/    FFBC :                     
(1)  229/    FFBC :                     GemaTrk_TEST_5:
(1)  230/    FFBC : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  230/    FFBC : 0000 FFC8                   dc.l .BLK
(1)  230/    FFC0 : 0000 FFD0                   dc.l .PAT
(1)  230/    FFC4 : 0001 07F8                   dc.l .INS
(1)  231/    FFC8 :                     .blk:
(1)  232/    FFC8 :                     	binclude "sound/tracks/brinstr_blk.bin"
(1)  233/    FFD0 :                     	align 2
(1)  234/    FFD0 :                     .pat:
(1)  235/    FFD0 :                     	binclude "sound/tracks/brinstr_patt.bin"
(1)  236/   107F7 :                     	align 2
(1)  237/   107F8 :                     .ins:
(1)  238/   107F8 : (MACRO)             	gInsPsg 0,$40,$08,$20,$01,$04,$00
(1)  238/   107F8 : 8000 4008                   dc.b $80,0,$40,$08
(1)  238/   107FC : 2001 0400                   dc.b $20,$01,$04,$00
(1)  239/   10800 : (MACRO)             	gInsPsgN 0,$10,$08,$20,$02,$01,$00,%011
(1)  239/   10800 : 9300 1008                   dc.b $90|%011,0,$10,$08
(1)  239/   10804 : 2002 0100                   dc.b $20,$02,$01,$00
(1)  240/   10808 :                     
(1)  241/   10808 :                     GemaTrk_TEST_6:
(1)  242/   10808 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  242/   10808 : 0001 0814                   dc.l .BLK
(1)  242/   1080C : 0001 081C                   dc.l .PAT
(1)  242/   10810 : 0001 23B4                   dc.l .INS
(1)  243/   10814 :                     .blk:
(1)  244/   10814 :                     	binclude "sound/tracks/cirno_blk.bin"
(1)  245/   1081B :                     	align 2
(1)  246/   1081C :                     .pat:
(1)  247/   1081C :                     	binclude "sound/tracks/cirno_patt.bin"
(1)  248/   123B4 :                     	align 2
(1)  249/   123B4 :                     .ins:
(1)  250/   123B4 : (MACRO)             	gInsFm -12,FmIns_PianoM1
(1)  250/   123B4 : A0F4 0149                   dc.b $A0,-12,((FMINS_PIANOM1>>16)&$FF),((FMINS_PIANOM1>>8)&$FF)
(1)  250/   123B8 : 3500 0000                   dc.b FMINS_PIANOM1&$FF,$00,$00,$00
(1)  251/   123BC : (MACRO)             	gInsNull
(1)  251/   123BC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  251/   123C0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  252/   123C4 : (MACRO)             	gInsFm -12,FmIns_Bass_4
(1)  252/   123C4 : A0F4 0147                   dc.b $A0,-12,((FMINS_BASS_4>>16)&$FF),((FMINS_BASS_4>>8)&$FF)
(1)  252/   123C8 : 9500 0000                   dc.b FMINS_BASS_4&$FF,$00,$00,$00
(1)  253/   123CC : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$20,$00,%110
(1)  253/   123CC : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  253/   123D0 : 0000 2000                   dc.b $00,$00,$20,$00
(1)  254/   123D4 : (MACRO)             	gInsDac +12,DacIns_wegot_kick,0
(1)  254/   123D4 : C00C 01AC                   dc.b $C0|0,+12,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  254/   123D8 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  255/   123DC : (MACRO)             	gInsDac +12,DacIns_wegot_kick,0
(1)  255/   123DC : C00C 01AC                   dc.b $C0|0,+12,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  255/   123E0 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  256/   123E4 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$18,$00,%110
(1)  256/   123E4 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  256/   123E8 : 0000 1800                   dc.b $00,$00,$18,$00
(1)  257/   123EC : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$08,$00,%100
(1)  257/   123EC : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  257/   123F0 : 0000 0800                   dc.b $00,$00,$08,$00
(1)  258/   123F4 : (MACRO)             	gInsDac +6,DacIns_Snare_1,0
(1)  258/   123F4 : C006 01B4                   dc.b $C0|0,+6,((DACINS_SNARE_1>>16)&$FF),((DACINS_SNARE_1>>8)&$FF)
(1)  258/   123F8 : 4400 0000                   dc.b DACINS_SNARE_1&$FF,0,0,0
(1)  259/   123FC : (MACRO)             	gInsFm -12,FmIns_Trumpet_2
(1)  259/   123FC : A0F4 014A                   dc.b $A0,-12,((FMINS_TRUMPET_2>>16)&$FF),((FMINS_TRUMPET_2>>8)&$FF)
(1)  259/   12400 : 7500 0000                   dc.b FMINS_TRUMPET_2&$FF,$00,$00,$00
(1)  260/   12404 : (MACRO)             	gInsPsg 0,$10,$20,$40,$01,$01,$00
(1)  260/   12404 : 8000 1020                   dc.b $80,0,$10,$20
(1)  260/   12408 : 4001 0100                   dc.b $40,$01,$01,$00
(1)  261/   1240C : (MACRO)             	gInsNull
(1)  261/   1240C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  261/   12410 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  262/   12414 : (MACRO)             	gInsNull
(1)  262/   12414 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  262/   12418 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  263/   1241C : (MACRO)             	gInsNull
(1)  263/   1241C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  263/   12420 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  264/   12424 : (MACRO)             	gInsNull
(1)  264/   12424 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  264/   12428 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  265/   1242C : (MACRO)             	gInsNull
(1)  265/   1242C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  265/   12430 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  266/   12434 :                     
(1)  267/   12434 :                     ; ------------------------------------------------------------
(1)  268/   12434 :                     
(1)  269/   12434 :                     GemaTrk_BodyOver:
(1)  270/   12434 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  270/   12434 : 0001 2440                   dc.l .BLK
(1)  270/   12438 : 0001 2456                   dc.l .PAT
(1)  270/   1243C : 0001 2C4E                   dc.l .INS
(1)  271/   12440 :                     .blk:
(1)  272/   12440 :                     	binclude "sound/tracks/bodyover_blk.bin"
(1)  273/   12455 :                     	align 2
(1)  274/   12456 :                     .pat:
(1)  275/   12456 :                     	binclude "sound/tracks/bodyover_patt.bin"
(1)  276/   12C4D :                     	align 2
(1)  277/   12C4E :                     .ins:
(1)  278/   12C4E : (MACRO)             	gInsPwm 0,SmpIns_Nadie,%10
(1)  278/   12C4E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  278/   12C52 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  279/   12C56 : (MACRO)             	gInsPwm 0,SmpIns_Kick,%10
(1)  279/   12C56 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  279/   12C5A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  280/   12C5E : (MACRO)             	gInsPwm 0,SmpIns_Snare_2,%00
(1)  280/   12C5E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  280/   12C62 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  281/   12C66 : (MACRO)             	gInsFm -24,FmIns_Bass_groove_2
(1)  281/   12C66 : A0E8 0149                   dc.b $A0,-24,((FMINS_BASS_GROOVE_2>>16)&$FF),((FMINS_BASS_GROOVE_2>>8)&$FF)
(1)  281/   12C6A : D500 0000                   dc.b FMINS_BASS_GROOVE_2&$FF,$00,$00,$00
(1)  282/   12C6E : (MACRO)             	gInsFm -36,FmIns_Ding_Baseball
(1)  282/   12C6E : A0DC 0148                   dc.b $A0,-36,((FMINS_DING_BASEBALL>>16)&$FF),((FMINS_DING_BASEBALL>>8)&$FF)
(1)  282/   12C72 : D500 0000                   dc.b FMINS_DING_BASEBALL&$FF,$00,$00,$00
(1)  283/   12C76 : (MACRO)             	gInsFm 0,FmIns_Trumpet_1
(1)  283/   12C76 : A000 0148                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  283/   12C7A : 3500 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  284/   12C7E : (MACRO)             	gInsFm3 0,FmIns_Sp_ClosedHat
(1)  284/   12C7E : B000 0147                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  284/   12C82 : 4500 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  285/   12C86 : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  285/   12C86 : B000 0147                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  285/   12C8A : 1D00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  286/   12C8E : (MACRO)             	gInsPsg +12,$00,$00,$00,$00,$02,0
(1)  286/   12C8E : 800C 0000                   dc.b $80,+12,$00,$00
(1)  286/   12C92 : 0000 0200                   dc.b $00,$00,$02,0
(1)  287/   12C96 :                     
(1)  288/   12C96 :                     GemaTrk_MOVEME:
(1)  289/   12C96 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  289/   12C96 : 0001 2CA2                   dc.l .BLK
(1)  289/   12C9A : 0001 2CBA                   dc.l .PAT
(1)  289/   12C9E : 0001 3B30                   dc.l .INS
(1)  290/   12CA2 :                     .blk:
(1)  291/   12CA2 :                     	binclude "sound/tracks/moveme_blk.bin"
(1)  292/   12CB9 :                     	align 2
(1)  293/   12CBA :                     .pat:
(1)  294/   12CBA :                     	binclude "sound/tracks/moveme_patt.bin"
(1)  295/   13B2F :                     	align 2
(1)  296/   13B30 :                     .ins:
(1)  297/   13B30 : (MACRO)             	gInsPwm 0,SmpIns_MoveMe_Hit,%10
(1)  297/   13B30 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  297/   13B34 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  298/   13B38 : (MACRO)             	gInsFm 0,FmIns_Bass_Duck
(1)  298/   13B38 : A000 014A                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(1)  298/   13B3C : 3500 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(1)  299/   13B40 : (MACRO)             	gInsPwm 0,SmpIns_MoveMe_Brass,%11
(1)  299/   13B40 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  299/   13B44 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  300/   13B48 : (MACRO)             	gInsFm 0,FmIns_ClosedHat
(1)  300/   13B48 : A000 0149                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  300/   13B4C : 1500 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  301/   13B50 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(1)  301/   13B50 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  301/   13B54 : 0000 0400                   dc.b $00,$00,$04,0
(1)  302/   13B58 : (MACRO)             	gInsFm -12,FmIns_HBeat_tom
(1)  302/   13B58 : A0F4 014C                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  302/   13B5C : 1500 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  303/   13B60 : (MACRO)             	gInsPwm 0,SmpIns_Snare_moveme,%10
(1)  303/   13B60 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  303/   13B64 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  304/   13B68 : (MACRO)             	gInsPwm 0,SmpIns_Kick,%10
(1)  304/   13B68 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  304/   13B6C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  305/   13B70 : (MACRO)             	gInsFm -12,FmIns_Trumpet_carnival
(1)  305/   13B70 : A0F4 0148                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  305/   13B74 : 5500 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  306/   13B78 : (MACRO)             	gInsPsg 0,$20,$20,$10,$01,$08,0
(1)  306/   13B78 : 8000 2020                   dc.b $80,0,$20,$20
(1)  306/   13B7C : 1001 0800                   dc.b $10,$01,$08,0
(1)  307/   13B80 : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  307/   13B80 : B000 0147                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  307/   13B84 : 1D00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  308/   13B88 : (MACRO)             	gInsNull;gInsPwm -17,SmpIns_MyTime,%10
(1)  308/   13B88 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  308/   13B8C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  309/   13B90 : (MACRO)             	gInsPsg +12,$20,$10,$10,$0C,$0C,0
(1)  309/   13B90 : 800C 2010                   dc.b $80,+12,$20,$10
(1)  309/   13B94 : 100C 0C00                   dc.b $10,$0C,$0C,0
(1)  310/   13B98 : (MACRO)             	gInsPsg 0,$00,$00,$00,$00,$06,0
(1)  310/   13B98 : 8000 0000                   dc.b $80,0,$00,$00
(1)  310/   13B9C : 0000 0600                   dc.b $00,$00,$06,0
(1)  311/   13BA0 : (MACRO)             	gInsNull
(1)  311/   13BA0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  311/   13BA4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  312/   13BA8 : (MACRO)             	gInsNull
(1)  312/   13BA8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  312/   13BAC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  313/   13BB0 : (MACRO)             	gInsNull
(1)  313/   13BB0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  313/   13BB4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  314/   13BB8 : (MACRO)             	gInsNull
(1)  314/   13BB8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  314/   13BBC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  315/   13BC0 : (MACRO)             	gInsNull
(1)  315/   13BC0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  315/   13BC4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  316/   13BC8 :                     
(1)  317/   13BC8 :                     GemaTrk_xtrim:
(1)  318/   13BC8 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  318/   13BC8 : 0001 3BD4                   dc.l .BLK
(1)  318/   13BCC : 0001 3BDA                   dc.l .PAT
(1)  318/   13BD0 : 0001 4584                   dc.l .INS
(1)  319/   13BD4 :                     .blk:
(1)  320/   13BD4 :                     	binclude "sound/tracks/xtrim_blk.bin"
(1)  321/   13BD9 :                     	align 2
(1)  322/   13BDA :                     .pat:
(1)  323/   13BDA :                     	binclude "sound/tracks/xtrim_patt.bin"
(1)  324/   14583 :                     	align 2
(1)  325/   14584 :                     .ins:
(1)  326/   14584 : (MACRO)             	gInsFm 0,FmIns_Bass_calm
(1)  326/   14584 : A000 0148                   dc.b $A0,0,((FMINS_BASS_CALM>>16)&$FF),((FMINS_BASS_CALM>>8)&$FF)
(1)  326/   14588 : 1500 0000                   dc.b FMINS_BASS_CALM&$FF,$00,$00,$00
(1)  327/   1458C : (MACRO)             	gInsFm 0,FmIns_ClosedHat
(1)  327/   1458C : A000 0149                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  327/   14590 : 1500 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  328/   14594 : (MACRO)             	gInsPsg 0,$00,$20,$00,$04,$04,0
(1)  328/   14594 : 8000 0020                   dc.b $80,0,$00,$20
(1)  328/   14598 : 0004 0400                   dc.b $00,$04,$04,0
(1)  329/   1459C : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  329/   1459C : B000 0147                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  329/   145A0 : 1D00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  330/   145A4 : (MACRO)             	gInsDac 0,DacIns_wegot_kick,%10
(1)  330/   145A4 : C200 01AC                   dc.b $C0|%10,0,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  330/   145A8 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  331/   145AC :                     
(1)  332/   145AC :                     ; ------------------------------------------------------------
(1)  333/   145AC :                     ; FIRST TRACK
(1)  334/   145AC :                     
(1)  335/   145AC :                     GemaTrk_TEST_0:
(1)  336/   145AC : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  336/   145AC : 0001 45B8                   dc.l .BLK
(1)  336/   145B0 : 0001 45BA                   dc.l .PAT
(1)  336/   145B4 : 0001 46ED                   dc.l .INS
(1)  337/   145B8 :                     
(1)  338/   145B8 :                     ; Max. 24 blocks
(1)  339/   145B8 :                     .blk:
(1)  340/   145B8 :                     	binclude "sound/tracks/test_blk.bin"
(1)  341/   145BA :                     ; Max. 24 patterns
(1)  342/   145BA :                     .pat:
(1)  343/   145BA :                     	binclude "sound/tracks/test_patt.bin"
(1)  344/   146ED :                     
(1)  345/   146ED :                     ; Max. 16 instruments
(1)  346/   146ED :                     ; Starting from 1.
(1)  347/   146ED :                     .ins:
(1)  348/   146ED : (MACRO)             	gInsPsg 0,$20,$20,$10,$00,$04,0
(1)  348/   146ED : 8000 2020                   dc.b $80,0,$20,$20
(1)  348/   146F1 : 1000 0400                   dc.b $10,$00,$04,0
(1)  349/   146F5 : (MACRO)             	gInsPsgN +12,$20,$20,$10,$00,$04,0,%011
(1)  349/   146F5 : 930C 2020                   dc.b $90|%011,+12,$20,$20
(1)  349/   146F9 : 1000 0400                   dc.b $10,$00,$04,0
(1)  350/   146FD : (MACRO)             	gInsFm -12,FmIns_Bass_calm
(1)  350/   146FD : A0F4 0148                   dc.b $A0,-12,((FMINS_BASS_CALM>>16)&$FF),((FMINS_BASS_CALM>>8)&$FF)
(1)  350/   14701 : 1500 0000                   dc.b FMINS_BASS_CALM&$FF,$00,$00,$00
(1)  351/   14705 : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  351/   14705 : B000 0147                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  351/   14709 : 1D00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  352/   1470D : (MACRO)             	gInsDac -12,DacIns_Snare_1,0
(1)  352/   1470D : C0F4 01B4                   dc.b $C0|0,-12,((DACINS_SNARE_1>>16)&$FF),((DACINS_SNARE_1>>8)&$FF)
(1)  352/   14711 : 4400 0000                   dc.b DACINS_SNARE_1&$FF,0,0,0
(1)  353/   14715 : (MACRO)             	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  353/   14715 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  353/   14719 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  354/   1471D :                     
      74/   1471D :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/   1471D :                     ; ====================================================================
(1)    2/   1471D :                     ; FM instrument patches
(1)    3/   1471D :                     ;
(1)    4/   1471D :                     ; This must be located at the 880000 area.
(1)    5/   1471D :                     ; 68K BANK 0 only
(1)    6/   1471D :                     ; ====================================================================
(1)    7/   1471D :                     
(1)    8/   1471D :                     ; Savestate FM data is located at: $2478
(1)    9/   1471D :                     ;
(1)   10/   1471D :                     ; Sizes:
(1)   11/   1471D :                     ; Normal FM ins: $20
(1)   12/   1471D :                     ; Special FM ins: $28
(1)   13/   1471D :                     ;
(1)   14/   1471D :                     ; FORMAT:
(1)   15/   1471D :                     ; dc.b $30,$34,$38,$3C
(1)   16/   1471D :                     ; dc.b $40,$44,$48,$4C
(1)   17/   1471D :                     ; dc.b $50,$54,$58,$5C
(1)   18/   1471D :                     ; dc.b $60,$64,$68,$6C
(1)   19/   1471D :                     ; dc.b $70,$74,$78,$7C
(1)   20/   1471D :                     ; dc.b $80,$84,$88,$8C
(1)   21/   1471D :                     ; dc.b $90,$94,$98,$9C
(1)   22/   1471D :                     ; db.b $B0,$B4,$22,$28
(1)   23/   1471D :                     ;
(1)   24/   1471D :                     ; $22 LFO: %0000evvv
(1)   25/   1471D :                     ; e - Enable
(1)   26/   1471D :                     ; v - Value
(1)   27/   1471D :                     ;
(1)   28/   1471D :                     ; $28 KEYS: %oooo0000
(1)   29/   1471D :                     ; o - Operators 4-1
(1)   30/   1471D :                     
(1)   31/   1471D :                     ; FM3 Special
(1)   32/   1471D :                     FmIns_Sp_OpenHat:
(1)   33/   1471D :                     		binclude "sound/instr/fm/fm3_openhat.gsx",$2478,$28
(1)   34/   14745 :                     FmIns_Sp_ClosedHat:
(1)   35/   14745 :                     		binclude "sound/instr/fm/fm3_closedhat.gsx",$2478,$28
(1)   36/   1476D :                     ; FmIns_Sp_Explosion:
(1)   37/   1476D :                     ; 		binclude "sound/instr/fm/fm3_sfx_boomworm.gsx",$2478,$28
(1)   38/   1476D :                     FmIns_Sp_Cowbell:
(1)   39/   1476D :                     		binclude "sound/instr/fm/fm3_cowbell.gsx",$2478,$28
(1)   40/   14795 :                     ; FmIns_Sp_Cork:
(1)   41/   14795 :                     ; 		binclude "sound/instr/fm/fm3_sfx_cork.gsx",$2478,$28
(1)   42/   14795 :                     ;
(1)   43/   14795 :                     ; FmIns3_Snare_Alien:
(1)   44/   14795 :                     ; 		binclude "sound/instr/fm/fm3_drumsnare_alien.gsx",$2478,$28
(1)   45/   14795 :                     ; FmIns3_Kick_Alien:
(1)   46/   14795 :                     ; 		binclude "sound/instr/fm/fm3_drumkick_alien.gsx",$2478,$28
(1)   47/   14795 :                     ;
(1)   48/   14795 :                     FmIns_Bass_4:
(1)   49/   14795 :                     		binclude "sound/instr/fm/bass_4.gsx",$2478,$20
(1)   50/   147B5 :                     FmIns_Bass_8:
(1)   51/   147B5 :                     		binclude "sound/instr/fm/bass_8.gsx",$2478,$20
(1)   52/   147D5 :                     
(1)   53/   147D5 :                     
(1)   54/   147D5 :                     FmIns_Synth_Plus:
(1)   55/   147D5 :                     		binclude "sound/instr/fm/OLD_synthplus.gsx",$2478,$20
(1)   56/   147F5 :                     FmIns_Bass_club:
(1)   57/   147F5 :                     		binclude "sound/instr/fm/OLD_bass_club.gsx",$2478,$20
(1)   58/   14815 :                     FmIns_Bass_calm:
(1)   59/   14815 :                     		binclude "sound/instr/fm/bass_calm.gsx",$2478,$20
(1)   60/   14835 :                     FmIns_Trumpet_1:
(1)   61/   14835 :                     		binclude "sound/instr/fm/OLD_trumpet_1.gsx",$2478,$20
(1)   62/   14855 :                     FmIns_Trumpet_carnival:
(1)   63/   14855 :                     		binclude "sound/instr/fm/OLD_trumpet_carnivl.gsx",$2478,$20
(1)   64/   14875 :                     FmIns_brass_eur:
(1)   65/   14875 :                     		binclude "sound/instr/fm/OLD_brass_eur.gsx",$2478,$20
(1)   66/   14895 :                     
(1)   67/   14895 :                     
(1)   68/   14895 :                     ; ====================================================================
(1)   69/   14895 :                     ; FM instrument patches
(1)   70/   14895 :                     ;
(1)   71/   14895 :                     ; This must be located at the 880000 area.
(1)   72/   14895 :                     ; 68K BANK 0 only
(1)   73/   14895 :                     ; ====================================================================
(1)   74/   14895 :                     
(1)   75/   14895 :                     ; Savestate FM data is located at: $2478
(1)   76/   14895 :                     ;
(1)   77/   14895 :                     ; Sizes:
(1)   78/   14895 :                     ; Normal FM ins: $20
(1)   79/   14895 :                     ; Special FM ins: $28
(1)   80/   14895 :                     
(1)   81/   14895 :                     FmIns_Bass_Oil:
(1)   82/   14895 :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   83/   148B5 :                     FmIns_Organ_Ito:
(1)   84/   148B5 :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)   85/   148D5 :                     FmIns_Ding_Baseball:
(1)   86/   148D5 :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)   87/   148F5 :                     
(1)   88/   148F5 :                     ; FmIns_Guitar_gem:
(1)   89/   148F5 :                     ; 		binclude "sound/instr/fm/OLD/guitar_gem.gsx",$2478,$20
(1)   90/   148F5 :                     ; Fmins_Guitar_Heavy:
(1)   91/   148F5 :                     ; 		binclude "sound/instr/fm/OLD/guitar_heavy.gsx",$2478,$20
(1)   92/   148F5 :                     ; Fmins_Guitar_puy:
(1)   93/   148F5 :                     ; 		binclude "sound/instr/fm/OLD/guitar_puy.gsx",$2478,$20
(1)   94/   148F5 :                     ; Fmins_Guitar_puy_2:
(1)   95/   148F5 :                     ; 		binclude "sound/instr/fm/OLD/guitar_puy_2.gsx",$2478,$20
(1)   96/   148F5 :                     FmIns_DrumKick_gem:
(1)   97/   148F5 :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)   98/   14915 :                     ;
(1)   99/   14915 :                     ; ; FmIns_DrumKick:
(1)  100/   14915 :                     ; ; 		binclude "sound/instr/fm/OLD/drum_kick.gsx",$2478,$20
(1)  101/   14915 :                     ; ; FmIns_DrumSnare:
(1)  102/   14915 :                     ; ; 		binclude "sound/instr/fm/OLD/drum_snare.gsx",$2478,$20
(1)  103/   14915 :                     FmIns_ClosedHat:
(1)  104/   14915 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  105/   14935 :                     FmIns_PianoM1:
(1)  106/   14935 :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)  107/   14955 :                     ; ; FmIns_PianoM116:
(1)  108/   14955 :                     ; ; 		binclude "sound/instr/fm/OLD/piano_m116.gsx",$2478,$20
(1)  109/   14955 :                     ;
(1)  110/   14955 :                     ; ; ;
(1)  111/   14955 :                     ; ; ; ; FmIns_Bass_gum:
(1)  112/   14955 :                     ; ; ; ; 		binclude "sound/instr/fm/OLD/bass_gum.gsx",$2478,$20
(1)  113/   14955 :                     ; FmIns_Bass_calm:
(1)  114/   14955 :                     ; 		binclude "sound/instr/fm/OLD/bass_calm.gsx",$2478,$20
(1)  115/   14955 :                     ; FmIns_Bass_heavy:
(1)  116/   14955 :                     ; 		binclude "sound/instr/fm/OLD/bass_heavy.gsx",$2478,$20
(1)  117/   14955 :                     ; FmIns_Bass_ambient:
(1)  118/   14955 :                     ; 		binclude "sound/instr/fm/OLD/bass_ambient.gsx",$2478,$20
(1)  119/   14955 :                     ; ; ; FmIns_Brass_gummy:
(1)  120/   14955 :                     ; ; ; 		binclude "sound/instr/fm/OLD/brass_gummy.gsx",$2478,$20
(1)  121/   14955 :                     ; FmIns_Flaute_1:
(1)  122/   14955 :                     ; 		binclude "sound/instr/fm/OLD/flaute_1.gsx",$2478,$20
(1)  123/   14955 :                     FmIns_Bass_1:
(1)  124/   14955 :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)  125/   14975 :                     FmIns_Bass_2:
(1)  126/   14975 :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)  127/   14995 :                     ; FmIns_Bass_3:
(1)  128/   14995 :                     ; 		binclude "sound/instr/fm/OLD/bass_3.gsx",$2478,$20
(1)  129/   14995 :                     ; FmIns_Bass_4:
(1)  130/   14995 :                     ; 		binclude "sound/instr/fm/OLD/bass_4.gsx",$2478,$20
(1)  131/   14995 :                     ; FmIns_Bass_5:
(1)  132/   14995 :                     ; 		binclude "sound/instr/fm/OLD/bass_5.gsx",$2478,$20
(1)  133/   14995 :                     ; FmIns_Bass_club:
(1)  134/   14995 :                     ; 		binclude "sound/instr/fm/OLD/bass_club.gsx",$2478,$20
(1)  135/   14995 :                     FmIns_Bass_donna:
(1)  136/   14995 :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)  137/   149B5 :                     FmIns_Bass_groove:
(1)  138/   149B5 :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)  139/   149D5 :                     FmIns_Bass_groove_2:
(1)  140/   149D5 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)  141/   149F5 :                     FmIns_Bass_groove_gem:
(1)  142/   149F5 :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)  143/   14A15 :                     FmIns_Bass_italo:
(1)  144/   14A15 :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)  145/   14A35 :                     FmIns_Bass_duck:
(1)  146/   14A35 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)  147/   14A55 :                     
(1)  148/   14A55 :                     ; FmIns_Bass_kon:
(1)  149/   14A55 :                     ; 		binclude "sound/instr/fm/OLD/bass_kon.gsx",$2478,$20
(1)  150/   14A55 :                     
(1)  151/   14A55 :                     ; FmIns_Bass_mecan:
(1)  152/   14A55 :                     ; 		binclude "sound/instr/fm/OLD/bass_mecan.gsx",$2478,$20
(1)  153/   14A55 :                     ;
(1)  154/   14A55 :                     ; ; ; FmIns_Bass_heavy:
(1)  155/   14A55 :                     ; ; ; 		binclude "sound/instr/fm/OLD/bass_heavy.gsx",$2478,$20
(1)  156/   14A55 :                     ; ; ; FmIns_Bass_metal:
(1)  157/   14A55 :                     ; ; ; 		binclude "sound/instr/fm/OLD/bass_metal.gsx",$2478,$20
(1)  158/   14A55 :                     ; FmIns_Bass_synth:
(1)  159/   14A55 :                     ; 		binclude "sound/instr/fm/OLD/bass_synth_1.gsx",$2478,$20
(1)  160/   14A55 :                     ; FmIns_Guitar_1:
(1)  161/   14A55 :                     ; 		binclude "sound/instr/fm/OLD/guitar_1.gsx",$2478,$20
(1)  162/   14A55 :                     ; ; ; FmIns_Horn_1:
(1)  163/   14A55 :                     ; ; ; 		binclude "sound/instr/fm/OLD/horn_1.gsx",$2478,$20
(1)  164/   14A55 :                     ; FmIns_Organ_M1:
(1)  165/   14A55 :                     ; 		binclude "sound/instr/fm/OLD/organ_m1.gsx",$2478,$20
(1)  166/   14A55 :                     ; ; ; FmIns_Bass_Beach:
(1)  167/   14A55 :                     ; ; ; 		binclude "sound/instr/fm/OLD/bass_beach.gsx",$2478,$20
(1)  168/   14A55 :                     ; ; ; FmIns_Bass_Beach_2:
(1)  169/   14A55 :                     ; ; ; 		binclude "sound/instr/fm/OLD/bass_beach_2.gsx",$2478,$20
(1)  170/   14A55 :                     ; ; ; FmIns_Brass_Cave:
(1)  171/   14A55 :                     ; ; ; 		binclude "sound/instr/fm/OLD/brass_cave.gsx",$2478,$20
(1)  172/   14A55 :                     ; ; FmIns_Brass_Gem:
(1)  173/   14A55 :                     ; ; 		binclude "sound/instr/fm/OLD/brass_gem.gsx",$2478,$20
(1)  174/   14A55 :                     ; ; FmIns_Piano_Small:
(1)  175/   14A55 :                     ; ; 		binclude "sound/instr/fm/OLD/piano_small.gsx",$2478,$20
(1)  176/   14A55 :                     FmIns_Piano_Aqua:
(1)  177/   14A55 :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)  178/   14A75 :                     
(1)  179/   14A75 :                     ; FmIns_Trumpet_1:
(1)  180/   14A75 :                     ; 		binclude "sound/instr/fm/OLD/trumpet_1.gsx",$2478,$20
(1)  181/   14A75 :                     FmIns_Trumpet_2:
(1)  182/   14A75 :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)  183/   14A95 :                     ; FmIns_Trumpet_kon:
(1)  184/   14A95 :                     ; 		binclude "sound/instr/fm/OLD/trumpet_kon.gsx",$2478,$20
(1)  185/   14A95 :                     FmIns_Trumpet_puy:
(1)  186/   14A95 :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)  187/   14AB5 :                     ; FmIns_Trumpet_carnival:
(1)  188/   14AB5 :                     ; 		binclude "sound/instr/fm/OLD/trumpet_carnivl.gsx",$2478,$20
(1)  189/   14AB5 :                     
(1)  190/   14AB5 :                     ; FmIns_Bell_Glass:
(1)  191/   14AB5 :                     ; 		binclude "sound/instr/fm/OLD/bell_glass.gsx",$2478,$20
(1)  192/   14AB5 :                     FmIns_Marimba:
(1)  193/   14AB5 :                     		binclude "sound/instr/fm/OLD/marimba.gsx",$2478,$20
(1)  194/   14AD5 :                     
(1)  195/   14AD5 :                     FmIns_Ambient_dark:
(1)  196/   14AD5 :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  197/   14AF5 :                     FmIns_Ambient_spook:
(1)  198/   14AF5 :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  199/   14B15 :                     FmIns_Ambient_3:
(1)  200/   14B15 :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  201/   14B35 :                     FmIns_Ding_toy:
(1)  202/   14B35 :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  203/   14B55 :                     ; FmIns_Bell_China:
(1)  204/   14B55 :                     ; 		binclude "sound/instr/fm/OLD/bell_china.gsx",$2478,$20
(1)  205/   14B55 :                     ; FmIns_Brass_Eur:
(1)  206/   14B55 :                     ; 		binclude "sound/instr/fm/OLD/brass_eur.gsx",$2478,$20
(1)  207/   14B55 :                     FmIns_Brass_Puy:
(1)  208/   14B55 :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  209/   14B75 :                     FmIns_Flaute_cave:
(1)  210/   14B75 :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  211/   14B95 :                     FmIns_Banjo_puy:
(1)  212/   14B95 :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  213/   14BB5 :                     ; FmIns_Violin_gem:
(1)  214/   14BB5 :                     ; 		binclude "sound/instr/fm/OLD/violin_gem.gsx",$2478,$20
(1)  215/   14BB5 :                     
(1)  216/   14BB5 :                     FmIns_PSynth_plus:
(1)  217/   14BB5 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  218/   14BD5 :                     FmIns_Ding_1:
(1)  219/   14BD5 :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  220/   14BF5 :                     FmIns_Trombone_gem:
(1)  221/   14BF5 :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  222/   14C15 :                     
(1)  223/   14C15 :                     FmIns_HBeat_tom:
(1)  224/   14C15 :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  225/   14C35 :                     
(1)  226/   14C35 :                     
      75/   14C35 :                     		include "sound/smpl_dac.asm"		; GEMA: DAC samples
(1)    1/   14C35 :                     ; ====================================================================
(1)    2/   14C35 :                     ; DAC samples
(1)    3/   14C35 :                     ;
(1)    4/   14C35 :                     ; This must be located at the $900000 area.
(1)    5/   14C35 :                     ; ====================================================================
(1)    6/   14C35 :                     
(1)    7/   14C35 :                     ; Special sample data macro
(1)    8/   14C35 :                     gSmpHead macro len,loop
(1)    9/   14C35 :                     	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   10/   14C35 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   11/   14C35 :                     	endm
(1)   12/   14C35 :                     
(1)   13/   14C35 :                     	align $8000	; <-- just to be safe.
(1)   14/   18000 :                     DacIns_wegot_crash:
(1)   15/   18000 : (MACRO)             	gSmpHead .end-.start,0
(1)   15/   18000 : C42C 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   15/   18003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   16/   18006 :                     .start:	binclude "sound/instr/smpl/wegot_crash.wav",$2C
(1)   17/   1ACCA :                     .end:
(1)   18/   1ACCA :                     DacIns_wegot_kick:
(1)   19/   1ACCA : (MACRO)             	gSmpHead .end-.start,0
(1)   19/   1ACCA : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   19/   1ACCD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   20/   1ACD0 :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   21/   1B444 :                     .end:
(1)   22/   1B444 :                     DacIns_Snare_1:
(1)   23/   1B444 : (MACRO)             	gSmpHead .end-.start,0
(1)   23/   1B444 : 2411 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   23/   1B447 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   24/   1B44A :                     .start:	binclude "sound/instr/smpl/snare_1.wav",$2C
(1)   25/   1C56E :                     .end:
(1)   26/   1C56E :                     
(1)   27/   1C56E :                     ; TEST SAMPLE
(1)   28/   1C56E :                     TEST_WAVE:
(1)   29/   1C56E :                     	binclude "sound/instr/smpl/test.wav",$2C
(1)   30/   2AC6E :                     TEST_WAVE_E:
(1)   31/   2AC6E :                     	align 2
(1)   32/   2AC6E :                     
      76/   2AC6E :                     		dephase
      77/   2AC6E :                     		align 2
      78/   2AC6E :                     
      79/   2AC6E :                     ; ====================================================================
      80/   2AC6E :                     ; ----------------------------------------------------------------
      81/   2AC6E :                     ; 68K DATA BANK
      82/   2AC6E :                     ; ----------------------------------------------------------------
      83/   2AC6E :                     
      84/   2AC6E :                     MDBNK0_START:
      85/   2AC6E :                     		include "data/md_bank0.asm"	; <-- 68K ONLY bank data
(1)    1/   2AC6E :                     ; ====================================================================
(1)    2/   2AC6E :                     ; ----------------------------------------------------------------
(1)    3/   2AC6E :                     ; BANK 0 of 68k data ($900000-$9FFFFF)
(1)    4/   2AC6E :                     ; for big stuff like maps, levels, etc.
(1)    5/   2AC6E :                     ;
(1)    6/   2AC6E :                     ; For graphics use DMA and place your files at
(1)    7/   2AC6E :                     ; md_dma.asm (Watch out for the $20000 limit.)
(1)    8/   2AC6E :                     ;
(1)    9/   2AC6E :                     ; Maximum size: $0FFFFF bytes per bank
(1)   10/   2AC6E :                     ; ----------------------------------------------------------------
(1)   11/   2AC6E :                     
(1)   12/   2AC6E :                     		include "data/m_palettes.asm"	; All 32X palettes will be here.
(2)    1/   2AC6E :                     ; ====================================================================
(2)    2/   2AC6E :                     ; ----------------------------------------------------------------
(2)    3/   2AC6E :                     ; Put your 32X palettes here
(2)    4/   2AC6E :                     ;
(2)    5/   2AC6E :                     ; These are located on a single 68K $900000+ bank
(2)    6/   2AC6E :                     ;
(2)    7/   2AC6E :                     ; Labels MUST be aligned by 2
(2)    8/   2AC6E :                     ; ----------------------------------------------------------------
(2)    9/   2AC6E :                     
(2)   10/   2AC6E :                     		align 2
(2)   11/   2AC6E :                     PalMars_Title:
(2)   12/   2AC6E :                     		binclude "data/title/mars/bg_mars_pal.bin"
(2)   13/   2AE6E :                     		align 2
(2)   14/   2AE6E :                     
(1)   13/   2AE6E :                     
(1)   14/   2AE6E :                     ; ----------------------------------------------------------------
(1)   15/   2AE6E :                     
      86/   2AE6E :                     
      87/   2AE6E :                     ; ====================================================================
      88/   2AE6E :                     ; ----------------------------------------------------------------
      89/   2AE6E :                     ; MD DMA data: Requires RV bit set to 1, BANK-free
      90/   2AE6E :                     ; ----------------------------------------------------------------
      91/   2AE6E :                     
      92/   2AE6E :                     		align $8000
      93/   30000 :                     		include "data/md_dma.asm"
(1)    1/   30000 :                     ; ====================================================================
(1)    2/   30000 :                     ; ----------------------------------------------------------------
(1)    3/   30000 :                     ; DMA ROM-DATA Transfer section
(1)    4/   30000 :                     ; 
(1)    5/   30000 :                     ; RV bit must be enabled to read from here
(1)    6/   30000 :                     ; ----------------------------------------------------------------
(1)    7/   30000 :                     
(1)    8/   30000 :                     		align $8000
(1)    9/   30000 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)   10/   31000 :                     ASCII_FONT_e:
(1)   11/   31000 :                     ; Art_MenuFont:
(1)   12/   31000 :                     ; 		binclude "data/title/menu_art.bin"
(1)   13/   31000 :                     ; Art_MenuFont_e:
(1)   14/   31000 :                     ; 		align 2
(1)   15/   31000 :                     
(1)   16/   31000 :                     		align $8000
(1)   17/   38000 :                     ; Art_Title_FG:
(1)   18/   38000 :                     ; 		binclude "data/title/title_art.bin"
(1)   19/   38000 :                     ; Art_Title_FG_e:
(1)   20/   38000 :                     ; 		align 2
(1)   21/   38000 :                     Art_Title_BG:
(1)   22/   38000 :                     		binclude "data/title/bg_art.bin"
(1)   23/   3F200 :                     Art_Title_BG_e:
(1)   24/   3F200 :                     		align 2
(1)   25/   3F200 :                     
(1)   26/   3F200 :                     
(1)   27/   3F200 :                     
(1)   28/   3F200 :                     
      94/   3F200 :                     
      95/   3F200 :                     ; ====================================================================
      96/   3F200 :                     ; --------------------------------------------------------
      97/   3F200 :                     ; SH2's ROM view
      98/   3F200 :                     ; This section will be gone if RV bit is set to 1
      99/   3F200 :                     ; --------------------------------------------------------
     100/   3F200 :                     
     101/   3F200 :                     ; 		phase CS1+*
     102/   3F200 :                     ; 		align 4
     103/   3F200 :                     ; 		include "sound/smpl_pwm.asm"		; GEMA: PWM samples
     104/   3F200 :                     ; 		include "data/mars_rom.asm"
     105/   3F200 :                     ; 		dephase
     106/   3F200 :                     
     107/   3F200 :                     ; ====================================================================
     108/   3F200 :                     ; ---------------------------------------------
     109/   3F200 :                     ; End
     110/   3F200 :                     ; ---------------------------------------------
     111/   3F200 :                     
     112/   3F200 :                     ROM_END:
     113/   3F200 :                     		align $8000
     114/   40000 :                     
 AS V1.42 Beta [Bld 118] - source file md.asm - page 2 - 3/1/2023 4:19:44


  symbol table (* = unused):
  ------------------------

*ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
 ART_TITLE_BG :               38000 C |  ART_TITLE_BG_E :             3F200 C |
 ASCII_FONT :                 30000 C |  ASCII_FONT_E :               31000 C |
 ASCII_PAL :                    4C4 C | *ASCII_PAL_E :                  4E4 C |
 ATK :                            8 - | *AT_D :                           2 - |
*AT_L :                           1 - | *AT_R :                           0 - |
*AT_U :                           3 - | *BIGENDIAN :                      0 - |
 BITBGON :                        7 - | *BITCLICKL :                      1 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      0 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
 BITDRWD :                        2 - |  BITDRWL :                        1 - |
 BITDRWR :                        0 - |  BITDRWU :                        3 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - |  BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - | *BITJOYA :                        6 - |
*BITJOYB :                        4 - | *BITJOYC :                        5 - |
*BITJOYDOWN :                     1 - | *BITJOYLEFT :                     2 - |
*BITJOYMODE :                     B - | *BITJOYRIGHT :                    3 - |
*BITJOYSTART :                    7 - | *BITJOYUP :                       0 - |
*BITJOYX :                        A - | *BITJOYY :                        9 - |
*BITJOYZ :                        8 - | *BITMAPMD :                       1 - |
 BITMARSBG :                      6 - |  BITOBJ_AIR :                     0 - |
 BITOBJ_FLIPH :                   0 - |  BITOBJ_FLIPV :                   1 - |
 BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
 BITVINTENBL :                    5 - | *BRANCHEXT :                      0 - |
*CAM_X_POS :                      0 C | *CAM_X_ROT :                      C C |
*CAM_Y_POS :                      4 C | *CAM_Y_ROT :                     10 C |
*CAM_Z_POS :                      8 C | *CAM_Z_ROT :                     14 C |
*CART :                           1 - | *CASESENSITIVE :                  0 - |
 CHIP_ENV :                     E8A C |  CHIP_ENV.ATKEND :              F0D C |
*CHIP_ENV.ATKZERO :             F10 C |  CHIP_ENV.CHK2 :                F16 C |
 CHIP_ENV.CHK4 :                F4B C |  CHIP_ENV.CKOF :                EAE C |
 CHIP_ENV.CKON :                EC1 C | *CHIP_ENV.DECTMR :              F1A C |
 CHIP_ENV.DKADD :               F34 C |  CHIP_ENV.DKSAV :               F3C C |
 CHIP_ENV.DKYEND :              F41 C |  CHIP_ENV.DO_NFREQ :            FA0 C |
 CHIP_ENV.ENVPROC :             EDF C |  CHIP_ENV.KILLENV :             F61 C |
*CHIP_ENV.NBLOCK :              EDF C |  CHIP_ENV.NORMAL :              F9B C |
 CHIP_ENV.NOUPD :               FE1 C |  CHIP_ENV.NSKIP :               ED6 C |
 CHIP_ENV.SILNC_3 :             F97 C |  CHIP_ENV.VEDLP :               F69 C |
 CHIP_ENV.VLMUCH :              FCD C |  CHIP_ENV.VLOOP :               E96 C |
 CHIP_ENV.VONLY :               FC3 C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - | *CMDINTCLR :                     1A - |
*CMDIRQ_ON :                      2 - |  COM :                            0 - |
*COMM0 :                         20 - | *COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
*COMM12 :                        2C - | *COMM13 :                        2D - |
*COMM14 :                        2E - | *COMM15 :                        2F - |
*COMM2 :                         22 - | *COMM3 :                         23 - |
*COMM4 :                         24 - | *COMM5 :                         25 - |
*COMM6 :                         26 - | *COMM7 :                         27 - |
*COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                     40 C |  COMMZREAD :                   164F C |
 COMMZROMBLK :                   81 C |  COMMZWRITE :                    80 C |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFA9C6 - |
*CONTROLLER_2 :    FFFFFFFFFFFFA9D6 - | *CS0 :                            0 - |
*CS1 :                      2000000 - |  CS2 :                      4000000 - |
*CS3 :                      6000000 - |  CURRTICKBITS :                  2E C |
*CYCLE :                         32 - |  DACINS_SNARE_1 :             1B444 C |
 DACINS_SNARE_1.END :         1C56E C |  DACINS_SNARE_1.START :       1B44A C |
 DACINS_WEGOT_CRASH :         18000 C |  DACINS_WEGOT_CRASH.END :     1ACCA C |
 DACINS_WEGOT_CRASH.START :   18006 C |  DACINS_WEGOT_KICK :          1ACCA C |
 DACINS_WEGOT_KICK.END :      1B444 C |  DACINS_WEGOT_KICK.START :    1ACD0 C |
 DAC_FILL :                      20 C |  DAC_FIRSTFILL :               106A C |
 DAC_ME :                         8 C |  DAC_OFF :                     1021 C |
 DAC_ON :                      100C C |  DAC_PLAY :                    1036 C |
 DAC_REFILL :                  106B C |  DAC_REFILL.DACFILL_END :      112A C |
 DAC_REFILL.DACFILL_LOOP :     10E3 C |  DAC_REFILL.DACFILL_RET :      112D C |
 DAC_REFILL.DAC_OVER :         10B9 C | *DATE :                    3/1/2023 - |
 DDACCNTR :                      33 C |  DDACFIFOMID :                   2F C |
 DDACPNTR :                      30 C | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
*DOTTEDSTRUCTS :                  0 - | *DREQCTL :                        6 - |
*DREQDEST :                       C - | *DREQFIFO :                      12 - |
*DREQLEN :                       10 - | *DREQSOURCE :                     8 - |
 DREQ_BGEXBUFF :                200 C | *DREQ_OBJCAM :                  280 C |
 DREQ_OBJECTS :                 298 C |  DREQ_PALETTE :                   0 C |
 DREQ_SUPERSPR :                418 C |  DRV_LOOP :                      87 C |
 DRV_LOOP.CMND_0 :              131 C |  DRV_LOOP.CMND_1 :              162 C |
 DRV_LOOP.CMND_2 :              178 C |  DRV_LOOP.CMND_8 :              193 C |
 DRV_LOOP.CMND_C :              1B5 C |  DRV_LOOP.COPYME :              13D C |
 DRV_LOOP.FOUND :               1E5 C |  DRV_LOOP.GETCBYTEL :            F3 C |
 DRV_LOOP.GRAB_ARG :             F1 C |  DRV_LOOP.LIST :                111 C |
 DRV_LOOP.NEITHER :              C7 C |  DRV_LOOP.NEXT :                1CD C |
 DRV_LOOP.NEXT_CMD :             CD C |  DRV_LOOP.NEXT_SALL :           197 C |
 DRV_LOOP.NOBEATS :              AE C |  DRV_LOOP.NOTICKS :              A1 C |
 DRV_LOOP.NOT_ON :              1AD C |  DRV_LOOP.SRCH_FRID :           1C6 C |
 DRV_LOOP.TEMPSET :             157 C |  DTBL_FROMMUL :                 6E9 C |
 DTBL_FROMMUL.CHNL_ULNK :       CF9 C |  DTBL_FROMMUL.CHNL_ULNKCUT :    D08 C |
 DTBL_FROMMUL.CHNL_ULNKOFF :    CF7 C |  DTBL_FROMMUL.DAC_CUT :         91E C |
 DTBL_FROMMUL.DAC_INS :         ADB C |  DTBL_FROMMUL.DAC_OFF :         924 C |
 DTBL_FROMMUL.DOPSG_VOL :       804 C |  DTBL_FROMMUL.EFFC :            9AD C |
 DTBL_FROMMUL.EFFC_X :          9BD C |  DTBL_FROMMUL.FM_CINDX :        CBB C |
 DTBL_FROMMUL.FM_CUT :          8E9 C |  DTBL_FROMMUL.FM_HASVOL :       B7F C |
 DTBL_FROMMUL.FM_INS :          A4F C |  DTBL_FROMMUL.FM_KEYOFF :       C13 C |
 DTBL_FROMMUL.FM_OFF :          8E3 C |  DTBL_FROMMUL.FM_PANLIST :      9E2 C |
 DTBL_FROMMUL.FM_SETFREQ :      C32 C |  DTBL_FROMMUL.FM_SETRLIST :     ACB C |
 DTBL_FROMMUL.FM_TLOFF :        C1B C |  DTBL_FROMMUL.FM_WRTALPAN :     CC3 C |
 DTBL_FROMMUL.FM_WRTLVOL :      C49 C |  DTBL_FROMMUL.FND_OCT :         BDB C |
 DTBL_FROMMUL.FROM_PSGN :       7CC C |  DTBL_FROMMUL.GET_OCT :         BCB C |
 DTBL_FROMMUL.INST :            9F4 C | *DTBL_FROMMUL.INVL_INS :        A12 C |
 DTBL_FROMMUL.KYCUT_PSG :       7F9 C |  DTBL_FROMMUL.KYCUT_PSGN :      7F4 C |
 DTBL_FROMMUL.KYOFF_PSG :       7E9 C |  DTBL_FROMMUL.KYOFF_PSGN :      7E4 C |
 DTBL_FROMMUL.LINKED :          747 C |  DTBL_FROMMUL.MK_DAC :          8F2 C |
 DTBL_FROMMUL.MK_FM :           818 C |  DTBL_FROMMUL.MK_FMSPC :        86A C |
 DTBL_FROMMUL.MK_PSG :          7B3 C |  DTBL_FROMMUL.MK_PSGN :         795 C |
 DTBL_FROMMUL.MK_PWM :          927 C |  DTBL_FROMMUL.NEW_ROMDAT :      A8B C |
 DTBL_FROMMUL.NOFM_NOTE :       857 C |  DTBL_FROMMUL.NOPWM_NOTE :      98C C |
 DTBL_FROMMUL.NOTE :            B75 C |  DTBL_FROMMUL.NOT_DAC :         84A C |
 DTBL_FROMMUL.NOT_DSPC :        841 C |  DTBL_FROMMUL.NO_LFO :          CF6 C |
 DTBL_FROMMUL.N_DAC :           BF8 C |  DTBL_FROMMUL.N_FM :            BC1 C |
 DTBL_FROMMUL.N_PSG :           BA7 C |  DTBL_FROMMUL.N_PSGN :          BA2 C |
 DTBL_FROMMUL.N_STFREQ :        BA8 C |  DTBL_FROMMUL.PN_INS :          A13 C |
 DTBL_FROMMUL.PSG_KEYON :       7D9 C |  DTBL_FROMMUL.PS_INS :          A19 C |
 DTBL_FROMMUL.PWM_CUT :         99E C |  DTBL_FROMMUL.PWM_INS :         B33 C |
 DTBL_FROMMUL.PWM_OFF :         98F C |  DTBL_FROMMUL.PWV_MUCH :        963 C |
 DTBL_FROMMUL.RCYL_COM :        73B C |  DTBL_FROMMUL.RES_PAN :         9D8 C |
 DTBL_FROMMUL.SAME_PATCH :      A9C C |  DTBL_FROMMUL.SILN_DAC :        727 C |
 DTBL_FROMMUL.SILN_FM :         72A C |  DTBL_FROMMUL.SILN_PSG :        720 C |
 DTBL_FROMMUL.SILN_PSG_N :      71C C |  DTBL_FROMMUL.SILN_PWM :        730 C |
 DTBL_FROMMUL.TL_DOWN :         C25 C |  DTBL_FROMMUL.VMUCH :           811 C |
 DTBL_FROMMUL.VOLU :            9EA C |  DTBL_FROMMUL.WRITE_TL :        CAE C |
 DTBL_MULTI :                   6D4 C |  DTBL_SINGL :                   6E8 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C | *EXTR_3 :                         A C |
*EXTR_4 :                         C C | *EXTR_5 :                         E C |
 EX_COMM :                      D1B C | *FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - | *FM :                            80 - |
 FMCACH_1 :                    1486 C |  FMCACH_2 :                    14AE C |
 FMCACH_3 :                    14D6 C |  FMCACH_4 :                    14FE C |
 FMCACH_5 :                    1526 C |  FMCACH_6 :                    154E C |
 FMCACH_LIST :                 132C C |  FMFREQ_LIST :                 1132 C |
*FMINS_AMBIENT_3 :            14B15 C | *FMINS_AMBIENT_DARK :         14AD5 C |
*FMINS_AMBIENT_SPOOK :        14AF5 C | *FMINS_BANJO_PUY :            14B95 C |
*FMINS_BASS_1 :               14955 C | *FMINS_BASS_2 :               14975 C |
 FMINS_BASS_4 :               14795 C |  FMINS_BASS_8 :               147B5 C |
 FMINS_BASS_CALM :            14815 C |  FMINS_BASS_CLUB :            147F5 C |
*FMINS_BASS_DONNA :           14995 C |  FMINS_BASS_DUCK :            14A35 C |
*FMINS_BASS_GROOVE :          149B5 C |  FMINS_BASS_GROOVE_2 :        149D5 C |
*FMINS_BASS_GROOVE_GEM :      149F5 C | *FMINS_BASS_ITALO :           14A15 C |
*FMINS_BASS_OIL :             14895 C |  FMINS_BRASS_EUR :            14875 C |
*FMINS_BRASS_PUY :            14B55 C |  FMINS_CLOSEDHAT :            14915 C |
*FMINS_DING_1 :               14BD5 C |  FMINS_DING_BASEBALL :        148D5 C |
*FMINS_DING_TOY :             14B35 C | *FMINS_DRUMKICK_GEM :         148F5 C |
*FMINS_FLAUTE_CAVE :          14B75 C |  FMINS_HBEAT_TOM :            14C15 C |
*FMINS_MARIMBA :              14AB5 C | *FMINS_ORGAN_ITO :            148B5 C |
 FMINS_PIANOM1 :              14935 C | *FMINS_PIANO_AQUA :           14A55 C |
*FMINS_PSYNTH_PLUS :          14BB5 C |  FMINS_SP_CLOSEDHAT :         14745 C |
*FMINS_SP_COWBELL :           1476D C |  FMINS_SP_OPENHAT :           1471D C |
 FMINS_SYNTH_PLUS :           147D5 C | *FMINS_TROMBONE_GEM :         14BF5 C |
 FMINS_TRUMPET_1 :            14835 C |  FMINS_TRUMPET_2 :            14A75 C |
 FMINS_TRUMPET_CARNIVAL :     14855 C | *FMINS_TRUMPET_PUY :          14A95 C |
 FMSPECIAL :                   163A C |  FM_AUTOREG :                   FED C |
 FM_SEND_1 :                    FF6 C |  FM_SEND_2 :                   1001 C |
*FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :                 37A C |
 GEMADMAPAUSEROM :              3BC C |  GEMADMARESUME :                3A2 C |
 GEMADMARESUMEROM :             3DE C |  GEMAPLAYTRACK :                40A C |
 GEMASETBEATS :                 446 C |  GEMASTOPALL :                  436 C |
 GEMASTOPTRACK :                420 C | *GEMATEST :                     3FA C |
 GEMATRK_BODYOVER :           12434 C |  GEMATRK_BODYOVER.BLK :       12440 C |
 GEMATRK_BODYOVER.INS :       12C4E C |  GEMATRK_BODYOVER.PAT :       12456 C |
 GEMATRK_MOVEME :             12C96 C |  GEMATRK_MOVEME.BLK :         12CA2 C |
 GEMATRK_MOVEME.INS :         13B30 C |  GEMATRK_MOVEME.PAT :         12CBA C |
 GEMATRK_TEST_0 :             145AC C |  GEMATRK_TEST_0.BLK :         145B8 C |
 GEMATRK_TEST_0.INS :         146ED C |  GEMATRK_TEST_0.PAT :         145BA C |
 GEMATRK_TEST_1 :              9CFC C |  GEMATRK_TEST_1.BLK :          9D08 C |
 GEMATRK_TEST_1.INS :          D166 C | *GEMATRK_TEST_1.INS_E :        D1D6 C |
 GEMATRK_TEST_1.PAT :          9D17 C |  GEMATRK_TEST_2 :              8080 C |
 GEMATRK_TEST_2.BLK :          808C C |  GEMATRK_TEST_2.INS :          9CC4 C |
 GEMATRK_TEST_2.PAT :          80A2 C |  GEMATRK_TEST_3 :              D1D6 C |
 GEMATRK_TEST_3.BLK :          D1E2 C |  GEMATRK_TEST_3.INS :          EA80 C |
 GEMATRK_TEST_3.PAT :          D1F0 C |  GEMATRK_TEST_4 :              EAA0 C |
 GEMATRK_TEST_4.BLK :          EAAC C |  GEMATRK_TEST_4.INS :          FFA4 C |
 GEMATRK_TEST_4.PAT :          EABE C |  GEMATRK_TEST_5 :              FFBC C |
 GEMATRK_TEST_5.BLK :          FFC8 C |  GEMATRK_TEST_5.INS :         107F8 C |
 GEMATRK_TEST_5.PAT :          FFD0 C |  GEMATRK_TEST_6 :             10808 C |
 GEMATRK_TEST_6.BLK :         10814 C |  GEMATRK_TEST_6.INS :         123B4 C |
 GEMATRK_TEST_6.PAT :         1081C C |  GEMATRK_XTRIM :              13BC8 C |
 GEMATRK_XTRIM.BLK :          13BD4 C |  GEMATRK_XTRIM.INS :          14584 C |
 GEMATRK_XTRIM.PAT :          13BDA C |  GEMA_INIT :                    D1D C |
 GEMA_INIT.END_SETUP :          DC3 C |  GEMA_INIT.SETUP_LIST :         D78 C |
 GEMA_INIT.ST_COPY :            D97 C |  GEMA_MASTERLIST :             8000 C |
 GET_ROMTRCKS :                 4DC C |  GET_TICK :                     DC8 C |
 GET_TICK.CTNOTICK :            DE5 C |  GLBL_LASTORG :                1D00 - |
 GLBL_LASTPC :                 1D00 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
*HCOUNT :                         5 - |  HEADEROUT :                   163B C |
 HEADEROUT_E :                 1647 C | *HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :                1C9E C |
*HINT_TITLE :                  2016 C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
 INIT_ROMTRCKS :                4E4 C | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      1 - | *INTMASK :                        1 - |
*JOYA :                          40 - | *JOYB :                          10 - |
 JOYC :                          20 - |  JOYDOWN :                        2 - |
 JOYLEFT :                        4 - | *JOYMODE :                      800 - |
 JOYRIGHT :                       8 - | *JOYSTART :                      80 - |
 JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
*LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - |  LIST_VDPREGS :                 4B0 C |
*MACEXP :                         7 - |  MAP_TITLE_BG :                2458 C |
*MAP_TITLE_FG :                21D0 C |  MARS :                           0 - |
 MARSBLOCK :                     82 C | *MARSCD :                         0 - |
 MARSSPR_DATA :                  10 C |  MARSSPR_DWIDTH :                 8 C |
*MARSSPR_FILL :                   E C |  MARSSPR_FLAGS :                  C C |
 MARSSPR_INDX :                   A C |  MARSSPR_X :                      4 C |
 MARSSPR_XFRM :                   0 C |  MARSSPR_XS :                     2 C |
 MARSSPR_Y :                      6 C |  MARSSPR_YFRM :                   1 C |
 MARSSPR_YS :                     3 C |  MARSUPD :                       3F C |
 MAX_BLOCKS :                    18 - |  MAX_HEADS :                     18 - |
 MAX_INS :                       10 - |  MAX_MDDMATSK :                  10 - |
 MAX_MDERAM :                  1000 - |  MAX_MDOBJ :                     10 - |
 MAX_MODELS :                    10 - |  MAX_RCACH :                     40 - |
 MAX_SUPERSPR :                  18 - |  MAX_TBLSIZE :                   10 - |
 MAX_TITLOPT :                    6 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    11 - | *MCD :                            0 - |
*MDBNK0_START :               2AC6E C |  MDL_DATA :                       0 C |
*MDL_FLAGS :                     16 C | *MDL_FRAME :                     14 C |
*MDL_OPTION :                     4 C | *MDL_X_POS :                      8 C |
 MDL_X_ROT :                      E C | *MDL_Y_POS :                      A C |
 MDL_Y_ROT :                     10 C | *MDL_Z_POS :                      C C |
 MDL_Z_ROT :                     12 C | *MDMAP_DRAWALL :                FEE C |
 MDMAP_DRAWALL.BLANK :         10B4 C |  MDMAP_DRAWALL.DRWY_16 :       110E C |
 MDMAP_DRAWALL.GOT_BLK :       10B2 C |  MDMAP_DRAWALL.MK_BLOCK :      10EA C |
 MDMAP_DRAWALL.NO_BG :         10E8 C |  MDMAP_DRAWALL.THIS_BG :        FF8 C |
 MDMAP_DRAWALL.X_LOOP :        10A2 C |  MDMAP_DRAWALL.Y_LOOP :        109A C |
*MDMAP_DRAWSCRLMD :            1148 C | *MDMAP_DRAWSCRLMD.BLNK :       11E2 C |
 MDMAP_DRAWSCRLMD.FRCE :       1216 C |  MDMAP_DRAWSCRLMD.GET_COORDS : 132A C |
*MDMAP_DRAWSCRLMD.MARS_RET_C : 126C C |  MDMAP_DRAWSCRLMD.MK_CLMN :    11BC C |
 MDMAP_DRAWSCRLMD.MK_ROW :     126E C |  MDMAP_DRAWSCRLMD.NO_BG :      11BA C |
 MDMAP_DRAWSCRLMD.NO_D :       118E C |  MDMAP_DRAWSCRLMD.NO_L :       11A6 C |
 MDMAP_DRAWSCRLMD.NO_R :       11B6 C |  MDMAP_DRAWSCRLMD.NO_U :       117C C |
 MDMAP_DRAWSCRLMD.PRIO :       11E8 C |  MDMAP_DRAWSCRLMD.THIS_BG :    1158 C |
 MDMAP_DRAWSCRLMD.VLD :        11F4 C | *MDMAP_DRAWSCRLMD.XBLNK :      12A2 C |
 MDMAP_DRAWSCRLMD.XFRCE :      12D6 C |  MDMAP_DRAWSCRLMD.XPRIO :      12A8 C |
 MDMAP_DRAWSCRLMD.XVLD :       12B4 C |  MDMAP_DRAWSCRLMD.X_BLK :      1296 C |
 MDMAP_DRAWSCRLMD.X_LOW :      1318 C | *MDMAP_DRAWSCRLMD.X_NEW :      1320 C |
 MDMAP_DRAWSCRLMD.Y_BLK :      11D6 C |  MDMAP_DRAWSCRLMD.Y_LOW :      1264 C |
*MDMAP_INIT :                   DC8 C |  MDMAP_INIT.CLR :               DD2 C |
*MDMAP_MOVE :                   ECE C |  MDMAP_MOVE.MARS_SIDE :         EE0 C |
*MDMAP_MOVE.NOT_ENABLD :        F10 C |  MDMAP_MOVE.X_LEFT :            EEA C |
 MDMAP_MOVE.X_RIGHT :           EF4 C |  MDMAP_MOVE.Y_LEFT :            EFE C |
 MDMAP_MOVE.Y_RIGHT :           F08 C | *MDMAP_SET :                    DDA C |
 MDMAP_SET.MARS_SIDE :          DFA C |  MDMAP_SET.MD_SIDE :            DEA C |
 MDMAP_SET.XL_G :               E96 C |  MDMAP_SET.XL_L :               E8E C |
 MDMAP_SET.XR_G :               EA6 C |  MDMAP_SET.XR_L :               E9E C |
 MDMAP_SET.YB_G :               EC2 C |  MDMAP_SET.YB_L :               EBA C |
 MDMAP_SET.YT_G :               EB2 C |  MDMAP_SET.YT_L :               EAA C |
*MDMAP_UPDATE :                 F12 C |  MDMAP_UPDATE.BEAM_INCR :       FDA C |
 MDMAP_UPDATE.NO_BG :           FD8 C |  MDMAP_UPDATE.THIS_BG :         F22 C |
 MDMAP_UPDATE.VAL_H :           FEC C |  MDMAP_UPDATE.XD_G :            FE4 C |
 MDMAP_UPDATE.XD_L :            FDC C |  MDMAP_UPDATE.XEQU :            F44 C |
 MDMAP_UPDATE.X_K :             FA8 C |  MDMAP_UPDATE.X_R :             FA4 C |
 MDMAP_UPDATE.YEQU :            F58 C |  MDMAP_UPDATE.Y_D :             FCA C |
 MDMAP_UPDATE.Y_K :             FCE C |  MDRAM_START :             FFFF9000 - |
 MDSYS_SINEDATA :              1AD6 C | *MD_2DMODE :                   1D00 C |
*MD_2DMODE.FADE_IN :           1F4E C | *MD_2DMODE.FADE_OUT :          1F74 C |
 MD_2DMODE.GEMA_TEST :         1EC8 C |  MD_2DMODE.LIST :              1ED6 C |
 MD_2DMODE.LOOP :              1E14 C |  MD_2DMODE.LOOP2 :             1F98 C |
 MD_2DMODE.NO_C :              1EB6 C |  MD_2DMODE.NO_DOWN :           1E7A C |
 MD_2DMODE.NO_L :              1E94 C |  MD_2DMODE.NO_R :              1EA8 C |
 MD_2DMODE.NO_UP :             1E60 C |  MD_2DMODE.NULL :              1F0C C |
 MD_2DMODE.PLAY :              1EE4 C |  MD_2DMODE.PLOOP :             1E14 C |
 MD_2DMODE.SFX_DRAW :          1EBA C |  MD_2DMODE.STOP :              1EFC C |
 MD_2DMODE.STOPALL :           1F04 C |  MD_2DMODE.TEMPOLIST :         1F0E C |
 MD_BANK_SRAM :              A130F1 - |  MD_BG_BH :                       1 C |
 MD_BG_BLK :                     28 C | *MD_BG_BLKW :                     2 C |
 MD_BG_BW :                       0 C |  MD_BG_COL :                     2C C |
 MD_BG_FLAGS :                    3 C |  MD_BG_H :                        A C |
 MD_BG_HF :                       E C |  MD_BG_HI :                      24 C |
 MD_BG_LOW :                     20 C | *MD_BG_MOVEX :                    6 C |
*MD_BG_MOVEY :                    7 C |  MD_BG_VPOS :                    1C C |
 MD_BG_VRAM :                    1E C |  MD_BG_W :                        8 C |
 MD_BG_WF :                       C C |  MD_BG_X :                       30 C |
 MD_BG_XINC_L :                  10 C |  MD_BG_XINC_R :                  12 C |
 MD_BG_XSET :                     4 C |  MD_BG_X_OLD :                   18 C |
 MD_BG_Y :                       34 C |  MD_BG_YINC_D :                  16 C |
 MD_BG_YINC_U :                  14 C |  MD_BG_YSET :                     5 C |
 MD_BG_Y_OLD :                   1A C |  MD_ENTRY :                     202 C |
 MD_ENTRY.LOOP_RAM :            230 C |  MD_ENTRY.OLDMD :               21C C |
 MD_ENTRY.WAIT_DMA :            244 C |  MD_ERRADDR :                   200 C |
 MD_ERRBUS :                    200 C |  MD_ERRCHK :                    200 C |
 MD_ERRILL :                    200 C |  MD_ERROREX :                   200 C |
 MD_ERRORTRAP :                 200 C |  MD_ERRPRIVL :                  200 C |
 MD_ERRTRAPV :                  200 C |  MD_ERRZDIV :                   200 C |
 MD_LINE1010 :                  200 C |  MD_LINE1111 :                  200 C |
 MD_READMODES :                1CA0 C |  MD_READMODES.PICK_BOOT :      1CB4 C |
 MD_TRACE :                     200 C |  MODE :                          18 - |
*MODE_FADEOUT :                1C54 C |  MODE_FADEOUT.LOOPW :          1C78 C |
 MODE_INIT :                   1C24 C |  MODE_INIT.CLR :               1C34 C |
 MODE_INIT.CLR_MDLS :          1C42 C |  MOMCPU :                     68000 - |
*MOMCPUNAME :                 68000 - | *MONOWIDTH :                     38 - |
 MOUSE_X :                        6 C |  MOUSE_Y :                        8 C |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             133A C |
 NIKONA_SETMSTRLIST :          135C C |  OBJECTS_INIT :                13A6 C |
 OBJECTS_INIT.CLR :            13AE C |  OBJECTS_INIT.CLR_D :          13BC C |
*OBJECTS_RUN :                 13C8 C |  OBJECTS_RUN.NEXT_ONE :        13D0 C |
 OBJECTS_RUN.NO_CODE :         13DC C | *OBJECTS_SHOW :                13E6 C |
 OBJECTS_SHOW.FINISH :         1516 C |  OBJECTS_SHOW.FLIP_H :         14FC C |
 OBJECTS_SHOW.FLIP_V :         1508 C |  OBJECTS_SHOW.MARS_MODE :      149E C |
 OBJECTS_SHOW.MK_PZ :          1466 C |  OBJECTS_SHOW.MK_SPR :         1510 C |
 OBJECTS_SHOW.NEXT :           1430 C |  OBJECTS_SHOW.NEXTS :          13FE C |
 OBJECTS_SHOW.NO_SPRDRW :      1424 C |  OBJECTS_SHOW.RAN_OUT :        152C C |
*OBJECT_ANIMATE :              1574 C |  OBJECT_ANIMATE.GOTOFRAME :    15F6 C |
 OBJECT_ANIMATE.KEEPSPD :      15B6 C |  OBJECT_ANIMATE.LASTFRAME :    15F0 C |
 OBJECT_ANIMATE.NOANIM :       15E2 C |  OBJECT_ANIMATE.RETURN :       15E0 C |
 OBJECT_ANIMATE.SAMETHING :    158E C | *OBJECT_COLM_FLOOR :           1624 C |
 OBJECT_COLM_FLOOR.BLNK :      169A C |  OBJECT_COLM_FLOOR.NEXT :      168E C |
 OBJECT_COLM_FLOOR.VALID :     16A2 C |  OBJECT_COLM_FLOOR.V_X :       1640 C |
 OBJECT_COLM_FLOOR.V_XR :      1646 C |  OBJECT_COLM_FLOOR.V_Y :       1656 C |
 OBJECT_COLM_FLOOR.V_YD :      165C C | *OBJECT_DISPLAY :              152E C |
 OBJECT_DISPLAY.SRCH :         1536 C |  OBJECT_DISPLAY.THIS_ONE :     1542 C |
*OBJECT_MKSPRPZ :              1546 C |  OBJECT_MKSPRPZ.NOPE :         1572 C |
*OBJECT_SETCOLFLOOR :          16A8 C |  OBJECT_SETCOLFLOOR.NO_COL :   16F2 C |
*OBJECT_SPEED :                1612 C |  OBJECT_UPDX :                 1602 C |
*OBJECT_UPDY :                 1614 C |  OBJ_ANIM_ID :                   1C C |
 OBJ_ANIM_INDX :                 1A C |  OBJ_ANIM_SPD :                  20 C |
 OBJ_CODE :                       0 C |  OBJ_FRAME :                     1E C |
*OBJ_INDEX :                     21 C |  OBJ_MAP :                       10 C |
*OBJ_RAM :                       26 C |  OBJ_SET :                       23 C |
 OBJ_SIZE :                       4 C | *OBJ_SPWNID :                    25 C |
 OBJ_STATUS :                    24 C | *OBJ_SUBID :                     22 C |
 OBJ_VRAM :                      14 C |  OBJ_X :                          8 C |
 OBJ_X_SPD :                     16 C |  OBJ_Y :                          C C |
 OBJ_Y_SPD :                     18 C |  ON_HOLD :                        2 C |
 ON_PRESS :                       4 C | *PACKING :                        0 - |
*PADDING :                        0 - | *PADDINGSOFAR :                   0 - |
 PAD_ID :                         0 C |  PAD_VER :                        1 C |
*PALMARS_TITLE :              2AC6E C |  PAL_TITLE_BG :                2438 C |
*PAL_TITLE_FG :                2170 C |  PARP :                          34 - |
*PEN :                           20 - |  PROC_CHIPS :                   52B C |
 PSGCOM :                      15AE C |  PSGFREQ_LIST :                114A C |
 PSGHATMODE :                  1639 C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PVOL :                          30 - |
*PWCOM :                          0 - | *PWINSH :                        20 - |
*PWINSL :                        30 - | *PWINSM :                        28 - |
 PWMCOM :                      1576 C | *PWMCTL :                        31 - |
*PWMINTCLR :                     1C - | *PWMIRQ_ON :                      1 - |
*PWOUTF :                        18 - | *PWPHL :                         10 - |
*PWPTH_V :                        8 - |  RAMCODE_SCRN1 :               1D00 C |
 RAM_BGBUFFER :    FFFFFFFFFFFF9660 C |  RAM_BGBUFFERM :   FFFFFFFFFFFFB022 - |
*RAM_DMACODE :     FFFFFFFFFFFFAC06 C |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFA9AA C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFA9A8 C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFA9A6 C |  RAM_FADEMARSTMR : FFFFFFFFFFFFA9AC C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFA9A2 C |  RAM_FADEMDINCR :  FFFFFFFFFFFFA9A0 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFA99E C |  RAM_FADEMDTMR :   FFFFFFFFFFFFA9A4 C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFF9740 C |  RAM_GLBL_SCRN :   FFFFFFFFFFFFC41A C |
 RAM_HORSCROLL :   FFFFFFFFFFFF9744 C | *RAM_INITFLUG :    FFFFFFFFFFFFAE0E C |
 RAM_INPUTDATA :   FFFFFFFFFFFFA9C6 C |  RAM_MDDREQ :      FFFFFFFFFFFFAE22 C |
 RAM_MDGLOBAL :    FFFFFFFFFFFFC41A C |  RAM_MDMARSHINT :  FFFFFFFFFFFFAE18 C |
 RAM_MDMARSPALFD : FFFFFFFFFFFFA534 C |  RAM_MDMARSVINT :  FFFFFFFFFFFFAE12 C |
 RAM_MDSYSTEM :    FFFFFFFFFFFFA9C6 C | *RAM_MDVBLKWAIT :  FFFFFFFFFFFFAE1E C |
 RAM_MDVIDEO :     FFFFFFFFFFFF9000 C |  RAM_MODEBUFF :    FFFFFFFFFFFFB41A C |
 RAM_OBJDISPLIST : FFFFFFFFFFFF9B54 C |  RAM_OBJECTS :     FFFFFFFFFFFF9000 C |
 RAM_PALETTE :     FFFFFFFFFFFFA434 C |  RAM_PALETTEFD :   FFFFFFFFFFFFA4B4 C |
*RAM_SAVEDATA :    FFFFFFFFFFFFAA06 C |  RAM_SPRDRWCNTR :  FFFFFFFFFFFFA994 C |
 RAM_SPRDRWPZ :    FFFFFFFFFFFF9B74 C |  RAM_SPRITES :     FFFFFFFFFFFF9FD4 C |
*RAM_SPRSHOWINDX : FFFFFFFFFFFFA996 C | *RAM_SYSFLAGS :    FFFFFFFFFFFFAE20 C |
 RAM_SYSRANDSEED : FFFFFFFFFFFFAE0A C | *RAM_SYSRANDVAL :  FFFFFFFFFFFFAE06 C |
 RAM_TITE_PICKOPT :                                        FFFFFFFFFFFFB666 C |
*RAM_TITE_USROPT_B :                                       FFFFFFFFFFFFB66A C |
 RAM_TITE_USROPT_T :                                       FFFFFFFFFFFFB668 C |
*RAM_TITE_VERBGMENU :                                      FFFFFFFFFFFFB656 C |
*RAM_TITE_VERBOT : FFFFFFFFFFFFB652 C |
*RAM_TITL_DBGVALUES :                                      FFFFFFFFFFFFB66C C |
*RAM_TTLE_HORBG :  FFFFFFFFFFFFB65E C |  RAM_TTLE_HORVAL : FFFFFFFFFFFFB64A C |
 RAM_TTLE_SFX :    FFFFFFFFFFFFB664 C |  RAM_TTLE_SPDUSR : FFFFFFFFFFFFB662 C |
*RAM_TTLE_SPRITEDATA :                                     FFFFFFFFFFFFB41A C |
*RAM_TTLE_VERBG :  FFFFFFFFFFFFB65A C |  RAM_TTLE_VERVAL : FFFFFFFFFFFFB64E C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFA998 C |  RAM_VDPDMALIST :  FFFFFFFFFFFFA734 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFA99A C |  RAM_VDPREGS :     FFFFFFFFFFFFA9AE C |
 RAM_VERSCROLL :   FFFFFFFFFFFF9B04 C |  RAM_VIDPRNTLIST : FFFFFFFFFFFFA814 C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFFA99C C | *RCHWIDTH :                      36 - |
*RELAXED :                        0 - |  ROM_END :                    3F200 C |
 RRT :                           14 - |  SAMPLEHEAD :                  1649 C |
 SBEATACC :                      1C C |  SBEATPTCK :                     1E C |
 SET_CHIPS :                    509 C |  SET_CHIPS.TRK_BUFFRS :         50E C |
 SET_MENUTOPLINE :               7B - | *SHIFT :                          2 - |
 SHOWROM :                      DE9 C |  SIZEOF_CAMERA :                 18 C |
 SIZEOF_DREQ :                  5F8 C |  SIZEOF_INPUT :                  10 C |
 SIZEOF_MARSSPR :                14 C |  SIZEOF_MDBG :                   38 C |
 SIZEOF_MDGLBL :   FFFFFFFFFFFFC41C C |  SIZEOF_MDLOBJ :                 18 C |
 SIZEOF_MDOBJ :                  66 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFC41C C |
 SIZEOF_MDSYS :    FFFFFFFFFFFFAE22 C |  SIZEOF_MDVID :    FFFFFFFFFFFFA9C6 C |
 SLOPE_DATA_16 :               16F4 C |  SLV :                           10 - |
 SNDLOCKZ80 :                   2E8 C |  SNDLOCKZ80.WAIT :              2F0 C |
*SNDREQCMD :                    3F8 C |  SNDREQ_ENTER :                 306 C |
 SNDREQ_ENTER.WAIT :            32C C |  SNDREQ_EXIT :                  33C C |
*SNDREQ_SADDR :                 364 C |  SNDREQ_SBYTE :                 36C C |
 SNDREQ_SCMD :                  352 C | *SNDREQ_SLONG :                 360 C |
 SNDREQ_SWORD :                 368 C |  SNDUNLOCKZ80 :                 2FC C |
 SOUND_INIT :                   280 C |  SOUND_INIT.CLEANUP :           2AA C |
 SOUND_INIT.COPY :              2C0 C |  SOUND_INIT.WAIT :              294 C |
*STANDBY :                        3 - |  STR_CURSOR :                  216A C |
*STR_CURSOROUT :               2164 C |  STR_TITLDRWID :               215C C |
 STR_TITLES :                  20EE C |  STR_TITLESFX :                2108 C |
*SYSMARS_ID :                A130EC - | *SYSMARS_REG :               A15100 - |
 SYSTEM_DMAENTER_RAM :         18AA C |  SYSTEM_DMAENTER_ROM :         18B2 C |
 SYSTEM_DMAEXIT_RAM :          18AE C |  SYSTEM_DMAEXIT_ROM :          18B6 C |
*SYSTEM_GRABRAMCODE :          18BC C |  SYSTEM_INIT :                 1784 C |
 SYSTEM_INIT.CLRINPUT :        17E2 C |  SYSTEM_INIT.WAIT :            1792 C |
 SYSTEM_INPUT :                18BE C |  SYSTEM_INPUT.EXIT :           18EC C |
 SYSTEM_INPUT.ID_03 :          1912 C |  SYSTEM_INPUT.ID_0D :          19BC C |
 SYSTEM_INPUT.INVALID :        19B6 C |  SYSTEM_INPUT.LIST :           18F2 C |
 SYSTEM_INPUT.OLDPAD :         1A34 C |  SYSTEM_INPUT.PICK_ID :        1A3A C |
 SYSTEM_INPUT.READ :           1A50 C |  SYSTEM_INPUT.STEP_1 :         1A5C C |
 SYSTEM_INPUT.STEP_2 :         1A68 C |  SYSTEM_INPUT.THIS_ONE :       18D2 C |
*SYSTEM_INPUT.WAIT :           18BE C |  SYSTEM_INPUT.X_NEG :          1984 C |
 SYSTEM_INPUT.Y_NEG :          19B0 C |  SYSTEM_MARSUPDATE :           18BA C |
 SYSTEM_RANDOM :               1A6A C |  SYSTEM_RANDOM.GOOD_S :        1A7A C |
 SYSTEM_SETINTS :              1BD6 C |  SYSTEM_SETINTS.NOHINT :       1BFA C |
 SYSTEM_SETINTS.NOVINT :       1BE8 C |  SYSTEM_SINEWAVE :             1AB8 C |
 SYSTEM_SINEWAVE.DONT_NEG :    1AD4 C | *SYSTEM_SINEWAVE_COS :         1A98 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                                        1AB2 C |
*SYSTEM_SRAMINIT :             1BFC C |  SYSTEM_SRAMINIT.INITSAVE :    1C10 C |
 SYSTEM_WAITFRAME :            17EE C |  SYSTEM_WAITFRAME.WAIT_IN :    1806 C |
 SYSTEM_WAITFRAME.WAIT_LAG :   17F4 C |  SYS_CTRL_1 :                A10009 - |
 SYS_CTRL_2 :                A1000B - |  SYS_CTRL_3 :                A1000D - |
 SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
 SYS_IO :                    A10001 - |  SYS_TMSS :                  A14000 - |
 TBLBUFF_READ :                 54B C |  TBLBUFF_READ.CHK_PSG :         605 C |
 TBLBUFF_READ.CLRFULL :         6CA C |  TBLBUFF_READ.DO_CHIP :         581 C |
 TBLBUFF_READ.DO_NEWCHIP :      637 C |  TBLBUFF_READ.GRAB_LINK :       5B7 C |
 TBLBUFF_READ.INVLDL :          5F5 C |  TBLBUFF_READ.L_HIPRIO :        680 C |
 TBLBUFF_READ.NEW_CHIP :        638 C |  TBLBUFF_READ.NEW_LINK :        67D C |
 TBLBUFF_READ.NEW_LINK_Z :      67B C |  TBLBUFF_READ.NEXTSRCH_TBL :    66F C |
 TBLBUFF_READ.NEXT_CHNL :       56E C |  TBLBUFF_READ.NEXT_PRIO :       65A C |
 TBLBUFF_READ.PASS_2 :          658 C |  TBLBUFF_READ.PICK_TBL :        6A1 C |
 TBLBUFF_READ.REFILL :          634 C |  TBLBUFF_READ.REROLL :          5FE C |
 TBLBUFF_READ.RESET_LINK :      6BB C |  TBLBUFF_READ.RNOT_PSG :        631 C |
 TBLBUFF_READ.SINGL_FREE :      68E C |  TBLBUFF_READ.SINGL_LINK :      623 C |
*TBLBUFF_READ.SNGL_SPRIO :      69D C |  TBLBUFF_READ.SRCH_FREE :       647 C |
 TBLBUFF_READ.SRCH_LINK :       5DA C |  TBLBUFF_READ.SRCH_LLOOP :      5E5 C |
 TBLBUFF_READ.TRACK_CONT :      561 C |  TBLFM :                       13B2 C |
 TBLFM3 :                      13F2 C |  TBLFM6 :                      1402 C |
 TBLLIST :                     1360 C |  TBLPSG :                      1370 C |
 TBLPSGN :                     13A2 C |  TBLPWM :                      1414 C |
 TEST_WAVE :                  1C56E C |  TEST_WAVE_E :                2AC6E C |
 TH :                      20000000 - |  TICKCNT :                     1638 C |
 TICKFLAG :                    1637 C |  TICKSPSET :                   1636 C |
*TIME :                     4:19:43 - | *TIMERCTL :                      30 - |
*TITLE_ANIMATEFG :             1FA4 C |  TITLE_ANIMATEFG.HNEXT :       1FB0 C |
 TITLE_ANIMATEFG.VNEXT :       1FD8 C |  TITLE_PRINTCURSOR :           2000 C |
*TMR :                           2C - |  TRACK_OUT :                    4B4 C |
 TRACK_OUT.CLRFE :              4C5 C | *TRACK_OUT.NOCHIP :             4D2 C |
 TRANSFERROM :                  E09 C |  TRANSFERROM.DOUBLE :           E28 C |
 TRANSFERROM.TRANSFER :         E4C C |  TRANSFERROM.X68KLAST :         E6A C |
 TRANSFERROM.X68KLOOP :         E56 C |  TRANSFERROM.X68KLPWT :         E78 C |
 TRANSFERROM.X68KNOCARRY :      E46 C |  TRANSFERROM.X68KPWTLP :        E7D C |
 TRKBLKS_0 :                   1B18 C |  TRKBLKS_1 :                   1B30 C |
*TRKBLKS_2 :                   1B48 C |  TRKBUFF_0 :                   1650 C |
 TRKBUFF_1 :                   1680 C | *TRKBUFF_2 :                   16B0 C |
 TRKCACH_0 :                   1E00 C |  TRKCACH_1 :                   1E40 C |
*TRKCACH_2 :                   1E80 C | *TRKCACH_3 :                   1EC0 C |
 TRKCHNL_0 :                   16E0 C |  TRKCHNL_1 :                   1768 C |
*TRKCHNL_2 :                   17F0 C |  TRKHDRS_0 :                   1878 C |
 TRKHDRS_1 :                   18D8 C | *TRKHDRS_2 :                   1938 C |
 TRKINSD_0 :                   1998 C |  TRKINSD_1 :                   1A18 C |
*TRKINSD_2 :                   1A98 C |  TRKLISTCACH :                 15EA C |
 TRKLISTPAGE :                   3E C |  TRK_BLOCKS :                     4 - |
 TRK_CACHHALF :                   E - | *TRK_CACHINC :                    F - |
 TRK_CHNCACH :                   2E - |  TRK_CHNCBLK :                   28 - |
 TRK_CHNCHEAD :                  2A - |  TRK_CHNCINS :                   2C - |
 TRK_CHNLIST :                   26 - |  TRK_CURRBLK :                   12 - |
 TRK_INSTR :                      8 - | *TRK_LASTBKBLK :                 16 - |
*TRK_LASTBKHDRS :                17 - | *TRK_LASTBKINS :                 15 - |
 TRK_MAXBLKS :                   1D - |  TRK_MAXCHNLS :                  1C - |
 TRK_MAXHDRS :                   1E - |  TRK_MAXINS :                    1F - |
*TRK_PANNING :                   13 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMCPATT :                  20 - |  TRK_ROMPATT :                   23 - |
 TRK_ROWPAUSE :                  10 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   11 - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    1E8 C |
 UPD_TRACK.DECROW :             27E C |  UPD_TRACK.DECROW_E :           281 C |
 UPD_TRACK.EFFECT_FILL :        3F8 C |  UPD_TRACK.EFF_A :              31C C |
 UPD_TRACK.EFF_B :              32B C |  UPD_TRACK.EFF_C :              341 C |
 UPD_TRACK.EXIT :               272 C |  UPD_TRACK.FIRST_FILL :         3FF C |
 UPD_TRACK.GRAB_RHEAD :         4A0 C |  UPD_TRACK.HAS_NOTE :           289 C |
 UPD_TRACK.INC_CPATT :          344 C |  UPD_TRACK.NEXT_NOTE :          262 C |
 UPD_TRACK.NO_EFF :             2E8 C |  UPD_TRACK.NO_GLBL :            42B C |
 UPD_TRACK.NO_INS :             2CA C |  UPD_TRACK.NO_NOTE :            2BF C |
 UPD_TRACK.NO_VOL :             2D5 C |  UPD_TRACK.OLD_TYPE :           2B3 C |
 UPD_TRACK.RAN_OUT :            352 C |  UPD_TRACK.READ_TRACK :         209 C |
 UPD_TRACK.ROW_ACTIVE :         25B C |  UPD_TRACK.SET_TRACK :          37C C |
 UPD_TRACK.SFXMD :              221 C |  UPD_TRACK.TRACK_END :          3E1 C |
 UPD_TRACK.TRK_BUFFRS :         1ED C |  VARNULLVRAM :                  7FF - |
 VARPRINTPAL :                    3 - |  VARPRINTVRAM :                 580 - |
*VBLK :                          80 - | *VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_CLEAR :                  4E4 C |
*VIDEO_CLEARSCREEN :            4E4 C |  VIDEO_CLEARSCREEN.PMNEXT :     578 C |
 VIDEO_CLEARSCREEN.PNEXT :      562 C |  VIDEO_CLEARSCREEN.SNEXT :      54E C |
 VIDEO_CLEARSCREEN.XNEXT :      52E C |  VIDEO_CLEARSCREEN.YNEXT :      53E C |
*VIDEO_COPY :                   ABC C |  VIDEO_COPY.DMAW :              AD0 C |
 VIDEO_COPY.DMAWE :             B28 C | *VIDEO_DMABLAST :               BE2 C |
 VIDEO_DMABLAST.END :           C30 C |  VIDEO_DMABLAST.EXIT :          C3E C |
 VIDEO_DMABLAST.NEXT :          C0A C | *VIDEO_DMAMKENTRY :             9D4 C |
 VIDEO_DOPALFADE :              88A C |  VIDEO_DOPALFADE.ACTIVE :       8A6 C |
 VIDEO_DOPALFADE.FADE_DONE :    8AE C |  VIDEO_DOPALFADE.FADE_IN :      8B0 C |
 VIDEO_DOPALFADE.FADE_LIST :    8A8 C |  VIDEO_DOPALFADE.FADE_OUT :     954 C |
 VIDEO_DOPALFADE.NO_BLU :       92C C |  VIDEO_DOPALFADE.NO_BLU_O :     9B0 C |
 VIDEO_DOPALFADE.NO_FNSH :      944 C |  VIDEO_DOPALFADE.NO_FNSH_O :    9C4 C |
 VIDEO_DOPALFADE.NO_GRN :       90C C |  VIDEO_DOPALFADE.NO_GRN_O :     998 C |
 VIDEO_DOPALFADE.NO_MOVE :      952 C |  VIDEO_DOPALFADE.NO_MOVE_O :    9D2 C |
 VIDEO_DOPALFADE.NO_RED :       8EC C |  VIDEO_DOPALFADE.NO_RED_O :     980 C |
 VIDEO_DOPALFADE.NXT_PAL :      8CA C |  VIDEO_DOPALFADE.NXT_PAL_O :    968 C |
 VIDEO_FADEPAL :                85C C | *VIDEO_FADEPAL_MARS :           C44 C |
 VIDEO_FILL :                   A46 C |  VIDEO_FILL.DMAW :              A5A C |
 VIDEO_FILL.DMAWE :             AA4 C |  VIDEO_INIT :                   45C C |
 VIDEO_INIT.CLRRAM :            466 C | *VIDEO_INIT.EXIT :              490 C |
 VIDEO_INIT.LOOP :              482 C |  VIDEO_LOADART :                B40 C |
 VIDEO_LOADART.FROM_RAM :       BCE C |  VIDEO_LOADMAP :                582 C |
 VIDEO_LOADMAP.CONT :           5A8 C |  VIDEO_LOADMAP.NODBLE :         5C8 C |
 VIDEO_LOADMAP.NONULL :         5A6 C |  VIDEO_LOADMAP.XLOOP :          598 C |
 VIDEO_LOADMAP.YLOOP :          58E C | *VIDEO_LOADMAP_VERT :           5DA C |
 VIDEO_LOADMAP_VERT.CONT :      60E C |  VIDEO_LOADMAP_VERT.NODBLE :    630 C |
 VIDEO_LOADMAP_VERT.NONULL :    60C C | *VIDEO_LOADMAP_VERT.OUTDBL :    63A C |
 VIDEO_LOADMAP_VERT.XLOOP :     5E8 C |  VIDEO_LOADMAP_VERT.YLOOP :     5FA C |
 VIDEO_LOADPAL :                866 C | *VIDEO_LOADPAL_MARS :           C4E C |
 VIDEO_MARSPALFADE :            C76 C |  VIDEO_MARSPALFADE.ACTIVE :     C92 C |
 VIDEO_MARSPALFADE.FADE_DONE :  C9A C |  VIDEO_MARSPALFADE.FADE_IN :    C9C C |
 VIDEO_MARSPALFADE.FADE_LIST :  C94 C |  VIDEO_MARSPALFADE.FADE_OUT :   D46 C |
 VIDEO_MARSPALFADE.NO_BLU :     D16 C |  VIDEO_MARSPALFADE.NO_BLU_O :   DA2 C |
 VIDEO_MARSPALFADE.NO_FNSH :    D36 C |  VIDEO_MARSPALFADE.NO_FNSH_O :  DB8 C |
 VIDEO_MARSPALFADE.NO_GRN :     CF6 C |  VIDEO_MARSPALFADE.NO_GRN_O :   D8A C |
 VIDEO_MARSPALFADE.NO_MOVE :    D44 C |  VIDEO_MARSPALFADE.NO_MOVE_O :  DC6 C |
 VIDEO_MARSPALFADE.NO_RED :     CD6 C |  VIDEO_MARSPALFADE.NO_RED_O :   D72 C |
 VIDEO_MARSPALFADE.NXT_PAL :    CB4 C |  VIDEO_MARSPALFADE.NXT_PAL_O :  D5A C |
 VIDEO_MARS_GFXMODE :           C40 C | *VIDEO_MARS_WAITFRAME :         C42 C |
 VIDEO_PRINT :                  676 C |  VIDEO_PRINT.DONIBL :           790 C |
 VIDEO_PRINT.EXIT :             700 C |  VIDEO_PRINT.ISBYTE :           6CA C |
 VIDEO_PRINT.ISLONG :           6EE C |  VIDEO_PRINT.ISWORD :           6DC C |
 VIDEO_PRINT.LNGLOOP :          780 C |  VIDEO_PRINT.LOOP :             68A C |
 VIDEO_PRINT.LOWR :             7A0 C |  VIDEO_PRINT.NEWJUMP :          684 C |
 VIDEO_PRINT.NEXT :             6AC C |  VIDEO_PRINT.NEXTV :            70A C |
 VIDEO_PRINT.NOTHING :          7AC C |  VIDEO_PRINT.PUTTEXT :          69E C |
 VIDEO_PRINT.SPECIAL :          6B0 C |  VIDEO_PRINT.VBYTE :            73C C |
 VIDEO_PRINT.VLONG :            788 C |  VIDEO_PRINT.VWORD :            75E C |
 VIDEO_PRINTINIT :              64A C | *VIDEO_PRINTPAL :               664 C |
 VIDEO_RUNFADE :                84A C |  VIDEO_UPDATE :                 490 C |
*VIDEO_UPDATE.EXIT :            4AE C |  VIDEO_UPDATE.LOOP :            4A2 C |
 VIDMARS_PAL :                  C52 C |  VIDMARS_PAL.LOOP :             C6A C |
 VIDMD_PAL :                    86A C |  VIDMD_PAL.LOOP :               882 C |
 VID_PICKLAYER :                7AE C |  VID_PICKLAYER.GOLYR :          7FE C |
 VID_PICKLAYER.NOWD :           7E8 C |  VID_PICKLAYER.PLAWND :         7D6 C |
 VID_PICKLAYER.THISSZ :         81E C |  VID_PICKLAYER.THISSZJ :        846 C |
*VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :                1C86 C | *VIRQ_ON :                        8 - |
*VRAMTTL_CELLHIDE :             780 - |  VRAMTTL_PUZBG :                  1 - |
*VRESINTCLR :                    14 - |  WAVE_FLAGS :                  1635 C |
 WAVE_LEN :                    162D C |  WAVE_LOOP :                   1630 C |
 WAVE_PITCH :                  1633 C |  WAVE_START :                  162A C |
 WAVFREQ_LIST :                123C C |  X68KSRCLSB :                    36 C |
 X68KSRCMID :                    37 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :                    2D18 C |  Z80_CODE_END :                4C18 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      83 C |
 Z80_RESET :                 A11200 - |  Z80_TOP :                     2D18 C |
*ZBANK :                       6000 - |  ZDRVFIFO :                      40 - |
 ZDRVFWRT :                      80 - | *ZDRVMARSBLK :                   82 - |
 ZDRVROMBLK :                    81 - | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
*_CCR :                    FFFFFE92 - | *_DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - | *_DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
*_DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
*_FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - | *_FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - | *_JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
*_OVERWRITE :              24020000 - | *_PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - | *_SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
*_VDPREG :                 20004100 - |

   1198 symbols
    327 unused symbols

 AS V1.42 Beta [Bld 118] - source file md.asm - page 3 - 3/1/2023 4:19:44


  defined macros:
  ---------------

COLORME                               | FINISH                               
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPSG                               | GINSPSGN                             
GINSPWM                               | GSMPHEAD                             
ORG                                   | REPORT                               
STRUCT                                |

     15 macros

 AS V1.42 Beta [Bld 118] - source file md.asm - page 4 - 3/1/2023 4:19:44


  defined functions:
  ------------------

NOTZ80                                | LOCATE                               
MAPSIZE                               | DWORD                                

 AS V1.42 Beta [Bld 118] - source file md.asm - page 5 - 3/1/2023 4:19:44


  codepages:
  ----------

STANDARD (0 changed characters)


0.12 seconds assembly time

   9921 lines source file
  10823 lines incl. macro expansions
      5 passes
      0 errors
      0 warnings
