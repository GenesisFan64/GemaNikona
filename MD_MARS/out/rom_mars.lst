 AS V1.42 Beta [Bld 118] - source file mars.asm - page 1 - 4/27/2023 3:44:03


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; PROJECT MARSIANO
       4/       0 :                     ; +-----------------------------------------------------------------+
       5/       0 :                     
       6/       0 :                     		include	"system/macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Include this file FIRST
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     ; AS Main settings
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 :                     		!org 0				; Start at 0
(1)   13/       0 :                     		cpu 		68000		; Current CPU is 68k, gets changed later.
(1)   14/       0 :                     		padding		off		; Dont pad dc.b
(1)   15/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
(1)   16/       0 :                     		supmode 	on 		; Supervisor mode 68k
(1)   17/       0 :                     		dottedstructs	off		; If needed
(1)   18/       0 :                     		page 		0
(1)   19/       0 :                     
(1)   20/       0 :                     ; ====================================================================
(1)   21/       0 :                     ; ---------------------------------------------
(1)   22/       0 :                     ; Functions
(1)   23/       0 :                     ; ---------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     dword 		function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   26/       0 :                     mapsize		function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes, for cell sizes use doubleword
(1)   27/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   28/       0 :                     
(1)   29/       0 :                     ; ====================================================================
(1)   30/       0 :                     ; ---------------------------------------------
(1)   31/       0 :                     ; Macros
(1)   32/       0 :                     ; ---------------------------------------------
(1)   33/       0 :                     
(1)   34/       0 : =$0                 paddingSoFar set 0
(1)   35/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   36/       0 :                     
(1)   37/       0 :                     ; -------------------------------------
(1)   38/       0 :                     ; Reserve memory section
(1)   39/       0 :                     ; -------------------------------------
(1)   40/       0 :                     
(1)   41/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   42/       0 :                     
(1)   43/       0 :                     ; 	if WPATCH=1
(1)   44/       0 :                     ; GLBL_LASTPC	set *
(1)   45/       0 :                     ; GLBL_LASTORG	set *
(1)   46/       0 :                     ; 		dephase
(1)   47/       0 :                     ; 		phase thisinput
(1)   48/       0 :                     ; 	else
(1)   49/       0 :                     GLBL_LASTPC	set *
(1)   50/       0 :                     		dephase
(1)   51/       0 :                     GLBL_LASTORG	set *
(1)   52/       0 :                     		phase thisinput
(1)   53/       0 :                     ; 	endif
(1)   54/       0 :                     		endm
(1)   55/       0 :                     
(1)   56/       0 :                     ; -------------------------------------
(1)   57/       0 :                     ; Finish struct
(1)   58/       0 :                     ; -------------------------------------
(1)   59/       0 :                     
(1)   60/       0 :                     finish		macro				; Then finish the custom struct.
(1)   61/       0 :                     		!org GLBL_LASTORG
(1)   62/       0 :                     		phase GLBL_LASTPC
(1)   63/       0 :                     		endm
(1)   64/       0 :                     
(1)   65/       0 :                     ; -------------------------------------
(1)   66/       0 :                     ; Report RAM usage
(1)   67/       0 :                     ; -------------------------------------
(1)   68/       0 :                     
(1)   69/       0 :                     report		macro from,dis
(1)   70/       0 :                     	if from == 0
(1)   71/       0 :                     		if MOMPASS=5
(1)   72/       0 :                     			message "THIS SCREEN RAM uses: \{(dis-RAM_ModeBuff)&$FFFFFF} of \{MAX_MDERAM}"
(1)   73/       0 :                     		endif
(1)   74/       0 :                     	endif
(1)   75/       0 :                     		endm
(1)   76/       0 :                     
(1)   77/       0 :                     ; -------------------------------------
(1)   78/       0 :                     ; Color debug
(1)   79/       0 :                     ; -------------------------------------
(1)   80/       0 :                     
(1)   81/       0 :                     colorme		macro this
(1)   82/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)   83/       0 :                     		move.w	#this,(vdp_data).l
(1)   84/       0 :                     		endm
(1)   85/       0 :                     
(1)   86/       0 :                     ; -------------------------------------
(1)   87/       0 :                     ; Custom ORG-filler
(1)   88/       0 :                     ;
(1)   89/       0 :                     ; (from s2disasm)
(1)   90/       0 :                     ; -------------------------------------
(1)   91/       0 :                     
(1)   92/       0 :                     org macro address
(1)   93/       0 :                     	if notZ80(MOMCPU)
(1)   94/       0 :                     		if address < *
(1)   95/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   96/       0 :                     		elseif address > *
(1)   97/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)   98/       0 :                     			!org address
(1)   99/       0 :                     		endif
(1)  100/       0 :                     	else
(1)  101/       0 :                     		if address < $
(1)  102/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)  103/       0 :                     		else
(1)  104/       0 :                     			while address > $
(1)  105/       0 :                     				db 0
(1)  106/       0 :                     			endm
(1)  107/       0 :                     		endif
(1)  108/       0 :                     	endif
(1)  109/       0 :                         endm
(1)  110/       0 :                     
(1)  111/       0 :                     
       7/       0 :                     		include	"system/shared.asm"		; Shared Genesis/32X variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD/32X shared structs and values
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; --------------------------------------------------------
(1)    8/       0 :                     ; Settings
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 : =$10                MAX_MODELS	equ 16		; MAX 3D Models
(1)   12/       0 : =$18                MAX_SUPERSPR	equ 24		; MAX Number of Super Sprites
(1)   13/       0 :                     
(1)   14/       0 :                     ; --------------------------------------------------------
(1)   15/       0 :                     ; Structs
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     
(1)   18/       0 :                     ; 3D Models
(1)   19/       0 :                     ; RAM_MdDreq+Dreq_Objects
(1)   20/       0 : (MACRO)             		struct 0
(1)   20/       0 :                     
(1)   20/       0 :                     ;       if WPATCH=1
(1)   20/       0 :                     ; GLBL_LASTPC   set *
(1)   20/       0 :                     ; GLBL_LASTORG  set *
(1)   20/       0 :                     ;               dephase
(1)   20/       0 :                     ;               phase 0
(1)   20/       0 :                     ;       else
(1)   20/       0 : =$0                 GLBL_LASTPC     set *
(1)   20/       0 :                                     dephase
(1)   20/       0 : =$0                 GLBL_LASTORG    set *
(1)   20/       0 :                                     phase 0
(1)   20/       0 :                     ;       endif
(1)   21/       0 :                     mdl_data	ds.l 1		; Model data pointer, if zero: no model
(1)   22/       4 :                     mdl_option	ds.l 1		; Model options: pixelvalue increment
(1)   23/       8 :                     mdl_x_pos	ds.w 1		; X position $08.00
(1)   24/       A :                     mdl_y_pos	ds.w 1		; Y position $08.00
(1)   25/       C :                     mdl_z_pos	ds.w 1		; Z position $08.00
(1)   26/       E :                     mdl_x_rot	ds.w 1		; X rotation $08.00
(1)   27/      10 :                     mdl_y_rot	ds.w 1		; Y rotation $08.00
(1)   28/      12 :                     mdl_z_rot	ds.w 1		; Z rotation $08.00
(1)   29/      14 :                     mdl_frame	ds.w 1
(1)   30/      16 :                     mdl_flags	ds.w 1
(1)   31/      18 :                     sizeof_mdlobj	ds.l 0
(1)   32/      18 : (MACRO)             		finish
(1)   32/       0 :                                     !org GLBL_LASTORG
(1)   32/       0 :                                     phase GLBL_LASTPC
(1)   33/       0 :                     
(1)   34/       0 :                     ; 3D Camera
(1)   35/       0 :                     ; RAM_MdDreq+Dreq_ObjCam
(1)   36/       0 : (MACRO)             		struct 0
(1)   36/       0 :                     
(1)   36/       0 :                     ;       if WPATCH=1
(1)   36/       0 :                     ; GLBL_LASTPC   set *
(1)   36/       0 :                     ; GLBL_LASTORG  set *
(1)   36/       0 :                     ;               dephase
(1)   36/       0 :                     ;               phase 0
(1)   36/       0 :                     ;       else
(1)   36/       0 : =$0                 GLBL_LASTPC     set *
(1)   36/       0 :                                     dephase
(1)   36/       0 : =$0                 GLBL_LASTORG    set *
(1)   36/       0 :                                     phase 0
(1)   36/       0 :                     ;       endif
(1)   37/       0 :                     cam_x_pos	ds.l 1		; X position $000000.00
(1)   38/       4 :                     cam_y_pos	ds.l 1		; Y position $000000.00
(1)   39/       8 :                     cam_z_pos	ds.l 1		; Z position $000000.00
(1)   40/       C :                     cam_x_rot	ds.l 1		; X rotation $000000.00
(1)   41/      10 :                     cam_y_rot	ds.l 1		; Y rotation $000000.00
(1)   42/      14 :                     cam_z_rot	ds.l 1		; Z rotation $000000.00
(1)   43/      18 :                     sizeof_camera	ds.l 0
(1)   44/      18 : (MACRO)             		finish
(1)   44/       0 :                                     !org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 :                     
(1)   46/       0 :                     ; "Super" sprites:
(1)   47/       0 :                     ; RAM_MdDreq+Dreq_SuperSpr
(1)   48/       0 :                     ;
(1)   49/       0 :                     ; ** = KEEP the order
(1)   50/       0 : (MACRO)             		struct 0
(1)   50/       0 :                     
(1)   50/       0 :                     ;       if WPATCH=1
(1)   50/       0 :                     ; GLBL_LASTPC   set *
(1)   50/       0 :                     ; GLBL_LASTORG  set *
(1)   50/       0 :                     ;               dephase
(1)   50/       0 :                     ;               phase 0
(1)   50/       0 :                     ;       else
(1)   50/       0 : =$0                 GLBL_LASTPC     set *
(1)   50/       0 :                                     dephase
(1)   50/       0 : =$0                 GLBL_LASTORG    set *
(1)   50/       0 :                                     phase 0
(1)   50/       0 :                     ;       endif
(1)   51/       0 :                     marsspr_xfrm	ds.b 1		; Animation X frame pos **
(1)   52/       1 :                     marsspr_yfrm	ds.b 1		; Animation Y frame pos **
(1)   53/       2 :                     marsspr_xs	ds.b 1		; Sprite X size **
(1)   54/       3 :                     marsspr_ys	ds.b 1		; Sprite Y size **
(1)   55/       4 :                     marsspr_x	ds.w 1		; Screen X position **
(1)   56/       6 :                     marsspr_y	ds.w 1		; Screen Y position **
(1)   57/       8 :                     marsspr_dwidth	ds.w 1		; Spritesheet WIDTH
(1)   58/       A :                     marsspr_indx	ds.w 1		; Palette index base
(1)   59/       C :                     marsspr_flags	ds.w 1		; Sprite flags: %VH (flip)
(1)   60/       E :                     marsspr_fill	ds.w 1		; <-- 2 FILLER bytes: free to use
(1)   61/      10 :                     marsspr_data	ds.l 1		; Spritesheet address in SH2 area (0 == end-of-supersprites)
(1)   62/      14 :                     ; marsspr_map	ds.l 1		; MAP data
(1)   63/      14 :                     sizeof_marsspr	ds.l 0
(1)   64/      14 : (MACRO)             		finish
(1)   64/       0 :                                     !org GLBL_LASTORG
(1)   64/       0 :                                     phase GLBL_LASTPC
(1)   65/       0 :                     
(1)   66/       0 :                     ; ====================================================================
(1)   67/       0 :                     ; ----------------------------------------------------------------
(1)   68/       0 :                     ; MAIN DREQ-RAM control
(1)   69/       0 :                     ;
(1)   70/       0 :                     ; To read these labels:
(1)   71/       0 :                     ;
(1)   72/       0 :                     ; On the Genesis Side:
(1)   73/       0 :                     ; 	lea	(RAM_MdDreq+DREQ_LABEL),a0
(1)   74/       0 :                     ; On the 32X Side:
(1)   75/       0 :                     ; 	mov	#RAM_Mars_DreqRead+DREQ_LABEL,r1
(1)   76/       0 :                     ;
(1)   77/       0 :                     ; Call System_MarsUpdate DURING display to transfer your
(1)   78/       0 :                     ; changes.
(1)   79/       0 :                     ; ----------------------------------------------------------------
(1)   80/       0 :                     
(1)   81/       0 :                     ; *** List MUST be aligned in 8bytes (end with 0 or 8) ***
(1)   82/       0 :                     
(1)   83/       0 : (MACRO)             		struct 0
(1)   83/       0 :                     
(1)   83/       0 :                     ;       if WPATCH=1
(1)   83/       0 :                     ; GLBL_LASTPC   set *
(1)   83/       0 :                     ; GLBL_LASTORG  set *
(1)   83/       0 :                     ;               dephase
(1)   83/       0 :                     ;               phase 0
(1)   83/       0 :                     ;       else
(1)   83/       0 : =$0                 GLBL_LASTPC     set *
(1)   83/       0 :                                     dephase
(1)   83/       0 : =$0                 GLBL_LASTORG    set *
(1)   83/       0 :                                     phase 0
(1)   83/       0 :                     ;       endif
(1)   84/       0 :                     Dreq_Palette	ds.w 256				; 256-color palette
(1)   85/     200 :                     Dreq_BgExBuff	ds.b $80				; Buffer for current screen mode (NOTE: manual size)
(1)   86/     280 :                     Dreq_ObjCam	ds.b sizeof_camera
(1)   87/     298 :                     Dreq_Objects	ds.b sizeof_mdlobj*MAX_MODELS		; 3D Objects
(1)   88/     418 :                     Dreq_SuperSpr	ds.b sizeof_marsspr*MAX_SUPERSPR	; Super sprites
(1)   89/     5F8 :                     sizeof_dreq	ds.l 0
(1)   90/     5F8 : (MACRO)             		finish
(1)   90/       0 :                                     !org GLBL_LASTORG
(1)   90/       0 :                                     phase GLBL_LASTPC
(1)   91/       0 :                     
(1)   95/       0 :                     
       8/       0 :                     		include	"system/md/map.asm"		; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / MegaDrive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100            z80_bus 	equ	$A11100		; only read bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   21/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000              zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9-byte writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
(1)   40/       0 :                     ; ----------------------------------------------------------------
(1)   41/       0 :                     ; 32X registers
(1)   42/       0 :                     ; ----------------------------------------------------------------
(1)   43/       0 :                     
(1)   44/       0 : =$A130EC            sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   45/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   46/       0 :                     
       9/       0 :                     		include	"system/mars/map.asm"		; 32X hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                 CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000           CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000           CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000          TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000          _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000          _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000          _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                 adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                 intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                 standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                 hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                 dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                comm7		equ	$27		;
(1)   52/       0 : =$28                comm8		equ	$28		;
(1)   53/       0 : =$29                comm9		equ	$29		;
(1)   54/       0 : =$2A                comm10		equ	$2A		;
(1)   55/       0 : =$2B                comm11		equ	$2B		;
(1)   56/       0 : =$2C                comm12		equ	$2C		;
(1)   57/       0 : =$2D                comm13		equ	$2D		;
(1)   58/       0 : =$2E                comm14		equ	$2E		;
(1)   59/       0 : =$2F                comm15		equ	$2F		;
(1)   60/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                 CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                 ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                 FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                 FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                 HIRQ_ON		equ	$04
(1)   82/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                 tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                 shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                 filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                 vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                 framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                 _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                 _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                 _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                 _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92          _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      10/       0 :                     		include	"system/md/const.asm"		; Genesis variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis side constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$10                MAX_MDDMATSK	equ 16			; MAX DMA BLAST entries
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; Settings
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 : =$FFFF9000          MDRAM_START	equ $FFFF9000		; Start of Genesis working RAM
(1)   14/       0 : =$1000              MAX_MDERAM	equ $1000		; Maximum RAM for current Screen mode
(1)   15/       0 :                     
(1)   16/       0 :                     ; ====================================================================
(1)   17/       0 :                     ; ----------------------------------------------------------------
(1)   18/       0 :                     ; Input
(1)   19/       0 :                     ; ----------------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Controller
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; Controller buffer data (after calling System_Input)
(1)   26/       0 :                     ;
(1)   27/       0 :                     ; Type/Revision byte:
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; ID    |
(1)   30/       0 :                     ; $0D   | $00 - Original 3 button
(1)   31/       0 :                     ;       | $01 - 6 button version: XYZM
(1)   32/       0 :                     
(1)   33/       0 : (MACRO)             		struct 0
(1)   33/       0 :                     
(1)   33/       0 :                     ;       if WPATCH=1
(1)   33/       0 :                     ; GLBL_LASTPC   set *
(1)   33/       0 :                     ; GLBL_LASTORG  set *
(1)   33/       0 :                     ;               dephase
(1)   33/       0 :                     ;               phase 0
(1)   33/       0 :                     ;       else
(1)   33/       0 : =$0                 GLBL_LASTPC     set *
(1)   33/       0 :                                     dephase
(1)   33/       0 : =$0                 GLBL_LASTORG    set *
(1)   33/       0 :                                     phase 0
(1)   33/       0 :                     ;       endif
(1)   34/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   35/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   36/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   37/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   38/       6 :                     mouse_x		ds.w 1			; Mouse X add/sub
(1)   39/       8 :                     mouse_y		ds.w 1			; Mouse Y add/sub
(1)   40/       A :                     extr_3		ds.w 1
(1)   41/       C :                     extr_4		ds.w 1
(1)   42/       E :                     extr_5		ds.w 1
(1)   43/      10 :                     sizeof_input	ds.l 0
(1)   44/      10 : (MACRO)             		finish
(1)   44/       0 :                                     !org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 :                     
(1)   46/       0 :                     ; Read as (Controller_1) then add +on_hold or +on_press
(1)   47/       0 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   48/       0 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   49/       0 :                     
(1)   50/       0 :                     ; Read WORD in +on_hold or +on_press
(1)   51/       0 : =$1                 JoyUp		equ $0001
(1)   52/       0 : =$2                 JoyDown		equ $0002
(1)   53/       0 : =$4                 JoyLeft		equ $0004
(1)   54/       0 : =$8                 JoyRight	equ $0008
(1)   55/       0 : =$10                JoyB		equ $0010
(1)   56/       0 : =$20                JoyC		equ $0020
(1)   57/       0 : =$40                JoyA		equ $0040
(1)   58/       0 : =$80                JoyStart	equ $0080
(1)   59/       0 : =$100               JoyZ		equ $0100
(1)   60/       0 : =$200               JoyY		equ $0200
(1)   61/       0 : =$400               JoyX		equ $0400
(1)   62/       0 : =$800               JoyMode		equ $0800
(1)   63/       0 : =$0                 bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   64/       0 : =$1                 bitJoyDown	equ 1
(1)   65/       0 : =$2                 bitJoyLeft	equ 2
(1)   66/       0 : =$3                 bitJoyRight	equ 3
(1)   67/       0 : =$4                 bitJoyB		equ 4
(1)   68/       0 : =$5                 bitJoyC		equ 5
(1)   69/       0 : =$6                 bitJoyA		equ 6
(1)   70/       0 : =$7                 bitJoyStart	equ 7
(1)   71/       0 : =$8                 bitJoyZ		equ 8
(1)   72/       0 : =$9                 bitJoyY		equ 9
(1)   73/       0 : =$A                 bitJoyX		equ 10
(1)   74/       0 : =$B                 bitJoyMode	equ 11
(1)   75/       0 :                     
(1)   76/       0 :                     ; Mega Mouse
(1)   77/       0 :                     ; Read WORD as +on_hold or +on_press
(1)   78/       0 : =$1                 ClickR		equ $0001
(1)   79/       0 : =$2                 ClickL		equ $0002
(1)   80/       0 : =$4                 ClickM		equ $0004	; US MOUSE ONLY
(1)   81/       0 : =$8                 ClickS		equ $0008	; (Untested)
(1)   82/       0 : =$0                 bitClickR	equ 0
(1)   83/       0 : =$1                 bitClickL	equ 1
(1)   84/       0 : =$2                 bitClickM	equ 2
(1)   85/       0 : =$3                 bitClickS	equ 3
(1)   86/       0 :                     
(1)   87/       0 :                     ; ====================================================================
(1)   88/       0 :                     ; ----------------------------------------------------------------
(1)   89/       0 :                     ; MD RAM
(1)   90/       0 :                     ;
(1)   91/       0 :                     ; NOTE for porting this to Sega CD (or SegaCD+32X):
(1)   92/       0 :                     ; From $FFFD00 to $FFFDFF is reserved for the MAIN-CPU's vectors
(1)   93/       0 :                     ; ----------------------------------------------------------------
(1)   94/       0 :                     
(1)   95/       0 : (MACRO)             		struct MDRAM_START
(1)   95/       0 :                     
(1)   95/       0 :                     ;       if WPATCH=1
(1)   95/       0 :                     ; GLBL_LASTPC   set *
(1)   95/       0 :                     ; GLBL_LASTORG  set *
(1)   95/       0 :                     ;               dephase
(1)   95/       0 :                     ;               phase MDRAM_START
(1)   95/       0 :                     ;       else
(1)   95/       0 : =$0                 GLBL_LASTPC     set *
(1)   95/       0 :                                     dephase
(1)   95/       0 : =$0                 GLBL_LASTORG    set *
(1)   95/FFFFFFFFFFFF9000 :                                     phase MDRAM_START
(1)   95/FFFFFFFFFFFF9000 :                     ;       endif
(1)   96/FFFFFFFFFFFF9000 :                     	; First pass: empty sizes
(1)  106/FFFFFFFFFFFF9000 :                     	; Second pass: sizes are set
(1)  107/FFFFFFFFFFFF9000 :                     ; RAM_MdSound	ds.b sizeof_mdsnd-RAM_MdSound
(1)  108/FFFFFFFFFFFF9000 :                     RAM_MdVideo	ds.b sizeof_mdvid-RAM_MdVideo
(1)  109/FFFFFFFFFFFFA9C6 :                     RAM_MdSystem	ds.b sizeof_mdsys-RAM_MdSystem
(1)  110/FFFFFFFFFFFFAE22 :                     RAM_MdDreq	ds.b sizeof_dreq
(1)  111/FFFFFFFFFFFFB41A :                     RAM_ModeBuff	ds.b MAX_MDERAM
(1)  112/FFFFFFFFFFFFC41A :                     RAM_MdGlobal	ds.b sizeof_mdglbl-RAM_MdGlobal	; code/global.asm
(1)  113/FFFFFFFFFFFFC41C :                     sizeof_mdram	ds.l 0
(1)  115/FFFFFFFFFFFFC41C :                     
MD RAM: FF9000-FFC41C
(1)  117/FFFFFFFFFFFFC41C :                     		message "MD RAM: \{(MDRAM_START)&$FFFFFF}-\{(sizeof_mdram)&$FFFFFF}"
(1)  119/FFFFFFFFFFFFC41C : (MACRO)             		finish
(1)  119/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)  119/       0 :                                     phase GLBL_LASTPC
(1)  120/       0 :                     
(1)  121/       0 :                     
      11/       0 :                     		include "code/global.asm"		; Global user variables on the Genesis
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Global structs and values for Genesis side
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; --------------------------------------------------------
(1)    8/       0 :                     ; Settings
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     
(1)   12/       0 :                     ; ====================================================================
(1)   13/       0 :                     ; ------------------------------------------------------
(1)   14/       0 :                     ; Structs
(1)   15/       0 :                     ; ------------------------------------------------------
(1)   16/       0 :                     
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Variables
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     
(1)   24/       0 :                     ; ====================================================================
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     ; RAM
(1)   27/       0 :                     ; --------------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 : (MACRO)             			struct RAM_MdGlobal
(1)   29/       0 :                     
(1)   29/       0 :                     ;       if WPATCH=1
(1)   29/       0 :                     ; GLBL_LASTPC   set *
(1)   29/       0 :                     ; GLBL_LASTORG  set *
(1)   29/       0 :                     ;               dephase
(1)   29/       0 :                     ;               phase RAM_MDGLOBAL
(1)   29/       0 :                     ;       else
(1)   29/       0 : =$0                 GLBL_LASTPC     set *
(1)   29/       0 :                                     dephase
(1)   29/       0 : =$0                 GLBL_LASTORG    set *
(1)   29/FFFFFFFFFFFFC41A :                                     phase RAM_MDGLOBAL
(1)   29/FFFFFFFFFFFFC41A :                     ;       endif
(1)   30/FFFFFFFFFFFFC41A :                     RAM_Glbl_Scrn		ds.w 1
(1)   31/FFFFFFFFFFFFC41C :                     sizeof_mdglbl		ds.l 0
(1)   32/FFFFFFFFFFFFC41E : (MACRO)             			finish
(1)   32/FFFFFFFFFFFFC41A :                                     !org GLBL_LASTORG
(1)   32/       0 :                                     phase GLBL_LASTPC
(1)   33/       0 :                     
      12/       0 :                     		include	"system/head_mars.asm"		; 32X header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; OLD Header for Genesis to boot
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : 0000 0000           		dc.l 0			; Stack point
(1)    7/       4 : 0000 03F0           		dc.l $3F0		; Entry point MUST point to $3F0
(1)    8/       8 : 0000 0820           		dc.l MD_ErrBus		; Bus error
(1)    9/       C : 0000 0820           		dc.l MD_ErrAddr		; Address error
(1)   10/      10 : 0000 0820           		dc.l MD_ErrIll		; ILLEGAL Instruction
(1)   11/      14 : 0000 0820           		dc.l MD_ErrZDiv		; Divide by 0
(1)   12/      18 : 0000 0820           		dc.l MD_ErrChk		; CHK Instruction
(1)   13/      1C : 0000 0820           		dc.l MD_ErrTrapV	; TRAPV Instruction
(1)   14/      20 : 0000 0820           		dc.l MD_ErrPrivl	; Privilege violation
(1)   15/      24 : 0000 0820           		dc.l MD_Trace		; Trace
(1)   16/      28 : 0000 0820           		dc.l MD_Line1010	; Line 1010 Emulator
(1)   17/      2C : 0000 0820           		dc.l MD_Line1111	; Line 1111 Emulator
(1)   18/      30 : 0000 0820           		dc.l MD_ErrorEx		; Error exception
(1)   19/      34 : 0000 0820           		dc.l MD_ErrorEx
(1)   20/      38 : 0000 0820           		dc.l MD_ErrorEx
(1)   21/      3C : 0000 0820           		dc.l MD_ErrorEx
(1)   22/      40 : 0000 0820           		dc.l MD_ErrorEx
(1)   23/      44 : 0000 0820           		dc.l MD_ErrorEx
(1)   24/      48 : 0000 0820           		dc.l MD_ErrorEx
(1)   25/      4C : 0000 0820           		dc.l MD_ErrorEx
(1)   26/      50 : 0000 0820           		dc.l MD_ErrorEx
(1)   27/      54 : 0000 0820           		dc.l MD_ErrorEx
(1)   28/      58 : 0000 0820           		dc.l MD_ErrorEx
(1)   29/      5C : 0000 0820           		dc.l MD_ErrorEx
(1)   30/      60 : 0000 0820           		dc.l MD_ErrorEx
(1)   31/      64 : 0000 0820           		dc.l MD_ErrorTrap
(1)   32/      68 : 0000 0820           		dc.l MD_ErrorTrap
(1)   33/      6C : 0000 0820           		dc.l MD_ErrorTrap
(1)   34/      70 : FFFF AE18           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   35/      74 : 0000 0820           		dc.l MD_ErrorTrap
(1)   36/      78 : FFFF AE12           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   37/      7C : 0000 0820           		dc.l MD_ErrorTrap
(1)   38/      80 : 0000 0820           		dc.l MD_ErrorTrap
(1)   39/      84 : 0000 0820           		dc.l MD_ErrorTrap
(1)   40/      88 : 0000 0820           		dc.l MD_ErrorTrap
(1)   41/      8C : 0000 0820           		dc.l MD_ErrorTrap
(1)   42/      90 : 0000 0820           		dc.l MD_ErrorTrap
(1)   43/      94 : 0000 0820           		dc.l MD_ErrorTrap
(1)   44/      98 : 0000 0820           		dc.l MD_ErrorTrap
(1)   45/      9C : 0000 0820           		dc.l MD_ErrorTrap
(1)   46/      A0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   47/      A4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   48/      A8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   49/      AC : 0000 0820           		dc.l MD_ErrorTrap
(1)   50/      B0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   51/      B4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   52/      B8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   53/      BC : 0000 0820           		dc.l MD_ErrorTrap
(1)   54/      C0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   55/      C4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   56/      C8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   57/      CC : 0000 0820           		dc.l MD_ErrorTrap
(1)   58/      D0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   59/      D4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   60/      D8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   61/      DC : 0000 0820           		dc.l MD_ErrorTrap
(1)   62/      E0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   63/      E4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   64/      E8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   65/      EC : 0000 0820           		dc.l MD_ErrorTrap
(1)   66/      F0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   67/      F4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   68/      F8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   69/      FC : 0000 0820           		dc.l MD_ErrorTrap
(1)   70/     100 : 5345 4741 2033 3258 		dc.b "SEGA 32X        "
                    2020 2020 2020 2020 
(1)   71/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2023.MAR"
                    3230 3233 2E4D 4152 
(1)   72/     120 : 4D4F 4B4F 4E41 2053 		dc.b "MOKONA SOUND DRIVER                             "
                    4F55 4E44 2044 5249 
                    5645 5220 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   73/     150 : 4E49 4B4F 4E41 2053 		dc.b "NIKONA SOUND DRIVER                             "
                    4F55 4E44 2044 5249 
                    5645 5220 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   74/     180 : 474D 2048 4F4D 4542 		dc.b "GM HOMEBREW-01"
                    5245 572D 3031      
(1)   75/     18E : 0000                		dc.w 0
(1)   76/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   77/     1A0 : 0000 0000           		dc.l 0
(1)   78/     1A4 : 000C A9DC           		dc.l ROM_END
(1)   79/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   80/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   81/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   82/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   83/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   84/     1BC :                     		align $1F0
(1)   85/     1F0 : 4A55 2020 2020 2020 		dc.b "JU              "
                    2020 2020 2020 2020 
(1)   86/     200 :                     
(1)   87/     200 :                     ; ====================================================================
(1)   88/     200 :                     ; ----------------------------------------------------------------
(1)   89/     200 :                     ; NEW header for 32X
(1)   90/     200 :                     ; ----------------------------------------------------------------
(1)   91/     200 :                     
(1)   92/     200 : 4EF9 0088 0800      		jmp	($880000|MARS_Entry).l
(1)   93/     206 : 4EF9 0088 0820      		jmp	($880000|MD_ErrBus).l		; Bus error
(1)   94/     20C : 4EF9 0088 0820      		jmp	($880000|MD_ErrAddr).l		; Address error
(1)   95/     212 : 4EF9 0088 0820      		jmp	($880000|MD_ErrIll).l		; ILLEGAL Instruction
(1)   96/     218 : 4EF9 0088 0820      		jmp	($880000|MD_ErrZDiv).l		; Divide by 0
(1)   97/     21E : 4EF9 0088 0820      		jmp	($880000|MD_ErrChk).l		; CHK Instruction
(1)   98/     224 : 4EF9 0088 0820      		jmp	($880000|MD_ErrTrapV).l		; TRAPV Instruction
(1)   99/     22A : 4EF9 0088 0820      		jmp	($880000|MD_ErrPrivl).l		; Privilege violation
(1)  100/     230 : 4EF9 0088 0820      		jmp	($880000|MD_Trace).l		; Trace
(1)  101/     236 : 4EF9 0088 0820      		jmp	($880000|MD_Line1010).l		; Line 1010 Emulator
(1)  102/     23C : 4EF9 0088 0820      		jmp	($880000|MD_Line1111).l		; Line 1111 Emulator
(1)  103/     242 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l		; Error exception
(1)  104/     248 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  105/     24E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  106/     254 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  107/     25A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  108/     260 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  109/     266 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  110/     26C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  111/     272 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  112/     278 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  113/     27E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  114/     284 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  115/     28A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  116/     290 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  117/     296 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  118/     29C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  119/     2A2 : 4EF9 FFFF AE18      		jmp	(RAM_MdMarsHInt).l		; RAM jump for HBlank (JMP xxxx xxxx)
(1)  120/     2A8 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  121/     2AE : 4EF9 FFFF AE12      		jmp	(RAM_MdMarsVInt).l		; RAM jump for VBlank (JMP xxxx xxxx)
(1)  122/     2B4 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  123/     2BA : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  124/     2C0 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  125/     2C6 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  126/     2CC : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  127/     2D2 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  128/     2D8 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  129/     2DE : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  130/     2E4 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  131/     2EA : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  132/     2F0 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  133/     2F6 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  134/     2FC : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  135/     302 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  136/     308 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  137/     30E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  138/     314 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  139/     31A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  140/     320 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  141/     326 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  142/     32C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  143/     332 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  144/     338 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  145/     33E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  146/     344 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  147/     34A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  148/     350 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  149/     356 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  150/     35C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  151/     362 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  152/     368 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  153/     36E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  154/     374 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  155/     37A :                     
(1)  156/     37A :                     ; ----------------------------------------------------------------
(1)  157/     37A :                     
(1)  158/     37A :                     		align $3C0
(1)  159/     3C0 : 4D41 5253 2043 4845 		dc.b "MARS CHECK MODE "			; Module name
                    434B 204D 4F44 4520 
(1)  160/     3D0 : 0000 0000           		dc.l 0					; Version (always 0)
(1)  161/     3D4 : 0004 F200           		dc.l MARS_RAMDATA			; RAM-code location *Set to 0 if SH2 code points to ROM*
(1)  162/     3D8 : 0000 0000           		dc.l 0					; Zero again.
(1)  163/     3DC : 0000 5070           		dc.l MARS_RAMDATA_e-MARS_RAMDATA	; RAM-code size (END-START) *Set to 4 if SH2 code points to ROM*
(1)  164/     3E0 : 0600 0F20           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 area)
(1)  165/     3E4 : 0600 1448           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 area)
(1)  166/     3E8 : 0600 0000           		dc.l SH2_Master				; Master SH2 default VBR
(1)  167/     3EC : 0600 0128           		dc.l SH2_Slave				; Slave SH2 default VBR
(1)  168/     3F0 :                     		binclude "system/mars/data/security.bin"; All the securty/boot code
(1)  169/     800 :                     
(1)  170/     800 :                     ; ====================================================================
(1)  171/     800 :                     ; ----------------------------------------------------------------
(1)  172/     800 :                     ; Entry point, this must be located at $800
(1)  173/     800 :                     ;
(1)  174/     800 :                     ; At this point, these registers return
(1)  175/     800 :                     ; the following bits:
(1)  176/     800 :                     ;
(1)  177/     800 :                     ; d0: %h0000000 rsc000ti
(1)  178/     800 :                     ; 	h - Cold start / Hot Start
(1)  179/     800 :                     ; 	r - SDRAM self check pass or error
(1)  180/     800 :                     ; 	s - Security check pass or error
(1)  181/     800 :                     ; 	c - Checksum pass or error
(1)  182/     800 :                     ; 	t - TV mode pass or error
(1)  183/     800 :                     ; 	i - MARS ID pass or error
(1)  184/     800 :                     ;
(1)  185/     800 :                     ; d1: %m0000000 jdk0vvv
(1)  186/     800 :                     ; 	m - MARS TV mode
(1)  187/     800 :                     ; 	j - Country: Japan / Overseas
(1)  188/     800 :                     ; 	d - MD TV mode
(1)  189/     800 :                     ; 	k - DISK connected: Yes / No
(1)  190/     800 :                     ; 	v - Version
(1)  191/     800 :                     ;
(1)  192/     800 :                     ; Carry flag: "MARS ID" and Self Check result
(1)  193/     800 :                     ; 	cc: Test passed
(1)  194/     800 :                     ; 	cs: Test failed**
(1)  195/     800 :                     ;
(1)  196/     800 :                     ; ** HARDWARE BUG: This may still trigger if pressing
(1)  197/     800 :                     ; RESET so many times. (Found this on VRDX)
(1)  198/     800 :                     ; * WORKAROUND: After jumping to the
(1)  199/     800 :                     ; "No 32X detected" loop, test the checksum bit again
(1)  200/     800 :                     ; and if it passes Init as usual.
(1)  201/     800 :                     ; ----------------------------------------------------------------
(1)  202/     800 :                     
(1)  203/     800 :                     MARS_Entry:
(1)  204/     800 : 6436                		bcc	MD_Init			; Carry clear: pass
(1)  205/     802 :                     
(1)  206/     802 :                     ; ====================================================================
(1)  207/     802 :                     ; ----------------------------------------------------------------
(1)  208/     802 :                     ; If 32X is not detected...
(1)  209/     802 :                     ;
(1)  210/     802 :                     ; This only works in emulators, though.
(1)  211/     802 :                     ; ----------------------------------------------------------------
(1)  212/     802 :                     
(1)  213/     802 :                     .no_mars:
(1)  214/     802 : 0800 0005           		btst	#5,d0			; Check the checksum AGAIN in case we got here
(1)  215/     806 : 6730                		beq.s	MD_Init			; when it was already good.
(1)  216/     808 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)  217/     80C : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l	; VDP: Point to Color 0
                    0004                
(1)  218/     816 : 33FC 0E00 00C0 0000 		move.w	#$0E00,(vdp_data).l	; Write blue
(1)  219/     81E : 60FE                		bra.s	*			; Infinite loop.
(1)  220/     820 :                     
(1)  221/     820 :                     ; ====================================================================
(1)  222/     820 :                     ; ----------------------------------------------------------------
(1)  223/     820 :                     ; 68k's Error handlers
(1)  224/     820 :                     ;
(1)  225/     820 :                     ; HBlank and VBlank jump to RAM instead.
(1)  226/     820 :                     ; ----------------------------------------------------------------
(1)  227/     820 :                     
(1)  228/     820 :                     MD_ErrBus:		; Bus error
(1)  229/     820 :                     MD_ErrAddr:		; Address error
(1)  230/     820 :                     MD_ErrIll:		; ILLEGAL Instruction
(1)  231/     820 :                     MD_ErrZDiv:		; Divide by 0
(1)  232/     820 :                     MD_ErrChk:		; CHK Instruction
(1)  233/     820 :                     MD_ErrTrapV:		; TRAPV Instruction
(1)  234/     820 :                     MD_ErrPrivl:		; Privilege violation
(1)  235/     820 :                     MD_Trace:		; Trace
(1)  236/     820 :                     MD_Line1010:		; Line 1010 Emulator
(1)  237/     820 :                     MD_Line1111:		; Line 1111 Emulator
(1)  238/     820 :                     MD_ErrorEx:		; Error exception
(1)  239/     820 :                     MD_ErrorTrap:
(1)  240/     820 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  241/     824 : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l
                    0004                
(1)  242/     82E : 33FC 000E 00C0 0000 		move.w	#$000E,(vdp_data).l
(1)  243/     836 : 60FE                		bra.s	*
(1)  244/     838 :                     
(1)  245/     838 :                     ; ====================================================================
(1)  246/     838 :                     ; ----------------------------------------------------------------
(1)  247/     838 :                     ; Init
(1)  248/     838 :                     ; ----------------------------------------------------------------
(1)  249/     838 :                     
(1)  250/     838 :                     MD_Init:
(1)  251/     838 : 46FC 2700           		move.w	#$2700,sr
(1)  252/     83C : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l
(1)  253/     842 :                     ; 		btst	#15,d0
(1)  254/     842 :                     ; 		bne.s	.hotstart
(1)  255/     842 :                     ; 		lea	(sysmars_reg).l,a5
(1)  256/     842 :                     ; .wm:		cmp.l	#"M_OK",comm0(a5)
(1)  257/     842 :                     ; 		bne.s	.wm
(1)  258/     842 :                     ; .ws:		cmp.l	#"S_OK",comm4(a5)
(1)  259/     842 :                     ; 		bne.s	.ws
(1)  260/     842 :                     ; .hotstart:
(1)  261/     842 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  262/     848 : 223C FFFF C41C      		move.l	#sizeof_mdram,d1
(1)  263/     84E : 7000                		moveq	#0,d0
(1)  264/     850 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  265/     852 : B1C1                		cmp.l	d1,a0
(1)  266/     854 : 65FA                		bcs.s	.loop_ram
(1)  267/     856 : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
(1)  268/     85E : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  269/     864 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  270/     86A : 3E16                .wait_dma:	move.w	(a6),d7			; Check if our DMA is active.
(1)  271/     86C : 0807 0001           		btst	#1,d7
(1)  272/     870 : 66F8                		bne.s	.wait_dma
(1)  273/     872 : 2CBC 8004 8104      		move.l	#$80048104,(a6)		; Default top VDP regs
(1)  274/     878 : 7000                		moveq	#0,d0			; Clear both Master and Slave comm's
(1)  275/     87A : 2B40 002C           		move.l	d0,comm12(a5)
(1)  276/     87E : 223C 0000 00FF      		move.l	#$FF,d1			; Small delay...
(1)  277/     884 :                     .wait_1:
(1)  278/     884 : 203C 0000 00FF      		move.l	#$FF,d0
(1)  279/     88A :                     .wait_2:
(1)  280/     88A : 4E71                		nop
(1)  281/     88C : 51C8 FFFC           		dbf	d0,.wait_2
(1)  282/     890 : 51C9 FFF2           		dbf	d1,.wait_1
(1)  283/     894 :                     
      13/     894 :                     
      14/     894 :                     ; ====================================================================
      15/     894 :                     ; ----------------------------------------------------------------
      16/     894 :                     ; Main
      17/     894 :                     ; ----------------------------------------------------------------
      18/     894 :                     
      19/     894 : 41F9 0088 08C8      		lea	(Md_TopCode+$880000),a0			; Transfer common 68K code
      20/     89A : 43F9 00FF 0000      		lea	($FF0000),a1				; at the top of RAM
      21/     8A0 : 303C 1B8F           		move.w	#((Md_TopCode_e-Md_TopCode))-1,d0
      22/     8A4 :                     .copyme:
      23/     8A4 : 12D8                		move.b	(a0)+,(a1)+
      24/     8A6 : 51C8 FFFC           		dbf	d0,.copyme
      25/     8AA : 4EB9 00FF 0038      		jsr	(Sound_init).l
      26/     8B0 : 4EB9 00FF 029C      		jsr	(Video_init).l
      27/     8B6 : 4EB9 00FF 1614      		jsr	(System_Init).l
      28/     8BC : 31FC 0000 C41A      		move.w	#0,(RAM_Glbl_Scrn).w			; *** TEMPORAL ***
      29/     8C2 : 4EF9 00FF 1B58      		jmp	(Md_ReadModes).l
      30/     8C8 :                     
      31/     8C8 :                     ; ====================================================================
      32/     8C8 :                     ; --------------------------------------------------------
      33/     8C8 :                     ; TOP 68K code
      34/     8C8 :                     ; --------------------------------------------------------
      35/     8C8 :                     
      36/     8C8 :                     Md_TopCode:
      37/  FF0000 :                     		phase $FF0000
      38/  FF0000 :                     minfo_ram_s:
      39/  FF0000 :                     		include	"sound/gema.asm"
(1)    1/  FF0000 :                     ; ====================================================================
(1)    2/  FF0000 :                     ; --------------------------------------------------------
(1)    3/  FF0000 :                     ; GEMA/Nikona sound driver v0.5
(1)    4/  FF0000 :                     ; (C)2023 GenesisFan64
(1)    5/  FF0000 :                     ;
(1)    6/  FF0000 :                     ; Reads custom "miniature" ImpulseTracker files
(1)    7/  FF0000 :                     ; and automaticly picks the soundchip(s) to play.
(1)    8/  FF0000 :                     ;
(1)    9/  FF0000 :                     ; Features:
(1)   10/  FF0000 :                     ; - Support for 32X's PWM:
(1)   11/  FF0000 :                     ;   | 7 extra pseudo-channels in either MONO
(1)   12/  FF0000 :                     ;   | or STEREO.
(1)   13/  FF0000 :                     ;   | ** REQUIRES specific code for the SH2 side
(1)   14/  FF0000 :                     ;   | and enabling the use of CMD interrupt.
(1)   15/  FF0000 :                     ;   | Uses Slave SH2.
(1)   16/  FF0000 :                     ; - DMA-protection
(1)   17/  FF0000 :                     ;   | This keeps DAC samplerate to a decent
(1)   18/  FF0000 :                     ;   | quality.
(1)   19/  FF0000 :                     ; - DAC Playback at 16000hz
(1)   20/  FF0000 :                     ; - FM special mode with custom frequencies
(1)   21/  FF0000 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   22/  FF0000 :                     ;
(1)   23/  FF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   24/  FF0000 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   25/  FF0000 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   26/  FF0000 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   27/  FF0000 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   28/  FF0000 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   29/  FF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   30/  FF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   31/  FF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   32/  FF0000 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   33/  FF0000 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   34/  FF0000 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   35/  FF0000 :                     ; --------------------------------------------------------
(1)   36/  FF0000 :                     
(1)   37/  FF0000 :                     ; ====================================================================
(1)   38/  FF0000 :                     ; --------------------------------------------------------
(1)   39/  FF0000 :                     ; Settings
(1)   40/  FF0000 :                     ; --------------------------------------------------------
(1)   41/  FF0000 :                     
(1)   42/  FF0000 :                     ; --------------------------------------------------------
(1)   43/  FF0000 :                     ; Variables
(1)   44/  FF0000 :                     ; --------------------------------------------------------
(1)   45/  FF0000 :                     
(1)   46/  FF0000 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   47/  FF0000 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   48/  FF0000 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   49/  FF0000 :                     
(1)   50/  FF0000 :                     ; Z80-area points:
(1)   51/  FF0000 : =$40                zDrvFifo	equ commZfifo		; FIFO command storage
(1)   52/  FF0000 : =$80                zDrvFWrt	equ commZWrite		; FIFO command index
(1)   53/  FF0000 : =$81                zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   54/  FF0000 : =$82                zDrvMarsBlk	equ marsBlock		; Disable PWM flag
(1)   55/  FF0000 :                     
(1)   56/  FF0000 :                     ; ====================================================================
(1)   57/  FF0000 :                     ; --------------------------------------------------------
(1)   58/  FF0000 :                     ; Initialize Sound
(1)   59/  FF0000 :                     ;
(1)   60/  FF0000 :                     ; Uses:
(1)   61/  FF0000 :                     ; a0-a1,d0-d1
(1)   62/  FF0000 :                     ; --------------------------------------------------------
(1)   63/  FF0000 :                     
(1)   64/  FF0000 :                     		align $80
(1)   65/  FF0038 :                     Sound_Init:
(1)   66/  FF0038 : 46FC 2700           		move.w	#$2700,sr
(1)   67/  FF003C : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Get Z80 bus
(1)   68/  FF0044 : 33FC 0100 00A1 1200 		move.w	#$0100,(z80_reset).l		; Z80 reset
(1)   69/  FF004C :                     .wait:
(1)   70/  FF004C : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   71/  FF0054 : 66F6                		bne.s	.wait
(1)   72/  FF0056 : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 FIRST.
(1)   73/  FF005C : 303C 1FFF           		move.w	#$1FFF,d0
(1)   74/  FF0060 : 7200                		moveq	#0,d1
(1)   75/  FF0062 :                     .cleanup:
(1)   76/  FF0062 : 10C1                		move.b	d1,(a0)+
(1)   77/  FF0064 : 51C8 FFFC           		dbf	d0,.cleanup
(1)   78/  FF0068 : 41F9 0088 34F4      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   79/  FF006E : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)   80/  FF0074 : 303C 1EFF           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   81/  FF0078 :                     .copy:
(1)   82/  FF0078 : 12D8                		move.b	(a0)+,(a1)+
(1)   83/  FF007A : 51C8 FFFC           		dbf	d0,.copy
(1)   84/  FF007E : 33FC 0000 00A1 1200 		move.w	#0,(z80_reset).l		; Reset cancel
(1)   85/  FF0086 : 4E71                		nop
(1)   86/  FF0088 : 4E71                		nop
(1)   87/  FF008A : 4E71                		nop
(1)   88/  FF008C : 4E71                		nop
(1)   89/  FF008E : 33FC 0100 00A1 1200 		move.w	#$100,(z80_reset).l
(1)   90/  FF0096 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l			; Start Z80
(1)   91/  FF009E : 4E75                		rts
(1)   92/  FF00A0 :                     
(1)   93/  FF00A0 :                     ; ====================================================================
(1)   94/  FF00A0 :                     ; ----------------------------------------------------------------
(1)   95/  FF00A0 :                     ; Subroutines
(1)   96/  FF00A0 :                     ; ----------------------------------------------------------------
(1)   97/  FF00A0 :                     
(1)   98/  FF00A0 :                     ; ------------------------------------------------
(1)   99/  FF00A0 :                     ; Lock Z80, get bus
(1)  100/  FF00A0 :                     ; ------------------------------------------------
(1)  101/  FF00A0 :                     
(1)  102/  FF00A0 :                     sndLockZ80:
(1)  103/  FF00A0 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)  104/  FF00A8 :                     .wait:
(1)  105/  FF00A8 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)  106/  FF00B0 : 66F6                		bne.s	.wait
(1)  107/  FF00B2 : 4E75                		rts
(1)  108/  FF00B4 :                     
(1)  109/  FF00B4 :                     ; ------------------------------------------------
(1)  110/  FF00B4 :                     ; Unlock Z80, return bus
(1)  111/  FF00B4 :                     ; ------------------------------------------------
(1)  112/  FF00B4 :                     
(1)  113/  FF00B4 :                     sndUnlockZ80:
(1)  114/  FF00B4 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  115/  FF00BC : 4E75                		rts
(1)  116/  FF00BE :                     
(1)  117/  FF00BE :                     ; ------------------------------------------------
(1)  118/  FF00BE :                     ; 68k-to-z80 Sound request
(1)  119/  FF00BE :                     ; enter/exit routines
(1)  120/  FF00BE :                     ;
(1)  121/  FF00BE :                     ; d6 - commFifo index
(1)  122/  FF00BE :                     ; ------------------------------------------------
(1)  123/  FF00BE :                     
(1)  124/  FF00BE :                     sndReq_Enter:
(1)  125/  FF00BE : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  126/  FF00C2 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  127/  FF00C6 : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  128/  FF00CA : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)  129/  FF00D2 : 7C00                		moveq	#0,d6
(1)  130/  FF00D4 : 40C6                		move.w	sr,d6
(1)  131/  FF00D6 : 4846                		swap	d6
(1)  132/  FF00D8 : 007C 0700           		or.w	#$0700,sr			; Disable interrupts
(1)  133/  FF00DC : 4BF9 00A0 0080      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  134/  FF00E2 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  135/  FF00E8 :                     .wait:
(1)  136/  FF00E8 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for Z80
(1)  137/  FF00F0 : 66F6                		bne.s	.wait
(1)  138/  FF00F2 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  139/  FF00F4 : 4886                		ext.w	d6				; extend to 16 bits
(1)  140/  FF00F6 : 4E75                		rts
(1)  141/  FF00F8 :                     ; JUMP ONLY
(1)  142/  FF00F8 :                     sndReq_Exit:
(1)  143/  FF00F8 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  144/  FF0100 : 4846                		swap	d6
(1)  145/  FF0102 : 46C6                		move.w	d6,sr
(1)  146/  FF0104 : 9EFC 0018           		suba	#8+(4*4),sp
(1)  147/  FF0108 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  148/  FF010C : DEFC 0008           		adda	#8,sp
(1)  149/  FF0110 : 4E75                		rts
(1)  150/  FF0112 :                     
(1)  151/  FF0112 :                     ; ------------------------------------------------
(1)  152/  FF0112 :                     ; Send request id and arguments
(1)  153/  FF0112 :                     ;
(1)  154/  FF0112 :                     ; Input:
(1)  155/  FF0112 :                     ; d7 - byte to write
(1)  156/  FF0112 :                     ; d6 - index pointer
(1)  157/  FF0112 :                     ; a5 - commZWrite, update index
(1)  158/  FF0112 :                     ; a6 - commZfifo command list
(1)  159/  FF0112 :                     ;
(1)  160/  FF0112 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  161/  FF0112 :                     ; ------------------------------------------------
(1)  162/  FF0112 :                     
(1)  163/  FF0112 :                     sndReq_scmd:
(1)  164/  FF0112 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  165/  FF0118 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  166/  FF011A : 0206 003F           		andi.b	#$3F,d6
(1)  167/  FF011E : 600C                		bra.s	sndReq_sbyte
(1)  168/  FF0120 :                     sndReq_slong:
(1)  169/  FF0120 : 610A                		bsr	sndReq_sbyte
(1)  170/  FF0122 : E09F                		ror.l	#8,d7
(1)  171/  FF0124 :                     sndReq_saddr:
(1)  172/  FF0124 : 6106                		bsr	sndReq_sbyte
(1)  173/  FF0126 : E09F                		ror.l	#8,d7
(1)  174/  FF0128 :                     sndReq_sword:
(1)  175/  FF0128 : 6102                		bsr	sndReq_sbyte
(1)  176/  FF012A : E09F                		ror.l	#8,d7
(1)  177/  FF012C :                     sndReq_sbyte:
(1)  178/  FF012C : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  179/  FF0130 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  180/  FF0132 : 0206 003F           		andi.b	#$3F,d6
(1)  181/  FF0136 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  182/  FF0138 : 4E75                		rts
(1)  183/  FF013A :                     
(1)  184/  FF013A :                     ; --------------------------------------------------------
(1)  185/  FF013A :                     ; gemaDmaPause
(1)  186/  FF013A :                     ;
(1)  187/  FF013A :                     ; Call this BEFORE doing any DMA transfer
(1)  188/  FF013A :                     ; --------------------------------------------------------
(1)  189/  FF013A :                     
(1)  190/  FF013A :                     gemaDmaPause:
(1)  191/  FF013A : 4847                		swap	d7
(1)  192/  FF013C : 4846                		swap	d6
(1)  193/  FF013E : 6100 FF60           		bsr	sndLockZ80
(1)  194/  FF0142 : 13FC 0001 00A0 0081 		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  195/  FF014A : 31FC 0001 0000      		move.w	#1,
(1)  196/  FF0150 : 6100 FF62           		bsr	sndUnlockZ80
(1)  197/  FF0154 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  198/  FF0158 : 51CF FFFE           		dbf	d7,*
(1)  199/  FF015C : 4846                		swap	d6
(1)  200/  FF015E : 4847                		swap	d7
(1)  201/  FF0160 : 4E75                		rts
(1)  202/  FF0162 :                     
(1)  203/  FF0162 :                     ; --------------------------------------------------------
(1)  204/  FF0162 :                     ; gemaDmaResume
(1)  205/  FF0162 :                     ;
(1)  206/  FF0162 :                     ; Call this AFTER finishing DMA transfer
(1)  207/  FF0162 :                     ; --------------------------------------------------------
(1)  208/  FF0162 :                     
(1)  209/  FF0162 :                     gemaDmaResume:
(1)  210/  FF0162 : 4847                		swap	d7
(1)  211/  FF0164 : 4846                		swap	d6
(1)  212/  FF0166 : 6100 FF38           		bsr	sndLockZ80
(1)  213/  FF016A : 13FC 0000 00A0 0081 		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  214/  FF0172 : 6100 FF40           		bsr	sndUnlockZ80
(1)  215/  FF0176 : 4846                		swap	d6
(1)  216/  FF0178 : 4847                		swap	d7
(1)  217/  FF017A : 4E75                		rts
(1)  218/  FF017C :                     
(1)  219/  FF017C :                     ; --------------------------------------------------------
(1)  220/  FF017C :                     ; gemaDmaPause
(1)  221/  FF017C :                     ;
(1)  222/  FF017C :                     ; Call this BEFORE doing any DMA transfer
(1)  223/  FF017C :                     ; --------------------------------------------------------
(1)  224/  FF017C :                     
(1)  225/  FF017C :                     gemaDmaPauseRom:
(1)  226/  FF017C : 4847                		swap	d7
(1)  227/  FF017E : 4846                		swap	d6
(1)  228/  FF0180 : 6100 FF1E           		bsr	sndLockZ80
(1)  229/  FF0184 : 13FC 0001 00A0 0081 		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  230/  FF018C : 6100 FF26           		bsr	sndUnlockZ80
(1)  231/  FF0190 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  232/  FF0194 : 51CF FFFE           		dbf	d7,*
(1)  234/  FF0198 : 3C3C 0002           		move.w	#2,d6
(1)  235/  FF019C : 6136                		bsr	sndReqCmd
(1)  236/  FF019E : 08F9 0000 00A1 5107 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1)  238/  FF01A6 : 4846                		swap	d6
(1)  239/  FF01A8 : 4847                		swap	d7
(1)  240/  FF01AA : 4E75                		rts
(1)  241/  FF01AC :                     
(1)  242/  FF01AC :                     ; --------------------------------------------------------
(1)  243/  FF01AC :                     ; gemaDmaResume
(1)  244/  FF01AC :                     ;
(1)  245/  FF01AC :                     ; Call this AFTER finishing DMA transfer
(1)  246/  FF01AC :                     ; --------------------------------------------------------
(1)  247/  FF01AC :                     
(1)  248/  FF01AC :                     gemaDmaResumeRom:
(1)  249/  FF01AC : 4847                		swap	d7
(1)  250/  FF01AE : 4846                		swap	d6
(1)  251/  FF01B0 : 6100 FEEE           		bsr	sndLockZ80
(1)  252/  FF01B4 : 13FC 0000 00A0 0081 		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  253/  FF01BC : 6100 FEF6           		bsr	sndUnlockZ80
(1)  255/  FF01C0 : 3C3C 0003           		move.w	#3,d6
(1)  256/  FF01C4 : 610E                		bsr	sndReqCmd
(1)  257/  FF01C6 : 08B9 0000 00A1 5107 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1)  259/  FF01CE : 4846                		swap	d6
(1)  260/  FF01D0 : 4847                		swap	d7
(1)  261/  FF01D2 : 4E75                		rts
(1)  262/  FF01D4 :                     
(1)  263/  FF01D4 :                     ; ------------------------------------------------
(1)  264/  FF01D4 :                     ; 32X ONLY: Request CMD interrupt with
(1)  265/  FF01D4 :                     ; command
(1)  266/  FF01D4 :                     ;
(1)  267/  FF01D4 :                     ; d6 - command
(1)  268/  FF01D4 :                     ; ------------------------------------------------
(1)  269/  FF01D4 :                     
(1)  270/  FF01D4 :                     sndReqCmd:
(1)  272/  FF01D4 : 1E39 00A1 512E      .wait_in:	move.b	(sysmars_reg+comm14),d7
(1)  273/  FF01DA : CE7C 00F0           		and.w	#%11110000,d7
(1)  274/  FF01DE : 66F4                		bne.s	.wait_in
(1)  275/  FF01E0 : CC7C 000F           		and.w	#%00001111,d6
(1)  276/  FF01E4 : 8E06                		or.b	d6,d7
(1)  277/  FF01E6 : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1)  278/  FF01EC : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  279/  FF01F2 : CE7C 000F           		and.w	#%00001111,d7
(1)  280/  FF01F6 : BE06                		cmp.b	d6,d7
(1)  281/  FF01F8 : 66DA                		bne.s	.wait_in
(1)  282/  FF01FA : 08F9 0007 00A1 512E 		bset	#7,(sysmars_reg+comm14).l
(1)  283/  FF0202 : 08F9 0001 00A1 5103 		bset	#1,(sysmars_reg+standby).l	; Request Slave CMD
(1)  284/  FF020A :                     ; .wait_cmd:	btst	#1,(sysmars_reg+standby).l
(1)  285/  FF020A :                     ; 		bne.s	.wait_cmd
(1)  286/  FF020A : 1E39 00A1 512E      .wait_out:	move.b	(sysmars_reg+comm14),d7
(1)  287/  FF0210 : CE7C 00F0           		and.w	#%11110000,d7
(1)  288/  FF0214 : 66F4                		bne.s	.wait_out
(1)  290/  FF0216 : 4E75                		rts
(1)  291/  FF0218 :                     
(1)  292/  FF0218 :                     ; ============================================================
(1)  293/  FF0218 :                     ; --------------------------------------------------------
(1)  294/  FF0218 :                     ; gemaTest
(1)  295/  FF0218 :                     ;
(1)  296/  FF0218 :                     ; For TESTING only.
(1)  297/  FF0218 :                     ; --------------------------------------------------------
(1)  298/  FF0218 :                     
(1)  299/  FF0218 :                     gemaTest:
(1)  300/  FF0218 : 6100 FEA4           		bsr	sndReq_Enter
(1)  301/  FF021C : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  302/  FF0220 : 6100 FEF0           		bsr	sndReq_scmd
(1)  303/  FF0224 : 6000 FED2           		bra 	sndReq_Exit
(1)  304/  FF0228 :                     
(1)  305/  FF0228 :                     ; --------------------------------------------------------
(1)  306/  FF0228 :                     ; gemaPlayTrack
(1)  307/  FF0228 :                     ;
(1)  308/  FF0228 :                     ; Play a track by number
(1)  309/  FF0228 :                     ;
(1)  310/  FF0228 :                     ; d0.b - Track number
(1)  311/  FF0228 :                     ; --------------------------------------------------------
(1)  312/  FF0228 :                     
(1)  313/  FF0228 :                     gemaPlayTrack:
(1)  314/  FF0228 : 6100 FE94           		bsr	sndReq_Enter
(1)  315/  FF022C : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  316/  FF0230 : 6100 FEE0           		bsr	sndReq_scmd
(1)  317/  FF0234 : 1E00                		move.b	d0,d7
(1)  318/  FF0236 : 6100 FEF4           		bsr	sndReq_sbyte
(1)  319/  FF023A : 7E00                		moveq	#0,d7
(1)  320/  FF023C : 6100 FEEE           		bsr	sndReq_sbyte
(1)  321/  FF0240 : 6000 FEB6           		bra 	sndReq_Exit
(1)  322/  FF0244 :                     
(1)  323/  FF0244 :                     ; --------------------------------------------------------
(1)  324/  FF0244 :                     ; gemaPlayFromBlk
(1)  325/  FF0244 :                     ;
(1)  326/  FF0244 :                     ; Play a track by number
(1)  327/  FF0244 :                     ;
(1)  328/  FF0244 :                     ; d0.b - Track number
(1)  329/  FF0244 :                     ; d1.b - Block number
(1)  330/  FF0244 :                     ; --------------------------------------------------------
(1)  331/  FF0244 :                     
(1)  332/  FF0244 :                     gemaPlayFromBlk:
(1)  333/  FF0244 : 6100 FE78           		bsr	sndReq_Enter
(1)  334/  FF0248 : 3E3C 0001           		move.w	#$01,d7		; Command $04
(1)  335/  FF024C : 6100 FEC4           		bsr	sndReq_scmd
(1)  336/  FF0250 : 1E00                		move.b	d0,d7
(1)  337/  FF0252 : 6100 FED8           		bsr	sndReq_sbyte
(1)  338/  FF0256 : 1E01                		move.b	d1,d7
(1)  339/  FF0258 : 6100 FED2           		bsr	sndReq_sbyte
(1)  340/  FF025C : 6000 FE9A           		bra 	sndReq_Exit
(1)  341/  FF0260 :                     
(1)  342/  FF0260 :                     ; --------------------------------------------------------
(1)  343/  FF0260 :                     ; gemaStopTrack
(1)  344/  FF0260 :                     ;
(1)  345/  FF0260 :                     ; Stops a track using that ID
(1)  346/  FF0260 :                     ;
(1)  347/  FF0260 :                     ; d0.b - Track number
(1)  348/  FF0260 :                     ; --------------------------------------------------------
(1)  349/  FF0260 :                     
(1)  350/  FF0260 :                     gemaStopTrack:
(1)  351/  FF0260 : 6100 FE5C           		bsr	sndReq_Enter
(1)  352/  FF0264 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  353/  FF0268 : 6100 FEA8           		bsr	sndReq_scmd
(1)  354/  FF026C : 1E00                		move.b	d0,d7
(1)  355/  FF026E : 6100 FEBC           		bsr	sndReq_sbyte
(1)  356/  FF0272 : 6000 FE84           		bra 	sndReq_Exit
(1)  357/  FF0276 :                     
(1)  358/  FF0276 :                     ; --------------------------------------------------------
(1)  359/  FF0276 :                     ; gemaStopAll
(1)  360/  FF0276 :                     ;
(1)  361/  FF0276 :                     ; Stop ALL tracks from ALL buffers.
(1)  362/  FF0276 :                     ;
(1)  363/  FF0276 :                     ; No arguments.
(1)  364/  FF0276 :                     ; --------------------------------------------------------
(1)  365/  FF0276 :                     
(1)  366/  FF0276 :                     gemaStopAll:
(1)  367/  FF0276 : 6100 FE46           		bsr	sndReq_Enter
(1)  368/  FF027A : 3E3C 0008           		move.w	#$08,d7		; Command $08
(1)  369/  FF027E : 6100 FE92           		bsr	sndReq_scmd
(1)  370/  FF0282 : 6000 FE74           		bra 	sndReq_Exit
(1)  371/  FF0286 :                     
(1)  372/  FF0286 :                     ; --------------------------------------------------------
(1)  373/  FF0286 :                     ; gemaSetBeats
(1)  374/  FF0286 :                     ;
(1)  375/  FF0286 :                     ; Sets global subbeats
(1)  376/  FF0286 :                     ;
(1)  377/  FF0286 :                     ; d0.w - sub-beats
(1)  378/  FF0286 :                     ; --------------------------------------------------------
(1)  379/  FF0286 :                     
(1)  380/  FF0286 :                     gemaSetBeats:
(1)  381/  FF0286 : 6100 FE36           		bsr	sndReq_Enter
(1)  382/  FF028A : 3E3C 000C           		move.w	#$0C,d7		; Command $0C
(1)  383/  FF028E : 6100 FE82           		bsr	sndReq_scmd
(1)  384/  FF0292 : 3E00                		move.w	d0,d7
(1)  385/  FF0294 : 6100 FE92           		bsr	sndReq_sword
(1)  386/  FF0298 : 6000 FE5E           		bra 	sndReq_Exit
(1)  387/  FF029C :                     
      40/  FF029C :                     		include	"system/md/video.asm"
(1)    1/  FF029C :                     ; ====================================================================
(1)    2/  FF029C :                     ; ----------------------------------------------------------------
(1)    3/  FF029C :                     ; Genesis Video
(1)    4/  FF029C :                     ; ----------------------------------------------------------------
(1)    5/  FF029C :                     
(1)    6/  FF029C : =$FFFFFFFFFF..      RAM_BgBufferM	equ	RAM_MdDreq+Dreq_BgExBuff	; Relocate MARS layer control
(1)    7/  FF029C :                     
(1)    8/  FF029C :                     ; ====================================================================
(1)    9/  FF029C :                     ; --------------------------------------------------------
(1)   10/  FF029C :                     ; Settings
(1)   11/  FF029C :                     ; --------------------------------------------------------
(1)   12/  FF029C :                     
(1)   13/  FF029C : =$10                MAX_MDOBJ	equ 16		; Max objects for Genesis
(1)   14/  FF029C : =$7FF               varNullVram	equ $7FF	; Default Blank cell for some video routines
(1)   15/  FF029C : =$580               varPrintVram	equ $580	; Location of the PRINT text graphics
(1)   16/  FF029C : =$3                 varPrintPal	equ 3		; Palette to use for the printable text
(1)   17/  FF029C :                     
(1)   18/  FF029C :                     ; --------------------------------------------------------
(1)   19/  FF029C :                     ; Variables
(1)   20/  FF029C :                     ; --------------------------------------------------------
(1)   21/  FF029C :                     
(1)   22/  FF029C :                     ; VDP Register $80
(1)   23/  FF029C : =$2                 HVStop		equ $02
(1)   24/  FF029C : =$10                HintEnbl	equ $10
(1)   25/  FF029C : =$1                 bitHVStop	equ 1
(1)   26/  FF029C : =$4                 bitHintEnbl	equ 4
(1)   27/  FF029C :                     
(1)   28/  FF029C :                     ; VDP Register $81
(1)   29/  FF029C : =$40                DispEnbl 	equ $40
(1)   30/  FF029C : =$20                VintEnbl 	equ $20
(1)   31/  FF029C : =$10                DmaEnbl		equ $10
(1)   32/  FF029C : =$6                 bitDispEnbl	equ 6
(1)   33/  FF029C : =$5                 bitVintEnbl	equ 5
(1)   34/  FF029C : =$4                 bitDmaEnbl	equ 4
(1)   35/  FF029C : =$3                 bitV30		equ 3
(1)   36/  FF029C :                     
(1)   37/  FF029C :                     ; vdp_ctrl READ bits (full WORD)
(1)   38/  FF029C : =$9                 bitFifoE	equ 9		; DMA FIFO empty
(1)   39/  FF029C : =$8                 bitFifoF	equ 8		; DMA FIFO full
(1)   40/  FF029C : =$7                 bitVInt		equ 7		; Vertical interrupt
(1)   41/  FF029C : =$6                 bitSprOvr	equ 6		; Sprite overflow
(1)   42/  FF029C : =$5                 bitSprCol	equ 5		; Sprite collision
(1)   43/  FF029C : =$4                 bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   44/  FF029C : =$3                 bitVBlk		equ 3		; Inside VBlank
(1)   45/  FF029C : =$2                 bitHBlk		equ 2		; Inside HBlank
(1)   46/  FF029C : =$1                 bitDma		equ 1		; Only works for FILL and COPY
(1)   47/  FF029C : =$0                 bitPal		equ 0
(1)   48/  FF029C :                     
(1)   49/  FF029C :                     ; md_bg_flags
(1)   50/  FF029C : =$0                 bitDrwR		equ 0
(1)   51/  FF029C : =$1                 bitDrwL		equ 1
(1)   52/  FF029C : =$2                 bitDrwD		equ 2
(1)   53/  FF029C : =$3                 bitDrwU		equ 3
(1)   54/  FF029C : =$7                 bitBgOn		equ 7
(1)   55/  FF029C : =$6                 bitMarsBg	equ 6
(1)   56/  FF029C :                     
(1)   57/  FF029C :                     ; ====================================================================
(1)   58/  FF029C :                     ; ----------------------------------------------------------------
(1)   59/  FF029C :                     ; Structs
(1)   60/  FF029C :                     ; ----------------------------------------------------------------
(1)   61/  FF029C :                     
(1)   62/  FF029C :                     ; IN SH2 ORDER
(1)   63/  FF029C :                     ; still works fine on this side.
(1)   64/  FF029C :                     ; md_bg_flags: %EM..UDLR
(1)   65/  FF029C :                     ; UDLR - off-screen update bits
(1)   66/  FF029C :                     ;    M - Map belongs to Genesis or 32X
(1)   67/  FF029C :                     ;    E - Enable this map
(1)   68/  FF029C :                     
(1)   69/  FF029C : (MACRO)             		struct 0
(1)   69/  FF029C :                     
(1)   69/  FF029C :                     ;       if WPATCH=1
(1)   69/  FF029C :                     ; GLBL_LASTPC   set *
(1)   69/  FF029C :                     ; GLBL_LASTORG  set *
(1)   69/  FF029C :                     ;               dephase
(1)   69/  FF029C :                     ;               phase 0
(1)   69/  FF029C :                     ;       else
(1)   69/  FF029C : =$FF029C            GLBL_LASTPC     set *
(1)   69/     B64 :                                     dephase
(1)   69/     B64 : =$B64               GLBL_LASTORG    set *
(1)   69/       0 :                                     phase 0
(1)   69/       0 :                     ;       endif
(1)   70/       0 :                     md_bg_bw	ds.b 1		; Block Width
(1)   71/       1 :                     md_bg_bh	ds.b 1		; Block Height
(1)   72/       2 :                     md_bg_blkw	ds.b 1		; Bitshift block size (LSL)
(1)   73/       3 :                     md_bg_flags	ds.b 1		; Drawing flags: %EM00UDLR
(1)   74/       4 :                     md_bg_xset	ds.b 1		; X-counter
(1)   75/       5 :                     md_bg_yset	ds.b 1		; Y-counter
(1)   76/       6 :                     md_bg_movex	ds.b 1		; *** ALIGNMENT, FREE TO USE
(1)   77/       7 :                     md_bg_movey	ds.b 1		; ***
(1)   78/       8 :                     md_bg_w		ds.w 1		; Width in blocks
(1)   79/       A :                     md_bg_h		ds.w 1		; Height in blocks
(1)   80/       C :                     md_bg_wf	ds.w 1		; FULL Width in pixels
(1)   81/       E :                     md_bg_hf	ds.w 1		; FULL Height in pixels
(1)   82/      10 :                     md_bg_xinc_l	ds.w 1		; Layout draw-beams L/R/U/D
(1)   83/      12 :                     md_bg_xinc_r	ds.w 1
(1)   84/      14 :                     md_bg_yinc_u	ds.w 1
(1)   85/      16 :                     md_bg_yinc_d	ds.w 1
(1)   86/      18 :                     md_bg_x_old	ds.w 1		; OLD X position
(1)   87/      1A :                     md_bg_y_old	ds.w 1		; OLD Y position
(1)   88/      1C :                     md_bg_vpos	ds.w 1		; VRAM output for map
(1)   89/      1E :                     md_bg_vram	ds.w 1		; VRAM start for cells
(1)   90/      20 :                     md_bg_low	ds.l 1		; MAIN layout data
(1)   91/      24 :                     md_bg_hi	ds.l 1		; HI layout data
(1)   92/      28 :                     md_bg_blk	ds.l 1		; Block data
(1)   93/      2C :                     md_bg_col	ds.l 1		; Collision data (if needed)
(1)   94/      30 :                     md_bg_x		ds.l 1		; X pos 0000.0000
(1)   95/      34 :                     md_bg_y		ds.l 1		; Y pos 0000.0000
(1)   96/      38 :                     sizeof_mdbg	ds.l 0
(1)   97/      38 : (MACRO)             		finish
(1)   97/       0 :                                     !org GLBL_LASTORG
(1)   97/  FF029C :                                     phase GLBL_LASTPC
(1)   98/  FF029C :                     
(1)   99/  FF029C :                     ; --------------------------------
(1)  100/  FF029C :                     ; object struct
(1)  101/  FF029C :                     ; --------------------------------
(1)  102/  FF029C :                     
(1)  103/  FF029C : (MACRO)             		struct 0
(1)  103/  FF029C :                     
(1)  103/  FF029C :                     ;       if WPATCH=1
(1)  103/  FF029C :                     ; GLBL_LASTPC   set *
(1)  103/  FF029C :                     ; GLBL_LASTORG  set *
(1)  103/  FF029C :                     ;               dephase
(1)  103/  FF029C :                     ;               phase 0
(1)  103/  FF029C :                     ;       else
(1)  103/  FF029C : =$FF029C            GLBL_LASTPC     set *
(1)  103/     B64 :                                     dephase
(1)  103/     B64 : =$B64               GLBL_LASTORG    set *
(1)  103/       0 :                                     phase 0
(1)  103/       0 :                     ;       endif
(1)  104/       0 :                     obj_code	ds.l 1		; Object code
(1)  105/       4 :                     obj_size	ds.l 1		; Object size (see below)
(1)  106/       8 :                     obj_x		ds.l 1		; Object X Position
(1)  107/       C :                     obj_y		ds.l 1		; Object Y Position
(1)  108/      10 :                     obj_map		ds.l 1		; Object image settings
(1)  109/      14 :                     obj_vram	ds.w 1		; Object VRAM position (MD-side only)
(1)  110/      16 :                     obj_x_spd	ds.w 1		; Object X Speed
(1)  111/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed
(1)  112/      1A :                     obj_anim_indx	ds.w 1		; Object animation increment (obj_anim + obj_anim_indx)
(1)  113/      1C :                     obj_anim_id	ds.w 1		; Object animation to read (current|saved)
(1)  114/      1E :                     obj_frame	ds.w 1		; Object display frame (MD: $FFFF, MARS: $YY,$XX)
(1)  115/      20 :                     obj_anim_spd	ds.b 1		; Object animation delay
(1)  116/      21 :                     obj_index	ds.b 1		; Object code index
(1)  117/      22 :                     obj_subid	ds.b 1		; Object SubID
(1)  118/      23 :                     obj_set		ds.b 1		; Object settings
(1)  119/      24 :                     obj_status	ds.b 1		; Object custom status
(1)  120/      25 :                     obj_spwnid	ds.b 1		; Object respawn index (this - 1)
(1)  121/      26 :                     obj_ram		ds.b $40	; Object RAM
(1)  122/      66 :                     sizeof_mdobj	ds.l 0
(1)  123/      68 : (MACRO)             		finish
(1)  123/       0 :                                     !org GLBL_LASTORG
(1)  123/  FF029C :                                     phase GLBL_LASTPC
(1)  124/  FF029C :                     ; 		message "\{sizeof_mdobj}"
(1)  125/  FF029C :                     
(1)  126/  FF029C :                     ; --------------------------------
(1)  127/  FF029C :                     ; obj_settings
(1)  128/  FF029C :                     ; --------------------------------
(1)  129/  FF029C :                     
(1)  130/  FF029C : =$7                 bitobj_Mars	equ	7	; This object is for 32X side.
(1)  131/  FF029C : =$1                 bitobj_flipV	equ	1	; set to flip Sprite Vertically
(1)  132/  FF029C : =$0                 bitobj_flipH	equ	0	; set to flip Sprite Horizontally
(1)  133/  FF029C :                     
(1)  134/  FF029C :                     ; --------------------------------
(1)  135/  FF029C :                     ; obj_set
(1)  136/  FF029C :                     ; --------------------------------
(1)  137/  FF029C :                     
(1)  138/  FF029C : =$0                 bitobj_air	equ	0	; set if floating/jumping
(1)  139/  FF029C :                     
(1)  140/  FF029C :                     ; --------------------------------
(1)  141/  FF029C :                     ; obj_size
(1)  142/  FF029C :                     ; --------------------------------
(1)  143/  FF029C :                     
(1)  144/  FF029C : =$3                 at_u		equ	3
(1)  145/  FF029C : =$2                 at_d		equ	2
(1)  146/  FF029C : =$1                 at_l		equ	1
(1)  147/  FF029C : =$0                 at_r		equ	0
(1)  148/  FF029C :                     
(1)  149/  FF029C :                     ; ====================================================================
(1)  150/  FF029C :                     ; ----------------------------------------------------------------
(1)  151/  FF029C :                     ; Video RAM
(1)  152/  FF029C :                     ; ----------------------------------------------------------------
(1)  153/  FF029C :                     
(1)  154/  FF029C : (MACRO)             			struct RAM_MdVideo
(1)  154/  FF029C :                     
(1)  154/  FF029C :                     ;       if WPATCH=1
(1)  154/  FF029C :                     ; GLBL_LASTPC   set *
(1)  154/  FF029C :                     ; GLBL_LASTORG  set *
(1)  154/  FF029C :                     ;               dephase
(1)  154/  FF029C :                     ;               phase RAM_MDVIDEO
(1)  154/  FF029C :                     ;       else
(1)  154/  FF029C : =$FF029C            GLBL_LASTPC     set *
(1)  154/     B64 :                                     dephase
(1)  154/     B64 : =$B64               GLBL_LASTORG    set *
(1)  154/FFFFFFFFFFFF9000 :                                     phase RAM_MDVIDEO
(1)  154/FFFFFFFFFFFF9000 :                     ;       endif
(1)  155/FFFFFFFFFFFF9000 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj
(1)  156/FFFFFFFFFFFF9660 :                     RAM_BgBuffer		ds.b sizeof_mdbg*4	; Map backgrounds, back to front.
(1)  157/FFFFFFFFFFFF9740 :                     RAM_FrameCount		ds.l 1			; Frames counter
(1)  158/FFFFFFFFFFFF9744 :                     RAM_HorScroll		ds.l 240		; DMA Horizontal scroll data
(1)  159/FFFFFFFFFFFF9B04 :                     RAM_VerScroll		ds.l 320/16		; DMA Vertical scroll data
(1)  160/FFFFFFFFFFFF9B54 :                     RAM_ObjDispList		ds.w MAX_MDOBJ		; Objects half-RAM pointers for display (Obj|Extra)
(1)  161/FFFFFFFFFFFF9B74 :                     RAM_SprDrwPz		ds.w 8*70		; External sprite pieces
(1)  162/FFFFFFFFFFFF9FD4 :                     RAM_Sprites		ds.w 8*70		; DMA Sprites
(1)  163/FFFFFFFFFFFFA434 :                     RAM_Palette		ds.w 64			; DMA palette
(1)  164/FFFFFFFFFFFFA4B4 :                     RAM_PaletteFd		ds.w 64			; Target MD palette for FadeIn/Out
(1)  165/FFFFFFFFFFFFA534 :                     RAM_MdMarsPalFd		ds.w 256		; Target 32X palette for FadeIn/Out (NOTE: it's slow)
(1)  166/FFFFFFFFFFFFA734 :                     RAM_VdpDmaList		ds.w 7*MAX_MDDMATSK	; DMA BLAST list for VBlank
(1)  167/FFFFFFFFFFFFA814 :                     RAM_VidPrntList		ds.w 3*64		; Video_Print list: Address, Type
(1)  168/FFFFFFFFFFFFA994 :                     RAM_SprDrwCntr		ds.w 1
(1)  169/FFFFFFFFFFFFA996 :                     RAM_SprShowIndx		ds.w 1
(1)  170/FFFFFFFFFFFFA998 :                     RAM_VdpDmaIndx		ds.w 1			; Current index in DMA BLAST list
(1)  171/FFFFFFFFFFFFA99A :                     RAM_VdpDmaMod		ds.w 1			; Mid-write flag (just to be safe)
(1)  172/FFFFFFFFFFFFA99C :                     RAM_VidPrntVram		ds.w 1			; Default VRAM location for ASCII text used by Video_Print
(1)  173/FFFFFFFFFFFFA99E :                     RAM_FadeMdReq		ds.w 1			; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  174/FFFFFFFFFFFFA9A0 :                     RAM_FadeMdIncr		ds.w 1			; Fading increment count
(1)  175/FFFFFFFFFFFFA9A2 :                     RAM_FadeMdDelay		ds.w 1			; Fading delay
(1)  176/FFFFFFFFFFFFA9A4 :                     RAM_FadeMdTmr		ds.w 1			; Fading delay timer
(1)  177/FFFFFFFFFFFFA9A6 :                     RAM_FadeMarsReq		ds.w 1			; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  178/FFFFFFFFFFFFA9A8 :                     RAM_FadeMarsIncr	ds.w 1			; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  179/FFFFFFFFFFFFA9AA :                     RAM_FadeMarsDelay	ds.w 1
(1)  180/FFFFFFFFFFFFA9AC :                     RAM_FadeMarsTmr		ds.w 1
(1)  181/FFFFFFFFFFFFA9AE :                     RAM_VdpRegs		ds.b 24			; VDP Register cache
(1)  182/FFFFFFFFFFFFA9C6 :                     sizeof_mdvid		ds.l 0
(1)  183/FFFFFFFFFFFFA9C8 : (MACRO)             			finish
(1)  183/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)  183/  FF029C :                                     phase GLBL_LASTPC
(1)  184/  FF029C :                     
(1)  185/  FF029C :                     ; ====================================================================
(1)  186/  FF029C :                     ; --------------------------------------------------------
(1)  187/  FF029C :                     ; Init Genesis video
(1)  188/  FF029C :                     ; --------------------------------------------------------
(1)  189/  FF029C :                     
(1)  190/  FF029C :                     Video_Init:
(1)  191/  FF029C : 4DF8 9000           		lea	(RAM_MdVideo),a6	; Clear RAM
(1)  192/  FF02A0 : 7C00                		moveq	#0,d6
(1)  193/  FF02A2 : 3E3C 19C5           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  194/  FF02A6 :                     .clrram:
(1)  195/  FF02A6 : 1CC6                		move.b	d6,(a6)+
(1)  196/  FF02A8 : 51CF FFFC           		dbf	d7,.clrram
(1)  197/  FF02AC : 4DFA 0042           		lea	list_vdpregs(pc),a6
(1)  198/  FF02B0 : 4BF8 A9AE           		lea	(RAM_VdpRegs).w,a5
(1)  199/  FF02B4 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  200/  FF02BA : 3C3C 8000           		move.w	#$8000,d6
(1)  201/  FF02BE : 3E3C 0012           		move.w	#19-1,d7
(1)  202/  FF02C2 :                     .loop:
(1)  203/  FF02C2 : 1C1E                		move.b	(a6)+,d6
(1)  204/  FF02C4 : 1AC6                		move.b	d6,(a5)+
(1)  205/  FF02C6 : 3886                		move.w	d6,(a4)
(1)  206/  FF02C8 : DC7C 0100           		add.w	#$100,d6
(1)  207/  FF02CC : 51CF FFF4           		dbf	d7,.loop
(1)  208/  FF02D0 :                     .exit:
(1)  209/  FF02D0 :                     
(1)  210/  FF02D0 :                     ; --------------------------------------------------------
(1)  211/  FF02D0 :                     ; Video_Update
(1)  212/  FF02D0 :                     ;
(1)  213/  FF02D0 :                     ; Writes register data stored in RAM to VDP
(1)  214/  FF02D0 :                     ; from Registers $80 to $90, WINDOW registers
(1)  215/  FF02D0 :                     ; $91 and $92 can be written manually.
(1)  216/  FF02D0 :                     ;
(1)  217/  FF02D0 :                     ; Breaks:
(1)  218/  FF02D0 :                     ; d6-d7,a5-a6
(1)  219/  FF02D0 :                     ; --------------------------------------------------------
(1)  220/  FF02D0 :                     
(1)  221/  FF02D0 :                     Video_Update:
(1)  222/  FF02D0 : 4DF8 A9AE           		lea	(RAM_VdpRegs).w,a6
(1)  223/  FF02D4 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  224/  FF02DA : 3C3C 8000           		move.w	#$8000,d6
(1)  225/  FF02DE : 3E3C 0010           		move.w	#17-1,d7
(1)  226/  FF02E2 :                     .loop:
(1)  227/  FF02E2 : 1C1E                		move.b	(a6)+,d6
(1)  228/  FF02E4 : 3A86                		move.w	d6,(a5)
(1)  229/  FF02E6 : DC7C 0100           		add.w	#$100,d6
(1)  230/  FF02EA : 51CF FFF6           		dbf	d7,.loop
(1)  231/  FF02EE :                     .exit:
(1)  232/  FF02EE : 4E75                		rts
(1)  233/  FF02F0 :                     
(1)  234/  FF02F0 :                     ; --------------------------------------------------------
(1)  235/  FF02F0 :                     
(1)  236/  FF02F0 :                     list_vdpregs:
(1)  237/  FF02F0 : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  238/  FF02F1 : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  239/  FF02F2 : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  240/  FF02F3 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  241/  FF02F4 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  242/  FF02F5 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  243/  FF02F6 : 00                  		dc.b $00			; Unused
(1)  244/  FF02F7 : 00                  		dc.b $00			; Background color: 0
(1)  245/  FF02F8 : 00                  		dc.b $00			; Unused
(1)  246/  FF02F9 : 00                  		dc.b $00			; Unused
(1)  247/  FF02FA : 00                  		dc.b $00			; HInt value
(1)  248/  FF02FB : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  249/  FF02FC : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1)  250/  FF02FD : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  251/  FF02FE : 00                  		dc.b $00			; Unused
(1)  252/  FF02FF : 02                  		dc.b $02			; VDP Auto increment: $02
(1)  253/  FF0300 : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1)  254/  FF0301 : 00                  		dc.b $00
(1)  255/  FF0302 : 00                  		dc.b $00
(1)  256/  FF0303 :                     		align 2
(1)  257/  FF0304 :                     
(1)  258/  FF0304 : 0000 0EEE 0CCC 0AAA ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1)  259/  FF0314 : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  260/  FF0324 :                     ASCII_PAL_e:
(1)  261/  FF0324 :                     		align 2
(1)  262/  FF0324 :                     
(1)  263/  FF0324 :                     ; --------------------------------------------------------
(1)  264/  FF0324 :                     ; Video_Clear
(1)  265/  FF0324 :                     ;
(1)  266/  FF0324 :                     ; Clear all video data from VRAM
(1)  267/  FF0324 :                     ; --------------------------------------------------------
(1)  268/  FF0324 :                     
(1)  269/  FF0324 :                     Video_Clear:
(1)  270/  FF0324 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  271/  FF0324 :                     ; 		move.w	#0,d1
(1)  272/  FF0324 :                     ; 		move.w	#$57F*$20,d2
(1)  273/  FF0324 :                     ; 		bsr	Video_Fill
(1)  274/  FF0324 :                     
(1)  275/  FF0324 :                     Video_ClearScreen:
(1)  276/  FF0324 : 7000                		moveq	#0,d0
(1)  277/  FF0326 : 343C 0FFF           		move.w	#$FFF,d2		; FG/BG size
(1)  278/  FF032A : 1239 FFFF A9B0      		move.b	(RAM_VdpRegs+2).l,d1	; FG
(1)  279/  FF0330 : 0241 0038           		andi.w	#%111000,d1
(1)  280/  FF0334 : E149                		lsl.w	#8,d1
(1)  281/  FF0336 : E549                		lsl.w	#2,d1
(1)  282/  FF0338 : 6100 054C           		bsr	Video_Fill
(1)  283/  FF033C : 1239 FFFF A9B2      		move.b	(RAM_VdpRegs+4).l,d1	; BG
(1)  284/  FF0342 : 0241 0007           		andi.w	#%000111,d1
(1)  285/  FF0346 : E149                		lsl.w	#8,d1
(1)  286/  FF0348 : EB49                		lsl.w	#5,d1
(1)  287/  FF034A : 6100 053A           		bsr	Video_Fill
(1)  288/  FF034E : 343C 0FFF           		move.w	#$FFF,d2		; WD Size
(1)  289/  FF0352 : 1239 FFFF A9B1      		move.b	(RAM_VdpRegs+3).l,d1	; Window
(1)  290/  FF0358 : 0241 003E           		andi.w	#%111110,d1
(1)  291/  FF035C : E149                		lsl.w	#8,d1
(1)  292/  FF035E : E549                		lsl.w	#2,d1
(1)  293/  FF0360 : 6100 0524           		bsr	Video_Fill
(1)  294/  FF0364 :                     	; RAM...
(1)  295/  FF0364 : 41F8 9744           		lea	(RAM_HorScroll),a0
(1)  296/  FF0368 : 3E3C 00EF           		move.w	#240-1,d7
(1)  297/  FF036C : 7000                		moveq	#0,d0
(1)  298/  FF036E :                     .xnext:
(1)  299/  FF036E : 20C0                		move.l	d0,(a0)+
(1)  300/  FF0370 : 51CF FFFC           		dbf	d7,.xnext
(1)  301/  FF0374 : 41F8 9B04           		lea	(RAM_VerScroll),a0
(1)  302/  FF0378 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  303/  FF037C : 7000                		moveq	#0,d0
(1)  304/  FF037E :                     .ynext:
(1)  305/  FF037E : 20C0                		move.l	d0,(a0)+
(1)  306/  FF0380 : 51CF FFFC           		dbf	d7,.ynext
(1)  307/  FF0384 : 41F8 9FD4           		lea	(RAM_Sprites),a0
(1)  308/  FF0388 : 3E3C 008B           		move.w	#((70*8)/4)-1,d7
(1)  309/  FF038C : 7000                		moveq	#0,d0
(1)  310/  FF038E :                     .snext:
(1)  311/  FF038E : 20C0                		move.l	d0,(a0)+
(1)  312/  FF0390 : 51CF FFFC           		dbf	d7,.snext
(1)  313/  FF0394 :                     
(1)  314/  FF0394 : 41F8 A434           		lea	(RAM_Palette),a0
(1)  315/  FF0398 : 43F8 A4B4           		lea	(RAM_PaletteFd),a1
(1)  316/  FF039C : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  317/  FF03A0 : 7000                		moveq	#0,d0
(1)  318/  FF03A2 :                     .pnext:
(1)  319/  FF03A2 : 20C0                		move.l	d0,(a0)+
(1)  320/  FF03A4 : 22C0                		move.l	d0,(a1)+
(1)  321/  FF03A6 : 51CF FFFA           		dbf	d7,.pnext
(1)  322/  FF03AA :                     
(1)  323/  FF03AA : 41F8 AE22           		lea	(RAM_MdDreq+Dreq_Palette),a0
(1)  324/  FF03AE : 43F8 A534           		lea	(RAM_MdMarsPalFd),a1
(1)  325/  FF03B2 : 3E3C 007F           		move.w	#(256/2)-1,d7
(1)  326/  FF03B6 : 7000                		moveq	#0,d0
(1)  327/  FF03B8 :                     .pmnext:
(1)  328/  FF03B8 : 20C0                		move.l	d0,(a0)+
(1)  329/  FF03BA : 22C0                		move.l	d0,(a1)+
(1)  330/  FF03BC : 51CF FFFA           		dbf	d7,.pmnext
(1)  331/  FF03C0 : 4E75                		rts
(1)  332/  FF03C2 :                     
(1)  333/  FF03C2 :                     ; ====================================================================
(1)  334/  FF03C2 :                     ; ----------------------------------------------------------------
(1)  335/  FF03C2 :                     ; Generic screen-drawing routines
(1)  336/  FF03C2 :                     ; ----------------------------------------------------------------
(1)  337/  FF03C2 :                     
(1)  338/  FF03C2 :                     ; --------------------------------------------------------
(1)  339/  FF03C2 :                     ; Video_LoadMap
(1)  340/  FF03C2 :                     ;
(1)  341/  FF03C2 :                     ; Loads map data, in Horizontal order
(1)  342/  FF03C2 :                     ; Can autodetect layer width, height and
(1)  343/  FF03C2 :                     ; double interlace mode
(1)  344/  FF03C2 :                     ;
(1)  345/  FF03C2 :                     ; Input:
(1)  346/  FF03C2 :                     ; a0 - Map data
(1)  347/  FF03C2 :                     ;
(1)  348/  FF03C2 :                     ; d0 | LONG - locate(lyr,x,y) / 00|Layer|X|Y
(1)  349/  FF03C2 :                     ; d1 | LONG - mapsize(x,y) / Width|Height (in cells)
(1)  350/  FF03C2 :                     ; d2 | WORD - VRAM
(1)  351/  FF03C2 :                     ;
(1)  352/  FF03C2 :                     ; Breaks:
(1)  353/  FF03C2 :                     ; d4-d7,a6
(1)  354/  FF03C2 :                     ; --------------------------------------------------------
(1)  355/  FF03C2 :                     
(1)  356/  FF03C2 :                     Video_LoadMap:
(1)  357/  FF03C2 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  358/  FF03C8 : 6100 0224           		bsr	vid_PickLayer
(1)  359/  FF03CC : 3A01                		move.w	d1,d5		; Start here
(1)  360/  FF03CE :                     .yloop:
(1)  361/  FF03CE : 4845                		swap	d5
(1)  362/  FF03D0 : 2D44 0004           		move.l	d4,4(a6)
(1)  363/  FF03D4 : 2E01                		move.l	d1,d7
(1)  364/  FF03D6 : 4847                		swap	d7
(1)  365/  FF03D8 :                     .xloop:
(1)  366/  FF03D8 : 3A18                		move.w	(a0)+,d5
(1)  367/  FF03DA : BA7C FFFF           		cmp.w	#-1,d5		; -1 ?
(1)  368/  FF03DE : 6606                		bne.s	.nonull
(1)  369/  FF03E0 : 3A3C 07FF           		move.w	#varNullVram,d5	; Replace with custom blank tile
(1)  370/  FF03E4 : 6002                		bra.s	.cont
(1)  371/  FF03E6 :                     .nonull:
(1)  372/  FF03E6 : DA42                		add.w	d2,d5
(1)  373/  FF03E8 :                     .cont:
(1)  374/  FF03E8 :                     
(1)  375/  FF03E8 :                     	; Check for double interlace
(1)  376/  FF03E8 : 4847                		swap	d7
(1)  377/  FF03EA : 1E39 FFFF A9BA      		move.b	(RAM_VdpRegs+$C).l,d7
(1)  378/  FF03F0 : CE7C 0006           		and.w	#%110,d7
(1)  379/  FF03F4 : BE7C 0006           		cmp.w	#%110,d7
(1)  380/  FF03F8 : 660E                		bne.s	.nodble
(1)  381/  FF03FA : 3E05                		move.w	d5,d7
(1)  382/  FF03FC : E24F                		lsr.w	#1,d7
(1)  383/  FF03FE : CE7C 07FF           		and.w	#$7FF,d7
(1)  384/  FF0402 : CA7C F800           		and.w	#$F800,d5
(1)  385/  FF0406 : 8A47                		or.w	d7,d5
(1)  386/  FF0408 :                     .nodble:
(1)  387/  FF0408 : 4847                		swap	d7
(1)  388/  FF040A : 3C85                		move.w	d5,(a6)
(1)  389/  FF040C : 51CF FFCA           		dbf	d7,.xloop
(1)  390/  FF0410 : D886                		add.l	d6,d4
(1)  391/  FF0412 : 4845                		swap	d5
(1)  392/  FF0414 : 51CD FFB8           		dbf	d5,.yloop
(1)  393/  FF0418 : 4E75                		rts
(1)  394/  FF041A :                     
(1)  395/  FF041A :                     ; --------------------------------------------------------
(1)  396/  FF041A :                     ; Video_LoadMap_Vert
(1)  397/  FF041A :                     ;
(1)  398/  FF041A :                     ; Load map data, Vertical order
(1)  399/  FF041A :                     ;
(1)  400/  FF041A :                     ; a0 - Map data
(1)  401/  FF041A :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  402/  FF041A :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  403/  FF041A :                     ; d2 | WORD - VRAM
(1)  404/  FF041A :                     
(1)  405/  FF041A :                     ; Breaks:
(1)  406/  FF041A :                     ; a4-a5,d4-d7
(1)  407/  FF041A :                     ; --------------------------------------------------------
(1)  408/  FF041A :                     
(1)  409/  FF041A :                     Video_LoadMap_Vert:
(1)  410/  FF041A : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  411/  FF0420 : 6100 01CC           		bsr	vid_PickLayer
(1)  412/  FF0424 : 2A01                		move.l	d1,d5		; Start here
(1)  413/  FF0426 : 4845                		swap	d5
(1)  414/  FF0428 :                     .xloop:
(1)  415/  FF0428 : 4845                		swap	d5
(1)  416/  FF042A : 2F04                		move.l	d4,-(sp)
(1)  417/  FF042C : 3E01                		move.w	d1,d7
(1)  418/  FF042E : 0839 0002 FFFF A9BA 		btst	#2,(RAM_VdpRegs+$C).l
(1)  419/  FF0436 : 6702                		beq.s	.yloop
(1)  420/  FF0438 : E24F                		lsr.w	#1,d7
(1)  421/  FF043A :                     .yloop:
(1)  422/  FF043A : 2944 0004           		move.l	d4,4(a4)
(1)  423/  FF043E : 3A10                		move.w	(a0),d5
(1)  424/  FF0440 : BA7C FFFF           		cmp.w	#-1,d5
(1)  425/  FF0444 : 6606                		bne.s	.nonull
(1)  426/  FF0446 : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  427/  FF044A : 6002                		bra.s	.cont
(1)  428/  FF044C :                     .nonull:
(1)  429/  FF044C : DA42                		add.w	d2,d5
(1)  430/  FF044E :                     .cont:
(1)  431/  FF044E : 4847                		swap	d7
(1)  432/  FF0450 : D0FC 0002           		adda	#2,a0
(1)  433/  FF0454 : 0839 0002 FFFF A9BA 		btst	#2,(RAM_VdpRegs+$C).l
(1)  434/  FF045C : 6712                		beq.s	.nodble
(1)  435/  FF045E : D0FC 0002           		adda	#2,a0
(1)  436/  FF0462 : 3E05                		move.w	d5,d7
(1)  437/  FF0464 : E24F                		lsr.w	#1,d7
(1)  438/  FF0466 : CE7C 07FF           		and.w	#$7FF,d7
(1)  439/  FF046A : CA7C F800           		and.w	#$F800,d5
(1)  440/  FF046E : 8A47                		or.w	d7,d5
(1)  441/  FF0470 :                     .nodble:
(1)  442/  FF0470 : 4847                		swap	d7
(1)  443/  FF0472 : 3885                		move.w	d5,(a4)
(1)  444/  FF0474 : D886                		add.l	d6,d4
(1)  445/  FF0476 : 51CF FFC2           		dbf	d7,.yloop
(1)  446/  FF047A :                     .outdbl:
(1)  447/  FF047A : 281F                		move.l	(sp)+,d4
(1)  448/  FF047C : D8BC 0002 0000      		add.l	#$20000,d4
(1)  449/  FF0482 : 4845                		swap	d5
(1)  450/  FF0484 : 51CD FFA2           		dbf	d5,.xloop
(1)  451/  FF0488 : 4E75                		rts
(1)  452/  FF048A :                     
(1)  453/  FF048A :                     ; ; --------------------------------------------------------
(1)  454/  FF048A :                     ; ; Video_AutoMap_Vert
(1)  455/  FF048A :                     ; ;
(1)  456/  FF048A :                     ; ; Make automatic map, Vertical order
(1)  457/  FF048A :                     ; ;
(1)  458/  FF048A :                     ; ; MCD: Use this to make a virtual screen
(1)  459/  FF048A :                     ; ; for Stamps
(1)  460/  FF048A :                     ; ;
(1)  461/  FF048A :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  462/  FF048A :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  463/  FF048A :                     ; ; d2 | WORD - VRAM
(1)  464/  FF048A :                     ;
(1)  465/  FF048A :                     ; ; Breaks:
(1)  466/  FF048A :                     ; ; a4-a5,d4-d7
(1)  467/  FF048A :                     ; ; --------------------------------------------------------
(1)  468/  FF048A :                     ;
(1)  469/  FF048A :                     ; ; TODO: double interlace
(1)  470/  FF048A :                     ; Video_AutoMap_Vert:
(1)  471/  FF048A :                     ; 		lea	(vdp_data),a4
(1)  472/  FF048A :                     ; 		bsr	vid_PickLayer
(1)  473/  FF048A :                     ; 		move.w	d2,d7		; Start here
(1)  474/  FF048A :                     ; 		move.l	d1,d5
(1)  475/  FF048A :                     ; 		swap	d5
(1)  476/  FF048A :                     ; .xloop:
(1)  477/  FF048A :                     ; 		swap	d5
(1)  478/  FF048A :                     ; 		move.l	d4,-(sp)
(1)  479/  FF048A :                     ; 		move.w	d1,d5
(1)  480/  FF048A :                     ; 		btst	#2,(RAM_VdpRegs+$C).l
(1)  481/  FF048A :                     ; 		beq.s	.yloop
(1)  482/  FF048A :                     ; 		lsr.w	#1,d5
(1)  483/  FF048A :                     ; .yloop:
(1)  484/  FF048A :                     ; 		move.l	d4,4(a4)
(1)  485/  FF048A :                     ; 		move.w	d7,(a4)
(1)  486/  FF048A :                     ; 		add.w	#1,d7
(1)  487/  FF048A :                     ; 		add.l	d6,d4
(1)  488/  FF048A :                     ; 		dbf	d5,.yloop
(1)  489/  FF048A :                     ;
(1)  490/  FF048A :                     ; 		move.l	(sp)+,d4
(1)  491/  FF048A :                     ; 		add.l	#$20000,d4
(1)  492/  FF048A :                     ; 		swap	d5
(1)  493/  FF048A :                     ; 		dbf	d5,.xloop
(1)  494/  FF048A :                     ; 		rts
(1)  495/  FF048A :                     
(1)  496/  FF048A :                     ; ====================================================================
(1)  497/  FF048A :                     ; ----------------------------------------------------------------
(1)  498/  FF048A :                     ; Custom "PRINT" system, for debugging or quick texts.
(1)  499/  FF048A :                     ; ----------------------------------------------------------------
(1)  500/  FF048A :                     
(1)  501/  FF048A :                     ; --------------------------------------------------------
(1)  502/  FF048A :                     ; Video_PrintInit
(1)  503/  FF048A :                     ;
(1)  504/  FF048A :                     ; Initializes the default Graphics and Palette
(1)  505/  FF048A :                     ; for the font.
(1)  506/  FF048A :                     ;
(1)  507/  FF048A :                     ; *** ON VBLANK OR DISPLAY OFF ONLY ***
(1)  508/  FF048A :                     ; *** MAKE SURE SH2 IS NOT READING ROM DATA ***
(1)  509/  FF048A :                     ; --------------------------------------------------------
(1)  510/  FF048A :                     
(1)  511/  FF048A :                     Video_PrintInit:
(1)  512/  FF048A : 203C 0004 0000      		move.l	#ASCII_FONT,d0
(1)  513/  FF0490 : 323C B000           		move.w	#varPrintVram*$20,d1
(1)  514/  FF0494 : 343C 1000           		move.w	#ASCII_FONT_e-ASCII_FONT,d2
(1)  515/  FF0498 : 363C 6580           		move.w	#varPrintVram|(varPrintPal<<13),d3
(1)  516/  FF049C : 31C3 A99C           		move.w	d3,(RAM_VidPrntVram).w
(1)  517/  FF04A0 : 6100 04DE           		bsr	Video_LoadArt
(1)  518/  FF04A4 :                     Video_PrintPal:
(1)  519/  FF04A4 : 41FA FE5E           		lea	ASCII_PAL(pc),a0
(1)  520/  FF04A8 : 7030                		moveq	#(varPrintPal<<4),d0
(1)  521/  FF04AA : 323C 000F           		move.w	#$F,d1
(1)  522/  FF04AE : 6100 01F6           		bsr	Video_LoadPal	; Write to both palette buffers
(1)  523/  FF04B2 : 6000 01E8           		bra	Video_FadePal
(1)  524/  FF04B6 :                     
(1)  525/  FF04B6 :                     ; --------------------------------------------------------
(1)  526/  FF04B6 :                     ; Video_Print
(1)  527/  FF04B6 :                     ;
(1)  528/  FF04B6 :                     ; Prints string to layer
(1)  529/  FF04B6 :                     ; requires ASCII font
(1)  530/  FF04B6 :                     ;
(1)  531/  FF04B6 :                     ; a0 | DATA - String data w/special characters +
(1)  532/  FF04B6 :                     ;             list of RAM locations to read
(1)  533/  FF04B6 :                     ; d0 | LONG - Print location on-screen:
(1)  534/  FF04B6 :                     ;             00|Lyr|X|Y or locate(layer,x,y)
(1)  535/  FF04B6 :                     ;
(1)  536/  FF04B6 :                     ; Special characters:
(1)  537/  FF04B6 :                     ; "//b" - Shows BYTE value
(1)  538/  FF04B6 :                     ; "//w" - Shows WORD value
(1)  539/  FF04B6 :                     ; "//l" - Shows LONG value
(1)  540/  FF04B6 :                     ;   $0A - Next line
(1)  541/  FF04B6 :                     ;   $00 - End of line
(1)  542/  FF04B6 :                     ;
(1)  543/  FF04B6 :                     ; After $00, put your RAM addresses in LONGS
(1)  544/  FF04B6 :                     ; don't forget to put align 2 at the end.
(1)  545/  FF04B6 :                     ;
(1)  546/  FF04B6 :                     ; CALL Video_PrintInit FIRST before using this.
(1)  547/  FF04B6 :                     ;
(1)  548/  FF04B6 :                     ; Breaks:
(1)  549/  FF04B6 :                     ; d4-d7,a4-a6
(1)  550/  FF04B6 :                     ; --------------------------------------------------------
(1)  551/  FF04B6 :                     
(1)  552/  FF04B6 :                     Video_Print:
(1)  553/  FF04B6 :                     ; 		movem.l	d3-d7,-(sp)
(1)  554/  FF04B6 :                     ; 		movem.l	a4-a6,-(sp)
(1)  555/  FF04B6 :                     
(1)  556/  FF04B6 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  557/  FF04BC : 6100 0130           		bsr	vid_PickLayer
(1)  558/  FF04C0 : 4BF8 A814           		lea	(RAM_VidPrntList),a5
(1)  559/  FF04C4 :                     .newjump:
(1)  560/  FF04C4 : 2D44 0004           		move.l	d4,4(a6)
(1)  561/  FF04C8 : 2A04                		move.l	d4,d5
(1)  562/  FF04CA :                     .loop:
(1)  563/  FF04CA : 1E18                		move.b	(a0)+,d7
(1)  564/  FF04CC : 6772                		beq	.exit
(1)  565/  FF04CE : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  566/  FF04D2 : 6718                		beq.s	.next
(1)  567/  FF04D4 : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(1)  568/  FF04D8 : 6716                		beq.s	.special
(1)  569/  FF04DA : 0247 00FF           		andi.w	#$FF,d7
(1)  570/  FF04DE :                     .puttext:
(1)  571/  FF04DE : DE78 A99C           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  572/  FF04E2 : 3C87                		move.w	d7,(a6)
(1)  573/  FF04E4 : DABC 0002 0000      		add.l	#$20000,d5
(1)  574/  FF04EA : 60DE                		bra.s	.loop
(1)  575/  FF04EC :                     ; Next line
(1)  576/  FF04EC :                     .next:
(1)  577/  FF04EC : D886                		add.l	d6,d4
(1)  578/  FF04EE : 60D4                		bra.s	.newjump
(1)  579/  FF04F0 :                     
(1)  580/  FF04F0 :                     ; Specials
(1)  581/  FF04F0 :                     .special:
(1)  582/  FF04F0 : 1E18                		move.b	(a0)+,d7
(1)  583/  FF04F2 : 0C07 0062           		cmpi.b	#"b",d7
(1)  584/  FF04F6 : 6712                		beq.s	.isbyte
(1)  585/  FF04F8 : 0C07 0077           		cmpi.b	#"w",d7
(1)  586/  FF04FC : 671E                		beq.s	.isword
(1)  587/  FF04FE : 0C07 006C           		cmpi.b	#"l",d7
(1)  588/  FF0502 : 672A                		beq.s	.islong
(1)  589/  FF0504 : 3E3C 005C           		move.w	#"\\",d7		; normal " \ "
(1)  590/  FF0508 : 60D4                		bra.s	.puttext
(1)  591/  FF050A :                     
(1)  592/  FF050A :                     	; TEMPORAL VALUES
(1)  593/  FF050A :                     .isbyte:
(1)  594/  FF050A : 2AC5                		move.l	d5,(a5)+
(1)  595/  FF050C : 3AFC 0001           		move.w	#1,(a5)+
(1)  596/  FF0510 : DABC 0004 0000      		add.l	#$40000,d5
(1)  597/  FF0516 : 2D45 0004           		move.l	d5,4(a6)
(1)  598/  FF051A : 60AE                		bra	.loop
(1)  599/  FF051C :                     .isword:
(1)  600/  FF051C : 2AC5                		move.l	d5,(a5)+
(1)  601/  FF051E : 3AFC 0002           		move.w	#2,(a5)+
(1)  602/  FF0522 : DABC 0008 0000      		add.l	#$80000,d5
(1)  603/  FF0528 : 2D45 0004           		move.l	d5,4(a6)
(1)  604/  FF052C : 609C                		bra	.loop
(1)  605/  FF052E :                     .islong:
(1)  606/  FF052E : 2AC5                		move.l	d5,(a5)+
(1)  607/  FF0530 : 3AFC 0003           		move.w	#3,(a5)+
(1)  608/  FF0534 : DABC 0010 0000      		add.l	#$100000,d5
(1)  609/  FF053A : 2D45 0004           		move.l	d5,4(a6)
(1)  610/  FF053E : 608A                		bra	.loop
(1)  611/  FF0540 :                     .exit:
(1)  612/  FF0540 :                     
(1)  613/  FF0540 :                     	; ----------------------------------------
(1)  614/  FF0540 :                     	; Print values
(1)  615/  FF0540 :                     	;
(1)  616/  FF0540 :                     	; vvvv vvvv tttt
(1)  617/  FF0540 :                     	; v - vdp pos
(1)  618/  FF0540 :                     	; t - value type
(1)  619/  FF0540 :                     	; ----------------------------------------
(1)  620/  FF0540 :                     
(1)  621/  FF0540 :                     	; reading byte by byte because longs doesn't get
(1)  622/  FF0540 :                     	; aligned after $00...
(1)  623/  FF0540 :                     
(1)  624/  FF0540 : 7800                		moveq	#0,d4
(1)  625/  FF0542 : 7A00                		moveq	#0,d5
(1)  626/  FF0544 : 7C00                		moveq	#0,d6
(1)  627/  FF0546 : 4BF8 A814           		lea	(RAM_VidPrntList),a5
(1)  628/  FF054A :                     .nextv:
(1)  629/  FF054A : 4A95                		tst.l	(a5)
(1)  630/  FF054C : 6700 009E           		beq	.nothing
(1)  631/  FF0550 :                     
(1)  632/  FF0550 :                     	; grab value
(1)  633/  FF0550 : 7800                		moveq	#0,d4
(1)  634/  FF0552 : 1818                		move.b	(a0)+,d4
(1)  635/  FF0554 : E19C                		rol.l	#8,d4
(1)  636/  FF0556 : 1818                		move.b	(a0)+,d4
(1)  637/  FF0558 : E19C                		rol.l	#8,d4
(1)  638/  FF055A : 1818                		move.b	(a0)+,d4
(1)  639/  FF055C : E19C                		rol.l	#8,d4
(1)  640/  FF055E : 1818                		move.b	(a0)+,d4
(1)  641/  FF0560 : 2844                		movea.l	d4,a4
(1)  642/  FF0562 : 7800                		moveq	#0,d4
(1)  643/  FF0564 :                     
(1)  644/  FF0564 :                     	; get value
(1)  645/  FF0564 : 3C2D 0004           		move.w	4(a5),d6
(1)  646/  FF0568 : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  647/  FF056C : 660E                		bne.s	.vbyte
(1)  648/  FF056E : 1814                		move.b	(a4),d4
(1)  649/  FF0570 : 2D55 0004           		move.l	(a5),4(a6)
(1)  650/  FF0574 : E91C                		rol.b	#4,d4
(1)  651/  FF0576 : 6158                		bsr.s	.donibl
(1)  652/  FF0578 : E91C                		rol.b	#4,d4
(1)  653/  FF057A : 6154                		bsr.s	.donibl
(1)  654/  FF057C :                     .vbyte:
(1)  655/  FF057C : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  656/  FF0580 : 661C                		bne.s	.vword
(1)  657/  FF0582 : 1814                		move.b	(a4),d4
(1)  658/  FF0584 : E15C                		rol.w	#8,d4
(1)  659/  FF0586 : 182C 0001           		move.b	1(a4),d4
(1)  660/  FF058A : 2D55 0004           		move.l	(a5),4(a6)
(1)  661/  FF058E : E95C                		rol.w	#4,d4
(1)  662/  FF0590 : 613E                		bsr.s	.donibl
(1)  663/  FF0592 : E95C                		rol.w	#4,d4
(1)  664/  FF0594 : 613A                		bsr.s	.donibl
(1)  665/  FF0596 : E95C                		rol.w	#4,d4
(1)  666/  FF0598 : 6136                		bsr.s	.donibl
(1)  667/  FF059A : E95C                		rol.w	#4,d4
(1)  668/  FF059C : 6132                		bsr.s	.donibl
(1)  669/  FF059E :                     .vword:
(1)  670/  FF059E :                     
(1)  671/  FF059E :                     	; TODO: might break on negative values
(1)  672/  FF059E : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  673/  FF05A2 : 6624                		bne.s	.vlong
(1)  674/  FF05A4 : 1814                		move.b	(a4),d4
(1)  675/  FF05A6 : E19C                		rol.l	#8,d4
(1)  676/  FF05A8 : 182C 0001           		move.b	1(a4),d4
(1)  677/  FF05AC : E19C                		rol.l	#8,d4
(1)  678/  FF05AE : 182C 0002           		move.b	2(a4),d4
(1)  679/  FF05B2 : E19C                		rol.l	#8,d4
(1)  680/  FF05B4 : 182C 0003           		move.b	3(a4),d4
(1)  681/  FF05B8 : 2D55 0004           		move.l	(a5),4(a6)
(1)  682/  FF05BC : 3C3C 0007           		move.w	#7,d6
(1)  683/  FF05C0 : E99C                .lngloop:	rol.l	#4,d4
(1)  684/  FF05C2 : 610C                		bsr.s	.donibl
(1)  685/  FF05C4 : 51CE FFFA           		dbf	d6,.lngloop
(1)  686/  FF05C8 :                     .vlong:
(1)  687/  FF05C8 : 429D                		clr.l	(a5)+
(1)  688/  FF05CA : 425D                		clr.w	(a5)+
(1)  689/  FF05CC : 6000 FF7C           		bra	.nextv
(1)  690/  FF05D0 :                     
(1)  691/  FF05D0 :                     ; make nibble byte
(1)  692/  FF05D0 :                     .donibl:
(1)  693/  FF05D0 : 3A04                		move.w	d4,d5
(1)  694/  FF05D2 : 0245 000F           		andi.w	#%1111,d5
(1)  695/  FF05D6 : BA3C 000A           		cmp.b	#$A,d5
(1)  696/  FF05DA : 6D04                		blt.s	.lowr
(1)  697/  FF05DC : DA3C 0007           		add.b	#7,d5
(1)  698/  FF05E0 :                     .lowr:
(1)  699/  FF05E0 : DA7C 0030           		add.w	#"0",d5
(1)  700/  FF05E4 : DA78 A99C           		add.w	(RAM_VidPrntVram),d5
(1)  701/  FF05E8 : 3C85                		move.w	d5,(a6)
(1)  702/  FF05EA : 4E75                		rts
(1)  703/  FF05EC :                     ; exit
(1)  704/  FF05EC :                     .nothing:
(1)  705/  FF05EC :                     ; 		movem.l	(sp)+,a4-a6
(1)  706/  FF05EC :                     ; 		movem.l	(sp)+,d3-d7
(1)  707/  FF05EC : 4E75                		rts
(1)  708/  FF05EE :                     
(1)  709/  FF05EE :                     ; --------------------------------------------------------
(1)  710/  FF05EE :                     ; Shared: pick layer / x pos / y pos and set size
(1)  711/  FF05EE :                     ; --------------------------------------------------------
(1)  712/  FF05EE :                     
(1)  713/  FF05EE :                     vid_PickLayer:
(1)  714/  FF05EE : 2C00                		move.l	d0,d6			; Pick layer
(1)  715/  FF05F0 : 4846                		swap	d6
(1)  716/  FF05F2 : 0806 0000           		btst	#0,d6
(1)  717/  FF05F6 : 671E                		beq.s	.plawnd
(1)  718/  FF05F8 : 1839 FFFF A9B2      		move.b	(RAM_VdpRegs+4).l,d4	; BG
(1)  719/  FF05FE : 3A04                		move.w	d4,d5
(1)  720/  FF0600 : E24D                		lsr.w	#1,d5
(1)  721/  FF0602 : 0245 0003           		andi.w	#%11,d5
(1)  722/  FF0606 : 4844                		swap	d4
(1)  723/  FF0608 : 3805                		move.w	d5,d4
(1)  724/  FF060A : 4844                		swap	d4
(1)  725/  FF060C : 0244 0001           		andi.w	#1,d4
(1)  726/  FF0610 : E14C                		lsl.w	#8,d4
(1)  727/  FF0612 : EB4C                		lsl.w	#5,d4
(1)  728/  FF0614 : 6028                		bra.s	.golyr
(1)  729/  FF0616 :                     .plawnd:
(1)  730/  FF0616 : 1839 FFFF A9B0      		move.b	(RAM_VdpRegs+2).l,d4	; FG
(1)  731/  FF061C : 0806 0001           		btst	#1,d6
(1)  732/  FF0620 : 6706                		beq.s	.nowd
(1)  733/  FF0622 : 1839 FFFF A9B1      		move.b	(RAM_VdpRegs+3).l,d4	; WINDOW
(1)  734/  FF0628 :                     .nowd:
(1)  735/  FF0628 : 3A04                		move.w	d4,d5
(1)  736/  FF062A : E84D                		lsr.w	#4,d5
(1)  737/  FF062C : 0245 0003           		andi.w	#%11,d5
(1)  738/  FF0630 : 4844                		swap	d4
(1)  739/  FF0632 : 3805                		move.w	d5,d4
(1)  740/  FF0634 : 4844                		swap	d4
(1)  741/  FF0636 : 0244 000E           		andi.w	#%00001110,d4
(1)  742/  FF063A : E14C                		lsl.w	#8,d4
(1)  743/  FF063C : E54C                		lsl.w	#2,d4
(1)  744/  FF063E :                     .golyr:
(1)  745/  FF063E : 0044 4000           		ori.w	#$4000,d4
(1)  746/  FF0642 : 3A00                		move.w	d0,d5			; Y start pos
(1)  747/  FF0644 : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  748/  FF0648 : ED4D                		lsl.w	#6,d5
(1)  749/  FF064A : 1C38 A9BE           		move.b	(RAM_VdpRegs+$10).w,d6
(1)  750/  FF064E : 0246 0003           		andi.w	#%11,d6
(1)  751/  FF0652 : 670A                		beq.s	.thissz
(1)  752/  FF0654 : DA45                		add.w	d5,d5			; H64
(1)  753/  FF0656 : 0246 0002           		andi.w	#%10,d6
(1)  754/  FF065A : 6702                		beq.s	.thissz
(1)  755/  FF065C : DA45                		add.w	d5,d5			; H128
(1)  756/  FF065E :                     .thissz:
(1)  757/  FF065E : D845                		add.w	d5,d4
(1)  758/  FF0660 : 3A00                		move.w	d0,d5
(1)  759/  FF0662 : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  760/  FF0666 : EE4D                		lsr.w	#7,d5
(1)  761/  FF0668 : D845                		add.w	d5,d4			; X add
(1)  762/  FF066A : 4844                		swap	d4
(1)  763/  FF066C : 7C00                		moveq	#0,d6
(1)  764/  FF066E : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  765/  FF0672 : 1A38 A9BE           		move.b	(RAM_VdpRegs+$10).w,d5
(1)  766/  FF0676 : 0245 0003           		andi.w	#%11,d5
(1)  767/  FF067A : 670A                		beq.s	.thisszj
(1)  768/  FF067C : DC46                		add.w	d6,d6			; H64
(1)  769/  FF067E : 0245 0002           		andi.w	#%10,d5
(1)  770/  FF0682 : 6702                		beq.s	.thisszj
(1)  771/  FF0684 : DC46                		add.w	d6,d6			; H128
(1)  772/  FF0686 :                     .thisszj:
(1)  773/  FF0686 : 4846                		swap	d6
(1)  774/  FF0688 : 4E75                		rts
(1)  775/  FF068A :                     
(1)  776/  FF068A :                     ; ====================================================================
(1)  777/  FF068A :                     ; ----------------------------------------------------------------
(1)  778/  FF068A :                     ; Palette fade system, Genesis side
(1)  779/  FF068A :                     ; ----------------------------------------------------------------
(1)  780/  FF068A :                     
(1)  781/  FF068A :                     ; --------------------------------------------------------
(1)  782/  FF068A :                     ; Video_RunFade
(1)  783/  FF068A :                     ;
(1)  784/  FF068A :                     ; Processes palette fading and reports if requests
(1)  785/  FF068A :                     ; finished on exit.
(1)  786/  FF068A :                     ;
(1)  787/  FF068A :                     ; Returns:
(1)  788/  FF068A :                     ; bne - Still active
(1)  789/  FF068A :                     ; beq - Finished
(1)  790/  FF068A :                     ;
(1)  791/  FF068A :                     ; *** CALL System_WaitFrame FIRST ***
(1)  792/  FF068A :                     ; --------------------------------------------------------
(1)  793/  FF068A :                     
(1)  794/  FF068A :                     Video_RunFade:
(1)  795/  FF068A : 613E                		bsr	Video_DoPalFade
(1)  796/  FF068C : 6100 0478           		bsr	Video_MarsPalFade
(1)  797/  FF0690 : 3E38 A9A6           		move.w	(RAM_FadeMarsReq),d7
(1)  798/  FF0694 : 3C38 A99E           		move.w	(RAM_FadeMdReq),d6
(1)  799/  FF0698 : 8E46                		or.w	d6,d7
(1)  800/  FF069A : 4E75                		rts
(1)  801/  FF069C :                     
(1)  802/  FF069C :                     ; --------------------------------------------------------
(1)  803/  FF069C :                     ; Video_LoadPal
(1)  804/  FF069C :                     ;
(1)  805/  FF069C :                     ; Input:
(1)  806/  FF069C :                     ; a0 - Palette data
(1)  807/  FF069C :                     ; d0 - Start position
(1)  808/  FF069C :                     ; d1 - Number of colors
(1)  809/  FF069C :                     ;
(1)  810/  FF069C :                     ; Breaks:
(1)  811/  FF069C :                     ; d5-d7,a6
(1)  812/  FF069C :                     ; --------------------------------------------------------
(1)  813/  FF069C :                     
(1)  814/  FF069C :                     Video_FadePal:
(1)  815/  FF069C : 4DF8 A4B4           		lea	(RAM_PaletteFd),a6
(1)  816/  FF06A0 : 4278 A9A4           		clr.w	(RAM_FadeMdTmr).w
(1)  817/  FF06A4 : 6004                		bra.s	vidMd_Pal
(1)  818/  FF06A6 :                     Video_LoadPal:
(1)  819/  FF06A6 : 4DF8 A434           		lea	(RAM_Palette),a6
(1)  820/  FF06AA :                     vidMd_Pal:
(1)  821/  FF06AA : 2A48                		move.l	a0,a5
(1)  822/  FF06AC : 7E00                		moveq	#0,d7
(1)  823/  FF06AE : 3E00                		move.w	d0,d7
(1)  824/  FF06B0 : DE47                		add.w	d7,d7
(1)  825/  FF06B2 : DCC7                		adda	d7,a6
(1)  826/  FF06B4 : 3E01                		move.w	d1,d7
(1)  827/  FF06B6 : 9E7C 0001           		sub.w	#1,d7
(1)  828/  FF06BA : 3C02                		move.w	d2,d6
(1)  829/  FF06BC : CC7C 0001           		and.w	#1,d6
(1)  830/  FF06C0 : E25E                		ror.w	#1,d6
(1)  831/  FF06C2 :                     .loop:
(1)  832/  FF06C2 : 3CDD                		move.w	(a5)+,(a6)+
(1)  833/  FF06C4 : 51CF FFFC           		dbf	d7,.loop
(1)  834/  FF06C8 : 4E75                		rts
(1)  835/  FF06CA :                     
(1)  836/  FF06CA :                     ; --------------------------------------------------------
(1)  837/  FF06CA :                     ; Video_DoPalFade
(1)  838/  FF06CA :                     ;
(1)  839/  FF06CA :                     ; RAM_ReqFadeMars: (WORD)
(1)  840/  FF06CA :                     ; $00 - No task or finished.
(1)  841/  FF06CA :                     ; $01 - Fade in
(1)  842/  FF06CA :                     ; $02 - Fade out to black
(1)  843/  FF06CA :                     ;
(1)  844/  FF06CA :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  845/  FF06CA :                     ; --------------------------------------------------------
(1)  846/  FF06CA :                     
(1)  847/  FF06CA :                     Video_DoPalFade:
(1)  848/  FF06CA : 0478 0001 A9A4      		sub.w	#1,(RAM_FadeMdTmr).w
(1)  849/  FF06D0 : 6A14                		bpl.s	.active
(1)  850/  FF06D2 : 31F8 A9A2 A9A4      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  851/  FF06D8 : 3E38 A99E           		move.w	(RAM_FadeMdReq).w,d7
(1)  852/  FF06DC : DE47                		add.w	d7,d7
(1)  853/  FF06DE : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  854/  FF06E2 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  855/  FF06E6 :                     .active:
(1)  856/  FF06E6 : 4E75                		rts
(1)  857/  FF06E8 :                     
(1)  858/  FF06E8 :                     ; --------------------------------------------
(1)  859/  FF06E8 :                     
(1)  860/  FF06E8 :                     .fade_list:
(1)  861/  FF06E8 : 0006                		dc.w .fade_done-.fade_list
(1)  862/  FF06EA : 0008                		dc.w .fade_in-.fade_list
(1)  863/  FF06EC : 00AC                		dc.w .fade_out-.fade_list
(1)  864/  FF06EE :                     
(1)  865/  FF06EE :                     ; --------------------------------------------
(1)  866/  FF06EE :                     ; No fade or finished.
(1)  867/  FF06EE :                     ; --------------------------------------------
(1)  868/  FF06EE :                     
(1)  869/  FF06EE :                     .fade_done:
(1)  870/  FF06EE : 4E75                		rts
(1)  871/  FF06F0 :                     
(1)  872/  FF06F0 :                     ; --------------------------------------------
(1)  873/  FF06F0 :                     ; Fade in
(1)  874/  FF06F0 :                     ; --------------------------------------------
(1)  875/  FF06F0 :                     
(1)  876/  FF06F0 :                     .fade_in:
(1)  877/  FF06F0 : 4DF8 A4B4           		lea	(RAM_PaletteFd),a6
(1)  878/  FF06F4 : 4BF8 A434           		lea	(RAM_Palette),a5
(1)  879/  FF06F8 : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  880/  FF06FC : 3238 A9A0           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  881/  FF0700 : D241                		add.w	d1,d1
(1)  882/  FF0702 : 3C00                		move.w	d0,d6
(1)  883/  FF0704 : 4846                		swap	d6
(1)  884/  FF0706 : 907C 0001           		sub.w	#1,d0
(1)  885/  FF070A :                     .nxt_pal:
(1)  886/  FF070A : 4242                		clr.w	d2		; Reset finished colorbits
(1)  887/  FF070C : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  888/  FF070E : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  889/  FF0710 : 3607                		move.w	d7,d3		; RED
(1)  890/  FF0712 : 3806                		move.w	d6,d4
(1)  891/  FF0714 : CC7C 0EE0           		and.w	#%0000111011100000,d6
(1)  892/  FF0718 : C87C 000E           		and.w	#%0000000000001110,d4
(1)  893/  FF071C : C67C 000E           		and.w	#%0000000000001110,d3
(1)  894/  FF0720 : D841                		add.w	d1,d4
(1)  895/  FF0722 : B843                		cmp.w	d3,d4
(1)  896/  FF0724 : 6506                		bcs.s	.no_red
(1)  897/  FF0726 : 3803                		move.w	d3,d4
(1)  898/  FF0728 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1)  899/  FF072C :                     .no_red:
(1)  900/  FF072C : 8C44                		or.w	d4,d6
(1)  901/  FF072E : E949                		lsl.w	#4,d1
(1)  902/  FF0730 : 3607                		move.w	d7,d3		; GREEN
(1)  903/  FF0732 : 3806                		move.w	d6,d4
(1)  904/  FF0734 : CC7C 0E0E           		and.w	#%0000111000001110,d6
(1)  905/  FF0738 : C87C 00E0           		and.w	#%0000000011100000,d4
(1)  906/  FF073C : C67C 00E0           		and.w	#%0000000011100000,d3
(1)  907/  FF0740 : D841                		add.w	d1,d4
(1)  908/  FF0742 : B843                		cmp.w	d3,d4
(1)  909/  FF0744 : 6506                		bcs.s	.no_grn
(1)  910/  FF0746 : 3803                		move.w	d3,d4
(1)  911/  FF0748 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1)  912/  FF074C :                     .no_grn:
(1)  913/  FF074C : 8C44                		or.w	d4,d6
(1)  914/  FF074E : E949                		lsl.w	#4,d1
(1)  915/  FF0750 : 3607                		move.w	d7,d3		; BLUE
(1)  916/  FF0752 : 3806                		move.w	d6,d4
(1)  917/  FF0754 : CC7C 00EE           		and.w	#%0000000011101110,d6
(1)  918/  FF0758 : C87C 0E00           		and.w	#%0000111000000000,d4
(1)  919/  FF075C : C67C 0E00           		and.w	#%0000111000000000,d3
(1)  920/  FF0760 : D841                		add.w	d1,d4
(1)  921/  FF0762 : B843                		cmp.w	d3,d4
(1)  922/  FF0764 : 6506                		bcs.s	.no_blu
(1)  923/  FF0766 : 3803                		move.w	d3,d4
(1)  924/  FF0768 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1)  925/  FF076C :                     .no_blu:
(1)  926/  FF076C : 8C44                		or.w	d4,d6
(1)  927/  FF076E : E049                		lsr.w	#8,d1
(1)  928/  FF0770 : 3AC6                		move.w	d6,(a5)+
(1)  929/  FF0772 : DCFC 0002           		adda	#2,a6
(1)  930/  FF0776 : B47C 0007           		cmp.w	#%111,d2
(1)  931/  FF077A : 6608                		bne.s	.no_fnsh
(1)  932/  FF077C : 4846                		swap	d6
(1)  933/  FF077E : 9C7C 0001           		sub.w	#1,d6
(1)  934/  FF0782 : 4846                		swap	d6
(1)  935/  FF0784 :                     .no_fnsh:
(1)  936/  FF0784 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  937/  FF0788 : 4846                		swap	d6
(1)  938/  FF078A : 4A46                		tst.w	d6
(1)  939/  FF078C : 6604                		bne.s	.no_move
(1)  940/  FF078E : 4278 A99E           		clr.w	(RAM_FadeMdReq).w
(1)  941/  FF0792 :                     .no_move:
(1)  942/  FF0792 : 4E75                		rts
(1)  943/  FF0794 :                     
(1)  944/  FF0794 :                     ; --------------------------------------------
(1)  945/  FF0794 :                     ; Fade out
(1)  946/  FF0794 :                     ; --------------------------------------------
(1)  947/  FF0794 :                     
(1)  948/  FF0794 :                     .fade_out:
(1)  949/  FF0794 : 4DF8 A434           		lea	(RAM_Palette),a6
(1)  950/  FF0798 : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  951/  FF079C : 3238 A9A0           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  952/  FF07A0 : 3C00                		move.w	d0,d6
(1)  953/  FF07A2 : 4846                		swap	d6
(1)  954/  FF07A4 : 907C 0001           		sub.w	#1,d0
(1)  955/  FF07A8 :                     .nxt_pal_o:
(1)  956/  FF07A8 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  957/  FF07AA : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  958/  FF07AC : 3C07                		move.w	d7,d6
(1)  959/  FF07AE : CE7C 0EE0           		and.w	#%0000111011100000,d7
(1)  960/  FF07B2 : CC7C 000E           		and.w	#%0000000000001110,d6
(1)  961/  FF07B6 : 9C41                		sub.w	d1,d6
(1)  962/  FF07B8 : 6A06                		bpl.s	.no_red_o
(1)  963/  FF07BA : 4246                		clr.w	d6
(1)  964/  FF07BC : 847C 0001           		or.w	#%001,d2		; RED is ready
(1)  965/  FF07C0 :                     .no_red_o:
(1)  966/  FF07C0 : 8E46                		or.w	d6,d7
(1)  967/  FF07C2 : E949                		lsl.w	#4,d1
(1)  968/  FF07C4 : 3C07                		move.w	d7,d6
(1)  969/  FF07C6 : CE7C 0E0E           		and.w	#%0000111000001110,d7
(1)  970/  FF07CA : CC7C 00E0           		and.w	#%0000000011100000,d6
(1)  971/  FF07CE : 9C41                		sub.w	d1,d6
(1)  972/  FF07D0 : 6A06                		bpl.s	.no_grn_o
(1)  973/  FF07D2 : 4246                		clr.w	d6
(1)  974/  FF07D4 : 847C 0002           		or.w	#%010,d2		; GREEN is ready
(1)  975/  FF07D8 :                     .no_grn_o:
(1)  976/  FF07D8 : 8E46                		or.w	d6,d7
(1)  977/  FF07DA : E949                		lsl.w	#4,d1
(1)  978/  FF07DC : 3C07                		move.w	d7,d6
(1)  979/  FF07DE : CE7C 00EE           		and.w	#%0000000011101110,d7
(1)  980/  FF07E2 : CC7C 0E00           		and.w	#%0000111000000000,d6
(1)  981/  FF07E6 : 9C41                		sub.w	d1,d6
(1)  982/  FF07E8 : 6A06                		bpl.s	.no_blu_o
(1)  983/  FF07EA : 4246                		clr.w	d6
(1)  984/  FF07EC : 847C 0004           		or.w	#%100,d2		; BLUE is ready
(1)  985/  FF07F0 :                     .no_blu_o:
(1)  986/  FF07F0 : 8E46                		or.w	d6,d7
(1)  987/  FF07F2 : E049                		lsr.w	#8,d1
(1)  988/  FF07F4 : 3CC7                		move.w	d7,(a6)+
(1)  989/  FF07F6 : B47C 0007           		cmp.w	#%111,d2
(1)  990/  FF07FA : 6608                		bne.s	.no_fnsh_o
(1)  991/  FF07FC : 4846                		swap	d6
(1)  992/  FF07FE : 9C7C 0001           		sub.w	#1,d6
(1)  993/  FF0802 : 4846                		swap	d6
(1)  994/  FF0804 :                     .no_fnsh_o:
(1)  995/  FF0804 : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  996/  FF0808 : 4846                		swap	d6
(1)  997/  FF080A : 4A46                		tst.w	d6
(1)  998/  FF080C : 6604                		bne.s	.no_move_o
(1)  999/  FF080E : 4278 A99E           		clr.w	(RAM_FadeMdReq).w
(1) 1000/  FF0812 :                     .no_move_o:
(1) 1001/  FF0812 : 4E75                		rts
(1) 1002/  FF0814 :                     
(1) 1003/  FF0814 :                     ; ====================================================================
(1) 1004/  FF0814 :                     ; --------------------------------------------------------
(1) 1005/  FF0814 :                     ; Genesis DMA
(1) 1006/  FF0814 :                     ; --------------------------------------------------------
(1) 1007/  FF0814 :                     
(1) 1008/  FF0814 :                     ; --------------------------------------------------------
(1) 1009/  FF0814 :                     ; Video_DmaMkEntry
(1) 1010/  FF0814 :                     ;
(1) 1011/  FF0814 :                     ; Sets a new DMA transfer task to the Blast list
(1) 1012/  FF0814 :                     ;
(1) 1013/  FF0814 :                     ; *** ONLY CALL THIS OUTSIDE OF VBLANK ***
(1) 1014/  FF0814 :                     ;
(1) 1015/  FF0814 :                     ; d0 | LONG - Art data
(1) 1016/  FF0814 :                     ; d1 | WORD - VRAM location
(1) 1017/  FF0814 :                     ; d2 | WORD - Size
(1) 1018/  FF0814 :                     ;
(1) 1019/  FF0814 :                     ; Breaks:
(1) 1020/  FF0814 :                     ; d6-d7,a6
(1) 1021/  FF0814 :                     ; --------------------------------------------------------
(1) 1022/  FF0814 :                     
(1) 1023/  FF0814 :                     Video_DmaMkEntry:
(1) 1024/  FF0814 : 31FC 0001 A99A      		move.w	#1,(RAM_VdpDmaMod).w
(1) 1025/  FF081A : 4DF8 A734           		lea	(RAM_VdpDmaList).w,a6
(1) 1026/  FF081E : 3E38 A998           		move.w	(RAM_VdpDmaIndx).w,d7
(1) 1027/  FF0822 : DCC7                		adda	d7,a6
(1) 1028/  FF0824 : DE7C 000E           		add.w	#7*2,d7
(1) 1029/  FF0828 : 31C7 A998           		move.w	d7,(RAM_VdpDmaIndx).w
(1) 1030/  FF082C : 3E02                		move.w	d2,d7			; Length
(1) 1031/  FF082E : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1032/  FF0834 : E24F                		lsr.w	#1,d7
(1) 1033/  FF0836 : 1C07                		move.b	d7,d6
(1) 1034/  FF0838 : 4846                		swap	d6
(1) 1035/  FF083A : E04F                		lsr.w	#8,d7
(1) 1036/  FF083C : 1C07                		move.b	d7,d6
(1) 1037/  FF083E : 4846                		swap	d6
(1) 1038/  FF0840 : 2CC6                		move.l	d6,(a6)+
(1) 1039/  FF0842 : 2E00                		move.l	d0,d7			; Source
(1) 1040/  FF0844 : E28F                  		lsr.l	#1,d7
(1) 1041/  FF0846 : 2C3C 9600 9500       		move.l	#$96009500,d6
(1) 1042/  FF084C : 1C07                 		move.b	d7,d6
(1) 1043/  FF084E : E08F                 		lsr.l	#8,d7
(1) 1044/  FF0850 : 4846                 		swap	d6
(1) 1045/  FF0852 : 1C07                 		move.b	d7,d6
(1) 1046/  FF0854 : 2CC6                 		move.l	d6,(a6)+
(1) 1047/  FF0856 : 3C3C 9700            		move.w	#$9700,d6
(1) 1048/  FF085A : E08F                 		lsr.l	#8,d7
(1) 1049/  FF085C : 1C07                 		move.b	d7,d6
(1) 1050/  FF085E : 3CC6                 		move.w	d6,(a6)+
(1) 1051/  FF0860 : 3E01                		move.w	d1,d7			; Destination
(1) 1052/  FF0862 :                     ; 		and.w	#$7FF,d7
(1) 1053/  FF0862 :                     ; 		lsl.w	#5,d7
(1) 1054/  FF0862 : 3C07                		move.w	d7,d6
(1) 1055/  FF0864 : CEBC 0000 3FE0      		and.l	#$3FE0,d7
(1) 1056/  FF086A : 0047 4000           		ori.w	#$4000,d7
(1) 1057/  FF086E : E04E                		lsr.w	#8,d6
(1) 1058/  FF0870 : EC4E                		lsr.w	#6,d6
(1) 1059/  FF0872 : 0246 0003           		andi.w	#%11,d6
(1) 1060/  FF0876 : 0046 0080           		ori.w	#$80,d6
(1) 1061/  FF087A : 3CC7                		move.w	d7,(a6)+
(1) 1062/  FF087C : 3CC6                		move.w	d6,(a6)+
(1) 1063/  FF087E : 31FC 0000 A99A      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1064/  FF0884 : 4E75                		rts
(1) 1065/  FF0886 :                     
(1) 1066/  FF0886 :                     ; --------------------------------------------------------
(1) 1067/  FF0886 :                     ; Video_Fill
(1) 1068/  FF0886 :                     ;
(1) 1069/  FF0886 :                     ; Fill data to VRAM
(1) 1070/  FF0886 :                     ;
(1) 1071/  FF0886 :                     ; d0 | WORD - WORD to fill
(1) 1072/  FF0886 :                     ; d1 | WORD - VRAM position
(1) 1073/  FF0886 :                     ; d2 | WORD - Size
(1) 1074/  FF0886 :                     ;
(1) 1075/  FF0886 :                     ; Breaks:
(1) 1076/  FF0886 :                     ; d6-d7,a6
(1) 1077/  FF0886 :                     ; --------------------------------------------------------
(1) 1078/  FF0886 :                     
(1) 1079/  FF0886 :                     Video_Fill:
(1) 1080/  FF0886 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1081/  FF088C : 3E3C 8100           		move.w	#$8100,d7
(1) 1082/  FF0890 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1083/  FF0894 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1084/  FF0898 : 3C87                		move.w	d7,(a6)
(1) 1085/  FF089A : 3E16                .dmaw:		move.w	(a6),d7
(1) 1086/  FF089C : 0807 0001           		btst	#bitDma,d7
(1) 1087/  FF08A0 : 66F8                		bne.s	.dmaw
(1) 1088/  FF08A2 : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1) 1089/  FF08A6 : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1090/  FF08A8 : 9E7C 0001           		sub.w	#1,d7
(1) 1091/  FF08AC : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1092/  FF08B2 : 1C07                		move.b	d7,d6
(1) 1093/  FF08B4 : 4846                		swap	d6
(1) 1094/  FF08B6 : E04F                		lsr.w	#8,d7
(1) 1095/  FF08B8 : 1C07                		move.b	d7,d6
(1) 1096/  FF08BA : 4846                		swap	d6
(1) 1097/  FF08BC : 2C86                		move.l	d6,(a6)
(1) 1098/  FF08BE : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1099/  FF08C2 : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1100/  FF08C4 :                     ; 		lsl.w	#5,d7
(1) 1101/  FF08C4 : 3C07                		move.w	d7,d6
(1) 1102/  FF08C6 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1103/  FF08CA : 0046 4000           		ori.w	#$4000,d6
(1) 1104/  FF08CE : 4846                		swap	d6
(1) 1105/  FF08D0 : 3C07                		move.w	d7,d6
(1) 1106/  FF08D2 : E04E                		lsr.w	#8,d6
(1) 1107/  FF08D4 : EC4E                		lsr.w	#6,d6
(1) 1108/  FF08D6 : 0246 0003           		andi.w	#%11,d6
(1) 1109/  FF08DA : 0046 0080           		ori.w	#$80,d6
(1) 1110/  FF08DE : 2C86                		move.l	d6,(a6)
(1) 1111/  FF08E0 : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1112/  FF08E4 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1113/  FF08E6 : 0807 0001           		btst	#bitDma,d7
(1) 1114/  FF08EA : 66F8                		bne.s	.dmawe
(1) 1115/  FF08EC : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1) 1116/  FF08F0 : 3E3C 8100           		move.w	#$8100,d7
(1) 1117/  FF08F4 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1118/  FF08F8 : 3C87                		move.w	d7,(a6)
(1) 1119/  FF08FA : 4E75                		rts
(1) 1120/  FF08FC :                     
(1) 1121/  FF08FC :                     ; --------------------------------------------------------
(1) 1122/  FF08FC :                     ; Video_Copy
(1) 1123/  FF08FC :                     ;
(1) 1124/  FF08FC :                     ; Copy VRAM data to another location
(1) 1125/  FF08FC :                     ;
(1) 1126/  FF08FC :                     ; d0 | WORD - VRAM Source
(1) 1127/  FF08FC :                     ; d1 | WORD - VRAM Destination
(1) 1128/  FF08FC :                     ; d2 | WORD - Size
(1) 1129/  FF08FC :                     ;
(1) 1130/  FF08FC :                     ; Breaks:
(1) 1131/  FF08FC :                     ; d6-d7,a6
(1) 1132/  FF08FC :                     ; --------------------------------------------------------
(1) 1133/  FF08FC :                     
(1) 1134/  FF08FC :                     ; TODO: test if this works again...
(1) 1135/  FF08FC :                     
(1) 1136/  FF08FC :                     Video_Copy:
(1) 1137/  FF08FC : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1138/  FF0902 : 3E3C 8100           		move.w	#$8100,d7
(1) 1139/  FF0906 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1140/  FF090A : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1141/  FF090E : 3C87                		move.w	d7,(a6)
(1) 1142/  FF0910 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1143/  FF0912 : 0807 0001           		btst	#bitDma,d7
(1) 1144/  FF0916 : 66F8                		bne.s	.dmaw
(1) 1145/  FF0918 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1146/  FF091C : 3E02                		move.w	d2,d7			; SIZE
(1) 1147/  FF091E : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1148/  FF0924 :                     ; 		lsr.w	#1,d7
(1) 1149/  FF0924 : 1C07                		move.b	d7,d6
(1) 1150/  FF0926 : 4846                		swap	d6
(1) 1151/  FF0928 : E04F                		lsr.w	#8,d7
(1) 1152/  FF092A : 1C07                		move.b	d7,d6
(1) 1153/  FF092C : 4846                		swap	d6
(1) 1154/  FF092E : 2C86                		move.l	d6,(a6)
(1) 1155/  FF0930 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1156/  FF0936 : 3E00                		move.w	d0,d7
(1) 1157/  FF0938 : 1C07                		move.b	d7,d6
(1) 1158/  FF093A : 4846                		swap	d6
(1) 1159/  FF093C : E04F                		lsr.w	#8,d7
(1) 1160/  FF093E : 1C07                		move.b	d7,d6
(1) 1161/  FF0940 : 2C86                		move.l	d6,(a6)
(1) 1162/  FF0942 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1163/  FF0946 : 2E02                		move.l	d2,d7			; DESTINATION
(1) 1164/  FF0948 :                     ; 		lsl.w	#5,d7
(1) 1165/  FF0948 : 3C07                		move.w	d7,d6
(1) 1166/  FF094A : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1167/  FF094E : 0046 4000           		ori.w	#$4000,d6
(1) 1168/  FF0952 : 4846                		swap	d6
(1) 1169/  FF0954 : 3C07                		move.w	d7,d6
(1) 1170/  FF0956 : E04E                		lsr.w	#8,d6
(1) 1171/  FF0958 : EC4E                		lsr.w	#6,d6
(1) 1172/  FF095A : 0246 0003           		andi.w	#%11,d6
(1) 1173/  FF095E : 0046 00C0           		ori.w	#$C0,d6
(1) 1174/  FF0962 : 2C86                		move.l	d6,(a6)
(1) 1175/  FF0964 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1176/  FF0968 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1177/  FF096A : 0807 0001           		btst	#bitDma,d7
(1) 1178/  FF096E : 66F8                		bne.s	.dmawe
(1) 1179/  FF0970 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1180/  FF0974 : 3E3C 8100           		move.w	#$8100,d7
(1) 1181/  FF0978 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1182/  FF097C : 3C87                		move.w	d7,(a6)
(1) 1183/  FF097E : 4E75                		rts
(1) 1184/  FF0980 :                     
(1) 1185/  FF0980 :                     ; --------------------------------------------------------
(1) 1186/  FF0980 :                     ; Load graphics using DMA, direct
(1) 1187/  FF0980 :                     ;
(1) 1188/  FF0980 :                     ; d0 | LONG - Art data
(1) 1189/  FF0980 :                     ; d1 | WORD - VRAM location
(1) 1190/  FF0980 :                     ; d2 | WORD - Size
(1) 1191/  FF0980 :                     ;
(1) 1192/  FF0980 :                     ; Breaks:
(1) 1193/  FF0980 :                     ; d5-d7,a4-a6
(1) 1194/  FF0980 :                     ;
(1) 1195/  FF0980 :                     ; *** For faster transfers call this during VBlank ***
(1) 1196/  FF0980 :                     ; *** MAKE SURE SH2 IS NOT IN THE MIDDLE OF READING
(1) 1197/  FF0980 :                     ; ROM ***
(1) 1198/  FF0980 :                     ; --------------------------------------------------------
(1) 1199/  FF0980 :                     
(1) 1200/  FF0980 :                     Video_LoadArt:
(1) 1201/  FF0980 : 40E7                		move.w	sr,-(sp)
(1) 1202/  FF0982 : 007C 0700           		or	#$700,sr
(1) 1203/  FF0986 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1) 1204/  FF098C : 3C3C 8100           		move.w	#$8100,d6		; DMA ON
(1) 1205/  FF0990 : 1C38 A9AF           		move.b	(RAM_VdpRegs+1),d6
(1) 1206/  FF0994 : 08C6 0004           		bset	#bitDmaEnbl,d6
(1) 1207/  FF0998 : 3886                		move.w	d6,(a4)
(1) 1208/  FF099A : 3C02                		move.w	d2,d6			; Length
(1) 1209/  FF099C : 2A3C 9400 9300      		move.l	#$94009300,d5
(1) 1210/  FF09A2 : E24E                		lsr.w	#1,d6
(1) 1211/  FF09A4 : 1A06                		move.b	d6,d5
(1) 1212/  FF09A6 : 4845                		swap	d5
(1) 1213/  FF09A8 : E04E                		lsr.w	#8,d6
(1) 1214/  FF09AA : 1A06                		move.b	d6,d5
(1) 1215/  FF09AC : 4845                		swap	d5
(1) 1216/  FF09AE : 2885                		move.l	d5,(a4)
(1) 1217/  FF09B0 : 2C00                		move.l	d0,d6			; Source
(1) 1218/  FF09B2 : E28E                  		lsr.l	#1,d6
(1) 1219/  FF09B4 : 2A3C 9600 9500       		move.l	#$96009500,d5
(1) 1220/  FF09BA : 1A06                 		move.b	d6,d5
(1) 1221/  FF09BC : E08E                 		lsr.l	#8,d6
(1) 1222/  FF09BE : 4845                 		swap	d5
(1) 1223/  FF09C0 : 1A06                 		move.b	d6,d5
(1) 1224/  FF09C2 : 2885                 		move.l	d5,(a4)
(1) 1225/  FF09C4 : 3A3C 9700            		move.w	#$9700,d5
(1) 1226/  FF09C8 : E08E                 		lsr.l	#8,d6
(1) 1227/  FF09CA : 1A06                 		move.b	d6,d5
(1) 1228/  FF09CC : 3885                 		move.w	d5,(a4)
(1) 1229/  FF09CE : 3C01                		move.w	d1,d6			; Destination
(1) 1230/  FF09D0 : 3A06                		move.w	d6,d5
(1) 1231/  FF09D2 : CCBC 0000 3FE0      		and.l	#$3FE0,d6
(1) 1232/  FF09D8 : 0046 4000           		ori.w	#$4000,d6
(1) 1233/  FF09DC : E04D                		lsr.w	#8,d5
(1) 1234/  FF09DE : EC4D                		lsr.w	#6,d5
(1) 1235/  FF09E0 : 0245 0003           		andi.w	#%11,d5
(1) 1236/  FF09E4 : 0045 0080           		ori.w	#$80,d5
(1) 1237/  FF09E8 : 2E00                		move.l	d0,d7
(1) 1238/  FF09EA : 4847                		swap	d7
(1) 1239/  FF09EC : E04F                		lsr.w	#8,d7
(1) 1240/  FF09EE : BE3C 00FF           		cmp.b	#$FF,d7
(1) 1241/  FF09F2 : 671A                		beq.s	.from_ram
(1) 1242/  FF09F4 : 6100 0D4C           		bsr	System_DmaEnter_ROM
(1) 1243/  FF09F8 : 3F05                 		move.w	d5,-(sp)
(1) 1244/  FF09FA : 3886                		move.w	d6,(a4)				; d6 - First word
(1) 1245/  FF09FC : 389F                		move.w	(sp)+,(a4)			; *** Second write, 68k freezes until DMA ends
(1) 1246/  FF09FE : 3C3C 8100           		move.w	#$8100,d6			; DMA OFF
(1) 1247/  FF0A02 : 1C38 A9AF           		move.b	(RAM_VdpRegs+1),d6
(1) 1248/  FF0A06 : 3886                		move.w	d6,(a4)
(1) 1249/  FF0A08 : 46DF                		move.w	(sp)+,sr
(1) 1250/  FF0A0A : 6000 0D3A           		bra	System_DmaExit_ROM
(1) 1251/  FF0A0E :                     .from_ram:
(1) 1252/  FF0A0E : 3887                		move.w	d7,(a4)
(1) 1253/  FF0A10 : 3F05                 		move.w	d5,-(sp)
(1) 1254/  FF0A12 : 389F                		move.w	(sp)+,(a4)			; Second write
(1) 1255/  FF0A14 : 3E3C 8100           		move.w	#$8100,d7
(1) 1256/  FF0A18 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1257/  FF0A1C : 3887                		move.w	d7,(a4)
(1) 1258/  FF0A1E : 46DF                		move.w	(sp)+,sr
(1) 1259/  FF0A20 : 4E75                		rts
(1) 1260/  FF0A22 :                     
(1) 1261/  FF0A22 :                     ; --------------------------------------------------------
(1) 1262/  FF0A22 :                     ; Video_DmaBlast
(1) 1263/  FF0A22 :                     ;
(1) 1264/  FF0A22 :                     ; Process DMA tasks from a predefined list in RAM
(1) 1265/  FF0A22 :                     ; **CALL THIS DURING VBLANK ONLY**
(1) 1266/  FF0A22 :                     ;
(1) 1267/  FF0A22 :                     ; Breaks:
(1) 1268/  FF0A22 :                     ; d5-d7,a3-a4
(1) 1269/  FF0A22 :                     ; --------------------------------------------------------
(1) 1270/  FF0A22 :                     
(1) 1271/  FF0A22 :                     ; Entry format:
(1) 1272/  FF0A22 :                     ; $94xx,$93xx,$96xx,$95xx,$97xx (SIZE,SOURCE)
(1) 1273/  FF0A22 :                     ; $40000080 (vdp destination + dma bit)
(1) 1274/  FF0A22 :                     
(1) 1275/  FF0A22 :                     Video_DmaBlast:
(1) 1276/  FF0A22 : 4A78 A99A           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1) 1277/  FF0A26 : 6666                		bne.s	.exit
(1) 1278/  FF0A28 : 4A78 A998           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1) 1279/  FF0A2C : 6760                		beq.s	.exit
(1) 1280/  FF0A2E : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1) 1281/  FF0A34 : 47F8 A734           		lea	(RAM_VdpDmaList).w,a3
(1) 1282/  FF0A38 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1283/  FF0A3C : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1284/  FF0A40 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1285/  FF0A44 : 3887                		move.w	d7,(a4)
(1) 1286/  FF0A46 : 6100 0CFA           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1288/  FF0A4A : 08F9 0000 00A1 5107 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1) 1290/  FF0A52 : 4A78 A998           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1291/  FF0A56 : 6720                		beq.s	.end
(1) 1292/  FF0A58 : 2893                		move.l	(a3),(a4)			; Size
(1) 1293/  FF0A5A : 429B                		clr.l	(a3)+
(1) 1294/  FF0A5C : 2893                		move.l	(a3),(a4)			; Source
(1) 1295/  FF0A5E : 429B                		clr.l	(a3)+
(1) 1296/  FF0A60 : 3893                		move.w	(a3),(a4)
(1) 1297/  FF0A62 : 425B                		clr.w	(a3)+
(1) 1298/  FF0A64 : 3C13                		move.w	(a3),d6				; Destination
(1) 1299/  FF0A66 : 425B                		clr.w	(a3)+
(1) 1300/  FF0A68 : 3A13                		move.w	(a3),d5
(1) 1301/  FF0A6A : 425B                		clr.w	(a3)+
(1) 1302/  FF0A6C : 3886                		move.w	d6,(a4)
(1) 1303/  FF0A6E : 3885                		move.w	d5,(a4)
(1) 1304/  FF0A70 : 0478 000E A998      		sub.w	#7*2,(RAM_VdpDmaIndx).w
(1) 1305/  FF0A76 : 60DA                		bra.s	.next
(1) 1306/  FF0A78 :                     .end:
(1) 1308/  FF0A78 : 08B9 0000 00A1 5107 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1) 1310/  FF0A80 : 6100 0CC4           		bsr	System_DmaExit_ROM		; Resume Z80 and SH2 direct
(1) 1311/  FF0A84 : 3E3C 8100           		move.w	#$8100,d7			; DMA OFF
(1) 1312/  FF0A88 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1313/  FF0A8C : 3887                		move.w	d7,(a4)
(1) 1314/  FF0A8E :                     .exit:
(1) 1315/  FF0A8E : 4E75                		rts
(1) 1316/  FF0A90 :                     
(1) 1317/  FF0A90 :                     ; ====================================================================
(1) 1318/  FF0A90 :                     ; ----------------------------------------------------------------
(1) 1319/  FF0A90 :                     ; Video routines for 32X
(1) 1320/  FF0A90 :                     ; ----------------------------------------------------------------
(1) 1321/  FF0A90 :                     
(1) 1322/  FF0A90 :                     ; --------------------------------------------------------
(1) 1323/  FF0A90 :                     ; Video_Mars_GfxMode
(1) 1324/  FF0A90 :                     ; Sets graphics mode on the 32X side
(1) 1325/  FF0A90 :                     ;
(1) 1326/  FF0A90 :                     ; Input:
(1) 1327/  FF0A90 :                     ; d0 - Graphics mode
(1) 1328/  FF0A90 :                     ; --------------------------------------------------------
(1) 1329/  FF0A90 :                     
(1) 1330/  FF0A90 :                     Video_Mars_GfxMode:
(1) 1332/  FF0A90 : 3E00                		move.w	d0,d7
(1) 1333/  FF0A92 : CE7C 0007           		and.w	#%00000111,d7			; Current limit: 8 Master modes
(1) 1334/  FF0A96 : 8E7C 00C0           		or.w	#$C0,d7
(1) 1335/  FF0A9A : 13C7 00A1 512D      		move.b	d7,(sysmars_reg+comm12+1).l
(1) 1336/  FF0AA0 : 6100 0CA8           		bsr	System_MarsUpdate
(1) 1337/  FF0AA4 : 3E39 00A1 512E      .wait_slv:	move.w	(sysmars_reg+comm14).l,d7	; Wait for Slave
(1) 1338/  FF0AAA : CE7C 000F           		and.w	#%00001111,d7
(1) 1339/  FF0AAE : 66F4                		bne.s	.wait_slv
(1) 1340/  FF0AB0 : 3E39 00A1 512C      .wait:		move.w	(sysmars_reg+comm12).l,d7	; Wait for Master
(1) 1341/  FF0AB6 : CE7C 00C0           		and.w	#%11000000,d7
(1) 1342/  FF0ABA : 66F4                		bne.s	.wait
(1) 1344/  FF0ABC : 4E75                		rts
(1) 1345/  FF0ABE :                     
(1) 1346/  FF0ABE :                     ; --------------------------------------------------------
(1) 1347/  FF0ABE :                     ; Video_Mars_WaitFrame
(1) 1348/  FF0ABE :                     ; --------------------------------------------------------
(1) 1349/  FF0ABE :                     
(1) 1350/  FF0ABE :                     Video_Mars_WaitFrame:
(1) 1352/  FF0ABE : 08F9 0005 00A1 512D 		bset	#5,(sysmars_reg+comm12+1).l	; Set R bit
(1) 1353/  FF0AC6 :                     .wait:
(1) 1354/  FF0AC6 :                     ; 		move.w	(vdp_ctrl),d7
(1) 1355/  FF0AC6 :                     ; 		btst	#bitVBlk,d7
(1) 1356/  FF0AC6 :                     ; 		bne.s	.late
(1) 1357/  FF0AC6 : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7
(1) 1358/  FF0ACC : 0807 0005           		btst	#5,d7
(1) 1359/  FF0AD0 : 66F4                		bne.s	.wait
(1) 1360/  FF0AD2 :                     .late:
(1) 1362/  FF0AD2 : 4E75                		rts
(1) 1363/  FF0AD4 :                     
(1) 1364/  FF0AD4 :                     ; --------------------------------------------------------
(1) 1365/  FF0AD4 :                     ; Video_LoadPal_Mars
(1) 1366/  FF0AD4 :                     ;
(1) 1367/  FF0AD4 :                     ; Load Indexed palette directly to Buffer
(1) 1368/  FF0AD4 :                     ;
(1) 1369/  FF0AD4 :                     ; d0 - Start at
(1) 1370/  FF0AD4 :                     ; d1 - Number of colors
(1) 1371/  FF0AD4 :                     ; d2 - Priority bit OFF/ON
(1) 1372/  FF0AD4 :                     ; --------------------------------------------------------
(1) 1373/  FF0AD4 :                     
(1) 1374/  FF0AD4 :                     Video_FadePal_Mars:
(1) 1375/  FF0AD4 : 4DF8 A534           		lea	(RAM_MdMarsPalFd),a6
(1) 1376/  FF0AD8 : 4278 A9AC           		clr.w	(RAM_FadeMarsTmr).w
(1) 1377/  FF0ADC : 6004                		bra.s	vidMars_Pal
(1) 1378/  FF0ADE :                     Video_LoadPal_Mars:
(1) 1379/  FF0ADE : 4DF8 AE22           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1) 1380/  FF0AE2 :                     vidMars_Pal:
(1) 1381/  FF0AE2 : 2A48                		move.l	a0,a5
(1) 1382/  FF0AE4 : 7E00                		moveq	#0,d7
(1) 1383/  FF0AE6 : 3E00                		move.w	d0,d7
(1) 1384/  FF0AE8 : DE47                		add.w	d7,d7
(1) 1385/  FF0AEA : DCC7                		adda	d7,a6
(1) 1386/  FF0AEC : 3E01                		move.w	d1,d7
(1) 1387/  FF0AEE : 9E7C 0001           		sub.w	#1,d7
(1) 1388/  FF0AF2 : 3C02                		move.w	d2,d6
(1) 1389/  FF0AF4 : CC7C 0001           		and.w	#1,d6
(1) 1390/  FF0AF8 : E25E                		ror.w	#1,d6
(1) 1391/  FF0AFA :                     .loop:
(1) 1392/  FF0AFA : 3A1D                		move.w	(a5)+,d5
(1) 1393/  FF0AFC : 8A46                		or.w	d6,d5
(1) 1394/  FF0AFE : 3CC5                		move.w	d5,(a6)+
(1) 1395/  FF0B00 : 51CF FFF8           		dbf	d7,.loop
(1) 1396/  FF0B04 : 4E75                		rts
(1) 1397/  FF0B06 :                     
(1) 1398/  FF0B06 :                     ; --------------------------------------------------------
(1) 1399/  FF0B06 :                     ; Video_MarsPalFade
(1) 1400/  FF0B06 :                     ;
(1) 1401/  FF0B06 :                     ; a0 - Palette data
(1) 1402/  FF0B06 :                     ; d0 - Number of colors
(1) 1403/  FF0B06 :                     ; d1 - Speed
(1) 1404/  FF0B06 :                     ;
(1) 1405/  FF0B06 :                     ; RAM_ReqFadeMars: (WORD)
(1) 1406/  FF0B06 :                     ; $00 - No task (or finished)
(1) 1407/  FF0B06 :                     ; $01 - Fade in
(1) 1408/  FF0B06 :                     ; $02 - Fade out to black
(1) 1409/  FF0B06 :                     ;
(1) 1410/  FF0B06 :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 1411/  FF0B06 :                     ; --------------------------------------------------------
(1) 1412/  FF0B06 :                     
(1) 1413/  FF0B06 :                     ; TODO: luego ver que hago con el priority bit
(1) 1414/  FF0B06 :                     
(1) 1415/  FF0B06 :                     Video_MarsPalFade:
(1) 1416/  FF0B06 : 0478 0001 A9AC      		sub.w	#1,(RAM_FadeMarsTmr).w
(1) 1417/  FF0B0C : 6A14                		bpl.s	.active
(1) 1418/  FF0B0E : 31F8 A9AA A9AC      		move.w	(RAM_FadeMarsDelay).w,(RAM_FadeMarsTmr).w
(1) 1419/  FF0B14 : 3E38 A9A6           		move.w	(RAM_FadeMarsReq).w,d7
(1) 1420/  FF0B18 : DE47                		add.w	d7,d7
(1) 1421/  FF0B1A : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1) 1422/  FF0B1E : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1) 1423/  FF0B22 :                     .active:
(1) 1424/  FF0B22 : 4E75                		rts
(1) 1425/  FF0B24 :                     
(1) 1426/  FF0B24 :                     ; --------------------------------------------
(1) 1427/  FF0B24 :                     
(1) 1428/  FF0B24 :                     .fade_list:
(1) 1429/  FF0B24 : 0006                		dc.w .fade_done-.fade_list
(1) 1430/  FF0B26 : 0008                		dc.w .fade_in-.fade_list
(1) 1431/  FF0B28 : 00B2                		dc.w .fade_out-.fade_list
(1) 1432/  FF0B2A :                     
(1) 1433/  FF0B2A :                     ; --------------------------------------------
(1) 1434/  FF0B2A :                     ; No fade or finished.
(1) 1435/  FF0B2A :                     ; --------------------------------------------
(1) 1436/  FF0B2A :                     
(1) 1437/  FF0B2A :                     .fade_done:
(1) 1438/  FF0B2A : 4E75                		rts
(1) 1439/  FF0B2C :                     
(1) 1440/  FF0B2C :                     ; --------------------------------------------
(1) 1441/  FF0B2C :                     ; Fade in
(1) 1442/  FF0B2C :                     ; --------------------------------------------
(1) 1443/  FF0B2C :                     
(1) 1444/  FF0B2C :                     .fade_in:
(1) 1445/  FF0B2C : 4DF8 A534           		lea	(RAM_MdMarsPalFd),a6
(1) 1446/  FF0B30 : 4BF8 AE22           		lea	(RAM_MdDreq+Dreq_Palette).w,a5
(1) 1447/  FF0B34 : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1448/  FF0B38 : 3238 A9A8           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 1449/  FF0B3C : 3C00                		move.w	d0,d6
(1) 1450/  FF0B3E : 4846                		swap	d6
(1) 1451/  FF0B40 : 907C 0001           		sub.w	#1,d0
(1) 1452/  FF0B44 :                     .nxt_pal:
(1) 1453/  FF0B44 : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1454/  FF0B46 : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1455/  FF0B48 : 3C15                		move.w	(a5),d6		; d6 - Output
(1) 1456/  FF0B4A : 3607                		move.w	d7,d3		; RED
(1) 1457/  FF0B4C : 3806                		move.w	d6,d4
(1) 1458/  FF0B4E : CC7C FFE0           		and.w	#%1111111111100000,d6
(1) 1459/  FF0B52 : C87C 001F           		and.w	#%0000000000011111,d4
(1) 1460/  FF0B56 : C67C 001F           		and.w	#%0000000000011111,d3
(1) 1461/  FF0B5A : D841                		add.w	d1,d4
(1) 1462/  FF0B5C : B843                		cmp.w	d3,d4
(1) 1463/  FF0B5E : 6506                		bcs.s	.no_red
(1) 1464/  FF0B60 : 3803                		move.w	d3,d4
(1) 1465/  FF0B62 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 1466/  FF0B66 :                     .no_red:
(1) 1467/  FF0B66 : 8C44                		or.w	d4,d6
(1) 1468/  FF0B68 : EB49                		lsl.w	#5,d1
(1) 1469/  FF0B6A : 3607                		move.w	d7,d3		; GREEN
(1) 1470/  FF0B6C : 3806                		move.w	d6,d4
(1) 1471/  FF0B6E : CC7C FC1F           		and.w	#%1111110000011111,d6
(1) 1472/  FF0B72 : C87C 03E0           		and.w	#%0000001111100000,d4
(1) 1473/  FF0B76 : C67C 03E0           		and.w	#%0000001111100000,d3
(1) 1474/  FF0B7A : D841                		add.w	d1,d4
(1) 1475/  FF0B7C : B843                		cmp.w	d3,d4
(1) 1476/  FF0B7E : 6506                		bcs.s	.no_grn
(1) 1477/  FF0B80 : 3803                		move.w	d3,d4
(1) 1478/  FF0B82 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 1479/  FF0B86 :                     .no_grn:
(1) 1480/  FF0B86 : 8C44                		or.w	d4,d6
(1) 1481/  FF0B88 : EB49                		lsl.w	#5,d1
(1) 1482/  FF0B8A : 3607                		move.w	d7,d3		; BLUE
(1) 1483/  FF0B8C : 3806                		move.w	d6,d4
(1) 1484/  FF0B8E : CC7C 83FF           		and.w	#%1000001111111111,d6
(1) 1485/  FF0B92 : C87C 7C00           		and.w	#%0111110000000000,d4
(1) 1486/  FF0B96 : C67C 7C00           		and.w	#%0111110000000000,d3
(1) 1487/  FF0B9A : D841                		add.w	d1,d4
(1) 1488/  FF0B9C : B843                		cmp.w	d3,d4
(1) 1489/  FF0B9E : 6506                		bcs.s	.no_blu
(1) 1490/  FF0BA0 : 3803                		move.w	d3,d4
(1) 1491/  FF0BA2 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 1492/  FF0BA6 :                     .no_blu:
(1) 1493/  FF0BA6 : 8C44                		or.w	d4,d6
(1) 1494/  FF0BA8 : E049                		lsr.w	#8,d1
(1) 1495/  FF0BAA : E449                		lsr.w	#2,d1
(1) 1496/  FF0BAC : CE7C 8000           		and.w	#$8000,d7	; Keep priority bit
(1) 1497/  FF0BB0 : 8C47                		or.w	d7,d6
(1) 1498/  FF0BB2 : 3AC6                		move.w	d6,(a5)+
(1) 1499/  FF0BB4 : DCFC 0002           		adda	#2,a6
(1) 1500/  FF0BB8 : B47C 0007           		cmp.w	#%111,d2
(1) 1501/  FF0BBC : 6608                		bne.s	.no_fnsh
(1) 1502/  FF0BBE : 4846                		swap	d6
(1) 1503/  FF0BC0 : 9C7C 0001           		sub.w	#1,d6
(1) 1504/  FF0BC4 : 4846                		swap	d6
(1) 1505/  FF0BC6 :                     .no_fnsh:
(1) 1506/  FF0BC6 : 51C8 FF7C           		dbf	d0,.nxt_pal
(1) 1507/  FF0BCA : 4846                		swap	d6
(1) 1508/  FF0BCC : 4A46                		tst.w	d6
(1) 1509/  FF0BCE : 6604                		bne.s	.no_move
(1) 1510/  FF0BD0 : 4278 A9A6           		clr.w	(RAM_FadeMarsReq).w
(1) 1511/  FF0BD4 :                     .no_move:
(1) 1512/  FF0BD4 : 4E75                		rts
(1) 1513/  FF0BD6 :                     
(1) 1514/  FF0BD6 :                     ; --------------------------------------------
(1) 1515/  FF0BD6 :                     ; Fade out
(1) 1516/  FF0BD6 :                     ; --------------------------------------------
(1) 1517/  FF0BD6 :                     
(1) 1518/  FF0BD6 :                     .fade_out:
(1) 1519/  FF0BD6 : 4DF8 AE22           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1) 1520/  FF0BDA : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1521/  FF0BDE : 3238 A9A8           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 1522/  FF0BE2 : 3C00                		move.w	d0,d6
(1) 1523/  FF0BE4 : 4846                		swap	d6
(1) 1524/  FF0BE6 : 907C 0001           		sub.w	#1,d0
(1) 1525/  FF0BEA :                     .nxt_pal_o:
(1) 1526/  FF0BEA : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1527/  FF0BEC : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1528/  FF0BEE : 3C07                		move.w	d7,d6
(1) 1529/  FF0BF0 : CE7C FFE0           		and.w	#%1111111111100000,d7
(1) 1530/  FF0BF4 : CC7C 001F           		and.w	#%0000000000011111,d6
(1) 1531/  FF0BF8 : 9C41                		sub.w	d1,d6
(1) 1532/  FF0BFA : 6A06                		bpl.s	.no_red_o
(1) 1533/  FF0BFC : 4246                		clr.w	d6
(1) 1534/  FF0BFE : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 1535/  FF0C02 :                     .no_red_o:
(1) 1536/  FF0C02 : 8E46                		or.w	d6,d7
(1) 1537/  FF0C04 : EB49                		lsl.w	#5,d1
(1) 1538/  FF0C06 : 3C07                		move.w	d7,d6
(1) 1539/  FF0C08 : CE7C FC1F           		and.w	#%1111110000011111,d7
(1) 1540/  FF0C0C : CC7C 03E0           		and.w	#%0000001111100000,d6
(1) 1541/  FF0C10 : 9C41                		sub.w	d1,d6
(1) 1542/  FF0C12 : 6A06                		bpl.s	.no_grn_o
(1) 1543/  FF0C14 : 4246                		clr.w	d6
(1) 1544/  FF0C16 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 1545/  FF0C1A :                     .no_grn_o:
(1) 1546/  FF0C1A : 8E46                		or.w	d6,d7
(1) 1547/  FF0C1C : EB49                		lsl.w	#5,d1
(1) 1548/  FF0C1E : 3C07                		move.w	d7,d6
(1) 1549/  FF0C20 : CE7C 83FF           		and.w	#%1000001111111111,d7
(1) 1550/  FF0C24 : CC7C 7C00           		and.w	#%0111110000000000,d6
(1) 1551/  FF0C28 : 9C41                		sub.w	d1,d6
(1) 1552/  FF0C2A : 6A06                		bpl.s	.no_blu_o
(1) 1553/  FF0C2C : 4246                		clr.w	d6
(1) 1554/  FF0C2E : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 1555/  FF0C32 :                     .no_blu_o:
(1) 1556/  FF0C32 : 8E46                		or.w	d6,d7
(1) 1557/  FF0C34 : E049                		lsr.w	#8,d1
(1) 1558/  FF0C36 : E449                		lsr.w	#2,d1
(1) 1559/  FF0C38 : 3CC7                		move.w	d7,(a6)+
(1) 1560/  FF0C3A : B47C 0007           		cmp.w	#%111,d2
(1) 1561/  FF0C3E : 6608                		bne.s	.no_fnsh_o
(1) 1562/  FF0C40 : 4846                		swap	d6
(1) 1563/  FF0C42 : 9C7C 0001           		sub.w	#1,d6
(1) 1564/  FF0C46 : 4846                		swap	d6
(1) 1565/  FF0C48 :                     .no_fnsh_o:
(1) 1566/  FF0C48 : 51C8 FFA0           		dbf	d0,.nxt_pal_o
(1) 1567/  FF0C4C : 4846                		swap	d6
(1) 1568/  FF0C4E : 4A46                		tst.w	d6
(1) 1569/  FF0C50 : 6604                		bne.s	.no_move_o
(1) 1570/  FF0C52 : 4278 A9A6           		clr.w	(RAM_FadeMarsReq).w
(1) 1571/  FF0C56 :                     .no_move_o:
(1) 1572/  FF0C56 : 4E75                		rts
(1) 1573/  FF0C58 :                     
(1) 1574/  FF0C58 :                     ; ====================================================================
(1) 1575/  FF0C58 :                     ; ----------------------------------------------------------------
(1) 1576/  FF0C58 :                     ; MAP layout system
(1) 1577/  FF0C58 :                     ;
(1) 1578/  FF0C58 :                     ; Note: uses some RAM'd video registeds.
(1) 1579/  FF0C58 :                     ; ----------------------------------------------------------------
(1) 1580/  FF0C58 :                     
(1) 1581/  FF0C58 :                     ; --------------------------------------------------------
(1) 1582/  FF0C58 :                     ; MdMap_Init
(1) 1583/  FF0C58 :                     ;
(1) 1584/  FF0C58 :                     ; Initializes all BG buffers
(1) 1585/  FF0C58 :                     ; --------------------------------------------------------
(1) 1586/  FF0C58 :                     
(1) 1587/  FF0C58 :                     MdMap_Init:
(1) 1588/  FF0C58 : 41F8 9660           		lea	(RAM_BgBuffer),a0
(1) 1589/  FF0C5C : 323C 0037           		move.w	#((sizeof_mdbg*4)/4)-1,d1
(1) 1590/  FF0C60 : 7000                		moveq	#0,d0
(1) 1591/  FF0C62 :                     .clr:
(1) 1592/  FF0C62 : 20C0                		move.l	d0,(a0)+
(1) 1593/  FF0C64 : 51C9 FFFC           		dbf	d1,.clr
(1) 1594/  FF0C68 : 4E75                		rts
(1) 1595/  FF0C6A :                     
(1) 1596/  FF0C6A :                     ; --------------------------------------------------------
(1) 1597/  FF0C6A :                     ; MdMap_Set
(1) 1598/  FF0C6A :                     ;
(1) 1599/  FF0C6A :                     ; Sets a new scrolling section to use.
(1) 1600/  FF0C6A :                     ;
(1) 1601/  FF0C6A :                     ; **SET YOUR X and Y COORDS EXTERNALLY
(1) 1602/  FF0C6A :                     ; BEFORE GETTING HERE**
(1) 1603/  FF0C6A :                     ;
(1) 1604/  FF0C6A :                     ; Input:
(1) 1605/  FF0C6A :                     ; ** Genesis side **
(1) 1606/  FF0C6A :                     ; d0 | WORD - BG internal slot (-1: 32X only)
(1) 1607/  FF0C6A :                     ; d1 | WORD - VRAM location for map data
(1) 1608/  FF0C6A :                     ; d2 | WORD - VRAM add + palette
(1) 1609/  FF0C6A :                     ; a0 - Level header data:
(1) 1610/  FF0C6A :                     ; 	dc.w width,height
(1) 1611/  FF0C6A :                     ; 	dc.b blkwidth,blkheight
(1) 1612/  FF0C6A :                     ; a1 - Block data
(1) 1613/  FF0C6A :                     ; a2 - LOW priority layout data
(1) 1614/  FF0C6A :                     ; a3 - HIGH priority layout data
(1) 1615/  FF0C6A :                     ; d4 - Collision data
(1) 1616/  FF0C6A :                     ;
(1) 1617/  FF0C6A :                     ; Then load the graphics externally at the same
(1) 1618/  FF0C6A :                     ; VRAM location set in d2
(1) 1619/  FF0C6A :                     ;
(1) 1620/  FF0C6A :                     ; ** 32X side **
(1) 1621/  FF0C6A :                     ; d0 | WORD - Write as -1
(1) 1622/  FF0C6A :                     ; d1 | WORD - Scroll buffer to use on the 32X side (0 - default)
(1) 1623/  FF0C6A :                     ; d2 | WORD - Index-palette increment
(1) 1624/  FF0C6A :                     ; a0 - Level header data: (68K AREA)
(1) 1625/  FF0C6A :                     ; 	dc.w width,height
(1) 1626/  FF0C6A :                     ; 	dc.b blkwidth,blkheight
(1) 1627/  FF0C6A :                     ; a1 - Graphics data stored as blocks (SH2 AREA)
(1) 1628/  FF0C6A :                     ; a2 - MAIN layout (SH2 AREA)
(1) 1629/  FF0C6A :                     ; a3 - *** UNUSED, set to 0
(1) 1630/  FF0C6A :                     ; a4 - Collision data (68K AREA)
(1) 1631/  FF0C6A :                     ;
(1) 1632/  FF0C6A :                     ; Uses:
(1) 1633/  FF0C6A :                     ; d0,d6-d7
(1) 1634/  FF0C6A :                     ; --------------------------------------------------------
(1) 1635/  FF0C6A :                     
(1) 1636/  FF0C6A :                     MdMap_Set:
(1) 1637/  FF0C6A : 4A40                		tst.w	d0
(1) 1638/  FF0C6C : 6A0C                		bpl.s	.md_side
(1) 1639/  FF0C6E : 4DF8 B022           		lea	(RAM_BgBufferM),a6
(1) 1640/  FF0C72 : 08EE 0006 0003      		bset	#bitMarsBg,md_bg_flags(a6)
(1) 1641/  FF0C78 : 6010                		bra.s	.mars_side
(1) 1642/  FF0C7A :                     .md_side:
(1) 1643/  FF0C7A : 4DF8 9660           		lea	(RAM_BgBuffer),a6
(1) 1644/  FF0C7E : C0FC 0038           		mulu.w	#sizeof_mdbg,d0
(1) 1645/  FF0C82 : DCC0                		adda	d0,a6
(1) 1646/  FF0C84 : 08AE 0006 0003      		bclr	#bitMarsBg,md_bg_flags(a6)
(1) 1647/  FF0C8A :                     .mars_side:
(1) 1648/  FF0C8A : 3D41 001C           		move.w	d1,md_bg_vpos(a6)
(1) 1649/  FF0C8E : 3D42 001E           		move.w	d2,md_bg_vram(a6)
(1) 1650/  FF0C92 :                     
(1) 1651/  FF0C92 : 7E00                		moveq	#0,d7
(1) 1652/  FF0C94 : 3E2E 0030           		move.w	md_bg_x(a6),d7
(1) 1653/  FF0C98 : 1D47 0004           		move.b	d7,md_bg_xset(a6)
(1) 1654/  FF0C9C : 3D47 0018           		move.w	d7,md_bg_x_old(a6)
(1) 1655/  FF0CA0 : 4847                		swap	d7
(1) 1656/  FF0CA2 : 2D47 0030           		move.l	d7,md_bg_x(a6)
(1) 1657/  FF0CA6 : 7E00                		moveq	#0,d7
(1) 1658/  FF0CA8 : 3E2E 0034           		move.w	md_bg_y(a6),d7
(1) 1659/  FF0CAC : 1D47 0005           		move.b	d7,md_bg_yset(a6)
(1) 1660/  FF0CB0 : 3D47 001A           		move.w	d7,md_bg_y_old(a6)
(1) 1661/  FF0CB4 : 4847                		swap	d7
(1) 1662/  FF0CB6 : 2D47 0034           		move.l	d7,md_bg_y(a6)
(1) 1663/  FF0CBA : C67C 000F           		and.w	#$F,d3
(1) 1664/  FF0CBE : C87C 000F           		and.w	#$F,d4
(1) 1665/  FF0CC2 :                     
(1) 1666/  FF0CC2 : 4843                		swap	d3
(1) 1667/  FF0CC4 : 4844                		swap	d4
(1) 1668/  FF0CC6 : 2D49 0028           		move.l	a1,md_bg_blk(a6)
(1) 1669/  FF0CCA : 2D4A 0020           		move.l	a2,md_bg_low(a6)
(1) 1670/  FF0CCE : 2D4B 0024           		move.l	a3,md_bg_hi(a6)
(1) 1671/  FF0CD2 : 2D4C 002C           		move.l	a4,md_bg_col(a6)
(1) 1672/  FF0CD6 : 2A48                		move.l	a0,a5
(1) 1673/  FF0CD8 : 3E1D                		move.w	(a5)+,d7	; Layout Width (blocks)
(1) 1674/  FF0CDA : 3C1D                		move.w	(a5)+,d6	; Layout Height (blocks)
(1) 1675/  FF0CDC : 181D                		move.b	(a5)+,d4	; BLOCK width
(1) 1676/  FF0CDE : 161D                		move.b	(a5)+,d3	; BLOCK height
(1) 1677/  FF0CE0 : C87C 00FF           		and.w	#$FF,d4
(1) 1678/  FF0CE4 : C67C 00FF           		and.w	#$FF,d3
(1) 1679/  FF0CE8 : 3D47 0008           		move.w	d7,md_bg_w(a6)
(1) 1680/  FF0CEC : 3D46 000A           		move.w	d6,md_bg_h(a6)
(1) 1681/  FF0CF0 : 1C84                		move.b	d4,md_bg_bw(a6)
(1) 1682/  FF0CF2 : 1D43 0001           		move.b	d3,md_bg_bh(a6)
(1) 1683/  FF0CF6 : CEC4                		mulu.w	d4,d7
(1) 1684/  FF0CF8 : CCC3                		mulu.w	d3,d6
(1) 1685/  FF0CFA : 3D47 000C           		move.w	d7,md_bg_wf(a6)
(1) 1686/  FF0CFE : 3D46 000E           		move.w	d6,md_bg_hf(a6)
(1) 1687/  FF0D02 : 987C 0001           		sub.w	#1,d4
(1) 1688/  FF0D06 : 967C 0001           		sub.w	#1,d3
(1) 1689/  FF0D0A : C92E 0004           		and.b	d4,md_bg_xset(a6)
(1) 1690/  FF0D0E : C72E 0005           		and.b	d3,md_bg_yset(a6)
(1) 1691/  FF0D12 : 4843                		swap	d3
(1) 1692/  FF0D14 : 4844                		swap	d4
(1) 1693/  FF0D16 :                     
(1) 1694/  FF0D16 :                     	; TODO: improve this...
(1) 1695/  FF0D16 : 362E 0030           		move.w	md_bg_x(a6),d3
(1) 1696/  FF0D1A : 382E 0034           		move.w	md_bg_y(a6),d4
(1) 1697/  FF0D1E :                     	; X beams
(1) 1698/  FF0D1E : B647                .xl_l:		cmp.w	d7,d3
(1) 1699/  FF0D20 : 6D04                		blt.s	.xl_g
(1) 1700/  FF0D22 : 9647                		sub.w	d7,d3
(1) 1701/  FF0D24 : 60F8                		bra.s	.xl_l
(1) 1702/  FF0D26 :                     .xl_g:
(1) 1703/  FF0D26 : 3D43 0010           		move.w	d3,md_bg_xinc_l(a6)
(1) 1704/  FF0D2A : D67C 0140           		add.w	#320,d3				; <-- X resolution R
(1) 1705/  FF0D2E : B647                .xr_l:		cmp.w	d7,d3
(1) 1706/  FF0D30 : 6D04                		blt.s	.xr_g
(1) 1707/  FF0D32 : 9647                		sub.w	d7,d3
(1) 1708/  FF0D34 : 60F8                		bra.s	.xr_l
(1) 1709/  FF0D36 :                     .xr_g:
(1) 1710/  FF0D36 : 3D43 0012           		move.w	d3,md_bg_xinc_r(a6)
(1) 1711/  FF0D3A :                     
(1) 1712/  FF0D3A :                     	; Y beams
(1) 1713/  FF0D3A : B846                .yt_l:		cmp.w	d6,d4
(1) 1714/  FF0D3C : 6D04                		blt.s	.yt_g
(1) 1715/  FF0D3E : 9846                		sub.w	d6,d4
(1) 1716/  FF0D40 : 60F8                		bra.s	.yt_l
(1) 1717/  FF0D42 :                     .yt_g:
(1) 1718/  FF0D42 : 3D44 0014           		move.w	d4,md_bg_yinc_u(a6)
(1) 1719/  FF0D46 : D87C 00E0           		add.w	#224,d4				; <-- Y resolution B
(1) 1720/  FF0D4A : B846                .yb_l:		cmp.w	d6,d4
(1) 1721/  FF0D4C : 6D04                		blt.s	.yb_g
(1) 1722/  FF0D4E : 9846                		sub.w	d6,d4
(1) 1723/  FF0D50 : 60F8                		bra.s	.yb_l
(1) 1724/  FF0D52 :                     .yb_g:
(1) 1725/  FF0D52 : 3D44 0016           		move.w	d4,md_bg_yinc_d(a6)
(1) 1726/  FF0D56 :                     
(1) 1727/  FF0D56 : 08EE 0007 0003      		bset	#bitBgOn,md_bg_flags(a6)	; Enable this BG
(1) 1728/  FF0D5C : 4E75                		rts
(1) 1729/  FF0D5E :                     
(1) 1730/  FF0D5E :                     ; --------------------------------------------------------
(1) 1731/  FF0D5E :                     ; MdMap_Move
(1) 1732/  FF0D5E :                     ;
(1) 1733/  FF0D5E :                     ; Moves the current background/foreground
(1) 1734/  FF0D5E :                     ; and checks for overflow.
(1) 1735/  FF0D5E :                     ;
(1) 1736/  FF0D5E :                     ; Input:
(1) 1737/  FF0D5E :                     ; d0 | WORD - Background slot, if -1 32X's
(1) 1738/  FF0D5E :                     ; d1 | WORD - Current X position
(1) 1739/  FF0D5E :                     ; d2 | WORD - Current Y position
(1) 1740/  FF0D5E :                     ; a0 - Background to move and check.
(1) 1741/  FF0D5E :                     ;
(1) 1742/  FF0D5E :                     ; Uses:
(1) 1743/  FF0D5E :                     ; d6-d7
(1) 1744/  FF0D5E :                     ; --------------------------------------------------------
(1) 1745/  FF0D5E :                     
(1) 1746/  FF0D5E :                     MdMap_Move:
(1) 1747/  FF0D5E : 4DF8 B022           		lea	(RAM_BgBufferM),a6
(1) 1748/  FF0D62 : 4A40                		tst.w	d0
(1) 1749/  FF0D64 : 6B0A                		bmi.s	.mars_side
(1) 1750/  FF0D66 : 4DF8 9660           		lea	(RAM_BgBuffer),a6
(1) 1751/  FF0D6A : C0FC 0038           		mulu.w	#sizeof_mdbg,d0
(1) 1752/  FF0D6E : DCC0                		adda	d0,a6
(1) 1753/  FF0D70 :                     .mars_side:
(1) 1754/  FF0D70 :                     ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1755/  FF0D70 :                     ; 		beq	.not_enabld
(1) 1756/  FF0D70 : 302E 000C           		move.w	md_bg_wf(a6),d0
(1) 1757/  FF0D74 : 4A41                		tst.w	d1
(1) 1758/  FF0D76 : 6A02                		bpl.s	.x_left
(1) 1759/  FF0D78 : 4241                		clr.w	d1
(1) 1760/  FF0D7A :                     .x_left:
(1) 1761/  FF0D7A : 907C 0140           		sub.w	#320,d0
(1) 1762/  FF0D7E : B240                		cmp.w	d0,d1
(1) 1763/  FF0D80 : 6502                		bcs.s	.x_right
(1) 1764/  FF0D82 : 3200                		move.w	d0,d1
(1) 1765/  FF0D84 :                     .x_right:
(1) 1766/  FF0D84 : 302E 000E           		move.w	md_bg_hf(a6),d0
(1) 1767/  FF0D88 : 4A42                		tst.w	d2
(1) 1768/  FF0D8A : 6A02                		bpl.s	.y_left
(1) 1769/  FF0D8C : 4242                		clr.w	d2
(1) 1770/  FF0D8E :                     .y_left:
(1) 1771/  FF0D8E : 907C 00E0           		sub.w	#224,d0
(1) 1772/  FF0D92 : B440                		cmp.w	d0,d2
(1) 1773/  FF0D94 : 6502                		bcs.s	.y_right
(1) 1774/  FF0D96 : 3400                		move.w	d0,d2
(1) 1775/  FF0D98 :                     .y_right:
(1) 1776/  FF0D98 : 3D41 0030           		move.w	d1,md_bg_x(a6)
(1) 1777/  FF0D9C : 3D42 0034           		move.w	d2,md_bg_y(a6)
(1) 1778/  FF0DA0 :                     .not_enabld:
(1) 1779/  FF0DA0 : 4E75                		rts
(1) 1780/  FF0DA2 :                     
(1) 1781/  FF0DA2 :                     ; --------------------------------------------------------
(1) 1782/  FF0DA2 :                     ; MdMap_Update
(1) 1783/  FF0DA2 :                     ;
(1) 1784/  FF0DA2 :                     ; Updates backgrounds internally, call this
(1) 1785/  FF0DA2 :                     ; BEFORE going into VBlank.
(1) 1786/  FF0DA2 :                     ;
(1) 1787/  FF0DA2 :                     ; Then later call MdMap_DrawScrl on VBlank,
(1) 1788/  FF0DA2 :                     ; this also applies for the 32X as this routine also
(1) 1789/  FF0DA2 :                     ; resets the drawing bits.
(1) 1790/  FF0DA2 :                     ;
(1) 1791/  FF0DA2 :                     ; For the 32X:
(1) 1792/  FF0DA2 :                     ; Call System_MarsUpdate AFTER this.
(1) 1793/  FF0DA2 :                     ; --------------------------------------------------------
(1) 1794/  FF0DA2 :                     
(1) 1795/  FF0DA2 :                     MdMap_Update:
(1) 1796/  FF0DA2 : 4DF8 B022           		lea	(RAM_BgBufferM),a6
(1) 1797/  FF0DA6 : 610A                		bsr.s	.this_bg
(1) 1798/  FF0DA8 : 4DF8 9660           		lea	(RAM_BgBuffer),a6
(1) 1799/  FF0DAC : 6104                		bsr.s	.this_bg
(1) 1800/  FF0DAE : DCFC 0038           		adda	#sizeof_mdbg,a6
(1) 1801/  FF0DB2 :                     .this_bg:
(1) 1802/  FF0DB2 : 082E 0007 0003      		btst	#bitBgOn,md_bg_flags(a6)
(1) 1803/  FF0DB8 : 6700 00AE           		beq	.no_bg
(1) 1804/  FF0DBC : 7200                		moveq	#0,d1
(1) 1805/  FF0DBE : 7400                		moveq	#0,d2
(1) 1806/  FF0DC0 : 362E 0030           		move.w	md_bg_x(a6),d3
(1) 1807/  FF0DC4 : 302E 0018           		move.w	md_bg_x_old(a6),d0
(1) 1808/  FF0DC8 : B640                		cmp.w	d0,d3
(1) 1809/  FF0DCA : 6708                		beq.s	.xequ
(1) 1810/  FF0DCC : 3203                		move.w	d3,d1
(1) 1811/  FF0DCE : 9240                		sub.w	d0,d1
(1) 1812/  FF0DD0 : 3D43 0018           		move.w	d3,md_bg_x_old(a6)
(1) 1813/  FF0DD4 :                     .xequ:
(1) 1814/  FF0DD4 : 362E 0034           		move.w	md_bg_y(a6),d3
(1) 1815/  FF0DD8 : 302E 001A           		move.w	md_bg_y_old(a6),d0
(1) 1816/  FF0DDC : B640                		cmp.w	d0,d3
(1) 1817/  FF0DDE : 6708                		beq.s	.yequ
(1) 1818/  FF0DE0 : 3403                		move.w	d3,d2
(1) 1819/  FF0DE2 : 9440                		sub.w	d0,d2
(1) 1820/  FF0DE4 : 3D43 001A           		move.w	d3,md_bg_y_old(a6)
(1) 1821/  FF0DE8 :                     .yequ:
(1) 1822/  FF0DE8 :                     
(1) 1823/  FF0DE8 :                     	; Increment drawing beams
(1) 1824/  FF0DE8 : 3001                		move.w	d1,d0
(1) 1825/  FF0DEA : 3A2E 000C           		move.w	md_bg_wf(a6),d5
(1) 1826/  FF0DEE : 382E 0010           		move.w	md_bg_xinc_l(a6),d4
(1) 1827/  FF0DF2 : 6176                		bsr.s	.beam_incr
(1) 1828/  FF0DF4 : 3D44 0010           		move.w	d4,md_bg_xinc_l(a6)
(1) 1829/  FF0DF8 : 382E 0012           		move.w	md_bg_xinc_r(a6),d4
(1) 1830/  FF0DFC : 616C                		bsr.s	.beam_incr
(1) 1831/  FF0DFE : 3D44 0012           		move.w	d4,md_bg_xinc_r(a6)
(1) 1832/  FF0E02 : 3002                		move.w	d2,d0
(1) 1833/  FF0E04 : 3A2E 000E           		move.w	md_bg_hf(a6),d5
(1) 1834/  FF0E08 : 382E 0014           		move.w	md_bg_yinc_u(a6),d4
(1) 1835/  FF0E0C : 615C                		bsr.s	.beam_incr
(1) 1836/  FF0E0E : 3D44 0014           		move.w	d4,md_bg_yinc_u(a6)
(1) 1837/  FF0E12 : 382E 0016           		move.w	md_bg_yinc_d(a6),d4
(1) 1838/  FF0E16 : 6152                		bsr.s	.beam_incr
(1) 1839/  FF0E18 : 3D44 0016           		move.w	d4,md_bg_yinc_d(a6)
(1) 1840/  FF0E1C :                     
(1) 1841/  FF0E1C :                     	; Update internal counters
(1) 1842/  FF0E1C : 7600                		moveq	#0,d3
(1) 1843/  FF0E1E : 1616                		move.b	md_bg_bw(a6),d3		; X set
(1) 1844/  FF0E20 : 102E 0004           		move.b	md_bg_xset(a6),d0
(1) 1845/  FF0E24 : D001                		add.b	d1,d0
(1) 1846/  FF0E26 : 1800                		move.b	d0,d4
(1) 1847/  FF0E28 : C843                		and.w	d3,d4
(1) 1848/  FF0E2A : 670C                		beq.s	.x_k
(1) 1849/  FF0E2C : 7800                		moveq	#bitDrwR,d4
(1) 1850/  FF0E2E : 4A41                		tst.w	d1
(1) 1851/  FF0E30 : 6A02                		bpl.s	.x_r
(1) 1852/  FF0E32 : 7801                		moveq	#bitDrwL,d4
(1) 1853/  FF0E34 :                     .x_r:
(1) 1854/  FF0E34 : 09EE 0003           		bset	d4,md_bg_flags(a6)
(1) 1855/  FF0E38 :                     .x_k:
(1) 1856/  FF0E38 : 967C 0001           		sub.w	#1,d3
(1) 1857/  FF0E3C : C003                		and.b	d3,d0
(1) 1858/  FF0E3E : 1D40 0004           		move.b	d0,md_bg_xset(a6)
(1) 1859/  FF0E42 : 162E 0001           		move.b	md_bg_bh(a6),d3		; Y set
(1) 1860/  FF0E46 : 102E 0005           		move.b	md_bg_yset(a6),d0
(1) 1861/  FF0E4A : D002                		add.b	d2,d0
(1) 1862/  FF0E4C : 1800                		move.b	d0,d4
(1) 1863/  FF0E4E : C843                		and.w	d3,d4
(1) 1864/  FF0E50 : 670C                		beq.s	.y_k
(1) 1865/  FF0E52 : 7802                		moveq	#bitDrwD,d4
(1) 1866/  FF0E54 : 4A42                		tst.w	d2
(1) 1867/  FF0E56 : 6A02                		bpl.s	.y_d
(1) 1868/  FF0E58 : 7803                		moveq	#bitDrwU,d4
(1) 1869/  FF0E5A :                     .y_d:
(1) 1870/  FF0E5A : 09EE 0003           		bset	d4,md_bg_flags(a6)
(1) 1871/  FF0E5E :                     .y_k:
(1) 1872/  FF0E5E : 967C 0001           		sub.w	#1,d3
(1) 1873/  FF0E62 : C003                		and.b	d3,d0
(1) 1874/  FF0E64 : 1D40 0005           		move.b	d0,md_bg_yset(a6)
(1) 1875/  FF0E68 :                     .no_bg:
(1) 1876/  FF0E68 : 4E75                		rts
(1) 1877/  FF0E6A :                     
(1) 1878/  FF0E6A :                     ; d0 - Increment by
(1) 1879/  FF0E6A :                     ; d4 - X/Y beam
(1) 1880/  FF0E6A :                     ; d5 - Max Width/Height
(1) 1881/  FF0E6A :                     .beam_incr:
(1) 1882/  FF0E6A : D840                		add.w	d0,d4
(1) 1883/  FF0E6C : 4A44                .xd_l:		tst.w	d4
(1) 1884/  FF0E6E : 6A04                		bpl.s	.xd_g
(1) 1885/  FF0E70 : D845                		add.w	d5,d4
(1) 1886/  FF0E72 : 60F8                		bra.s	.xd_l
(1) 1887/  FF0E74 : B845                .xd_g:		cmp.w	d5,d4
(1) 1888/  FF0E76 : 6D04                		blt.s	.val_h
(1) 1889/  FF0E78 : 9845                		sub.w	d5,d4
(1) 1890/  FF0E7A : 60F8                		bra.s	.xd_g
(1) 1891/  FF0E7C :                     .val_h:
(1) 1892/  FF0E7C : 4E75                		rts
(1) 1893/  FF0E7E :                     
(1) 1894/  FF0E7E :                     ; --------------------------------------------------------
(1) 1895/  FF0E7E :                     ; MdMap_DrawAll
(1) 1896/  FF0E7E :                     ;
(1) 1897/  FF0E7E :                     ; Call this only if DISPLAY is OFF or in VBlank
(1) 1898/  FF0E7E :                     ;
(1) 1899/  FF0E7E :                     ; Notes:
(1) 1900/  FF0E7E :                     ; - Does NOT check for off-bounds blocks
(1) 1901/  FF0E7E :                     ; - Blocks with ID $00 are skipped.
(1) 1902/  FF0E7E :                     ; --------------------------------------------------------
(1) 1903/  FF0E7E :                     
(1) 1904/  FF0E7E :                     MdMap_DrawAll:
(1) 1905/  FF0E7E : 4DF8 9660           		lea	(RAM_BgBuffer),a6
(1) 1906/  FF0E82 : 6104                		bsr	.this_bg
(1) 1907/  FF0E84 : DCFC 0038           		adda	#sizeof_mdbg,a6
(1) 1908/  FF0E88 :                     .this_bg:
(1) 1909/  FF0E88 : 082E 0007 0003      		btst	#bitBgOn,md_bg_flags(a6)
(1) 1910/  FF0E8E : 6700 00E8           		beq	.no_bg
(1) 1911/  FF0E92 : 2A6E 0028           		move.l	md_bg_blk(a6),a5
(1) 1912/  FF0E96 : 286E 0020           		move.l	md_bg_low(a6),a4
(1) 1913/  FF0E9A : 266E 0024           		move.l	md_bg_hi(a6),a3
(1) 1914/  FF0E9E : 302E 0030           		move.w	md_bg_x(a6),d0		; X start
(1) 1915/  FF0EA2 : 322E 0034           		move.w	md_bg_y(a6),d1		; Y start
(1) 1916/  FF0EA6 : 1416                		move.b	md_bg_bw(a6),d2
(1) 1917/  FF0EA8 : 162E 0001           		move.b	md_bg_bh(a6),d3
(1) 1918/  FF0EAC : 382E 0008           		move.w	md_bg_w(a6),d4
(1) 1919/  FF0EB0 :                     ; 		move.w	md_bg_wf(a6),d5
(1) 1920/  FF0EB0 :                     ; 		move.w	md_bg_hf(a6),d6
(1) 1921/  FF0EB0 :                     
(1) 1922/  FF0EB0 : 7C00                		moveq	#0,d6
(1) 1923/  FF0EB2 : 3C00                		move.w	d0,d6
(1) 1924/  FF0EB4 : CC7C FFF0           		and.w	#-$10,d6
(1) 1925/  FF0EB8 : E44E                		lsr.w	#2,d6
(1) 1926/  FF0EBA : CC7C 007F           		and.w	#$7F,d6
(1) 1927/  FF0EBE :                     
(1) 1928/  FF0EBE : 7A00                		moveq	#0,d5
(1) 1929/  FF0EC0 : 3A01                		move.w	d1,d5
(1) 1930/  FF0EC2 : CA7C FFF0           		and.w	#-$10,d5
(1) 1931/  FF0EC6 : E94D                		lsl.w	#4,d5
(1) 1932/  FF0EC8 : CA7C 0F00           		and.w	#$F00,d5
(1) 1933/  FF0ECC :                     
(1) 1934/  FF0ECC : DC45                		add.w	d5,d6
(1) 1935/  FF0ECE : DC6E 001C           		add.w	md_bg_vpos(a6),d6
(1) 1936/  FF0ED2 : 3A06                		move.w	d6,d5
(1) 1937/  FF0ED4 : E55E                		rol.w	#2,d6
(1) 1938/  FF0ED6 : CC7C 0003           		and.w	#%11,d6
(1) 1939/  FF0EDA : 4846                		swap	d6
(1) 1940/  FF0EDC : CA7C 3FFF           		and.w	#$3FFF,d5
(1) 1941/  FF0EE0 : 3C05                		move.w	d5,d6			; d6 - VDP 2nd|1st writes
(1) 1942/  FF0EE2 :                     
(1) 1943/  FF0EE2 : C47C 00FF           		and.w	#$FF,d2
(1) 1944/  FF0EE6 : C1C2                		muls.w	d2,d0
(1) 1945/  FF0EE8 : E048                		lsr.w	#8,d0
(1) 1946/  FF0EEA : C67C 00FF           		and.w	#$FF,d3
(1) 1947/  FF0EEE : C3C3                		muls.w	d3,d1
(1) 1948/  FF0EF0 : E049                		lsr.w	#8,d1
(1) 1949/  FF0EF2 : C3C4                		muls.w	d4,d1
(1) 1950/  FF0EF4 : D081                		add.l	d1,d0
(1) 1951/  FF0EF6 : D9C0                		add.l	d0,a4
(1) 1952/  FF0EF8 : D7C0                		add.l	d0,a3
(1) 1953/  FF0EFA : 323C 0080           		move.w	#$80,d1
(1) 1954/  FF0EFE : 3601                		move.w	d1,d3
(1) 1955/  FF0F00 : 4841                		swap	d1
(1) 1956/  FF0F02 : 967C 0001           		sub.w	#1,d3
(1) 1957/  FF0F06 : 7400                		moveq	#0,d2
(1) 1958/  FF0F08 : 342E 001E           		move.w	md_bg_vram(a6),d2	; d2 - VRAM cell pos
(1) 1959/  FF0F0C : 4843                		swap	d3
(1) 1960/  FF0F0E : 363C 0004           		move.w	#4,d3			; d3 - X wrap | X next block
(1) 1961/  FF0F12 : 383C 0FFF           		move.w	#$0FFF,d4		; d4 - Y wrap | Y next block + bits
(1) 1962/  FF0F16 : 4844                		swap	d4
(1) 1963/  FF0F18 : 383C 0100           		move.w	#$100,d4
(1) 1964/  FF0F1C : 3005                		move.w	d5,d0
(1) 1965/  FF0F1E : 7A00                		moveq	#0,d5			; d5 - temporal | X-add read
(1) 1966/  FF0F20 : 3E3C 001F           		move.w	#(512/16)-1,d7		; d7 - X cells | Y cells
(1) 1967/  FF0F24 : 4847                		swap	d7
(1) 1968/  FF0F26 : 3E3C 000F           		move.w	#(256/16)-1,d7
(1) 1969/  FF0F2A :                     
(1) 1970/  FF0F2A :                     	; a6 - Current BG buffer
(1) 1971/  FF0F2A :                     	; a5 - Block-data base
(1) 1972/  FF0F2A :                     	; a4 - LOW layout data Y
(1) 1973/  FF0F2A :                     	; a3 - HI layout data Y
(1) 1974/  FF0F2A :                     	; a2 - a4 current
(1) 1975/  FF0F2A :                     	; a1 - a3 current
(1) 1976/  FF0F2A :                     	; a0 - Block-data read
(1) 1977/  FF0F2A :                     
(1) 1978/  FF0F2A :                     	; d7 - X loop        | Y loop
(1) 1979/  FF0F2A :                     	; d6 - VDP 2nd Write | X/Y VDP pos + addr bits
(1) 1980/  FF0F2A :                     	; d5 - X loop-save   | X VDP current
(1) 1981/  FF0F2A :                     	; d4 - Y wrap        | Y next block pos
(1) 1982/  FF0F2A :                     	; d3 - X wrap        | X next block pos
(1) 1983/  FF0F2A :                     	; d2 - Y block size  | VRAM-cell base
(1) 1984/  FF0F2A :                     	; d1 - Y-next line   | VRAM-cell read + prio
(1) 1985/  FF0F2A :                     	; d0 -    ---        | ---
(1) 1986/  FF0F2A :                     
(1) 1987/  FF0F2A :                     .y_loop:
(1) 1988/  FF0F2A : 4847                		swap	d7
(1) 1989/  FF0F2C : 244C                		move.l	a4,a2		; a2 - LOW line
(1) 1990/  FF0F2E : 224B                		move.l	a3,a1		; a1 - HI line
(1) 1991/  FF0F30 : 3A07                		move.w	d7,d5
(1) 1992/  FF0F32 :                     .x_loop:
(1) 1993/  FF0F32 : 4845                		swap	d5
(1) 1994/  FF0F34 : 3202                		move.w	d2,d1
(1) 1995/  FF0F36 : 1012                		move.b	(a2),d0		; HI block?
(1) 1996/  FF0F38 : 6608                		bne.s	.got_blk
(1) 1997/  FF0F3A : D27C 8000           		add.w	#$8000,d1
(1) 1998/  FF0F3E : 1011                		move.b	(a1),d0
(1) 1999/  FF0F40 : 6702                		beq.s	.blank
(1) 2000/  FF0F42 :                     .got_blk:
(1) 2001/  FF0F42 : 6136                		bsr	.mk_block
(1) 2002/  FF0F44 :                     .blank:
(1) 2003/  FF0F44 : 2003                		move.l	d3,d0
(1) 2004/  FF0F46 : 4840                		swap	d0
(1) 2005/  FF0F48 : DA43                		add.w	d3,d5		; next VDP X pos
(1) 2006/  FF0F4A : CA40                		and.w	d0,d5
(1) 2007/  FF0F4C : D4FC 0001           		adda	#1,a2
(1) 2008/  FF0F50 : D2FC 0001           		adda	#1,a1
(1) 2009/  FF0F54 : 4845                		swap	d5
(1) 2010/  FF0F56 : 51CD FFDA           		dbf	d5,.x_loop
(1) 2011/  FF0F5A :                     
(1) 2012/  FF0F5A : 3006                		move.w	d6,d0
(1) 2013/  FF0F5C : C07C 3000           		and.w	#$3000,d0
(1) 2014/  FF0F60 : DC44                		add.w	d4,d6		; <-- next VDP Y block
(1) 2015/  FF0F62 : 4844                		swap	d4
(1) 2016/  FF0F64 : CC44                		and.w	d4,d6
(1) 2017/  FF0F66 : 8C40                		or.w	d0,d6
(1) 2018/  FF0F68 : 4844                		swap	d4
(1) 2019/  FF0F6A :                     
(1) 2020/  FF0F6A : 302E 0008           		move.w	md_bg_w(a6),d0 ; ***
(1) 2021/  FF0F6E : D8C0                		adda	d0,a4
(1) 2022/  FF0F70 : D6C0                		adda	d0,a3
(1) 2023/  FF0F72 : 4847                		swap	d7
(1) 2024/  FF0F74 : 51CF FFB4           		dbf	d7,.y_loop
(1) 2025/  FF0F78 :                     .no_bg:
(1) 2026/  FF0F78 : 4E75                		rts
(1) 2027/  FF0F7A :                     
(1) 2028/  FF0F7A :                     ; barely got free regs without using stack
(1) 2029/  FF0F7A :                     .mk_block:
(1) 2030/  FF0F7A : 4842                		swap	d2
(1) 2031/  FF0F7C : 204D                		move.l	a5,a0
(1) 2032/  FF0F7E : C07C 00FF           		and.w	#$FF,d0
(1) 2033/  FF0F82 : E748                		lsl.w	#3,d0		; * 8 bytes
(1) 2034/  FF0F84 : D0C0                		adda	d0,a0		; a0 - cell word data
(1) 2035/  FF0F86 : 3006                		move.w	d6,d0
(1) 2036/  FF0F88 : D045                		add.w	d5,d0
(1) 2037/  FF0F8A : 807C 4000           		or.w	#$4000,d0
(1) 2038/  FF0F8E : 4846                		swap	d6
(1) 2039/  FF0F90 :                     
(1) 2040/  FF0F90 :                     	; d0 - topleft VDP write | $4000
(1) 2041/  FF0F90 :                     	; d6 - right VDP write
(1) 2042/  FF0F90 :                     	; d2 is free
(1) 2043/  FF0F90 :                     	;
(1) 2044/  FF0F90 :                     	; currently working: 16x16
(1) 2045/  FF0F90 : 610C                		bsr.s	.drwy_16	; 1-
(1) 2046/  FF0F92 : D07C 0002           		add.w	#2,d0		; 2-
(1) 2047/  FF0F96 : 6106                		bsr.s	.drwy_16	; -3
(1) 2048/  FF0F98 :                     					; -4
(1) 2049/  FF0F98 : 4846                		swap	d6
(1) 2050/  FF0F9A : 4842                		swap	d2
(1) 2051/  FF0F9C : 4E75                		rts
(1) 2052/  FF0F9E :                     
(1) 2053/  FF0F9E :                     ; d0 - left vdp
(1) 2054/  FF0F9E :                     ; d6 - right vdp
(1) 2055/  FF0F9E :                     .drwy_16:
(1) 2056/  FF0F9E : 3400                		move.w	d0,d2
(1) 2057/  FF0FA0 : 4840                		swap	d0
(1) 2058/  FF0FA2 : 3018                		move.w	(a0)+,d0
(1) 2059/  FF0FA4 : D041                		add.w	d1,d0
(1) 2060/  FF0FA6 : 33C2 00C0 0004      		move.w	d2,(vdp_ctrl).l
(1) 2061/  FF0FAC : 33C6 00C0 0004      		move.w	d6,(vdp_ctrl).l
(1) 2062/  FF0FB2 : 33C0 00C0 0000      		move.w	d0,(vdp_data).l
(1) 2063/  FF0FB8 : 4841                		swap	d1
(1) 2064/  FF0FBA : D441                		add.w	d1,d2		; Next line
(1) 2065/  FF0FBC : 4841                		swap	d1
(1) 2066/  FF0FBE : 3018                		move.w	(a0)+,d0
(1) 2067/  FF0FC0 : D041                		add.w	d1,d0
(1) 2068/  FF0FC2 : 33C2 00C0 0004      		move.w	d2,(vdp_ctrl).l
(1) 2069/  FF0FC8 : 33C6 00C0 0004      		move.w	d6,(vdp_ctrl).l
(1) 2070/  FF0FCE : 33C0 00C0 0000      		move.w	d0,(vdp_data).l
(1) 2071/  FF0FD4 : 4840                		swap	d0
(1) 2072/  FF0FD6 : 4E75                		rts
(1) 2073/  FF0FD8 :                     
(1) 2074/  FF0FD8 :                     	; Block: 16x16 as 13
(1) 2075/  FF0FD8 :                     	;                 24
(1) 2076/  FF0FD8 :                     	; d0 - block ID
(1) 2077/  FF0FD8 :                     	; d1 - VRAM-add base
(1) 2078/  FF0FD8 :                     	; d6 - VDP out R | VDP out L
(1) 2079/  FF0FD8 :                     ; 		and.w	#$FF,d0
(1) 2080/  FF0FD8 :                     ; 		lsl.w	#3,d0		; * 8 bytes
(1) 2081/  FF0FD8 :                     ; 		move.l	(a5,d0.w),d2
(1) 2082/  FF0FD8 :                     ; 		add.l	d1,d2
(1) 2083/  FF0FD8 :                     ; 		swap	d2
(1) 2084/  FF0FD8 :                     ; 		move.l	4(a5,d0.w),d3
(1) 2085/  FF0FD8 :                     ; 		add.l	d1,d3
(1) 2086/  FF0FD8 :                     ; 		swap	d3
(1) 2087/  FF0FD8 :                     ; 		move.w	d6,d0
(1) 2088/  FF0FD8 :                     ; 		swap	d5
(1) 2089/  FF0FD8 :                     ; 		add.w	d5,d0
(1) 2090/  FF0FD8 :                     ; 		or.w	#$4000,d0
(1) 2091/  FF0FD8 :                     ; 		swap	d5
(1) 2092/  FF0FD8 :                     ; 		move.l	a0,d1
(1) 2093/  FF0FD8 :                     ; 		and.w	d1,d5
(1) 2094/  FF0FD8 :                     ; 		add.w	d5,d0
(1) 2095/  FF0FD8 :                     ; 		swap	d6
(1) 2096/  FF0FD8 :                     ; 		move.w	d0,(vdp_ctrl).l
(1) 2097/  FF0FD8 :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 2098/  FF0FD8 :                     ; 		move.w	d2,(vdp_data).l
(1) 2099/  FF0FD8 :                     ; 		move.w	d3,(vdp_data).l
(1) 2100/  FF0FD8 :                     ; 		swap	d2
(1) 2101/  FF0FD8 :                     ; 		swap	d3
(1) 2102/  FF0FD8 :                     ; 		add.w	#$80,d0		; line add
(1) 2103/  FF0FD8 :                     ; 		move.w	d0,(vdp_ctrl).l
(1) 2104/  FF0FD8 :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 2105/  FF0FD8 :                     ; 		move.w	d2,(vdp_data).l
(1) 2106/  FF0FD8 :                     ; 		move.w	d3,(vdp_data).l
(1) 2107/  FF0FD8 :                     ; 		swap	d6
(1) 2108/  FF0FD8 :                     ; 		rts
(1) 2109/  FF0FD8 :                     
(1) 2110/  FF0FD8 :                     ; --------------------------------------------------------
(1) 2111/  FF0FD8 :                     ; MdMap_DrawScrlMd
(1) 2112/  FF0FD8 :                     ;
(1) 2113/  FF0FD8 :                     ; Draws map off-screen changes, only on Genesis-side.
(1) 2114/  FF0FD8 :                     ;
(1) 2115/  FF0FD8 :                     ; CALL THIS ON VBLANK ONLY, MUST BE QUICK.
(1) 2116/  FF0FD8 :                     ; --------------------------------------------------------
(1) 2117/  FF0FD8 :                     
(1) 2118/  FF0FD8 :                     MdMap_DrawScrlMd:
(1) 2119/  FF0FD8 : 4DF8 9660           		lea	(RAM_BgBuffer),a6
(1) 2120/  FF0FDC : 4BF9 00C0 0000      		lea	(vdp_data),a5
(1) 2121/  FF0FE2 : 6104                		bsr.s	.this_bg
(1) 2122/  FF0FE4 : DCFC 0038           		adda	#sizeof_mdbg,a6
(1) 2123/  FF0FE8 :                     	; SH2-side handles the
(1) 2124/  FF0FE8 :                     	; RAM_BgBufferM's drawing
(1) 2125/  FF0FE8 :                     
(1) 2126/  FF0FE8 :                     .this_bg:
(1) 2127/  FF0FE8 : 1E2E 0003           		move.b	md_bg_flags(a6),d7
(1) 2128/  FF0FEC : 0807 0007           		btst	#bitBgOn,d7
(1) 2129/  FF0FF0 : 6758                		beq	.no_bg
(1) 2130/  FF0FF2 : 302E 0030           		move.w	md_bg_x(a6),d0		; X start
(1) 2131/  FF0FF6 : 322E 0034           		move.w	md_bg_y(a6),d1		; Y start
(1) 2132/  FF0FFA : 342E 0010           		move.w	md_bg_xinc_l(a6),d2
(1) 2133/  FF0FFE : 362E 0014           		move.w	md_bg_yinc_u(a6),d3
(1) 2134/  FF1002 : 0887 0003           		bclr	#bitDrwU,d7
(1) 2135/  FF1006 : 6704                		beq.s	.no_u
(1) 2136/  FF1008 : 6100 00F4           		bsr	.mk_row
(1) 2137/  FF100C :                     .no_u:
(1) 2138/  FF100C : 0887 0002           		bclr	#bitDrwD,d7
(1) 2139/  FF1010 : 670C                		beq.s	.no_d
(1) 2140/  FF1012 : 362E 0016           		move.w	md_bg_yinc_d(a6),d3
(1) 2141/  FF1016 : D27C 00E0           		add.w	#224,d1			; X add
(1) 2142/  FF101A : 6100 00E2           		bsr	.mk_row
(1) 2143/  FF101E :                     .no_d:
(1) 2144/  FF101E : 302E 0030           		move.w	md_bg_x(a6),d0		; X start
(1) 2145/  FF1022 : 322E 0034           		move.w	md_bg_y(a6),d1		; Y start
(1) 2146/  FF1026 : 342E 0010           		move.w	md_bg_xinc_l(a6),d2
(1) 2147/  FF102A : 362E 0014           		move.w	md_bg_yinc_u(a6),d3
(1) 2148/  FF102E : 0887 0001           		bclr	#bitDrwL,d7
(1) 2149/  FF1032 : 6702                		beq.s	.no_l
(1) 2150/  FF1034 : 6116                		bsr.s	.mk_clmn
(1) 2151/  FF1036 :                     .no_l:
(1) 2152/  FF1036 : 0887 0000           		bclr	#bitDrwR,d7
(1) 2153/  FF103A : 670A                		beq.s	.no_r
(1) 2154/  FF103C : 342E 0012           		move.w	md_bg_xinc_r(a6),d2
(1) 2155/  FF1040 : D07C 0140           		add.w	#320,d0			; X add
(1) 2156/  FF1044 : 6106                		bsr.s	.mk_clmn
(1) 2157/  FF1046 :                     .no_r:
(1) 2158/  FF1046 :                     
(1) 2159/  FF1046 : 1D47 0003           		move.b	d7,md_bg_flags(a6)
(1) 2160/  FF104A :                     .no_bg:
(1) 2161/  FF104A : 4E75                		rts
(1) 2162/  FF104C :                     
(1) 2163/  FF104C :                     ; ------------------------------------------------
(1) 2164/  FF104C :                     ; Make column
(1) 2165/  FF104C :                     ; d0 - X
(1) 2166/  FF104C :                     ; d1 - Y
(1) 2167/  FF104C :                     ; d2 - X increment
(1) 2168/  FF104C :                     ; d3 - Y increment
(1) 2169/  FF104C :                     ; ------------------------------------------------
(1) 2170/  FF104C :                     
(1) 2171/  FF104C :                     .mk_clmn:
(1) 2172/  FF104C :                     ; 		btst	#bitMarsBg,d7
(1) 2173/  FF104C :                     ; 		bne	.mars_ret_c
(1) 2174/  FF104C : 4847                		swap	d7
(1) 2175/  FF104E : 6100 016A           		bsr	.get_coords
(1) 2176/  FF1052 : 4840                		swap	d0
(1) 2177/  FF1054 : 3004                		move.w	d4,d0
(1) 2178/  FF1056 : 4840                		swap	d0
(1) 2179/  FF1058 : 363C 0FFF           		move.w	#$FFF,d3
(1) 2180/  FF105C : 4843                		swap	d3
(1) 2181/  FF105E : 363C 0100           		move.w	#$100,d3
(1) 2182/  FF1062 :                     
(1) 2183/  FF1062 :                     	; d0 -    X curr | Current cell X/Y (1st)
(1) 2184/  FF1062 :                     	; d1 -    Y curr | VDP 1st write
(1) 2185/  FF1062 :                     	; d2 - Cell VRAM | VDP 2nd write
(1) 2186/  FF1062 :                     	; d3 -    Y wrap | Y add
(1) 2187/  FF1062 :                     	; d4 -         *****
(1) 2188/  FF1062 :                     	; d5 -         *****
(1) 2189/  FF1062 :                     	; d6 -         *****
(1) 2190/  FF1062 :                     	; d7 - lastflags | loop blocks
(1) 2191/  FF1062 :                     
(1) 2192/  FF1062 : 3E3C 000F           		move.w	#(256/16)-1,d7
(1) 2193/  FF1066 :                     .y_blk:
(1) 2194/  FF1066 : 7800                		moveq	#0,d4
(1) 2195/  FF1068 : 7A00                		moveq	#0,d5
(1) 2196/  FF106A : 1C13                		move.b	(a3),d6
(1) 2197/  FF106C : 6616                		bne.s	.vld
(1) 2198/  FF106E : 1C12                		move.b	(a2),d6
(1) 2199/  FF1070 : 6606                		bne.s	.prio
(1) 2200/  FF1072 :                     .blnk:
(1) 2201/  FF1072 : 7800                		moveq	#0,d4
(1) 2202/  FF1074 : 7A00                		moveq	#0,d5
(1) 2203/  FF1076 : 602E                		bra.s	.frce
(1) 2204/  FF1078 :                     .prio:
(1) 2205/  FF1078 : 283C 8000 8000      		move.l	#$80008000,d4
(1) 2206/  FF107E : 2A3C 8000 8000      		move.l	#$80008000,d5
(1) 2207/  FF1084 :                     .vld:
(1) 2208/  FF1084 : 204C                		move.l	a4,a0
(1) 2209/  FF1086 : CC7C 00FF           		and.w	#$FF,d6
(1) 2210/  FF108A : E74E                		lsl.w	#3,d6
(1) 2211/  FF108C : D0C6                		adda	d6,a0
(1) 2212/  FF108E : 4842                		swap	d2
(1) 2213/  FF1090 : D858                		add.w	(a0)+,d4
(1) 2214/  FF1092 : DA58                		add.w	(a0)+,d5
(1) 2215/  FF1094 : D842                		add.w	d2,d4
(1) 2216/  FF1096 : DA42                		add.w	d2,d5
(1) 2217/  FF1098 : 4844                		swap	d4
(1) 2218/  FF109A : 4845                		swap	d5
(1) 2219/  FF109C : D858                		add.w	(a0)+,d4
(1) 2220/  FF109E : DA58                		add.w	(a0)+,d5
(1) 2221/  FF10A0 : D842                		add.w	d2,d4
(1) 2222/  FF10A2 : DA42                		add.w	d2,d5
(1) 2223/  FF10A4 : 4842                		swap	d2
(1) 2224/  FF10A6 :                     .frce:
(1) 2225/  FF10A6 : 3C00                		move.w	d0,d6
(1) 2226/  FF10A8 : DC41                		add.w	d1,d6
(1) 2227/  FF10AA : 8C7C 4000           		or.w	#$4000,d6
(1) 2228/  FF10AE : 3B46 0004           		move.w	d6,4(a5)
(1) 2229/  FF10B2 : 3B42 0004           		move.w	d2,4(a5)
(1) 2230/  FF10B6 : 2A84                		move.l	d4,(a5)
(1) 2231/  FF10B8 : DC7C 0080           		add.w	#$80,d6
(1) 2232/  FF10BC : 3B46 0004           		move.w	d6,4(a5)
(1) 2233/  FF10C0 : 3B42 0004           		move.w	d2,4(a5)
(1) 2234/  FF10C4 : 2A85                		move.l	d5,(a5)
(1) 2235/  FF10C6 : 2803                		move.l	d3,d4		; Next Y block
(1) 2236/  FF10C8 : 4844                		swap	d4
(1) 2237/  FF10CA : D043                		add.w	d3,d0
(1) 2238/  FF10CC : C044                		and.w	d4,d0
(1) 2239/  FF10CE : 3C2E 0008           		move.w	md_bg_w(a6),d6
(1) 2240/  FF10D2 : D6C6                		adda	d6,a3
(1) 2241/  FF10D4 : D4C6                		adda	d6,a2
(1) 2242/  FF10D6 : 4841                		swap	d1		; <-- TODO: improve this later.
(1) 2243/  FF10D8 : D27C 0010           		add.w	#$10,d1
(1) 2244/  FF10DC : B26E 000E           		cmp.w	md_bg_hf(a6),d1
(1) 2245/  FF10E0 : 6D12                		blt.s	.y_low
(1) 2246/  FF10E2 : 4840                		swap	d0
(1) 2247/  FF10E4 : 4241                		clr.w	d1
(1) 2248/  FF10E6 : 266E 0020           		move.l	md_bg_low(a6),a3
(1) 2249/  FF10EA : 246E 0024           		move.l	md_bg_hi(a6),a2
(1) 2250/  FF10EE : D4C0                		adda	d0,a2
(1) 2251/  FF10F0 : D6C0                		adda	d0,a3
(1) 2252/  FF10F2 : 4840                		swap	d0
(1) 2253/  FF10F4 :                     .y_low:
(1) 2254/  FF10F4 : 4841                		swap	d1
(1) 2255/  FF10F6 :                     
(1) 2256/  FF10F6 : 51CF FF6E           		dbf	d7,.y_blk
(1) 2257/  FF10FA : 4847                		swap	d7
(1) 2258/  FF10FC :                     .mars_ret_c:
(1) 2259/  FF10FC : 4E75                		rts
(1) 2260/  FF10FE :                     
(1) 2261/  FF10FE :                     ; ------------------------------------------------
(1) 2262/  FF10FE :                     ; Make row
(1) 2263/  FF10FE :                     ; d0 - X
(1) 2264/  FF10FE :                     ; d1 - Y
(1) 2265/  FF10FE :                     ; d2 - X increment
(1) 2266/  FF10FE :                     ; d3 - Y increment
(1) 2267/  FF10FE :                     ; ------------------------------------------------
(1) 2268/  FF10FE :                     
(1) 2269/  FF10FE :                     .mk_row:
(1) 2270/  FF10FE :                     ; 		btst	#bitMarsBg,d7
(1) 2271/  FF10FE :                     ; 		bne.s	.mars_ret_c
(1) 2272/  FF10FE : 4847                		swap	d7
(1) 2273/  FF1100 : 6100 00B8           		bsr	.get_coords
(1) 2274/  FF1104 : 4841                		swap	d1
(1) 2275/  FF1106 : 3205                		move.w	d5,d1
(1) 2276/  FF1108 : 4841                		swap	d1
(1) 2277/  FF110A : 363C 007F           		move.w	#$7F,d3
(1) 2278/  FF110E : 4843                		swap	d3
(1) 2279/  FF1110 : 363C 0004           		move.w	#4,d3
(1) 2280/  FF1114 :                     
(1) 2281/  FF1114 :                     	; d0 -    X curr | Current cell X/Y (1st)
(1) 2282/  FF1114 :                     	; d1 -    Y curr | VDP 1st write
(1) 2283/  FF1114 :                     	; d2 - Cell VRAM | VDP 2nd write
(1) 2284/  FF1114 :                     	; d3 -    X wrap | X add
(1) 2285/  FF1114 :                     	; d4 -         *****
(1) 2286/  FF1114 :                     	; d5 -         *****
(1) 2287/  FF1114 :                     	; d6 - loopflags | *****
(1) 2288/  FF1114 :                     	; d7 - lastflags | loop blocks
(1) 2289/  FF1114 :                     
(1) 2290/  FF1114 : 3C00                		move.w	d0,d6
(1) 2291/  FF1116 : CC7C FF00           		and.w	#-$100,d6	; Merge d1
(1) 2292/  FF111A : D246                		add.w	d6,d1
(1) 2293/  FF111C : 2A03                		move.l	d3,d5
(1) 2294/  FF111E : 4845                		swap	d5
(1) 2295/  FF1120 : C045                		and.w	d5,d0
(1) 2296/  FF1122 : 3E3C 0014           		move.w	#((320+16)/16)-1,d7
(1) 2297/  FF1126 :                     .x_blk:
(1) 2298/  FF1126 : 7800                		moveq	#0,d4
(1) 2299/  FF1128 : 7A00                		moveq	#0,d5
(1) 2300/  FF112A : 1C13                		move.b	(a3),d6
(1) 2301/  FF112C : 6616                		bne.s	.xvld
(1) 2302/  FF112E : 1C12                		move.b	(a2),d6
(1) 2303/  FF1130 : 6606                		bne.s	.xprio
(1) 2304/  FF1132 :                     .xblnk:
(1) 2305/  FF1132 : 7800                		moveq	#0,d4
(1) 2306/  FF1134 : 7A00                		moveq	#0,d5
(1) 2307/  FF1136 : 602E                		bra.s	.xfrce
(1) 2308/  FF1138 :                     .xprio:
(1) 2309/  FF1138 : 283C 8000 8000      		move.l	#$80008000,d4
(1) 2310/  FF113E : 2A3C 8000 8000      		move.l	#$80008000,d5
(1) 2311/  FF1144 :                     .xvld:
(1) 2312/  FF1144 : 204C                		move.l	a4,a0
(1) 2313/  FF1146 : CC7C 00FF           		and.w	#$FF,d6
(1) 2314/  FF114A : E74E                		lsl.w	#3,d6
(1) 2315/  FF114C : D0C6                		adda	d6,a0
(1) 2316/  FF114E : 4842                		swap	d2
(1) 2317/  FF1150 : D858                		add.w	(a0)+,d4
(1) 2318/  FF1152 : DA58                		add.w	(a0)+,d5
(1) 2319/  FF1154 : D842                		add.w	d2,d4
(1) 2320/  FF1156 : DA42                		add.w	d2,d5
(1) 2321/  FF1158 : 4844                		swap	d4
(1) 2322/  FF115A : 4845                		swap	d5
(1) 2323/  FF115C : D858                		add.w	(a0)+,d4
(1) 2324/  FF115E : DA58                		add.w	(a0)+,d5
(1) 2325/  FF1160 : D842                		add.w	d2,d4
(1) 2326/  FF1162 : DA42                		add.w	d2,d5
(1) 2327/  FF1164 : 4842                		swap	d2
(1) 2328/  FF1166 :                     .xfrce:
(1) 2329/  FF1166 : 3C00                		move.w	d0,d6
(1) 2330/  FF1168 : DC41                		add.w	d1,d6
(1) 2331/  FF116A : 8C7C 4000           		or.w	#$4000,d6
(1) 2332/  FF116E : 3B46 0004           		move.w	d6,4(a5)
(1) 2333/  FF1172 : 3B42 0004           		move.w	d2,4(a5)
(1) 2334/  FF1176 : 2A84                		move.l	d4,(a5)
(1) 2335/  FF1178 : DC7C 0080           		add.w	#$80,d6
(1) 2336/  FF117C : 3B46 0004           		move.w	d6,4(a5)
(1) 2337/  FF1180 : 3B42 0004           		move.w	d2,4(a5)
(1) 2338/  FF1184 : 2A85                		move.l	d5,(a5)
(1) 2339/  FF1186 : D043                		add.w	d3,d0
(1) 2340/  FF1188 : 4843                		swap	d3
(1) 2341/  FF118A : C043                		and.w	d3,d0
(1) 2342/  FF118C : 4843                		swap	d3
(1) 2343/  FF118E :                     
(1) 2344/  FF118E :                     	; X wrap
(1) 2345/  FF118E : 4840                		swap	d0
(1) 2346/  FF1190 : D07C 0010           		add.w	#$10,d0
(1) 2347/  FF1194 : B06E 000C           		cmp.w	md_bg_wf(a6),d0
(1) 2348/  FF1198 : 6D0E                		blt.s	.x_low
(1) 2349/  FF119A : 906E 000C           		sub.w	md_bg_wf(a6),d0
(1) 2350/  FF119E : 7800                		moveq	#0,d4
(1) 2351/  FF11A0 : 382E 0008           		move.w	md_bg_w(a6),d4
(1) 2352/  FF11A4 : 95C4                		sub.l	d4,a2
(1) 2353/  FF11A6 : 97C4                		sub.l	d4,a3
(1) 2354/  FF11A8 :                     .x_low:
(1) 2355/  FF11A8 : D6FC 0001           		adda	#1,a3
(1) 2356/  FF11AC : D4FC 0001           		adda	#1,a2
(1) 2357/  FF11B0 :                     .x_new:
(1) 2358/  FF11B0 : 4840                		swap	d0
(1) 2359/  FF11B2 :                     
(1) 2360/  FF11B2 : 51CF FF72           		dbf	d7,.x_blk
(1) 2361/  FF11B6 : 4847                		swap	d7
(1) 2362/  FF11B8 : 4E75                		rts
(1) 2363/  FF11BA :                     
(1) 2364/  FF11BA :                     ; ------------------------------------------------
(1) 2365/  FF11BA :                     ; Input
(1) 2366/  FF11BA :                     ; d0 - X position
(1) 2367/  FF11BA :                     ; d1 - Y position
(1) 2368/  FF11BA :                     ; d2 - X increment beam
(1) 2369/  FF11BA :                     ; d3 - Y increment beam
(1) 2370/  FF11BA :                     ;
(1) 2371/  FF11BA :                     ; Out:
(1) 2372/  FF11BA :                     ; d4 - X LEFT increment
(1) 2373/  FF11BA :                     ; d5 - Y TOP increment
(1) 2374/  FF11BA :                     
(1) 2375/  FF11BA :                     .get_coords:
(1) 2376/  FF11BA : 286E 0028           		move.l	md_bg_blk(a6),a4
(1) 2377/  FF11BE : 266E 0020           		move.l	md_bg_low(a6),a3
(1) 2378/  FF11C2 : 246E 0024           		move.l	md_bg_hi(a6),a2
(1) 2379/  FF11C6 : C07C FFF0           		and.w	#-$10,d0		; block X/Y limit
(1) 2380/  FF11CA : C27C FFF0           		and.w	#-$10,d1
(1) 2381/  FF11CE : C47C FFF0           		and.w	#-$10,d2
(1) 2382/  FF11D2 : C67C FFF0           		and.w	#-$10,d3
(1) 2383/  FF11D6 : 4840                		swap	d0
(1) 2384/  FF11D8 : 4841                		swap	d1
(1) 2385/  FF11DA : 3002                		move.w	d2,d0
(1) 2386/  FF11DC : 3203                		move.w	d3,d1
(1) 2387/  FF11DE : 4840                		swap	d0
(1) 2388/  FF11E0 : 4841                		swap	d1
(1) 2389/  FF11E2 :                     
(1) 2390/  FF11E2 : 7800                		moveq	#0,d4
(1) 2391/  FF11E4 : 7A00                		moveq	#0,d5
(1) 2392/  FF11E6 : 1C16                		move.b	md_bg_bw(a6),d6
(1) 2393/  FF11E8 : 1E2E 0001           		move.b	md_bg_bh(a6),d7
(1) 2394/  FF11EC : CC7C 00FF           		and.w	#$FF,d6
(1) 2395/  FF11F0 : CE7C 00FF           		and.w	#$FF,d7
(1) 2396/  FF11F4 :                     
(1) 2397/  FF11F4 : 3802                		move.w	d2,d4
(1) 2398/  FF11F6 : C9C6                		muls.w	d6,d4
(1) 2399/  FF11F8 : E044                		asr.w	#8,d4
(1) 2400/  FF11FA : 3A03                		move.w	d3,d5
(1) 2401/  FF11FC : CBC7                		muls.w	d7,d5
(1) 2402/  FF11FE : E045                		asr.w	#8,d5
(1) 2403/  FF1200 : CBEE 0008           		muls.w	md_bg_w(a6),d5
(1) 2404/  FF1204 : 7600                		moveq	#0,d3
(1) 2405/  FF1206 : 2604                		move.l	d4,d3
(1) 2406/  FF1208 : D685                		add.l	d5,d3
(1) 2407/  FF120A : D7C3                		add.l	d3,a3
(1) 2408/  FF120C : D5C3                		add.l	d3,a2
(1) 2409/  FF120E :                     
(1) 2410/  FF120E : 342E 001E           		move.w	md_bg_vram(a6),d2
(1) 2411/  FF1212 : 4842                		swap	d2
(1) 2412/  FF1214 : E449                		lsr.w	#2,d1			; Y >> 2
(1) 2413/  FF1216 : ED49                		lsl.w	#6,d1			; Y * $40
(1) 2414/  FF1218 : E448                		lsr.w	#2,d0			; X >> 2
(1) 2415/  FF121A : C27C 0FFF           		and.w	#$FFF,d1
(1) 2416/  FF121E : C07C 007C           		and.w	#$7C,d0
(1) 2417/  FF1222 : D041                		add.w	d1,d0
(1) 2418/  FF1224 : 322E 001C           		move.w	md_bg_vpos(a6),d1
(1) 2419/  FF1228 : 3401                		move.w	d1,d2
(1) 2420/  FF122A : C27C 3FFF           		and.w	#$3FFF,d1
(1) 2421/  FF122E : E55A                		rol.w	#2,d2
(1) 2422/  FF1230 : C47C 0003           		and.w	#%11,d2
(1) 2423/  FF1234 : 4E75                		rts
(1) 2424/  FF1236 :                     
(1) 2425/  FF1236 :                     ; ====================================================================
(1) 2426/  FF1236 :                     ; ----------------------------------------------------------------
(1) 2427/  FF1236 :                     ; Objects system
(1) 2428/  FF1236 :                     ;
(1) 2429/  FF1236 :                     ; MD and MARS
(1) 2430/  FF1236 :                     ; ----------------------------------------------------------------
(1) 2431/  FF1236 :                     
(1) 2432/  FF1236 :                     ; --------------------------------------------------------
(1) 2433/  FF1236 :                     ; Init objects
(1) 2434/  FF1236 :                     ; --------------------------------------------------------
(1) 2435/  FF1236 :                     
(1) 2436/  FF1236 :                     Objects_Init:
(1) 2437/  FF1236 : 4DF8 9000           		lea	(RAM_Objects),a6
(1) 2438/  FF123A : 3E3C 065F           		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 2439/  FF123E :                     .clr:
(1) 2440/  FF123E : 421E                		clr.b	(a6)+
(1) 2441/  FF1240 : 51CF FFFC           		dbf	d7,.clr
(1) 2442/  FF1244 : 4DF8 9B54           		lea	(RAM_ObjDispList),a6
(1) 2443/  FF1248 : 3E3C 000F           		move.w	#MAX_MDOBJ-1,d7
(1) 2444/  FF124C :                     .clr_d:
(1) 2445/  FF124C : 425E                		clr.w	(a6)+
(1) 2446/  FF124E : 51CF FFFC           		dbf	d7,.clr_d
(1) 2447/  FF1252 : 4278 A994           		clr.w	(RAM_SprDrwCntr).w
(1) 2448/  FF1256 : 4E75                		rts
(1) 2449/  FF1258 :                     
(1) 2450/  FF1258 :                     ; --------------------------------------------------------
(1) 2451/  FF1258 :                     ; Process objects
(1) 2452/  FF1258 :                     ; --------------------------------------------------------
(1) 2453/  FF1258 :                     
(1) 2454/  FF1258 :                     Objects_Run:
(1) 2455/  FF1258 : 4DF8 9000           		lea	(RAM_Objects),a6
(1) 2456/  FF125C : 3E3C 000F           		move.w	#MAX_MDOBJ-1,d7
(1) 2457/  FF1260 :                     .next_one:
(1) 2458/  FF1260 : 2C16                		move.l	obj_code(a6),d6
(1) 2459/  FF1262 : 6708                		beq.s	.no_code	; Free slot
(1) 2460/  FF1264 : 2F07                		move.l	d7,-(sp)
(1) 2461/  FF1266 : 2A46                		move.l	d6,a5
(1) 2462/  FF1268 : 4E95                		jsr	(a5)
(1) 2463/  FF126A : 2E1F                		move.l	(sp)+,d7
(1) 2464/  FF126C :                     .no_code:
(1) 2465/  FF126C : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 2466/  FF1270 : 51CF FFEE           		dbf	d7,.next_one
(1) 2467/  FF1274 : 4E75                		rts
(1) 2468/  FF1276 :                     
(1) 2469/  FF1276 :                     ; --------------------------------------------------------
(1) 2470/  FF1276 :                     ; Draw ALL Objects from display list
(1) 2471/  FF1276 :                     ;
(1) 2472/  FF1276 :                     ; Call this BEFORE VBlank.
(1) 2473/  FF1276 :                     ; --------------------------------------------------------
(1) 2474/  FF1276 :                     
(1) 2475/  FF1276 :                     Objects_Show:
(1) 2476/  FF1276 : 7E01                		moveq	#1,d7				; d7 - MD Link
(1) 2477/  FF1278 : 4DF8 9FD4           		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 2478/  FF127C :                     
(1) 2479/  FF127C : 3C38 A994           		move.w	(RAM_SprDrwCntr),d6
(1) 2480/  FF1280 : 6732                		beq.s	.no_sprdrw
(1) 2481/  FF1282 : 4278 A994           		clr.w	(RAM_SprDrwCntr).w
(1) 2482/  FF1286 : 4BF8 9B74           		lea	(RAM_SprDrwPz),a5
(1) 2483/  FF128A : 9C7C 0001           		sub.w	#1,d6
(1) 2484/  FF128E :                     .nexts:
(1) 2485/  FF128E : BE7C 0046           		cmp.w	#70,d7
(1) 2486/  FF1292 : 6C20                		bge.s	.no_sprdrw
(1) 2487/  FF1294 : 301D                		move.w	(a5)+,d0
(1) 2488/  FF1296 : 321D                		move.w	(a5)+,d1	; custom
(1) 2489/  FF1298 : C27C 00FF           		and.w	#$FF,d1
(1) 2490/  FF129C : E149                		lsl.w	#8,d1
(1) 2491/  FF129E : 8247                		or.w	d7,d1
(1) 2492/  FF12A0 : 341D                		move.w	(a5)+,d2
(1) 2493/  FF12A2 : 361D                		move.w	(a5)+,d3
(1) 2494/  FF12A4 : 3CC0                		move.w	d0,(a6)+
(1) 2495/  FF12A6 : 3CC1                		move.w	d1,(a6)+
(1) 2496/  FF12A8 : 3CC2                		move.w	d2,(a6)+
(1) 2497/  FF12AA : 3CC3                		move.w	d3,(a6)+
(1) 2498/  FF12AC : DE7C 0001           		add.w	#1,d7
(1) 2499/  FF12B0 : 51CE FFDC           		dbf	d6,.nexts
(1) 2500/  FF12B4 :                     .no_sprdrw:
(1) 2501/  FF12B4 :                     
(1) 2502/  FF12B4 :                     	; Draw mappings from sprites
(1) 2503/  FF12B4 : 4BF8 9B54           		lea	(RAM_ObjDispList),a5
(1) 2504/  FF12B8 : 49F8 B23A           		lea	(RAM_MdDreq+Dreq_SuperSpr),a4	; a4 - 32X SUPER Sprites
(1) 2505/  FF12BC : 3C3C 000F           		move.w	#MAX_MDOBJ-1,d6
(1) 2506/  FF12C0 :                     .next:
(1) 2507/  FF12C0 : 3015                		move.w	(a5),d0
(1) 2508/  FF12C2 : 6700 00E2           		beq	.finish
(1) 2509/  FF12C6 : 72FF                		moveq	#-1,d1
(1) 2510/  FF12C8 : 3200                		move.w	d0,d1
(1) 2511/  FF12CA : 2441                		move.l	d1,a2
(1) 2512/  FF12CC : 206A 0010           		move.l	obj_map(a2),a0		; Read mapping
(1) 2513/  FF12D0 : 082A 0007 0023      		btst	#bitobj_Mars,obj_set(a2)
(1) 2514/  FF12D6 : 6656                		bne.s	.mars_mode
(1) 2515/  FF12D8 : BE7C 0046           		cmp.w	#70,d7
(1) 2516/  FF12DC : 6C00 00C2           		bge	.mk_spr
(1) 2517/  FF12E0 : 302A 001E           		move.w	obj_frame(a2),d0
(1) 2518/  FF12E4 : D040                		add.w	d0,d0
(1) 2519/  FF12E6 : 3030 0000           		move.w	(a0,d0.w),d0
(1) 2520/  FF12EA : D0C0                		adda	d0,a0
(1) 2521/  FF12EC : 3A18                		move.w	(a0)+,d5
(1) 2522/  FF12EE : 6700 00B0           		beq	.mk_spr
(1) 2523/  FF12F2 : 9A7C 0001           		sub.w	#1,d5
(1) 2524/  FF12F6 :                     .mk_pz:
(1) 2525/  FF12F6 :                     	; TODO: H/V flip
(1) 2526/  FF12F6 : 1018                		move.b	(a0)+,d0
(1) 2527/  FF12F8 : 4880                		ext.w	d0
(1) 2528/  FF12FA : D06A 000C           		add.w	obj_y(a2),d0
(1) 2529/  FF12FE : D07C 0080           		add.w	#$80,d0
(1) 2530/  FF1302 : 1218                		move.b	(a0)+,d1
(1) 2531/  FF1304 : E149                		lsl.w	#8,d1
(1) 2532/  FF1306 : 8247                		or.w	d7,d1
(1) 2533/  FF1308 : 3418                		move.w	(a0)+,d2
(1) 2534/  FF130A : D46A 0014           		add.w	obj_vram(a2),d2
(1) 2535/  FF130E : D0FC 0002           		adda	#2,a0
(1) 2536/  FF1312 : 3618                		move.w	(a0)+,d3
(1) 2537/  FF1314 : D66A 0008           		add.w	obj_x(a2),d3
(1) 2538/  FF1318 : D67C 0080           		add.w	#$80,d3
(1) 2539/  FF131C : 3CC0                		move.w	d0,(a6)+
(1) 2540/  FF131E : 3CC1                		move.w	d1,(a6)+
(1) 2541/  FF1320 : 3CC2                		move.w	d2,(a6)+
(1) 2542/  FF1322 : 3CC3                		move.w	d3,(a6)+
(1) 2543/  FF1324 : DE7C 0001           		add.w	#1,d7
(1) 2544/  FF1328 : 51CD FFCC           		dbf	d5,.mk_pz
(1) 2545/  FF132C : 6072                		bra.s	.mk_spr
(1) 2546/  FF132E :                     
(1) 2547/  FF132E :                     .mars_mode:
(1) 2548/  FF132E : 2958 0010           		move.l	(a0)+,marsspr_data(a4)
(1) 2549/  FF1332 : 3958 0008           		move.w	(a0)+,marsspr_dwidth(a4)
(1) 2550/  FF1336 : 3958 000A           		move.w	(a0)+,marsspr_indx(a4)
(1) 2551/  FF133A : 1418                		move.b	(a0)+,d2
(1) 2552/  FF133C : 1618                		move.b	(a0)+,d3
(1) 2553/  FF133E : 1942 0002           		move.b	d2,marsspr_xs(a4)
(1) 2554/  FF1342 : 1943 0003           		move.b	d3,marsspr_ys(a4)
(1) 2555/  FF1346 : 302A 001E           		move.w	obj_frame(a2),d0	; Read frame
(1) 2556/  FF134A : 1880                		move.b	d0,marsspr_xfrm(a4)
(1) 2557/  FF134C : E058                		ror.w	#8,d0
(1) 2558/  FF134E : 1940 0001           		move.b	d0,marsspr_yfrm(a4)
(1) 2559/  FF1352 : 382A 0008           		move.w	obj_x(a2),d4
(1) 2560/  FF1356 : 3A2A 000C           		move.w	obj_y(a2),d5
(1) 2561/  FF135A : C47C 00FF           		and.w	#$FF,d2
(1) 2562/  FF135E : C67C 00FF           		and.w	#$FF,d3
(1) 2563/  FF1362 : E24A                		lsr.w	#1,d2
(1) 2564/  FF1364 : E24B                		lsr.w	#1,d3
(1) 2565/  FF1366 :                     ; 		divu.w	#2,d2			; **
(1) 2566/  FF1366 : 9842                		sub.w	d2,d4
(1) 2567/  FF1368 :                     ; 		divu.w	#2,d3			; **
(1) 2568/  FF1368 : 9A43                		sub.w	d3,d5
(1) 2569/  FF136A :                     ; 		move.l	obj_size(a2),d2		; d2 - UDLR sizes
(1) 2570/  FF136A :                     ; 		move.w	d2,d3			; Grab LR
(1) 2571/  FF136A :                     ; 		lsr.w	#5,d3
(1) 2572/  FF136A :                     ; 		and.w	#%11111000,d3
(1) 2573/  FF136A :                     ; 		sub.w	d3,d4			; Subtract X
(1) 2574/  FF136A :                     ; 		swap	d2
(1) 2575/  FF136A :                     ; 		move.w	d2,d3			; Grab UD
(1) 2576/  FF136A :                     ; 		lsr.w	#8,d3
(1) 2577/  FF136A :                     ; 		lsl.b	#3,d3
(1) 2578/  FF136A :                     ; 		and.w	#$FF,d3
(1) 2579/  FF136A :                     ; 		sub.w	d3,d5			; Subtract Y
(1) 2580/  FF136A : 43F8 B022           		lea	(RAM_BgBufferM),a1
(1) 2581/  FF136E : 9869 0030           		sub.w	md_bg_x(a1),d4
(1) 2582/  FF1372 : 9A69 0034           		sub.w	md_bg_y(a1),d5
(1) 2583/  FF1376 : 3944 0004           		move.w	d4,marsspr_x(a4)
(1) 2584/  FF137A : 3945 0006           		move.w	d5,marsspr_y(a4)
(1) 2585/  FF137E : 7800                		moveq	#0,d4
(1) 2586/  FF1380 : 082A 0000 0023      		btst	#bitobj_flipH,obj_set(a2)
(1) 2587/  FF1386 : 6704                		beq.s	.flip_h
(1) 2588/  FF1388 : 08C4 0000           		bset	#0,d4
(1) 2589/  FF138C :                     .flip_h:
(1) 2590/  FF138C : 082A 0001 0023      		btst	#bitobj_flipV,obj_set(a2)
(1) 2591/  FF1392 : 6704                		beq.s	.flip_v
(1) 2592/  FF1394 : 08C4 0001           		bset	#1,d4
(1) 2593/  FF1398 :                     .flip_v:
(1) 2594/  FF1398 : 3944 000C           		move.w	d4,marsspr_flags(a4)
(1) 2595/  FF139C : D8FC 0014           		adda	#sizeof_marsspr,a4	; Next SuperSprite
(1) 2596/  FF13A0 :                     .mk_spr:
(1) 2597/  FF13A0 : 425D                		clr.w	(a5)+			; Clear request
(1) 2598/  FF13A2 : 51CE FF1C           		dbf	d6,.next
(1) 2599/  FF13A6 :                     .finish:
(1) 2600/  FF13A6 : 4DF8 9FD4           		lea	(RAM_Sprites),a6	; a6 - Genesis sprites
(1) 2601/  FF13AA : 3C07                		move.w	d7,d6
(1) 2602/  FF13AC : BE7C 0046           		cmp.w	#70,d7
(1) 2603/  FF13B0 : 6C0A                		bge.s	.ran_out
(1) 2604/  FF13B2 : 9C7C 0001           		sub.w	#1,d6
(1) 2605/  FF13B6 : E74E                		lsl.w	#3,d6
(1) 2606/  FF13B8 : DCC6                		adda	d6,a6
(1) 2607/  FF13BA : 4296                		clr.l	(a6)			; TODO: endoflist check
(1) 2608/  FF13BC :                     .ran_out:
(1) 2609/  FF13BC : 4E75                		rts
(1) 2610/  FF13BE :                     
(1) 2611/  FF13BE :                     ; ----------------------------------------------------------------
(1) 2612/  FF13BE :                     ; Subroutines
(1) 2613/  FF13BE :                     ; ----------------------------------------------------------------
(1) 2614/  FF13BE :                     
(1) 2615/  FF13BE :                     ; --------------------------------------------------------
(1) 2616/  FF13BE :                     ; object_Display
(1) 2617/  FF13BE :                     ;
(1) 2618/  FF13BE :                     ; Builds a sprite using map data specified in
(1) 2619/  FF13BE :                     ; obj_map(a6)
(1) 2620/  FF13BE :                     ;
(1) 2621/  FF13BE :                     ; *** GENESIS map ***
(1) 2622/  FF13BE :                     ; mapdata:
(1) 2623/  FF13BE :                     ;       dc.w .frame0-mapdata
(1) 2624/  FF13BE :                     ;       dc.w .frame1-mapdata
(1) 2625/  FF13BE :                     ;       ...
(1) 2626/  FF13BE :                     ; .frame0:
(1) 2627/  FF13BE :                     ;       dc.w numofpz
(1) 2628/  FF13BE :                     ;       dc.b YY,SS
(1) 2629/  FF13BE :                     ;       dc.w vram_normal
(1) 2630/  FF13BE :                     ;       dc.w vram_half
(1) 2631/  FF13BE :                     ;       dc.w XXXX
(1) 2632/  FF13BE :                     ;       align 2
(1) 2633/  FF13BE :                     ;
(1) 2634/  FF13BE :                     ; *** 32X map ***
(1) 2635/  FF13BE :                     ; mapdata:
(1) 2636/  FF13BE :                     ; 	dc.l SH2_ADDR|TH ; Spritesheet location (TH opt.)
(1) 2637/  FF13BE :                     ; 	dc.w 512	 ; Spritesheet WIDTH
(1) 2638/  FF13BE :                     ; 	dc.b 64,72	 ; Frame width and height
(1) 2639/  FF13BE :                     ; 	dc.w $80	 ; Palette index
(1) 2640/  FF13BE :                     ;
(1) 2641/  FF13BE :                     ; obj_frame(a6) is in YYXX direction
(1) 2642/  FF13BE :                     ;
(1) 2643/  FF13BE :                     ; Input:
(1) 2644/  FF13BE :                     ; a6 - Object
(1) 2645/  FF13BE :                     ;
(1) 2646/  FF13BE :                     ; Uses:
(1) 2647/  FF13BE :                     ; a5,d7
(1) 2648/  FF13BE :                     ; --------------------------------------------------------
(1) 2649/  FF13BE :                     
(1) 2650/  FF13BE :                     object_Display:
(1) 2651/  FF13BE : 4BF8 9B54           		lea	(RAM_ObjDispList),a5
(1) 2652/  FF13C2 : 3E3C 000F           		move.w	#MAX_MDOBJ-1,d7
(1) 2653/  FF13C6 :                     .srch:
(1) 2654/  FF13C6 : 4A55                		tst.w	(a5)
(1) 2655/  FF13C8 : 6708                		beq.s	.this_one
(1) 2656/  FF13CA : DAFC 0002           		adda	#2,a5
(1) 2657/  FF13CE : 51CF FFF6           		dbf	d7,.srch
(1) 2658/  FF13D2 :                     .this_one:
(1) 2659/  FF13D2 : 3A8E                		move.w	a6,(a5)
(1) 2660/  FF13D4 : 4E75                		rts
(1) 2661/  FF13D6 :                     
(1) 2662/  FF13D6 :                     ; --------------------------------------------------------
(1) 2663/  FF13D6 :                     ; object_MkSprPz
(1) 2664/  FF13D6 :                     ;
(1) 2665/  FF13D6 :                     ; Makes separate sprite pieces using
(1) 2666/  FF13D6 :                     ;
(1) 2667/  FF13D6 :                     ; Input:
(1) 2668/  FF13D6 :                     ; d0 - X pos
(1) 2669/  FF13D6 :                     ; d1 - Y pos
(1) 2670/  FF13D6 :                     ; d2 - VRAM
(1) 2671/  FF13D6 :                     ; d3 - Size
(1) 2672/  FF13D6 :                     :
(1) 2673/  FF13D6 :                     ; Uses:
(1) 2674/  FF13D6 :                     ; a5,d7
(1) 2675/  FF13D6 :                     ; --------------------------------------------------------
(1) 2676/  FF13D6 :                     
(1) 2677/  FF13D6 :                     object_MkSprPz:
(1) 2678/  FF13D6 : 3E38 A994           		move.w	(RAM_SprDrwCntr).w,d7
(1) 2679/  FF13DA : BE7C 0046           		cmp.w	#70,d7
(1) 2680/  FF13DE : 6C22                		bge.s	.nope
(1) 2681/  FF13E0 : E74F                		lsl.w	#3,d7
(1) 2682/  FF13E2 : 4BF8 9B74           		lea	(RAM_SprDrwPz),a5
(1) 2683/  FF13E6 : DAC7                		adda	d7,a5
(1) 2684/  FF13E8 : D07C 0080           		add.w	#$80,d0
(1) 2685/  FF13EC : D27C 0080           		add.w	#$80,d1
(1) 2686/  FF13F0 : C67C 00FF           		and.w	#$FF,d3
(1) 2687/  FF13F4 :                     ; 		lsl.w	#8,d3
(1) 2688/  FF13F4 : 3AC1                		move.w	d1,(a5)+
(1) 2689/  FF13F6 : 3AC3                		move.w	d3,(a5)+
(1) 2690/  FF13F8 : 3AC2                		move.w	d2,(a5)+
(1) 2691/  FF13FA : 3AC0                		move.w	d0,(a5)+
(1) 2692/  FF13FC : 0678 0001 A994      		add.w	#1,(RAM_SprDrwCntr).w
(1) 2693/  FF1402 :                     .nope:
(1) 2694/  FF1402 : 4E75                		rts
(1) 2695/  FF1404 :                     
(1) 2696/  FF1404 :                     ; --------------------------------------------------------
(1) 2697/  FF1404 :                     ; Object_Animate
(1) 2698/  FF1404 :                     ;
(1) 2699/  FF1404 :                     ; Animates the sprite
(1) 2700/  FF1404 :                     ;
(1) 2701/  FF1404 :                     ; Input
(1) 2702/  FF1404 :                     ; a0 | LONG - Animation data
(1) 2703/  FF1404 :                     ;
(1) 2704/  FF1404 :                     ; Output
(1) 2705/  FF1404 :                     ; d0 | WORD - Frame
(1) 2706/  FF1404 :                     ;
(1) 2707/  FF1404 :                     ; Uses:
(1) 2708/  FF1404 :                     ; d2
(1) 2709/  FF1404 :                     ; --------------------------------------------------------
(1) 2710/  FF1404 :                     
(1) 2711/  FF1404 :                     ; NOTE: to restart an animation
(1) 2712/  FF1404 :                     ; clear obj_anim_indx(a6) manually
(1) 2713/  FF1404 :                     
(1) 2714/  FF1404 :                     Object_Animate:
(1) 2715/  FF1404 :                     ;  		tst.l	d1
(1) 2716/  FF1404 :                     ;   		beq.s	.return
(1) 2717/  FF1404 : 7400                 		moveq	#0,d2
(1) 2718/  FF1406 : 142E 001D            		move.b	obj_anim_id+1(a6),d2
(1) 2719/  FF140A : B42E 001C            		cmp.b	obj_anim_id(a6),d2
(1) 2720/  FF140E : 670E                 		beq.s	.sameThing
(1) 2721/  FF1410 : 1D6E 001C 001D       		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2722/  FF1416 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2723/  FF141A : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2724/  FF141E :                     .sameThing:
(1) 2725/  FF141E : 142E 001C            		move.b	obj_anim_id(a6),d2
(1) 2726/  FF1422 : B43C 00FF            		cmp.b	#-1,d2
(1) 2727/  FF1426 : 6748                 		beq.s	.return
(1) 2728/  FF1428 : D442                 		add.w	d2,d2
(1) 2729/  FF142A : 3430 2000            		move.w	(a0,d2.w),d2
(1) 2730/  FF142E : 41F0 2000            		lea	(a0,d2.w),a0
(1) 2731/  FF1432 :                     
(1) 2732/  FF1432 : 3418                 		move.w	(a0)+,d2
(1) 2733/  FF1434 : B47C FFFF            		cmp.w	#-1,d2
(1) 2734/  FF1438 : 670C                 		beq.s	.keepspd
(1) 2735/  FF143A : 042E 0001 0020       		sub.b	#1,obj_anim_spd(a6)
(1) 2736/  FF1440 : 6A2E                 		bpl.s	.return
(1) 2737/  FF1442 : 1D42 0020           		move.b	d2,obj_anim_spd(a6)
(1) 2738/  FF1446 :                     .keepspd:
(1) 2739/  FF1446 : 7200                 		moveq	#0,d1
(1) 2740/  FF1448 : 342E 001A            		move.w	obj_anim_indx(a6),d2
(1) 2741/  FF144C : D442                 		add.w	d2,d2
(1) 2742/  FF144E : 3210                 		move.w	(a0),d1
(1) 2743/  FF1450 : D0C2                 		adda	d2,a0
(1) 2744/  FF1452 : 3010                 		move.w	(a0),d0
(1) 2745/  FF1454 : B07C FFFF            		cmp.w	#-1,d0
(1) 2746/  FF1458 : 6718                 		beq.s	.noAnim		; loop
(1) 2747/  FF145A : B07C FFFE            		cmp.w	#-2,d0
(1) 2748/  FF145E : 6720                 		beq.s	.lastFrame	; finish
(1) 2749/  FF1460 : B07C FFFD            		cmp.w	#-3,d0
(1) 2750/  FF1464 : 6720                 		beq.s	.goToFrame
(1) 2751/  FF1466 :                     
(1) 2752/  FF1466 : 3D40 001E            		move.w	d0,obj_frame(a6)
(1) 2753/  FF146A : 066E 0001 001A       		add.w	#1,obj_anim_indx(a6)
(1) 2754/  FF1470 :                     .return:
(1) 2755/  FF1470 : 4E75                 		rts
(1) 2756/  FF1472 :                     
(1) 2757/  FF1472 :                     .noAnim:
(1) 2758/  FF1472 : 3D7C 0001 001A       		move.w	#1,obj_anim_indx(a6)
(1) 2759/  FF1478 : 3001                 		move.w	d1,d0
(1) 2760/  FF147A : 3D40 001E            		move.w	d0,obj_frame(a6)
(1) 2761/  FF147E : 4E75                		rts
(1) 2762/  FF1480 :                     .lastFrame:
(1) 2763/  FF1480 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2764/  FF1484 : 4E75                		rts
(1) 2765/  FF1486 :                     .goToFrame:
(1) 2766/  FF1486 : 426E 001A           		clr.w	obj_anim_indx(a6)
(1) 2767/  FF148A : 3D68 0002 001A      		move.w	2(a0),obj_anim_indx(a6)
(1) 2768/  FF1490 : 4E75                		rts
(1) 2769/  FF1492 :                     
(1) 2770/  FF1492 :                     ; --------------------------------------------------------
(1) 2771/  FF1492 :                     ; object_Speed
(1) 2772/  FF1492 :                     ;
(1) 2773/  FF1492 :                     ; Moves the object using speed settings
(1) 2774/  FF1492 :                     ;
(1) 2775/  FF1492 :                     ; Input:
(1) 2776/  FF1492 :                     ; a6 - Object
(1) 2777/  FF1492 :                     ;
(1) 2778/  FF1492 :                     ; Uses:
(1) 2779/  FF1492 :                     ; d7
(1) 2780/  FF1492 :                     ; --------------------------------------------------------
(1) 2781/  FF1492 :                     
(1) 2782/  FF1492 :                     object_UpdX:
(1) 2783/  FF1492 : 7E00                		moveq	#0,d7
(1) 2784/  FF1494 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2785/  FF1498 : 48C7                		ext.l	d7
(1) 2786/  FF149A : E187                		asl.l	#8,d7
(1) 2787/  FF149C : DFAE 0008           		add.l	d7,obj_x(a6)
(1) 2788/  FF14A0 : 4E75                		rts
(1) 2789/  FF14A2 :                     object_Speed:
(1) 2790/  FF14A2 : 61EE                		bsr.s	object_UpdX
(1) 2791/  FF14A4 :                     object_UpdY:
(1) 2792/  FF14A4 : 7E00                		moveq	#0,d7
(1) 2793/  FF14A6 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2794/  FF14AA : 48C7                		ext.l	d7
(1) 2795/  FF14AC : E187                		asl.l	#8,d7
(1) 2796/  FF14AE : DFAE 000C           		add.l	d7,obj_y(a6)
(1) 2797/  FF14B2 : 4E75                		rts
(1) 2798/  FF14B4 :                     
(1) 2799/  FF14B4 :                     ; --------------------------------------------------------
(1) 2800/  FF14B4 :                     ; object_ColM_Floor
(1) 2801/  FF14B4 :                     ;
(1) 2802/  FF14B4 :                     ; Check object collision on 32X map's floor
(1) 2803/  FF14B4 :                     ;
(1) 2804/  FF14B4 :                     ; Input:
(1) 2805/  FF14B4 :                     ; a6 - Object to check
(1) 2806/  FF14B4 :                     ;
(1) 2807/  FF14B4 :                     ; Returns:
(1) 2808/  FF14B4 :                     ; beq  - No collision
(1) 2809/  FF14B4 :                     ; bne  - Found collision
(1) 2810/  FF14B4 :                     ; d4.b - Collision block number
(1) 2811/  FF14B4 :                     ; d5.w - Y-pos center snap
(1) 2812/  FF14B4 :                     ;
(1) 2813/  FF14B4 :                     ; Uses:
(1) 2814/  FF14B4 :                     ; d4-d7,a4-a5
(1) 2815/  FF14B4 :                     ; --------------------------------------------------------
(1) 2816/  FF14B4 :                     
(1) 2817/  FF14B4 :                     ; 32X MAP SIDE
(1) 2818/  FF14B4 :                     
(1) 2819/  FF14B4 :                     object_ColM_Floor:
(1) 2820/  FF14B4 : 4BF8 B022           		lea	(RAM_BgBufferM),a5
(1) 2821/  FF14B8 : 7A00                		moveq	#0,d5
(1) 2822/  FF14BA : 7800                		moveq	#0,d4
(1) 2823/  FF14BC : 286D 002C           		move.l	md_bg_col(a5),a4
(1) 2824/  FF14C0 : 3E2D 000C           		move.w	md_bg_wf(a5),d7
(1) 2825/  FF14C4 : 9E7C 0001           		sub.w	#1,d7
(1) 2826/  FF14C8 : 382E 0008           		move.w	obj_x(a6),d4
(1) 2827/  FF14CC : 6A02                		bpl.s	.v_x
(1) 2828/  FF14CE : 4244                		clr.w	d4
(1) 2829/  FF14D0 :                     .v_x:
(1) 2830/  FF14D0 : B847                		cmp.w	d7,d4
(1) 2831/  FF14D2 : 6D02                		blt.s	.v_xr
(1) 2832/  FF14D4 : 3807                		move.w	d7,d4
(1) 2833/  FF14D6 :                     .v_xr:
(1) 2834/  FF14D6 : 3E2D 000E           		move.w	md_bg_hf(a5),d7
(1) 2835/  FF14DA : 9E7C 0001           		sub.w	#1,d7
(1) 2836/  FF14DE : 3A2E 000C           		move.w	obj_y(a6),d5
(1) 2837/  FF14E2 : 6A02                		bpl.s	.v_y
(1) 2838/  FF14E4 : 4245                		clr.w	d5
(1) 2839/  FF14E6 :                     .v_y:
(1) 2840/  FF14E6 : BA47                		cmp.w	d7,d5
(1) 2841/  FF14E8 : 6D02                		blt.s	.v_yd
(1) 2842/  FF14EA : 3A07                		move.w	d7,d5
(1) 2843/  FF14EC :                     .v_yd:
(1) 2844/  FF14EC : 2E2E 0004           		move.l	obj_size(a6),d7
(1) 2845/  FF14F0 : 4847                		swap	d7		; Add Y
(1) 2846/  FF14F2 : CE7C 00FF           		and.w	#$FF,d7
(1) 2847/  FF14F6 : 3C07                		move.w	d7,d6
(1) 2848/  FF14F8 : E74E                		lsl.w	#3,d6
(1) 2849/  FF14FA : DA46                		add.w	d6,d5
(1) 2850/  FF14FC :                     
(1) 2851/  FF14FC :                     	; d5 - Ypos + size
(1) 2852/  FF14FC :                     	; d6 - Xpos
(1) 2853/  FF14FC :                     	; d7 - Dsize/2
(1) 2854/  FF14FC :                     
(1) 2855/  FF14FC :                     	; 16x16 only
(1) 2856/  FF14FC : E24F                		lsr.w	#1,d7		; Dsize/2
(1) 2857/  FF14FE : E844                		asr.w	#4,d4		; X >> 16
(1) 2858/  FF1500 : D9C4                		add.l	d4,a4		; Add X
(1) 2859/  FF1502 : 2805                		move.l	d5,d4		; Copy d5 to d4
(1) 2860/  FF1504 : E844                		asr.w	#4,d4		; Y >> 16
(1) 2861/  FF1506 : 7C00                		moveq	#0,d6
(1) 2862/  FF1508 : 3C2D 0008           		move.w	md_bg_w(a5),d6	; d6: map width
(1) 2863/  FF150C : C8C6                		mulu.w	d6,d4		; (Y>>16)*(mwidth)
(1) 2864/  FF150E : D9C4                		add.l	d4,a4		; Add Y
(1) 2865/  FF1510 : CA7C FFF0           		and.w	#-$10,d5	; Filter Y Snap
(1) 2866/  FF1514 : 1814                		move.b	(a4),d4		; d4: Start ID
(1) 2867/  FF1516 : 99C6                		sub.l	d6,a4
(1) 2868/  FF1518 : 9E7C 0001           		sub.w	#1,d7		; Dsize - 1
(1) 2869/  FF151C : 6B14                		bmi.s	.valid
(1) 2870/  FF151E :                     .next:
(1) 2871/  FF151E : 4847                		swap	d7
(1) 2872/  FF1520 : 1E14                		move.b	(a4),d7		; New ID != 0?
(1) 2873/  FF1522 : 6706                		beq.s	.blnk
(1) 2874/  FF1524 : 1807                		move.b	d7,d4		; Set new ID
(1) 2875/  FF1526 : 9A7C 0010           		sub.w	#$10,d5		; Decrement Y Snap
(1) 2876/  FF152A :                     .blnk:
(1) 2877/  FF152A : 99C6                		sub.l	d6,a4		; Decrement width
(1) 2878/  FF152C : 4847                		swap	d7
(1) 2879/  FF152E : 51CF FFEE           		dbf	d7,.next
(1) 2880/  FF1532 :                     .valid:
(1) 2881/  FF1532 : C87C 00FF           		and.w	#$FF,d4		; Filter ID
(1) 2882/  FF1536 : 4E75                		rts
(1) 2883/  FF1538 :                     
(1) 2884/  FF1538 :                     ; ----------------------------------------
(1) 2885/  FF1538 :                     ; object_SetColFloor
(1) 2886/  FF1538 :                     ;
(1) 2887/  FF1538 :                     ; Snaps the object to the map's floor.
(1) 2888/  FF1538 :                     ;
(1) 2889/  FF1538 :                     ; Call object_ColM_Floor first
(1) 2890/  FF1538 :                     ;
(1) 2891/  FF1538 :                     ; Input:
(1) 2892/  FF1538 :                     ; d4.b - Collision block
(1) 2893/  FF1538 :                     ; d5.w - Y-pos center snap
(1) 2894/  FF1538 :                     ; ----------------------------------------
(1) 2895/  FF1538 :                     
(1) 2896/  FF1538 :                     object_SetColFloor:
(1) 2897/  FF1538 : C87C 00FF           		and.w	#$FF,d4
(1) 2898/  FF153C : 6744                		beq.s	.no_col
(1) 2899/  FF153E : E94C                		lsl.w	#4,d4
(1) 2900/  FF1540 : 3E2E 0008           		move.w	obj_x(a6),d7		; Grab CENTER X
(1) 2901/  FF1544 : CE7C 000F           		and.w	#$0F,d7			; limit to 16
(1) 2902/  FF1548 : 41FA 003A           		lea	slope_data_16(pc),a0
(1) 2903/  FF154C : D0C4                		adda	d4,a0
(1) 2904/  FF154E : 1830 7000           		move.b	(a0,d7.w),d4
(1) 2905/  FF1552 : C87C 000F           		and.w	#$0F,d4
(1) 2906/  FF1556 :                     
(1) 2907/  FF1556 : 7C00                		moveq	#0,d6
(1) 2908/  FF1558 : 3E2E 000C           		move.w	obj_y(a6),d7
(1) 2909/  FF155C : 2C2E 0004           		move.l	obj_size(a6),d6
(1) 2910/  FF1560 : 4846                		swap	d6
(1) 2911/  FF1562 : CC7C 00FF           		and.w	#$FF,d6
(1) 2912/  FF1566 : E74E                		lsl.w	#3,d6
(1) 2913/  FF1568 : 9A46                		sub.w	d6,d5
(1) 2914/  FF156A : DA44                		add.w	d4,d5	; target slope
(1) 2915/  FF156C : BE45                		cmp.w	d5,d7
(1) 2916/  FF156E : 6F12                		ble.s	.no_col
(1) 2917/  FF1570 : 3C3C 0800           		move.w	#$800,d6
(1) 2918/  FF1574 : 3D46 0018           		move.w	d6,obj_y_spd(a6)
(1) 2919/  FF1578 :                     ; .set_me:
(1) 2920/  FF1578 :                     ; 		move.w	obj_x_spd(a6),d6
(1) 2921/  FF1578 :                     ; 		bpl.s	.x_spd
(1) 2922/  FF1578 :                     ; 		neg.w	d6
(1) 2923/  FF1578 :                     ; .x_spd:
(1) 2924/  FF1578 :                     
(1) 2925/  FF1578 : 08AE 0000 0024      		bclr	#bitobj_air,obj_status(a6)
(1) 2926/  FF157E : 3D45 000C           		move.w	d5,obj_y(a6)
(1) 2927/  FF1582 :                     .no_col:
(1) 2928/  FF1582 : 4E75                		rts
(1) 2929/  FF1584 :                     
(1) 2930/  FF1584 :                     ; ----------------------------------------
(1) 2931/  FF1584 :                     
(1) 2932/  FF1584 :                     ; Slope data 16x16
(1) 2933/  FF1584 :                     slope_data_16:
(1) 2934/  FF1584 : 0000 0000 0000 0000 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    0000 0000 0000 0000 
(1) 2935/  FF1594 : 0000 0000 0000 0000 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    0000 0000 0000 0000 
(1) 2936/  FF15A4 : 0000 0000 0000 0000 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    0000 0000 0000 0000 
(1) 2937/  FF15B4 : 0F0E 0D0C 0B0A 0908 		dc.b 15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
                    0706 0504 0302 0100 
(1) 2938/  FF15C4 : 0001 0203 0405 0607 		dc.b  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15
                    0809 0A0B 0C0D 0E0F 
(1) 2939/  FF15D4 : 0F0F 0E0E 0D0D 0C0C 		dc.b 15,15,14,14,13,13,12,12,11,11,10,10, 9, 9, 8, 8
                    0B0B 0A0A 0909 0808 
(1) 2940/  FF15E4 : 0707 0606 0505 0404 		dc.b  7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0
                    0303 0202 0101 0000 
(1) 2941/  FF15F4 : 0000 0101 0202 0303 		dc.b  0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
                    0404 0505 0606 0707 
(1) 2942/  FF1604 : 0808 0909 0A0A 0B0B 		dc.b  8, 8, 9, 9,10,10,11,11,12,12,13,13,14,14,15,15
                    0C0C 0D0D 0E0E 0F0F 
(1) 2943/  FF1614 :                     		align 2
(1) 2944/  FF1614 :                     
      41/  FF1614 :                     		include	"system/md/system.asm"
(1)    1/  FF1614 :                     ; ====================================================================
(1)    2/  FF1614 :                     ; ----------------------------------------------------------------
(1)    3/  FF1614 :                     ; Genesis system routines
(1)    4/  FF1614 :                     ; ----------------------------------------------------------------
(1)    5/  FF1614 :                     
(1)    6/  FF1614 :                     ; ====================================================================
(1)    7/  FF1614 :                     ; ----------------------------------------------------------------
(1)    8/  FF1614 :                     ; RAM section
(1)    9/  FF1614 :                     ; ----------------------------------------------------------------
(1)   10/  FF1614 :                     
(1)   11/  FF1614 : (MACRO)             		struct RAM_MdSystem
(1)   11/  FF1614 :                     
(1)   11/  FF1614 :                     ;       if WPATCH=1
(1)   11/  FF1614 :                     ; GLBL_LASTPC   set *
(1)   11/  FF1614 :                     ; GLBL_LASTORG  set *
(1)   11/  FF1614 :                     ;               dephase
(1)   11/  FF1614 :                     ;               phase RAM_MDSYSTEM
(1)   11/  FF1614 :                     ;       else
(1)   11/  FF1614 : =$FF1614            GLBL_LASTPC     set *
(1)   11/    1EDC :                                     dephase
(1)   11/    1EDC : =$1EDC              GLBL_LASTORG    set *
(1)   11/FFFFFFFFFFFFA9C6 :                                     phase RAM_MDSYSTEM
(1)   11/FFFFFFFFFFFFA9C6 :                     ;       endif
(1)   12/FFFFFFFFFFFFA9C6 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   13/FFFFFFFFFFFFAA06 :                     RAM_SaveData	ds.b $200			; SRAM data cache
(1)   14/FFFFFFFFFFFFAC06 :                     RAM_DmaCode	ds.b $200
(1)   15/FFFFFFFFFFFFAE06 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   16/FFFFFFFFFFFFAE0A :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   17/FFFFFFFFFFFFAE0E :                     RAM_initflug	ds.l 1				; "INIT" flag
(1)   18/FFFFFFFFFFFFAE12 :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   19/FFFFFFFFFFFFAE18 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   20/FFFFFFFFFFFFAE1E :                     RAM_MdVBlkWait	ds.w 1
(1)   21/FFFFFFFFFFFFAE20 :                     RAM_SysFlags	ds.w 1				; Game engine flags (note: it's a byte)
(1)   22/FFFFFFFFFFFFAE22 :                     sizeof_mdsys	ds.l 0
(1)   23/FFFFFFFFFFFFAE22 : (MACRO)             		finish
(1)   23/FFFFFFFFFFFFA9C6 :                                     !org GLBL_LASTORG
(1)   23/  FF1614 :                                     phase GLBL_LASTPC
(1)   24/  FF1614 :                     
(1)   25/  FF1614 :                     ; ====================================================================
(1)   26/  FF1614 :                     ; --------------------------------------------------------
(1)   27/  FF1614 :                     ; Init System
(1)   28/  FF1614 :                     ; 
(1)   29/  FF1614 :                     ; Uses:
(1)   30/  FF1614 :                     ; a0-a2,d0-d1
(1)   31/  FF1614 :                     ; --------------------------------------------------------
(1)   32/  FF1614 :                     
(1)   33/  FF1614 :                     System_Init:
(1)   34/  FF1614 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)   35/  FF1618 : 40E7                		move.w	sr,-(sp)
(1)   36/  FF161A : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)   37/  FF1622 :                     .wait:
(1)   38/  FF1622 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(1)   39/  FF162A : 66F6                		bne.s	.wait
(1)   40/  FF162C : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)   41/  FF162E : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)   42/  FF1634 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)   43/  FF163A : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)   44/  FF1640 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; Enable Z80
(1)   45/  FF1648 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)   46/  FF164C : 33C0 FFFF AE12       		move.w	d0,(RAM_MdMarsVInt).l
(1)   47/  FF1652 : 33C0 FFFF AE18      		move.w	d0,(RAM_MdMarsHInt).l
(1)   48/  FF1658 :                     ; 		move.l	#$56255769,d0		; Set these random values
(1)   49/  FF1658 :                     ; 		move.l	#$95116102,d1
(1)   50/  FF1658 :                     ; 		move.l	d0,(RAM_SysRandVal).l
(1)   51/  FF1658 :                     ; 		move.l	d1,(RAM_SysRandSeed).l
(1)   52/  FF1658 : 203C 00FF 1B3E      		move.l	#VInt_Default,d0	; Set default ints
(1)   53/  FF165E : 223C 00FF 1B56      		move.l	#Hint_Default,d1
(1)   54/  FF1664 : 6100 0428           		bsr	System_SetInts
(1)   55/  FF1668 : 41F8 A9C6           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)   56/  FF166C : 323C 0010           		move.w	#sizeof_input-1/2,d1
(1)   57/  FF1670 : 7000                		moveq	#0,d0
(1)   58/  FF1672 :                     .clrinput:
(1)   59/  FF1672 : 30FC 0000           		move.w	#0,(a0)+
(1)   60/  FF1676 : 51C9 FFFA           		dbf	d1,.clrinput
(1)   61/  FF167A : 46DF                		move.w	(sp)+,sr
(1)   62/  FF167C : 4E75                		rts
(1)   63/  FF167E :                     
(1)   64/  FF167E :                     ; 		lea	(vdp_ctrl),a6
(1)   65/  FF167E :                     ; .wait_in:	move.w	(a6),d4
(1)   66/  FF167E :                     ; 		btst	#bitVBlk,d4
(1)   67/  FF167E :                     ; 		beq.s	.wait_in
(1)   68/  FF167E :                     ; .wait_out:	move.w	(a6),d4
(1)   69/  FF167E :                     ; 		btst	#bitVBlk,d4
(1)   70/  FF167E :                     ; 		bne.s	.wait_out
(1)   71/  FF167E :                     ; 		bra	System_MarsUpdate
(1)   72/  FF167E :                     
(1)   73/  FF167E :                     ; --------------------------------------------------------
(1)   74/  FF167E :                     ; System_WaitFrame
(1)   75/  FF167E :                     ;
(1)   76/  FF167E :                     ; Call this to wait until the next frame.
(1)   77/  FF167E :                     ;
(1)   78/  FF167E :                     ; Before entering VBlank:
(1)   79/  FF167E :                     ; - The DREQ section from here will be transfered
(1)   80/  FF167E :                     ; to the 32X side then processed on the next
(1)   81/  FF167E :                     ; frame.
(1)   82/  FF167E :                     ;
(1)   83/  FF167E :                     ; Inside VBlank this will:
(1)   84/  FF167E :                     ; - Update the controller inputs
(1)   85/  FF167E :                     ; - Transfer the Genesis palette, sprites and scroll
(1)   86/  FF167E :                     ;   data from from RAM to VDP
(1)   87/  FF167E :                     ;   (Doesn't require the RV bit)
(1)   88/  FF167E :                     ; --------------------------------------------------------
(1)   89/  FF167E :                     
(1)   90/  FF167E :                     System_WaitFrame:
(1)   91/  FF167E : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; <-- VSync IN
(1)   92/  FF1684 : 3816                .wait_lag:	move.w	(a6),d4
(1)   93/  FF1686 : 0804 0003           		btst	#bitVBlk,d4
(1)   94/  FF168A : 66F8                		bne.s	.wait_lag
(1)   95/  FF168C :                     ; 		bsr	Video_Mars_WaitFrame
(1)   96/  FF168C : 6100 00BC           		bsr	System_MarsUpdate
(1)   97/  FF1690 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)   98/  FF1696 : 3816                .wait_in:	move.w	(a6),d4			; We are on DISPLAY, wait for VBlank
(1)   99/  FF1698 : 0804 0003           		btst	#bitVBlk,d4
(1)  100/  FF169C : 67F8                		beq.s	.wait_in
(1)  101/  FF169E : 6100 00D6           		bsr	System_Input		; Read inputs FIRST
(1)  102/  FF16A2 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; *** DMA'd Scroll and Palette
(1)  103/  FF16A8 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  104/  FF16AC : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1)  105/  FF16B0 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  106/  FF16B4 : 3C87                		move.w	d7,(a6)
(1)  107/  FF16B6 : 6100 0082           		bsr	System_DmaEnter_RAM
(1)  108/  FF16BA : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  109/  FF16C0 : 2CBC 96CD 9582      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  110/  FF16C6 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  111/  FF16CA : 3CBC 4000           		move.w	#$4000,(a6)
(1)  112/  FF16CE : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  113/  FF16D2 : 3C9F                		move.w	(sp)+,(a6)
(1)  114/  FF16D4 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  115/  FF16DA : 2CBC 96CB 95A2      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  116/  FF16E0 : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  117/  FF16E4 : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  118/  FF16E8 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  119/  FF16EC : 3C9F                		move.w	(sp)+,(a6)
(1)  120/  FF16EE : 2CBC 9401 93C0      		move.l	#$940193C0,(a6)
(1)  121/  FF16F4 : 2CBC 96CF 95EA      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  122/  FF16FA : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  123/  FF16FE : 3CBC 7800           		move.w	#$7800,(a6)
(1)  124/  FF1702 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  125/  FF1706 : 3C9F                		move.w	(sp)+,(a6)
(1)  126/  FF1708 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  127/  FF170E : 2CBC 96D2 951A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  128/  FF1714 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  129/  FF1718 : 3CBC C000           		move.w	#$C000,(a6)
(1)  130/  FF171C : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  131/  FF1720 : 3C9F                		move.w	(sp)+,(a6)
(1)  132/  FF1722 : 611A                		bsr	System_DmaExit_RAM
(1)  133/  FF1724 : 3E3C 8100           		move.w	#$8100,d7
(1)  134/  FF1728 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1).w,d7
(1)  135/  FF172C : 3C87                		move.w	d7,(a6)
(1)  136/  FF172E : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_Framecount).l
                    9740                
(1)  137/  FF1738 : 4E75                		rts
(1)  138/  FF173A :                     
(1)  139/  FF173A :                     ; --------------------------------------------------------
(1)  140/  FF173A :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  141/  FF173A :                     ; (from): ROM or RAM
(1)  142/  FF173A :                     ;
(1)  143/  FF173A :                     ; Call to these labels BEFORE and AFTER doing
(1)  144/  FF173A :                     ; DMA-to-VDP transers.
(1)  145/  FF173A :                     ; These calls are not needed for FILL or COPY.
(1)  146/  FF173A :                     ;
(1)  147/  FF173A :                     ; ** For stock Genesis:
(1)  148/  FF173A :                     ;  | The Z80 cannot read from ROM while the
(1)  149/  FF173A :                     ;  | DMA ROM-to-VDP transfer is active.
(1)  150/  FF173A :                     ;  | THIS INCLUDES RAM TRANSFERS
(1)  151/  FF173A :                     ;  | ** Solution:
(1)  152/  FF173A :                     ;  | STOP the Z80 entirely OR
(1)  153/  FF173A :                     ;  | First stop, set a flag and turn ON the
(1)  154/  FF173A :                     ;  | Z80 again, If the Z80 reads the flags it
(1)  155/  FF173A :                     ;  | should be stuck on a loop until you clear
(1)  156/  FF173A :                     ;  | the flag from here after finishing your
(1)  157/  FF173A :                     ;  | DMA transfer(s)
(1)  158/  FF173A :                     ;
(1)  159/  FF173A :                     ; ** For the 32X:
(1)  160/  FF173A :                     ;  | SAME rule for the Genesis, but this time the
(1)  161/  FF173A :                     ;  | ROM-to-VDP transfer requires the RV bit to be set.
(1)  162/  FF173A :                     ;  | (RAM transfers doesn't require this bit at all.)
(1)  163/  FF173A :                     ;  | Setting the RV bit blocks the SH2 from accessing
(1)  164/  FF173A :                     ;  | the ROM area, THIS ALSO affects the Z80.
(1)  165/  FF173A :                     ;  | ** Solution:
(1)  166/  FF173A :                     ;  | First, make sure the SH2 isn't reading from ROM
(1)  167/  FF173A :                     ;  | while the bit is active, or it will read garbage
(1)  168/  FF173A :                     ;  | data.
(1)  169/  FF173A :                     ;  | In the case where you need to read from ROM
(1)  170/  FF173A :                     ;  | a lot (Playing PWM's for example):
(1)  171/  FF173A :                     ;  | First request an CMD interrupt and tell the
(1)  172/  FF173A :                     ;  | SH2 to backup a small amount of sample data
(1)  173/  FF173A :                     ;  | and temporally relocate the read point to the
(1)  174/  FF173A :                     ;  | backup until you make another
(1)  175/  FF173A :                     ;  | interrupt telling that you finished here and set
(1)  176/  FF173A :                     ;  | RV back to 0.
(1)  177/  FF173A :                     ;
(1)  178/  FF173A :                     ; This is where you put your Sound driver's Z80 stop
(1)  179/  FF173A :                     ; or pause calls go here
(1)  180/  FF173A :                     ; --------------------------------------------------------
(1)  181/  FF173A :                     
(1)  182/  FF173A :                     System_DmaEnter_RAM:
(1)  183/  FF173A : 6000 E9FE           		bra	gemaDmaPause
(1)  184/  FF173E :                     System_DmaExit_RAM:
(1)  185/  FF173E : 6000 EA22           		bra	gemaDmaResume
(1)  186/  FF1742 :                     
(1)  187/  FF1742 :                     ; --------------------------------------------------------
(1)  188/  FF1742 :                     
(1)  189/  FF1742 :                     System_DmaEnter_ROM:
(1)  190/  FF1742 : 6000 EA38           		bra	gemaDmaPauseRom
(1)  191/  FF1746 :                     System_DmaExit_ROM:
(1)  192/  FF1746 : 6000 EA64           		bra	gemaDmaResumeRom
(1)  193/  FF174A :                     
(1)  194/  FF174A :                     ; ====================================================================
(1)  195/  FF174A :                     ; ----------------------------------------------------------------
(1)  196/  FF174A :                     ; 32X ONLY
(1)  197/  FF174A :                     ; ----------------------------------------------------------------
(1)  198/  FF174A :                     
(1)  199/  FF174A :                     ; --------------------------------------------------------
(1)  200/  FF174A :                     ; System_MarsUpdate
(1)  201/  FF174A :                     ; --------------------------------------------------------
(1)  202/  FF174A :                     
(1)  203/  FF174A :                     System_MarsUpdate:
(1)  205/  FF174A : 41F8 AE22           		lea	(RAM_MdDreq),a0		; Send DREQ
(1)  206/  FF174E : 303C 05F8           		move.w	#sizeof_dreq,d0
(1)  207/  FF1752 : 4EF9 0088 3498      		jmp	(System_RomSendDreq).l	; <-- external jump
(1)  211/  FF1758 :                     
(1)  212/  FF1758 :                     ; --------------------------------------------------------
(1)  213/  FF1758 :                     ; System_GrabRamCode
(1)  214/  FF1758 :                     ;
(1)  215/  FF1758 :                     ; Send new code to the USER side of RAM and
(1)  216/  FF1758 :                     ; jump into it.
(1)  217/  FF1758 :                     ;
(1)  218/  FF1758 :                     ; Input:
(1)  219/  FF1758 :                     ; d0 - Location of the RAM code to copy
(1)  220/  FF1758 :                     ;      in the 880000/900000 areas
(1)  221/  FF1758 :                     ; --------------------------------------------------------
(1)  222/  FF1758 :                     
(1)  223/  FF1758 :                     System_GrabRamCode:
(1)  225/  FF1758 : 80BC 0088 0000      		or.l	#$880000,d0
(1)  226/  FF175E : 2040                		move.l	d0,a0
(1)  227/  FF1760 : 43F9 00FF 1B90      		lea	(RAMCODE_USER),a1
(1)  228/  FF1766 : 3E3C 4FFF           		move.w	#$5000-1,d7	; TODO: make custom sizes.
(1)  229/  FF176A :                     .copyme2:
(1)  230/  FF176A : 12D8                		move.b	(a0)+,(a1)+
(1)  231/  FF176C : 51CF FFFC           		dbf	d7,.copyme2
(1)  232/  FF1770 : 4EF9 00FF 1B90      		jmp	(RAMCODE_USER).l
(1)  236/  FF1776 :                     
(1)  237/  FF1776 :                     ; ====================================================================
(1)  238/  FF1776 :                     ; ----------------------------------------------------------------
(1)  239/  FF1776 :                     ; Subroutines
(1)  240/  FF1776 :                     ; ----------------------------------------------------------------
(1)  241/  FF1776 :                     
(1)  242/  FF1776 :                     ; --------------------------------------------------------
(1)  243/  FF1776 :                     ; System_Input
(1)  244/  FF1776 :                     ;
(1)  245/  FF1776 :                     ; Reads data from the Controller ports
(1)  246/  FF1776 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  247/  FF1776 :                     ; 
(1)  248/  FF1776 :                     ; Uses:
(1)  249/  FF1776 :                     ; d4-d6,a4-a6
(1)  250/  FF1776 :                     ; --------------------------------------------------------
(1)  251/  FF1776 :                     
(1)  252/  FF1776 :                     System_Input:
(1)  253/  FF1776 :                     ; 		move.w	#$0100,(z80_bus).l
(1)  254/  FF1776 :                     .wait:
(1)  255/  FF1776 :                     ; 		btst	#0,(z80_bus).l
(1)  256/  FF1776 :                     ; 		bne.s	.wait
(1)  257/  FF1776 : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  258/  FF177C : 4DF8 A9C6           		lea	(RAM_InputData),a6	; a6 - Output
(1)  259/  FF1780 : 6108                		bsr.s	.this_one
(1)  260/  FF1782 : DAFC 0002           		adda	#2,a5
(1)  261/  FF1786 : DCFC 0010           		adda	#sizeof_input,a6
(1)  262/  FF178A :                     ; 		bsr.s	.this_one
(1)  263/  FF178A :                     ; ; 		move.w	#0,(z80_bus).l
(1)  264/  FF178A :                     ; 		rts
(1)  265/  FF178A :                     
(1)  266/  FF178A :                     ; --------------------------------------------------------	
(1)  267/  FF178A :                     ; Read port
(1)  268/  FF178A :                     ; 
(1)  269/  FF178A :                     ; a5 - Current port
(1)  270/  FF178A :                     ; a6 - Output data
(1)  271/  FF178A :                     ; --------------------------------------------------------
(1)  272/  FF178A :                     
(1)  273/  FF178A :                     .this_one:
(1)  274/  FF178A : 6100 0166           		bsr	.pick_id
(1)  275/  FF178E : 1C84                		move.b	d4,pad_id(a6)
(1)  276/  FF1790 : B87C 000F           		cmp.w	#$F,d4
(1)  277/  FF1794 : 670E                		beq.s	.exit
(1)  278/  FF1796 : C87C 000F           		and.w	#$F,d4
(1)  279/  FF179A : D844                		add.w	d4,d4
(1)  280/  FF179C : 3A3B 400C           		move.w	.list(pc,d4.w),d5
(1)  281/  FF17A0 : 4EFB 5008           		jmp	.list(pc,d5.w)
(1)  282/  FF17A4 :                     .exit:
(1)  283/  FF17A4 : 422E 0001           		clr.b	pad_ver(a6)
(1)  284/  FF17A8 : 4E75                		rts
(1)  285/  FF17AA :                     
(1)  286/  FF17AA :                     ; --------------------------------------------------------
(1)  287/  FF17AA :                     ; Grab ID
(1)  288/  FF17AA :                     ; --------------------------------------------------------
(1)  289/  FF17AA :                     
(1)  290/  FF17AA :                     .list:
(1)  291/  FF17AA : FFFA                		dc.w .exit-.list	; $00
(1)  292/  FF17AC : FFFA                		dc.w .exit-.list
(1)  293/  FF17AE : FFFA                		dc.w .exit-.list
(1)  294/  FF17B0 : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  295/  FF17B2 : FFFA                		dc.w .exit-.list	; $04
(1)  296/  FF17B4 : FFFA                		dc.w .exit-.list
(1)  297/  FF17B6 : FFFA                		dc.w .exit-.list
(1)  298/  FF17B8 : FFFA                		dc.w .exit-.list
(1)  299/  FF17BA : FFFA                		dc.w .exit-.list	; $08
(1)  300/  FF17BC : FFFA                		dc.w .exit-.list
(1)  301/  FF17BE : FFFA                		dc.w .exit-.list
(1)  302/  FF17C0 : FFFA                		dc.w .exit-.list
(1)  303/  FF17C2 : FFFA                		dc.w .exit-.list	; $0C
(1)  304/  FF17C4 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  305/  FF17C6 : FFFA                		dc.w .exit-.list
(1)  306/  FF17C8 : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  307/  FF17CA :                     
(1)  308/  FF17CA :                     ; --------------------------------------------------------
(1)  309/  FF17CA :                     ; ID $03
(1)  310/  FF17CA :                     ;
(1)  311/  FF17CA :                     ; Mega Mouse
(1)  312/  FF17CA :                     ; --------------------------------------------------------
(1)  313/  FF17CA :                     
(1)  314/  FF17CA :                     ; *** NOT TESTED ON HARDWARE ***
(1)  315/  FF17CA :                     .id_03:
(1)  316/  FF17CA : 1ABC 0020           		move.b	#$20,(a5)
(1)  317/  FF17CE : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  318/  FF17D4 : 0815 0004           		btst	#4,(a5)
(1)  319/  FF17D8 : 6700 0094           		beq.w	.invalid
(1)  320/  FF17DC : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  321/  FF17E0 : 4E71                		nop
(1)  322/  FF17E2 : 4E71                		nop
(1)  323/  FF17E4 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  324/  FF17E8 : 4E71                		nop
(1)  325/  FF17EA : 4E71                		nop
(1)  326/  FF17EC : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  327/  FF17F0 : 4E71                		nop
(1)  328/  FF17F2 : 4E71                		nop
(1)  329/  FF17F4 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  330/  FF17F6 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  331/  FF17FA : 4E71                		nop
(1)  332/  FF17FC : 4E71                		nop
(1)  333/  FF17FE : 1E15                		move.b	(a5),d7
(1)  334/  FF1800 : CE7C 000F            		and.w	#%1111,d7
(1)  335/  FF1804 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  336/  FF1808 : BF46                		eor.w	d7,d6
(1)  337/  FF180A : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  338/  FF180E : CC47                		and.w	d7,d6
(1)  339/  FF1810 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  340/  FF1814 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  341/  FF1818 : 4E71                		nop
(1)  342/  FF181A : 4E71                		nop
(1)  343/  FF181C : 1E15                		move.b	(a5),d7
(1)  344/  FF181E : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  345/  FF1822 : CE7C 000F           		and.w	#%1111,d7
(1)  346/  FF1826 : E94F                		lsl.w	#4,d7
(1)  347/  FF1828 : 4E71                		nop
(1)  348/  FF182A : 1C15                		move.b	(a5),d6
(1)  349/  FF182C : CC7C 000F           		and.w	#%1111,d6
(1)  350/  FF1830 : 8E46                		or.w	d6,d7
(1)  351/  FF1832 : 0805 0000           		btst    #0,d5
(1)  352/  FF1836 : 6704                		beq.s	.x_neg
(1)  353/  FF1838 : 4407                		neg.b	d7
(1)  354/  FF183A : 4447                		neg.w	d7
(1)  355/  FF183C :                     .x_neg:
(1)  356/  FF183C : 3D47 0006           		move.w	d7,mouse_x(a6)
(1)  357/  FF1840 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  358/  FF1844 : 4E71                		nop
(1)  359/  FF1846 : 4E71                		nop
(1)  360/  FF1848 : 1E15                		move.b	(a5),d7
(1)  361/  FF184A : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  362/  FF184E : CE7C 000F           		and.w	#%1111,d7
(1)  363/  FF1852 : E94F                		lsl.w	#4,d7
(1)  364/  FF1854 : 4E71                		nop
(1)  365/  FF1856 : 1C15                		move.b	(a5),d6
(1)  366/  FF1858 : CC7C 000F           		and.w	#%1111,d6
(1)  367/  FF185C : 8E46                		or.w	d6,d7
(1)  368/  FF185E : 0805 0001           		btst    #1,d5
(1)  369/  FF1862 : 6704                		beq.s	.y_neg
(1)  370/  FF1864 : 4407                		neg.b	d7
(1)  371/  FF1866 : 4447                		neg.w	d7
(1)  372/  FF1868 :                     .y_neg:
(1)  373/  FF1868 : 4447                		neg.w	d7		; Reverse Y
(1)  374/  FF186A : 3D47 0008           		move.w	d7,mouse_y(a6)
(1)  375/  FF186E :                     
(1)  376/  FF186E :                     .invalid:
(1)  377/  FF186E : 1ABC 0060           		move.b	#$60,(a5)
(1)  378/  FF1872 : 4E75                		rts
(1)  379/  FF1874 :                     
(1)  380/  FF1874 :                     ; --------------------------------------------------------
(1)  381/  FF1874 :                     ; ID $0D
(1)  382/  FF1874 :                     ; 
(1)  383/  FF1874 :                     ; Normal controller: 3 button or 6 button.
(1)  384/  FF1874 :                     ; --------------------------------------------------------
(1)  385/  FF1874 :                     
(1)  386/  FF1874 :                     .id_0D:
(1)  387/  FF1874 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  388/  FF1878 : 4E71                		nop
(1)  389/  FF187A : 4E71                		nop
(1)  390/  FF187C : 1A15                		move.b	(a5),d5
(1)  391/  FF187E : CA7C 003F           		and.w	#%00111111,d5
(1)  392/  FF1882 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  393/  FF1886 : 4E71                		nop
(1)  394/  FF1888 : 4E71                		nop
(1)  395/  FF188A : 1815                		move.b	(a5),d4		; The following flips are for
(1)  396/  FF188C : E54C                		lsl.w	#2,d4		; the 6pad's internal counter:
(1)  397/  FF188E : C87C 00C0           		and.w	#%11000000,d4
(1)  398/  FF1892 : 8845                		or.w	d5,d4
(1)  399/  FF1894 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  400/  FF1898 : 4644                		not.w	d4
(1)  401/  FF189A : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  402/  FF189E : B905                		eor.b	d4,d5
(1)  403/  FF18A0 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  404/  FF18A4 : 1D44 0003           		move.b	d4,on_hold+1(a6)
(1)  405/  FF18A8 : CA04                		and.b	d4,d5
(1)  406/  FF18AA : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  407/  FF18AE : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  408/  FF18B2 : 4E71                		nop
(1)  409/  FF18B4 : 4E71                		nop
(1)  410/  FF18B6 : 1815                		move.b	(a5),d4		; Grab ??|MXYZ
(1)  411/  FF18B8 : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  412/  FF18BC : 4E71                  		nop
(1)  413/  FF18BE : 4E71                  		nop
(1)  414/  FF18C0 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  415/  FF18C2 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  416/  FF18C6 : 4E71                 		nop
(1)  417/  FF18C8 : 4E71                 		nop
(1)  418/  FF18CA : CC7C 000F           		and.w	#$F,d6
(1)  419/  FF18CE : E44E                		lsr.w	#2,d6
(1)  420/  FF18D0 : CC7C 0001           		and.w	#1,d6
(1)  421/  FF18D4 : 6716                		beq.s	.oldpad
(1)  422/  FF18D6 : 4604                		not.b	d4
(1)  423/  FF18D8 : C87C 000F            		and.w	#%1111,d4
(1)  424/  FF18DC : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  425/  FF18E0 : B905                		eor.b	d4,d5
(1)  426/  FF18E2 : 1D44 0002           		move.b	d4,on_hold(a6)
(1)  427/  FF18E6 : CA04                		and.b	d4,d5
(1)  428/  FF18E8 : 1D45 0004           		move.b	d5,on_press(a6)
(1)  429/  FF18EC :                     .oldpad:
(1)  430/  FF18EC : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  431/  FF18F0 : 4E75                		rts
(1)  432/  FF18F2 :                     		
(1)  433/  FF18F2 :                     ; --------------------------------------------------------
(1)  434/  FF18F2 :                     ; Grab ID
(1)  435/  FF18F2 :                     ; --------------------------------------------------------
(1)  436/  FF18F2 :                     
(1)  437/  FF18F2 :                     .pick_id:
(1)  438/  FF18F2 : 7800                		moveq	#0,d4
(1)  439/  FF18F4 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  440/  FF18F8 : 4E71                		nop
(1)  441/  FF18FA : 4E71                		nop
(1)  442/  FF18FC : 610A                		bsr	.read
(1)  443/  FF18FE : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  444/  FF1902 : 4E71                		nop
(1)  445/  FF1904 : 4E71                		nop
(1)  446/  FF1906 : D844                		add.w	d4,d4
(1)  447/  FF1908 :                     .read:
(1)  448/  FF1908 : 1A15                		move.b	(a5),d5
(1)  449/  FF190A : 1C05                		move.b	d5,d6
(1)  450/  FF190C : CC3C 000C           		and.b	#$C,d6
(1)  451/  FF1910 : 6702                		beq.s	.step_1
(1)  452/  FF1912 : 5244                		addq.w	#1,d4
(1)  453/  FF1914 :                     .step_1:
(1)  454/  FF1914 : D844                		add.w	d4,d4
(1)  455/  FF1916 : 1C05                		move.b	d5,d6
(1)  456/  FF1918 : CC7C 0003           		and.w	#3,d6
(1)  457/  FF191C : 6702                		beq.s	.step_2
(1)  458/  FF191E : 5244                		addq.w	#1,d4
(1)  459/  FF1920 :                     .step_2:
(1)  460/  FF1920 : 4E75                		rts
(1)  461/  FF1922 :                     
(1)  462/  FF1922 :                     ; --------------------------------------------------------
(1)  463/  FF1922 :                     ; System_Random
(1)  464/  FF1922 :                     ; 
(1)  465/  FF1922 :                     ; Makes a random number.
(1)  466/  FF1922 :                     ; 
(1)  467/  FF1922 :                     ; Input:
(1)  468/  FF1922 :                     ; d0 | Seed
(1)  469/  FF1922 :                     ;
(1)  470/  FF1922 :                     ; Output:
(1)  471/  FF1922 :                     ; d0 | LONG
(1)  472/  FF1922 :                     ;
(1)  473/  FF1922 :                     ; Uses:
(1)  474/  FF1922 :                     ; d4-d5
(1)  475/  FF1922 :                     ; --------------------------------------------------------
(1)  476/  FF1922 :                     
(1)  477/  FF1922 :                     System_Random:
(1)  478/  FF1922 : 2F04                		move.l	d4,-(sp)
(1)  479/  FF1924 : 2839 FFFF AE0A      		move.l	(RAM_SysRandSeed).l,d4
(1)  480/  FF192A : 6606                		bne.s	.good_s
(1)  481/  FF192C : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  482/  FF1932 :                     .good_s:
(1)  483/  FF1932 : 2004                		move.l	d4,d0
(1)  484/  FF1934 : EB9C                		rol.l	#5,d4
(1)  485/  FF1936 : D880                		add.l	d0,d4
(1)  486/  FF1938 : E644                		asr.w	#3,d4
(1)  487/  FF193A : D880                		add.l	d0,d4
(1)  488/  FF193C : 3004                		move.w	d4,d0
(1)  489/  FF193E : 4844                		swap	d4
(1)  490/  FF1940 : D044                		add.w	d4,d0
(1)  491/  FF1942 : 3800                		move.w	d0,d4
(1)  492/  FF1944 : 4844                		swap	d4
(1)  493/  FF1946 : 23C4 FFFF AE0A      		move.l	d4,(RAM_SysRandSeed).l
(1)  494/  FF194C : 281F                		move.l	(sp)+,d4
(1)  495/  FF194E : 4E75                		rts
(1)  496/  FF1950 :                     
(1)  497/  FF1950 :                     ; --------------------------------------------------------
(1)  498/  FF1950 :                     ; System_SineWave_Cos / System_SineWave
(1)  499/  FF1950 :                     ;
(1)  500/  FF1950 :                     ; Get sinewave value
(1)  501/  FF1950 :                     ;
(1)  502/  FF1950 :                     ; Input:
(1)  503/  FF1950 :                     ; d0 | WORD - Tan
(1)  504/  FF1950 :                     ; d1 | WORD - Multiply
(1)  505/  FF1950 :                     ;
(1)  506/  FF1950 :                     ; Output:
(1)  507/  FF1950 :                     ; d2 | LONG - Result (as 0000.0000)
(1)  508/  FF1950 :                     ; --------------------------------------------------------
(1)  509/  FF1950 :                     
(1)  510/  FF1950 :                     ; TODO: improve this.
(1)  511/  FF1950 :                     System_SineWave_Cos:
(1)  512/  FF1950 : 48A7 8000           		movem.w	d0,-(sp)
(1)  513/  FF1954 : 7400                		moveq	#0,d2
(1)  514/  FF1956 : D03C 0040           		add.b	#$40,d0
(1)  515/  FF195A : 1400                		move.b	d0,d2
(1)  516/  FF195C : E302                		asl.b	#1,d2
(1)  517/  FF195E : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  518/  FF1962 : C4C1                		mulu.w	d1,d2
(1)  519/  FF1964 : 8000                		or.b	d0,d0
(1)  520/  FF1966 : 6A02                		bpl.s	.dont_neg
(1)  521/  FF1968 : 4482                		neg.l	d2
(1)  522/  FF196A :                     .dont_neg:
(1)  523/  FF196A : 4C9F 0001           		movem.w	(sp)+,d0
(1)  524/  FF196E : 4E75                		rts
(1)  525/  FF1970 :                     
(1)  526/  FF1970 :                     System_SineWave:
(1)  527/  FF1970 : 48A7 8000           		movem.w	d0,-(sp)
(1)  528/  FF1974 : C07C 007F           		and.w	#$7F,d0
(1)  529/  FF1978 : E340                		asl.w	#1,d0
(1)  530/  FF197A : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  531/  FF197E : C4C1                		mulu.w	d1,d2
(1)  532/  FF1980 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  533/  FF1984 : 5182                		subq.l	#8,d2
(1)  534/  FF1986 : 8000                		or.b	d0,d0
(1)  535/  FF1988 : 6A02                		bpl.s	.dont_neg
(1)  536/  FF198A : 4482                		neg.l	d2
(1)  537/  FF198C :                     .dont_neg:
(1)  538/  FF198C : 4E75                		rts
(1)  539/  FF198E :                     
(1)  540/  FF198E : 0000 0006 000D 0013 MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
                    0019 001F 0026 002C 
                    0032 0038 003E      
(1)  541/  FF19A4 : 0044 004A 0050 0056 		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
                    005C 0062 0068 006D 
                    0073 0079           
(1)  542/  FF19B8 : 007E 0084 0089 008E 		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
                    0093 0098 009D 00A2 
                    00A7 00AC           
(1)  543/  FF19CC : 00B1 00B5 00B9 00BE 		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
                    00C2 00C6 00CA 00CE 
                    00D1 00D5           
(1)  544/  FF19E0 : 00D8 00DC 00DF 00E2 		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
                    00E5 00E7 00EA 00ED 
                    00EF 00F1           
(1)  545/  FF19F4 : 00F3 00F5 00F7 00F8 		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
                    00FA 00FB 00FC 00FD 
                    00FE 00FF           
(1)  546/  FF1A08 : 00FF 0100 0100 0100 		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
                    0100 0100 00FF 00FF 
                    00FE                
(1)  547/  FF1A1A : 00FD 00FC 00FB 00FA 		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
                    00F8 00F7 00F5 00F3 
                    00F1 00EF           
(1)  548/  FF1A2E : 00ED 00EA 00E7 00E5 		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
                    00E2 00DF 00DC 00D8 
                    00D5 00D1           
(1)  549/  FF1A42 : 00CE 00CA 00C6 00C2 		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
                    00BE 00B9 00B5 00B1 
                    00AC 00A7           
(1)  550/  FF1A56 : 00A2 009D 0098 0093 		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
                    008E 0089 0084 007E 
                    0079 0073           
(1)  551/  FF1A6A : 006D 0068 0062 005C 		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
                    0056 0050 004A 0044 
                    003E 0038           
(1)  552/  FF1A7E : 0032 002C 0026 001F 		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
                    0019 0013 000D 0006 
(1)  553/  FF1A8E :                     
(1)  554/  FF1A8E :                     ; --------------------------------------------------------
(1)  555/  FF1A8E :                     ; System_SetInts
(1)  556/  FF1A8E :                     ;
(1)  557/  FF1A8E :                     ; Set new interrputs
(1)  558/  FF1A8E :                     ;
(1)  559/  FF1A8E :                     ; d0 | LONG - VBlank
(1)  560/  FF1A8E :                     ; d1 | LONG - HBlank
(1)  561/  FF1A8E :                     ;
(1)  562/  FF1A8E :                     ; Uses:
(1)  563/  FF1A8E :                     ; d4
(1)  564/  FF1A8E :                     ;
(1)  565/  FF1A8E :                     ; Notes:
(1)  566/  FF1A8E :                     ; Writing 0 or a negative number will skip change
(1)  567/  FF1A8E :                     ; to the interrupt pointer
(1)  568/  FF1A8E :                     ; --------------------------------------------------------
(1)  569/  FF1A8E :                     
(1)  570/  FF1A8E :                     System_SetInts:
(1)  571/  FF1A8E : 2800                		move.l	d0,d4
(1)  572/  FF1A90 : 670E                		beq.s	.novint
(1)  573/  FF1A92 : 6B0C                		bmi.s	.novint
(1)  574/  FF1A94 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  575/  FF1A9A : 23C4 FFFF AE14       		move.l	d4,(RAM_MdMarsVInt+2).l
(1)  576/  FF1AA0 :                     .novint:
(1)  577/  FF1AA0 : 2801                		move.l	d1,d4
(1)  578/  FF1AA2 : 670E                		beq.s	.nohint
(1)  579/  FF1AA4 : 6B0C                		bmi.s	.nohint
(1)  580/  FF1AA6 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  581/  FF1AAC : 23C4 FFFF AE1A      		move.l	d4,(RAM_MdMarsHInt+2).l
(1)  582/  FF1AB2 :                     .nohint:
(1)  583/  FF1AB2 : 4E75                		rts
(1)  584/  FF1AB4 :                     
(1)  585/  FF1AB4 :                     ; --------------------------------------------------------
(1)  586/  FF1AB4 :                     ; System_SramInit
(1)  587/  FF1AB4 :                     ; 
(1)  588/  FF1AB4 :                     ; Init save data
(1)  589/  FF1AB4 :                     ; 
(1)  590/  FF1AB4 :                     ; Uses:
(1)  591/  FF1AB4 :                     ; a4,d4-d5
(1)  592/  FF1AB4 :                     ; --------------------------------------------------------
(1)  593/  FF1AB4 :                     
(1)  594/  FF1AB4 :                     ; TODO: Check if RV bit is needed here...
(1)  595/  FF1AB4 :                     System_SramInit:
(1)  596/  FF1AB4 : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(1)  597/  FF1ABC : 49F9 0020 0001      		lea	($200001).l,a4
(1)  598/  FF1AC2 : 7800                		moveq	#0,d4
(1)  599/  FF1AC4 : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(1)  600/  FF1AC8 :                     .initsave:
(1)  601/  FF1AC8 : 1884                		move.b	d4,(a4)
(1)  602/  FF1ACA : D8FC 0002           		adda	#2,a4
(1)  603/  FF1ACE : 51CD FFF8           		dbf	d5,.initsave
(1)  604/  FF1AD2 : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(1)  605/  FF1ADA : 4E75                		rts
(1)  606/  FF1ADC :                     
(1)  607/  FF1ADC :                     ; ====================================================================
(1)  608/  FF1ADC :                     ; ----------------------------------------------------------------
(1)  609/  FF1ADC :                     ; Screen mode subroutines
(1)  610/  FF1ADC :                     ; ----------------------------------------------------------------
(1)  611/  FF1ADC :                     
(1)  612/  FF1ADC :                     ; --------------------------------------------------------
(1)  613/  FF1ADC :                     ; Initialize current screen mode
(1)  614/  FF1ADC :                     ; --------------------------------------------------------
(1)  615/  FF1ADC :                     
(1)  616/  FF1ADC :                     Mode_Init:
(1)  617/  FF1ADC : 4EB9 00FF 0324      		jsr	(Video_Clear).l
(1)  618/  FF1AE2 : 49F8 B41A           		lea	(RAM_ModeBuff),a4
(1)  619/  FF1AE6 : 3A3C 07FF           		move.w	#(MAX_MDERAM/2)-1,d5
(1)  620/  FF1AEA : 7800                		moveq	#0,d4
(1)  621/  FF1AEC :                     .clr:
(1)  622/  FF1AEC : 38C4                		move.w	d4,(a4)+
(1)  623/  FF1AEE : 51CD FFFC           		dbf	d5,.clr
(1)  624/  FF1AF2 :                     
(1)  625/  FF1AF2 : 49F8 B0BA           		lea	(RAM_MdDreq+Dreq_Objects),a4	; Patch
(1)  626/  FF1AF6 : 3A3C 000F           		move.w	#MAX_MODELS-1,d5
(1)  627/  FF1AFA :                     .clr_mdls:
(1)  628/  FF1AFA : 2884                		move.l	d4,mdl_data(a4)
(1)  629/  FF1AFC : D8FC 0018           		adda	#sizeof_mdlobj,a4
(1)  630/  FF1B00 : 51CD FFF8           		dbf	d5,.clr_mdls
(1)  631/  FF1B04 :                     
(1)  632/  FF1B04 : 303C 0000           		move.w	#0,d0
(1)  633/  FF1B08 : 6000 EF86           		bra	Video_Mars_GfxMode
(1)  634/  FF1B0C :                     
(1)  635/  FF1B0C :                     ; --------------------------------------------------------
(1)  636/  FF1B0C :                     
(1)  637/  FF1B0C :                     Mode_FadeOut:
(1)  638/  FF1B0C : 31FC 0002 A99E      		move.w	#2,(RAM_FadeMdReq).w
(1)  639/  FF1B12 : 31FC 0002 A9A6      		move.w	#2,(RAM_FadeMarsReq).w
(1)  640/  FF1B18 : 31FC 0001 A9A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  641/  FF1B1E : 31FC 0004 A9A8      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  642/  FF1B24 : 31FC 0000 A9A2      		move.w	#0,(RAM_FadeMdDelay).w
(1)  643/  FF1B2A : 31FC 0000 A9AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  644/  FF1B30 :                     .loopw:
(1)  645/  FF1B30 : 6100 FB4C           		bsr	System_WaitFrame
(1)  646/  FF1B34 : 4EB9 00FF 068A      		jsr	(Video_RunFade).l
(1)  647/  FF1B3A : 66F4                		bne.s	.loopw
(1)  648/  FF1B3C : 4E75                		rts
(1)  649/  FF1B3E :                     
(1)  650/  FF1B3E :                     ; ====================================================================
(1)  651/  FF1B3E :                     ; ----------------------------------------------------------------
(1)  652/  FF1B3E :                     ; Default interrupts
(1)  653/  FF1B3E :                     ; ----------------------------------------------------------------
(1)  654/  FF1B3E :                     
(1)  655/  FF1B3E :                     ; --------------------------------------------------------
(1)  656/  FF1B3E :                     ; VBlank
(1)  657/  FF1B3E :                     ; --------------------------------------------------------
(1)  658/  FF1B3E :                     
(1)  659/  FF1B3E :                     VInt_Default:
(1)  660/  FF1B3E : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  661/  FF1B42 : 6100 FC32           		bsr	System_Input
(1)  662/  FF1B46 : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    9740                
(1)  663/  FF1B50 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6		
(1)  664/  FF1B54 : 4E73                		rte
(1)  665/  FF1B56 :                     
(1)  666/  FF1B56 :                     ; --------------------------------------------------------
(1)  667/  FF1B56 :                     ; HBlank
(1)  668/  FF1B56 :                     ; --------------------------------------------------------
(1)  669/  FF1B56 :                     
(1)  670/  FF1B56 :                     HInt_Default:
(1)  671/  FF1B56 : 4E73                		rte
(1)  672/  FF1B58 :                     
(1)  673/  FF1B58 :                     ; ====================================================================
(1)  674/  FF1B58 :                     ; ----------------------------------------------------------------
(1)  675/  FF1B58 :                     ; System data
(1)  676/  FF1B58 :                     ; ----------------------------------------------------------------
(1)  677/  FF1B58 :                     
      42/  FF1B58 :                     Md_ReadModes:
      43/  FF1B58 : 7000                		moveq	#0,d0
      44/  FF1B5A : 3038 C41A           		move.w	(RAM_Glbl_Scrn).w,d0
      45/  FF1B5E : C07C 0007           		and.w	#%0111,d0		; <-- current limit
      46/  FF1B62 : E548                		lsl.w	#2,d0
      47/  FF1B64 : 203B 000A           		move.l	.pick_boot(pc,d0.w),d0
      48/  FF1B68 : 4EB9 00FF 1758      		jsr	(System_GrabRamCode).l
      49/  FF1B6E : 60E8                		bra.s	Md_ReadModes
      50/  FF1B70 :                     .pick_boot:
      51/  FF1B70 : 0000 2458           		dc.l RamCode_Scrn1
      52/  FF1B74 : 0000 2458           		dc.l RamCode_Scrn1
      53/  FF1B78 : 0000 2458           		dc.l RamCode_Scrn1
      54/  FF1B7C : 0000 2458           		dc.l RamCode_Scrn1
      55/  FF1B80 : 0000 2458           		dc.l RamCode_Scrn1
      56/  FF1B84 : 0000 2458           		dc.l RamCode_Scrn1
      57/  FF1B88 : 0000 2458           		dc.l RamCode_Scrn1
      58/  FF1B8C : 0000 2458           		dc.l RamCode_Scrn1
      59/  FF1B90 :                     
MD TOP RAM-CODE uses: 1B90
      61/  FF1B90 :                     .here:		message "MD TOP RAM-CODE uses: \{.here-minfo_ram_s}"
      63/  FF1B90 :                     RAMCODE_USER:
      64/    2458 :                     		dephase
      65/    2458 :                     Md_TopCode_e:
      66/    2458 :                     		align 2
      67/    2458 :                     
      68/    2458 :                     ; ====================================================================
      69/    2458 :                     ; --------------------------------------------------------
      70/    2458 :                     ; Screen modes
      71/    2458 :                     ; --------------------------------------------------------
      72/    2458 :                     
      73/    2458 :                     RamCode_Scrn1:
      74/  FF1B90 :                     		phase RAMCODE_USER	; 32X 68k-RAM bank
      75/  FF1B90 :                     		include "code/screen_1.asm"
(1)    1/  FF1B90 :                     ; ====================================================================
(1)    2/  FF1B90 :                     ; ----------------------------------------------------------------
(1)    3/  FF1B90 :                     ; Titlescreen
(1)    4/  FF1B90 :                     ; ----------------------------------------------------------------
(1)    5/  FF1B90 :                     
(1)    6/  FF1B90 :                     ; ====================================================================
(1)    7/  FF1B90 :                     ; ------------------------------------------------------
(1)    8/  FF1B90 :                     ; Settings
(1)    9/  FF1B90 :                     ; ------------------------------------------------------
(1)   10/  FF1B90 :                     
(1)   11/  FF1B90 : =$7B                SET_MENUTOPLINE		equ 123
(1)   12/  FF1B90 : =$6                 MAX_TITLOPT		equ 6
(1)   13/  FF1B90 : =$1                 VRAMTTL_PUZBG		equ $0001
(1)   14/  FF1B90 : =$780               VRAMTTL_CELLHIDE	equ $0780
(1)   15/  FF1B90 :                     
(1)   16/  FF1B90 :                     ; ====================================================================
(1)   17/  FF1B90 :                     ; ------------------------------------------------------
(1)   18/  FF1B90 :                     ; Structs
(1)   19/  FF1B90 :                     ; ------------------------------------------------------
(1)   20/  FF1B90 :                     
(1)   21/  FF1B90 :                     ; 		struct 0
(1)   22/  FF1B90 :                     ; strc_xpos	ds.w 1
(1)   23/  FF1B90 :                     ; strc_ypos	ds.w 1
(1)   24/  FF1B90 :                     ; 		finish
(1)   25/  FF1B90 :                     
(1)   26/  FF1B90 :                     ; ====================================================================
(1)   27/  FF1B90 :                     ; ------------------------------------------------------
(1)   28/  FF1B90 :                     ; This screen's RAM
(1)   29/  FF1B90 :                     ; ------------------------------------------------------
(1)   30/  FF1B90 :                     
(1)   31/  FF1B90 : (MACRO)             			struct RAM_ModeBuff
(1)   31/  FF1B90 :                     
(1)   31/  FF1B90 :                     ;       if WPATCH=1
(1)   31/  FF1B90 :                     ; GLBL_LASTPC   set *
(1)   31/  FF1B90 :                     ; GLBL_LASTORG  set *
(1)   31/  FF1B90 :                     ;               dephase
(1)   31/  FF1B90 :                     ;               phase RAM_MODEBUFF
(1)   31/  FF1B90 :                     ;       else
(1)   31/  FF1B90 : =$FF1B90            GLBL_LASTPC     set *
(1)   31/    2458 :                                     dephase
(1)   31/    2458 : =$2458              GLBL_LASTORG    set *
(1)   31/FFFFFFFFFFFFB41A :                                     phase RAM_MODEBUFF
(1)   31/FFFFFFFFFFFFB41A :                     ;       endif
(1)   32/FFFFFFFFFFFFB41A :                     RAM_Ttle_SpriteData	ds.w 4*70
(1)   33/FFFFFFFFFFFFB64A :                     RAM_Ttle_HorVal		ds.l 1
(1)   34/FFFFFFFFFFFFB64E :                     RAM_Ttle_VerVal		ds.l 1
(1)   35/FFFFFFFFFFFFB652 :                     RAM_Tite_VerBot		ds.l 1			; 0000.0000
(1)   36/FFFFFFFFFFFFB656 :                     RAM_Tite_VerBgMenu	ds.l 1
(1)   37/FFFFFFFFFFFFB65A :                     RAM_Ttle_VerBg		ds.l 1
(1)   38/FFFFFFFFFFFFB65E :                     RAM_Ttle_HorBg  	ds.l 1
(1)   39/FFFFFFFFFFFFB662 :                     RAM_Ttle_SpdUsr		ds.w 1
(1)   40/FFFFFFFFFFFFB664 :                     RAM_Ttle_SFX		ds.w 1
(1)   41/FFFFFFFFFFFFB666 :                     RAM_Tite_PickOpt	ds.w 1
(1)   42/FFFFFFFFFFFFB668 :                     RAM_Tite_UsrOpt_T	ds.w 1
(1)   43/FFFFFFFFFFFFB66A :                     RAM_Tite_UsrOpt_B	ds.w 1
(1)   44/FFFFFFFFFFFFB66C :                     RAM_Titl_DbgValues	ds.w 17
(1)   45/FFFFFFFFFFFFB68E : (MACRO)             			finish
(1)   45/FFFFFFFFFFFFB41A :                                     !org GLBL_LASTORG
(1)   45/  FF1B90 :                                     phase GLBL_LASTPC
(1)   46/  FF1B90 :                     
(1)   47/  FF1B90 :                     ; ====================================================================
(1)   48/  FF1B90 :                     ; ------------------------------------------------------
(1)   49/  FF1B90 :                     ; Code start
(1)   50/  FF1B90 :                     ; ------------------------------------------------------
(1)   51/  FF1B90 :                     
(1)   52/  FF1B90 :                     MD_2DMODE:
(1)   53/  FF1B90 : 46FC 2700           		move.w	#$2700,sr
(1)   54/  FF1B94 : 08B9 0006 FFFF A9AF 		bclr	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   55/  FF1B9C : 6100 E732           		bsr	Video_Update
(1)   56/  FF1BA0 : 6100 E8E8           		bsr	Video_PrintInit
(1)   57/  FF1BA4 : 6100 FF36           		bsr	Mode_Init
(1)   58/  FF1BA8 : 6100 F68C           		bsr	Objects_Init
(1)   59/  FF1BAC :                     
(1)   60/  FF1BAC :                     	; Load assets
(1)   62/  FF1BAC : 41F8 B0BA           		lea	(RAM_MdDreq+Dreq_Objects),a0
(1)   63/  FF1BB0 : 20BC 220C A8A0      		move.l	#MarsObj_TitleScrn|TH,mdl_data(a0)
(1)   64/  FF1BB6 :                     ; 		move.w	#-$150,mdl_x_pos(a0)
(1)   65/  FF1BB6 :                     ; 		move.w	#-$A0,mdl_y_pos(a0)
(1)   66/  FF1BB6 : 317C FD00 000C      		move.w	#-$300,mdl_z_pos(a0)
(1)   67/  FF1BBC : D0FC 0018           		adda	#sizeof_mdlobj,a0
(1)   68/  FF1BC0 : 20BC 0000 0000      		move.l	#0,mdl_data(a0)
(1)   69/  FF1BC6 : 41F9 0093 9374      		lea	(PalMars_Title),a0
(1)   70/  FF1BCC : 7000                		moveq	#0,d0
(1)   71/  FF1BCE : 323C 0100           		move.w	#256,d1
(1)   72/  FF1BD2 : 7400                		moveq	#0,d2
(1)   73/  FF1BD4 : 6100 EEFE           		bsr	Video_FadePal_Mars
(1)   74/  FF1BD8 : 0278 7FFF A534      		and.w	#$7FFF,(RAM_MdMarsPalFd).w
(1)   75/  FF1BDE : 31FC 0004 B662      		move.w	#4,(RAM_Ttle_SpdUsr).w
(1)   76/  FF1BE4 : 7003                		moveq	#3,d0
(1)   77/  FF1BE6 : 6100 EEA8           		bsr	Video_Mars_GfxMode
(1)   89/  FF1BEA :                     
(1)   90/  FF1BEA : 41FA 03B8           		lea	str_TitleS(pc),a0
(1)   91/  FF1BEE : 203C 0000 0203      		move.l	#locate(0,2,3),d0
(1)   92/  FF1BF4 : 6100 E8C0           		bsr	Video_Print
(1)   93/  FF1BF8 : 6100 02BC           		bsr	Title_PrintCursor
(1)   94/  FF1BFC : 41FA 03C0           		lea	str_TitleSfx(pc),a0	; Print menu
(1)   95/  FF1C00 : 203C 0000 0205      		move.l	#locate(0,2,5),d0
(1)   96/  FF1C06 : 6100 E8AE           		bsr	Video_Print
(1)   97/  FF1C0A : 6100 0162           		bsr	.sfx_draw
(1)   98/  FF1C0E :                     
(1)   99/  FF1C0E : 41FA 06DE           		lea	Pal_Title_BG(pc),a0
(1)  100/  FF1C12 : 7000                		moveq	#0,d0
(1)  101/  FF1C14 : 323C 000F           		move.w	#16-1,d1
(1)  102/  FF1C18 : 6100 EA82           		bsr	Video_FadePal
(1)  103/  FF1C1C : 41F8 A514           		lea	(RAM_PaletteFd+$60),a0
(1)  104/  FF1C20 : 30FC 0000           		move.w	#0,(a0)+
(1)  105/  FF1C24 : 30FC 0EEE           		move.w	#$EEE,(a0)+
(1)  106/  FF1C28 : 30FC 0CCC           		move.w	#$CCC,(a0)+
(1)  107/  FF1C2C : 30FC 0AAA           		move.w	#$AAA,(a0)+
(1)  108/  FF1C30 : 30FC 0888           		move.w	#$888,(a0)+
(1)  109/  FF1C34 : 30FC 0222           		move.w	#$222,(a0)+
(1)  110/  FF1C38 : 4278 A4B4           		clr.w	(RAM_PaletteFd).w		; <-- quick patch
(1)  111/  FF1C3C : 4278 A534           		clr.w	(RAM_MdMarsPalFd).w
(1)  112/  FF1C40 :                     
(1)  113/  FF1C40 :                     	; Set Fade-in settings
(1)  114/  FF1C40 : 31FC 0001 A9A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  115/  FF1C46 : 31FC 0002 A9A8      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  116/  FF1C4C : 31FC 0001 A9A2      		move.w	#1,(RAM_FadeMdDelay).w
(1)  117/  FF1C52 : 31FC 0000 A9AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  118/  FF1C58 : 31FC 0001 A99E      		move.w	#1,(RAM_FadeMdReq).w
(1)  119/  FF1C5E : 31FC 0001 A9A6      		move.w	#1,(RAM_FadeMarsReq).w
(1)  120/  FF1C64 : 13FC 0007 FFFF A9B9 		move.b	#%111,(RAM_VdpRegs+$B).l
(1)  121/  FF1C6C : 13FC 0000 FFFF A9B5 		move.b	#0,(RAM_VdpRegs+7).l
(1)  122/  FF1C74 : 08F9 0004 FFFF A9AE 		bset	#bitHintEnbl,(RAM_VdpRegs).l
(1)  123/  FF1C7C : 08F9 0006 FFFF A9AF 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)  124/  FF1C84 : 08B9 0005 FFFF A9AF 		bclr	#bitVintEnbl,(RAM_VdpRegs+1).l
(1)  125/  FF1C8C : 11FC 007B A9B8      		move.b	#SET_MENUTOPLINE,(RAM_VdpRegs+$A).w	; Hint line
(1)  126/  FF1C92 : 11FC 0081 A9BA      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  127/  FF1C98 : 33FC 9200 00C0 0004 		move.w	#$9200,(vdp_ctrl).l		; Set WINDOW Bottom
(1)  128/  FF1CA0 : 6100 E62E           		bsr	Video_Update
(1)  129/  FF1CA4 : 21FC 00FF 1B3E AE14 		move.l	#VInt_Default,(RAM_MdMarsVInt+2).w
(1)  130/  FF1CAC : 21FC 00FF 1B56 AE1A 		move.l	#HInt_Default,(RAM_MdMarsHInt+2).w
(1)  131/  FF1CB4 : 6100 F9C8           		bsr 	System_WaitFrame		; Send first DREQ
(1)  132/  FF1CB8 :                     
(1)  133/  FF1CB8 :                     ; ====================================================================
(1)  134/  FF1CB8 :                     ; ------------------------------------------------------
(1)  135/  FF1CB8 :                     ; Loop
(1)  136/  FF1CB8 :                     ; ------------------------------------------------------
(1)  137/  FF1CB8 :                     
(1)  138/  FF1CB8 :                     .loop:
(1)  139/  FF1CB8 :                     ; 		bsr	System_Random
(1)  140/  FF1CB8 :                     ; 		bsr	Objects_Show
(1)  141/  FF1CB8 :                     ; 		bsr	MdMap_Update
(1)  142/  FF1CB8 : 6100 F9C4           .ploop:		bsr	System_WaitFrame
(1)  143/  FF1CBC : 6100 E9CC           		bsr	Video_RunFade
(1)  144/  FF1CC0 : 66F6                		bne.s	.ploop
(1)  145/  FF1CC2 :                     ; 		bsr	Title_AnimateFg
(1)  146/  FF1CC2 : 6100 FC5E           		bsr	System_Random		; <-- reroll every frame
(1)  147/  FF1CC6 :                     ; 		bsr	Objects_Run
(1)  148/  FF1CC6 :                     ; 		bsr	Map_Camera
(1)  149/  FF1CC6 :                     ; 		bsr	DEBUG_GRABZ80
(1)  150/  FF1CC6 :                     
(1)  151/  FF1CC6 : 41F8 B0BA           		lea	(RAM_MdDreq+Dreq_Objects),a0
(1)  152/  FF1CCA : 0668 0008 000E      		add.w	#8*1,mdl_x_rot(a0)
(1)  153/  FF1CD0 : 0668 0008 0010      		add.w	#8*1,mdl_y_rot(a0)
(1)  154/  FF1CD6 : 0668 0010 0012      		add.w	#8*2,mdl_z_rot(a0)
(1)  155/  FF1CDC : 6100 01D8           		bsr	Title_PrintCursor
(1)  156/  FF1CE0 :                     
(1)  157/  FF1CE0 :                     	; Controls
(1)  158/  FF1CE0 : 41F8 B668           		lea	(RAM_Tite_UsrOpt_T),a0
(1)  159/  FF1CE4 : 3038 B666           		move.w	(RAM_Tite_PickOpt),d0
(1)  160/  FF1CE8 : D040                		add.w	d0,d0
(1)  161/  FF1CEA : D0C0                		adda	d0,a0
(1)  162/  FF1CEC : 3839 FFFF A9CA      		move.w	(Controller_1+on_press).l,d4
(1)  163/  FF1CF2 : C87C 0001           		and.w	#JoyUp,d4
(1)  164/  FF1CF6 : 670C                		beq.s	.no_up
(1)  165/  FF1CF8 : 4A50                		tst.w	(a0)
(1)  166/  FF1CFA : 6708                		beq.s	.no_up
(1)  167/  FF1CFC : 0450 0001           		sub.w	#1,(a0)
(1)  168/  FF1D00 : 6100 01B4           		bsr	Title_PrintCursor
(1)  169/  FF1D04 :                     .no_up:
(1)  170/  FF1D04 : 3839 FFFF A9CA      		move.w	(Controller_1+on_press).l,d4
(1)  171/  FF1D0A : C87C 0002           		and.w	#JoyDown,d4
(1)  172/  FF1D0E : 670E                		beq.s	.no_down
(1)  173/  FF1D10 : 0C50 0006           		cmp.w	#MAX_TITLOPT,(a0)	; RECICLADO
(1)  174/  FF1D14 : 6708                		beq.s	.no_down
(1)  175/  FF1D16 : 0650 0001           		add.w	#1,(a0)
(1)  176/  FF1D1A : 6100 019A           		bsr	Title_PrintCursor
(1)  177/  FF1D1E :                     .no_down:
(1)  178/  FF1D1E :                     ; 		move.w	(Controller_1+on_press).l,d7
(1)  179/  FF1D1E :                     ; 		and.w	#JoyA,d7
(1)  180/  FF1D1E :                     ; 		beq.s	.no_a
(1)  181/  FF1D1E :                     ; 		bchg	#0,(RAM_Tite_PickOpt+1).w
(1)  182/  FF1D1E :                     ; .no_a:
(1)  183/  FF1D1E :                     
(1)  184/  FF1D1E :                     ; 		tst.w	(RAM_Tite_PickOpt).w
(1)  185/  FF1D1E :                     ; 		bne.s	.no_r
(1)  186/  FF1D1E : 3E39 FFFF A9CA      		move.w	(Controller_1+on_press).l,d7
(1)  187/  FF1D24 : CE7C 0004           		and.w	#JoyLeft,d7
(1)  188/  FF1D28 : 670E                		beq.s	.no_l
(1)  189/  FF1D2A : 4A78 B664           		tst.w	(RAM_Ttle_SFX).w
(1)  190/  FF1D2E : 6708                		beq.s	.no_l
(1)  191/  FF1D30 : 0478 0001 B664      		sub.w	#1,(RAM_Ttle_SFX).w
(1)  192/  FF1D36 : 6136                		bsr	.sfx_draw
(1)  193/  FF1D38 :                     .no_l:
(1)  194/  FF1D38 : 3E39 FFFF A9CA      		move.w	(Controller_1+on_press).l,d7
(1)  195/  FF1D3E : CE7C 0008           		and.w	#JoyRight,d7
(1)  196/  FF1D42 : 6708                		beq.s	.no_r
(1)  197/  FF1D44 : 0678 0001 B664      		add.w	#1,(RAM_Ttle_SFX).w
(1)  198/  FF1D4A : 6122                		bsr	.sfx_draw
(1)  199/  FF1D4C :                     .no_r:
(1)  200/  FF1D4C : 3E39 FFFF A9CA      		move.w	(Controller_1+on_press).l,d7
(1)  201/  FF1D52 : CE7C 0020           		and.w	#JoyC,d7
(1)  202/  FF1D56 : 6702                		beq.s	.no_c
(1)  203/  FF1D58 : 6122                		bsr	.gema_test
(1)  204/  FF1D5A :                     .no_c:
(1)  205/  FF1D5A : 3E39 FFFF A9CA      		move.w	(Controller_1+on_press).l,d7
(1)  206/  FF1D60 : CE7C 0010           		and.w	#JoyB,d7
(1)  207/  FF1D64 : 6704                		beq.s	.no_b
(1)  208/  FF1D66 : 6100 E4B0           		bsr	gemaTest
(1)  209/  FF1D6A :                     .no_b:
(1)  210/  FF1D6A :                     
(1)  211/  FF1D6A :                     ; 		move.w	(Controller_1+on_press).l,d7
(1)  212/  FF1D6A :                     ; 		and.w	#JoyB,d7
(1)  213/  FF1D6A :                     ; 		beq.s	.no_b
(1)  214/  FF1D6A :                     ; 		moveq	#1,d0
(1)  215/  FF1D6A :                     ; 		bsr	.sfx_play
(1)  216/  FF1D6A :                     ; .no_b:
(1)  217/  FF1D6A :                     ; 		move.w	(Controller_1+on_press).l,d7
(1)  218/  FF1D6A :                     ; 		and.w	#JoyA,d7
(1)  219/  FF1D6A :                     ; 		beq.s	.no_a
(1)  220/  FF1D6A :                     ; 		moveq	#0,d0
(1)  221/  FF1D6A :                     ; 		bsr	Sound_TESTCMD
(1)  222/  FF1D6A :                     ; .no_a:
(1)  223/  FF1D6A :                     
(1)  224/  FF1D6A :                     ; 		lea	(RAM_BoxPlayers),a6
(1)  225/  FF1D6A :                     ; 		move.w	(Controller_1+on_press),d7
(1)  226/  FF1D6A :                     ; 		btst	#bitJoyMode,d7
(1)  227/  FF1D6A :                     ; 		beq	.loop3
(1)  228/  FF1D6A :                     ; 		move.w	#4,(RAM_MGame_Sfx).w
(1)  229/  FF1D6A :                     ; .loop3:
(1)  230/  FF1D6A :                     
(1)  231/  FF1D6A : 6000 FF4C           		bra	.loop
(1)  232/  FF1D6E :                     
(1)  233/  FF1D6E :                     ; 	; Exit
(1)  234/  FF1D6E :                     ; 		tst.w	(RAM_Tite_PickOpt).w
(1)  235/  FF1D6E :                     ; 		beq	.loop
(1)  236/  FF1D6E :                     ; 		move.w	(Controller_1+on_press),d7
(1)  237/  FF1D6E :                     ; 		btst	#bitJoyStart,d7
(1)  238/  FF1D6E :                     ; 		beq	.loop
(1)  239/  FF1D6E :                     ; 		bsr	.fade_out
(1)  240/  FF1D6E :                     ; 		bsr	Title_PickSetting
(1)  241/  FF1D6E :                     ; 		move.w	#$2700,sr
(1)  242/  FF1D6E :                     ; 		move.w	#1,(RAM_Glbl_Scrn).w
(1)  243/  FF1D6E :                     ; 		rts
(1)  244/  FF1D6E :                     
(1)  245/  FF1D6E :                     .sfx_draw:
(1)  246/  FF1D6E : 41FA 02A2           		lea	str_TitlDrwID(pc),a0	; Print menu
(1)  247/  FF1D72 : 203C 0000 0A05      		move.l	#locate(0,10,5),d0
(1)  248/  FF1D78 : 6000 E73C           		bra	Video_Print
(1)  249/  FF1D7C :                     
(1)  250/  FF1D7C :                     .gema_test:
(1)  251/  FF1D7C : 3038 B668           		move.w	(RAM_Tite_UsrOpt_T),d0
(1)  252/  FF1D80 : D040                		add.w	d0,d0
(1)  253/  FF1D82 : 303B 0006           		move.w	.list(pc,d0.w),d0
(1)  254/  FF1D86 : 4EFB 0002           		jmp	.list(pc,d0.w)
(1)  255/  FF1D8A :                     .list:
(1)  256/  FF1D8A : 000E                		dc.w .play-.list
(1)  257/  FF1D8C : 0028                		dc.w .stop-.list
(1)  258/  FF1D8E : 0030                		dc.w .stopall-.list
(1)  259/  FF1D90 : 0038                		dc.w .null-.list
(1)  260/  FF1D92 : 0038                		dc.w .null-.list
(1)  261/  FF1D94 : 0038                		dc.w .null-.list
(1)  262/  FF1D96 : 0038                		dc.w .null-.list
(1)  263/  FF1D98 :                     .play:
(1)  264/  FF1D98 : 3038 B664           		move.w	(RAM_Ttle_SFX).w,d0
(1)  265/  FF1D9C : 3400                		move.w	d0,d2
(1)  266/  FF1D9E : 3200                		move.w	d0,d1
(1)  267/  FF1DA0 : D241                		add.w	d1,d1
(1)  268/  FF1DA2 : 303B 1020           		move.w	.tempolist(pc,d1.w),d0
(1)  269/  FF1DA6 : 6B04                		bmi.s	.no_beats
(1)  270/  FF1DA8 : 6100 E4DC           		bsr	gemaSetBeats
(1)  271/  FF1DAC :                     .no_beats:
(1)  272/  FF1DAC : 3002                		move.w	d2,d0
(1)  273/  FF1DAE : 6000 E478           		bra	gemaPlayTrack
(1)  274/  FF1DB2 :                     .stop:
(1)  275/  FF1DB2 : 3038 B664           		move.w	(RAM_Ttle_SFX).w,d0
(1)  276/  FF1DB6 : 6000 E4A8           		bra	gemaStopTrack
(1)  277/  FF1DBA :                     .stopall:
(1)  278/  FF1DBA : 3038 B664           		move.w	(RAM_Ttle_SFX).w,d0
(1)  279/  FF1DBE : 6000 E4B6           		bra	gemaStopAll
(1)  280/  FF1DC2 :                     .null:
(1)  281/  FF1DC2 : 4E75                		rts
(1)  282/  FF1DC4 :                     
(1)  283/  FF1DC4 :                     ; GLOBAL SUBBEATS FOR EACH TRACK.
(1)  284/  FF1DC4 :                     ; -1 = don't set
(1)  285/  FF1DC4 :                     .tempolist:
(1)  286/  FF1DC4 : FFFF                		dc.w -1
(1)  287/  FF1DC6 : 00DC                		dc.w 200+20
(1)  288/  FF1DC8 : FFFF                		dc.w -1
(1)  289/  FF1DCA : FFFF                		dc.w -1
(1)  290/  FF1DCC : FFFF                		dc.w -1
(1)  291/  FF1DCE : 00D0                		dc.w 200+8
(1)  292/  FF1DD0 : FFFF                		dc.w -1
(1)  293/  FF1DD2 : 00D5                		dc.w 200+13 ; $0006
(1)  294/  FF1DD4 : FFFF                		dc.w -1
(1)  295/  FF1DD6 : FFFF                		dc.w -1
(1)  296/  FF1DD8 : FFFF                		dc.w -1
(1)  297/  FF1DDA : FFFF                		dc.w -1
(1)  298/  FF1DDC : FFFF                		dc.w -1
(1)  299/  FF1DDE : FFFF                		dc.w -1
(1)  300/  FF1DE0 : FFFF                		dc.w -1
(1)  301/  FF1DE2 : FFFF                		dc.w -1
(1)  302/  FF1DE4 :                     
(1)  303/  FF1DE4 : 00E8                		dc.w 200+32
(1)  304/  FF1DE6 : FFFF                		dc.w -1
(1)  305/  FF1DE8 : FFFF                		dc.w -1
(1)  306/  FF1DEA : FFFF                		dc.w -1
(1)  307/  FF1DEC : FFFF                		dc.w -1
(1)  308/  FF1DEE : FFFF                		dc.w -1
(1)  309/  FF1DF0 : FFFF                		dc.w -1
(1)  310/  FF1DF2 : FFFF                		dc.w -1
(1)  311/  FF1DF4 : FFFF                		dc.w -1
(1)  312/  FF1DF6 : FFFF                		dc.w -1
(1)  313/  FF1DF8 : FFFF                		dc.w -1
(1)  314/  FF1DFA : FFFF                		dc.w -1
(1)  315/  FF1DFC : FFFF                		dc.w -1
(1)  316/  FF1DFE : FFFF                		dc.w -1
(1)  317/  FF1E00 : FFFF                		dc.w -1
(1)  318/  FF1E02 : FFFF                		dc.w -1
(1)  319/  FF1E04 :                     
(1)  320/  FF1E04 :                     ; ====================================================================
(1)  321/  FF1E04 :                     ; ----------------------------------------------
(1)  322/  FF1E04 :                     ; common subs
(1)  323/  FF1E04 :                     ; ----------------------------------------------
(1)  324/  FF1E04 :                     
(1)  325/  FF1E04 :                     .fade_in:
(1)  326/  FF1E04 : 31FC 0001 A99E      		move.w	#1,(RAM_FadeMdReq).w
(1)  327/  FF1E0A : 31FC 0001 A9A6      		move.w	#1,(RAM_FadeMarsReq).w
(1)  328/  FF1E10 : 31FC 0001 A9A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  329/  FF1E16 : 31FC 0001 A9A8      		move.w	#1,(RAM_FadeMarsIncr).w
(1)  330/  FF1E1C : 31FC 0002 A9A2      		move.w	#2,(RAM_FadeMdDelay).w
(1)  331/  FF1E22 : 31FC 0000 A9AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  332/  FF1E28 : 6024                		bra.s	.loop2
(1)  333/  FF1E2A :                     
(1)  334/  FF1E2A :                     .fade_out:
(1)  335/  FF1E2A : 31FC 0002 A99E      		move.w	#2,(RAM_FadeMdReq).w
(1)  336/  FF1E30 : 31FC 0002 A9A6      		move.w	#2,(RAM_FadeMarsReq).w
(1)  337/  FF1E36 : 31FC 0001 A9A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  338/  FF1E3C : 31FC 0001 A9A8      		move.w	#1,(RAM_FadeMarsIncr).w
(1)  339/  FF1E42 : 31FC 0002 A9A2      		move.w	#2,(RAM_FadeMdDelay).w
(1)  340/  FF1E48 : 31FC 0000 A9AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  341/  FF1E4E :                     .loop2:
(1)  342/  FF1E4E : 6100 F82E           		bsr	System_WaitFrame
(1)  343/  FF1E52 : 6100 E836           		bsr	Video_RunFade
(1)  344/  FF1E56 : 66F6                		bne.s	.loop2
(1)  345/  FF1E58 : 4E75                		rts
(1)  346/  FF1E5A :                     
(1)  347/  FF1E5A :                     ; ====================================================================
(1)  348/  FF1E5A :                     ; ------------------------------------------------------
(1)  349/  FF1E5A :                     ; Subroutines
(1)  350/  FF1E5A :                     ; ------------------------------------------------------
(1)  351/  FF1E5A :                     
(1)  352/  FF1E5A :                     ; ------------------------------------------------
(1)  353/  FF1E5A :                     ; Animate title
(1)  354/  FF1E5A :                     ; ------------------------------------------------
(1)  355/  FF1E5A :                     
(1)  356/  FF1E5A :                     Title_AnimateFg:
(1)  357/  FF1E5A :                     ; 		lea	(RAM_HorScroll),a5
(1)  358/  FF1E5A :                     ; 		move.w	#224-1,d7
(1)  359/  FF1E5A :                     ; 		move.w	(RAM_Ttle_HorBg).w,d4
(1)  360/  FF1E5A :                     ; 		lsr.w	#2,d4
(1)  361/  FF1E5A :                     ; 		neg.w	d4
(1)  362/  FF1E5A :                     ; .hnextfg:
(1)  363/  FF1E5A :                     ; 		move.w	d4,2(a5)
(1)  364/  FF1E5A :                     ; 		adda	#4,a5
(1)  365/  FF1E5A :                     ; 		dbf	d7,.hnextfg
(1)  366/  FF1E5A :                     
(1)  367/  FF1E5A : 4BF8 9744           		lea	(RAM_HorScroll),a5
(1)  368/  FF1E5E : 3E3C 007A           		move.w	#SET_MENUTOPLINE-1,d7
(1)  369/  FF1E62 : 3838 B64A           		move.w	(RAM_Ttle_HorVal).w,d4
(1)  370/  FF1E66 :                     .hnext:
(1)  371/  FF1E66 : 3004                		move.w	d4,d0
(1)  372/  FF1E68 : 6100 FB06           		bsr	System_SineWave
(1)  373/  FF1E6C : E082                		asr.l	#8,d2
(1)  374/  FF1E6E : EE82                		asr.l	#7,d2
(1)  375/  FF1E70 : 3A82                		move.w	d2,(a5)
(1)  376/  FF1E72 : DAFC 0004           		adda	#4,a5
(1)  377/  FF1E76 : 3A38 B662           		move.w	(RAM_Ttle_SpdUsr).w,d5
(1)  378/  FF1E7A : E24D                		lsr.w	#1,d5
(1)  379/  FF1E7C : D845                		add.w	d5,d4
(1)  380/  FF1E7E :                     ; 		add.w	#2,d4
(1)  381/  FF1E7E : 51CF FFE6           		dbf	d7,.hnext
(1)  382/  FF1E82 :                     ;
(1)  383/  FF1E82 : 4BF8 9B04           		lea	(RAM_VerScroll),a5
(1)  384/  FF1E86 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  385/  FF1E8A : 3838 B64E           		move.w	(RAM_Ttle_VerVal).w,d4
(1)  386/  FF1E8E :                     .vnext:
(1)  387/  FF1E8E : 3004                		move.w	d4,d0
(1)  388/  FF1E90 : 6100 FADE           		bsr	System_SineWave
(1)  389/  FF1E94 : E082                		asr.l	#8,d2
(1)  390/  FF1E96 : EE82                		asr.l	#7,d2
(1)  391/  FF1E98 : 4442                		neg.w	d2
(1)  392/  FF1E9A : 3A82                		move.w	d2,(a5)
(1)  393/  FF1E9C : DAFC 0004           		adda	#4,a5
(1)  394/  FF1EA0 : D878 B662           		add.w	(RAM_Ttle_SpdUsr).w,d4
(1)  395/  FF1EA4 :                     ; 		add.w	#2,d4
(1)  396/  FF1EA4 : 51CF FFE8           		dbf	d7,.vnext
(1)  397/  FF1EA8 : 3E38 B662           		move.w	(RAM_Ttle_SpdUsr).w,d7
(1)  398/  FF1EAC : DF78 B64E           		add.w	d7,(RAM_Ttle_VerVal).w
(1)  399/  FF1EB0 : DF78 B64A           		add.w	d7,(RAM_Ttle_HorVal).w
(1)  400/  FF1EB4 : 4E75                		rts
(1)  401/  FF1EB6 :                     
(1)  402/  FF1EB6 :                     Title_PrintCursor:
(1)  403/  FF1EB6 : 223C 0000 0206      		move.l	#locate(0,2,6),d1
(1)  404/  FF1EBC : 41FA 0162           		lea	str_Cursor(pc),a0
(1)  405/  FF1EC0 :                     ; 		btst	#0,(RAM_Tite_PickOpt+1).w
(1)  406/  FF1EC0 :                     ; 		beq.s	.nocur_0
(1)  407/  FF1EC0 :                     ; 		lea	str_CursorOut(pc),a0
(1)  408/  FF1EC0 :                     ; .nocur_0:
(1)  409/  FF1EC0 : 7000                		moveq	#0,d0
(1)  410/  FF1EC2 : 3038 B668           		move.w	(RAM_Tite_UsrOpt_T).w,d0
(1)  411/  FF1EC6 : D081                		add.l	d1,d0
(1)  412/  FF1EC8 : 6000 E5EC           		bra	Video_Print
(1)  413/  FF1ECC :                     
(1)  414/  FF1ECC :                     ; 		move.l	#locate(0,2,16+1),d1
(1)  415/  FF1ECC :                     ; 		lea	str_Cursor(pc),a0
(1)  416/  FF1ECC :                     ; 		btst	#0,(RAM_Tite_PickOpt+1).w
(1)  417/  FF1ECC :                     ; 		bne.s	.nocur_1
(1)  418/  FF1ECC :                     ; 		lea	str_CursorOut(pc),a0
(1)  419/  FF1ECC :                     ; .nocur_1:
(1)  420/  FF1ECC :                     ; 		moveq	#0,d0
(1)  421/  FF1ECC :                     ; 		move.w	(RAM_Tite_UsrOpt_B).w,d0
(1)  422/  FF1ECC :                     ; 		add.l	d1,d0
(1)  423/  FF1ECC :                     ; 		bra	Video_Print
(1)  424/  FF1ECC :                     
(1)  425/  FF1ECC :                     ; ====================================================================
(1)  426/  FF1ECC :                     ; ------------------------------------------------------
(1)  427/  FF1ECC :                     ; VBlank
(1)  428/  FF1ECC :                     ; ------------------------------------------------------
(1)  429/  FF1ECC :                     
(1)  430/  FF1ECC :                     ; ------------------------------------------------------
(1)  431/  FF1ECC :                     ; HBlank
(1)  432/  FF1ECC :                     ; ------------------------------------------------------
(1)  433/  FF1ECC :                     
(1)  434/  FF1ECC :                     HInt_Title:
(1)  435/  FF1ECC : 46FC 2700           		move.w	#$2700,sr
(1)  436/  FF1ED0 : 23FC 4000 0010 00C0 		move.l	#$40000010,(vdp_ctrl).l
                    0004                
(1)  437/  FF1EDA :                     	rept (320/16)
(1)  438/  FF1EDA :                     		move.l	#0,(vdp_data).l
(1)  439/  FF1EDA :                     	endm
(1)  438/  FF1EDA : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1EE4 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1EEE : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1EF8 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F02 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F0C : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F16 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F20 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F2A : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F34 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F3E : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F48 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F52 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F5C : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F66 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F70 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F7A : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F84 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F8E : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  438/  FF1F98 : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)  440/  FF1FA2 :                     
(1)  441/  FF1FA2 :                     ; 	; Third 2cell is cursor
(1)  442/  FF1FA2 :                     ; 		move.w	#0,(vdp_data).l
(1)  443/  FF1FA2 :                     ; 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  444/  FF1FA2 :                     ; 		move.w	#0,(vdp_data).l
(1)  445/  FF1FA2 :                     ; 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  446/  FF1FA2 :                     ; 		move.w	(RAM_Tite_VerBot),(vdp_data).l
(1)  447/  FF1FA2 :                     ; 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  448/  FF1FA2 :                     ; 	rept (320/16)
(1)  449/  FF1FA2 :                     ; 		move.w	#0,(vdp_data).l
(1)  450/  FF1FA2 :                     ; 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  451/  FF1FA2 :                     ; 	endm
(1)  452/  FF1FA2 : 4E73                		rte
(1)  453/  FF1FA4 :                     
(1)  454/  FF1FA4 :                     ; ====================================================================
(1)  455/  FF1FA4 :                     ; ------------------------------------------------------
(1)  456/  FF1FA4 :                     ; Objects
(1)  457/  FF1FA4 :                     ; ------------------------------------------------------
(1)  458/  FF1FA4 :                     
(1)  459/  FF1FA4 :                     ; ====================================================================
(1)  460/  FF1FA4 :                     ; ----------------------------------------------------------------
(1)  461/  FF1FA4 :                     ; Small data
(1)  462/  FF1FA4 :                     ; ----------------------------------------------------------------
(1)  463/  FF1FA4 :                     
(1)  464/  FF1FA4 : 4745 4D41 2F4E 696B str_TitleS:	dc.b "GEMA/Nikona sound driver",0
                    6F6E 6120 736F 756E 
                    6420 6472 6976 6572 
                    00                  
(1)  465/  FF1FBD :                     		align 2
(1)  466/  FF1FBE : 5472 6163 6B49 440A str_TitleSfx:	dc.b "TrackID",$A
(1)  467/  FF1FC6 : 0A                  		dc.b $A
(1)  468/  FF1FC7 : 2020 6765 6D61 506C 		dc.b "  gemaPlayTrack",$A
                    6179 5472 6163 6B0A 
(1)  469/  FF1FD7 : 2020 6765 6D61 5374 		dc.b "  gemaStopTrack",$A
                    6F70 5472 6163 6B0A 
(1)  470/  FF1FE7 : 2020 6765 6D61 5374 		dc.b "  gemaStopAll",$A
                    6F70 416C 6C0A      
(1)  471/  FF1FF5 : 2020 3F3F 3F3F 0A   		dc.b "  ????",$A
(1)  472/  FF1FFC : 2020 3F3F 3F3F 0A   		dc.b "  ????",$A
(1)  473/  FF2003 : 2020 3F3F 3F3F 0A   		dc.b "  ????",$A
(1)  474/  FF200A : 2020 3F3F 3F3F 00   		dc.b "  ????",0
(1)  475/  FF2011 :                     		align 2
(1)  476/  FF2012 : 5C77 00             str_TitlDrwID:	dc.b "\\w",0
(1)  477/  FF2015 : FFFF B664           		dc.l RAM_Ttle_SFX
(1)  478/  FF2019 :                     		align 2
(1)  479/  FF201A :                     
(1)  480/  FF201A : 200A                str_CursorOut:	dc.b " ",$A
(1)  481/  FF201C : 200A                		dc.b " ",$A
(1)  482/  FF201E : 2000                		dc.b " ",0
(1)  483/  FF2020 :                     		align 2
(1)  484/  FF2020 : 200A                str_Cursor:	dc.b " ",$A
(1)  485/  FF2022 : 3E0A                		dc.b ">",$A
(1)  486/  FF2024 : 2000                		dc.b " ",0
(1)  487/  FF2026 :                     		align 2
(1)  488/  FF2026 :                     
(1)  489/  FF2026 :                     Pal_Title_FG:
(1)  490/  FF2026 :                     		binclude "data/title/title_pal.bin"
(1)  491/  FF2086 :                     		align 2
(1)  492/  FF2086 :                     Map_Title_FG:
(1)  493/  FF2086 :                     		binclude "data/title/title_map.bin"
(1)  494/  FF22EE :                     		align 2
(1)  495/  FF22EE :                     Pal_Title_BG:
(1)  496/  FF22EE :                     		binclude "data/title/bg_pal.bin"
(1)  497/  FF230E :                     		align 2
(1)  498/  FF230E :                     Map_Title_BG:
(1)  499/  FF230E :                     		binclude "data/title/bg_map.bin"
(1)  500/  FF2BCE :                     		align 2
(1)  501/  FF2BCE :                     
(1)  502/  FF2BCE :                     ; ====================================================================
(1)  503/  FF2BCE :                     
      76/  FF2BCE :                     .here:
THIS RAM-CODE ends at: FF2BCE
      78/  FF2BCE :                     		message "THIS RAM-CODE ends at: \{.here}"
      80/    3496 :                     		dephase
      81/    3496 :                     ; RamCode_Scrn2:
      82/    3496 :                     ; 		phase RAMCODE_USER	; 32X 68k-RAM bank
      83/    3496 :                     ; 		include "code/screen_2.asm"
      84/    3496 :                     ; .here:
      85/    3496 :                     ; 	if MOMPASS=5
      86/    3496 :                     ; 		message "THIS RAM-CODE ends at: \{.here}"
      87/    3496 :                     ; 	endif
      88/    3496 :                     ; 		dephase
      89/    3496 :                     
      90/    3496 :                     ; ====================================================================
      91/    3496 :                     ; --------------------------------------------------------
      92/    3496 :                     ; Stuff stored on the 880000+ ROM area
      93/    3496 :                     ; --------------------------------------------------------
      94/    3496 :                     
      95/    3496 :                     		align 4
      96/  883498 :                     		phase $880000+*
      97/  883498 :                     		include "system/md/sub_dreq.asm"	; 32X ONLY: DREQ transfer only works on 880000
(1)    1/  883498 :                     ; --------------------------------------------------------
(1)    2/  883498 :                     ; System_RomSendDreq
(1)    3/  883498 :                     ;
(1)    4/  883498 :                     ; Send data to the 32X using DREQ and
(1)    5/  883498 :                     ; the CMD interrupt
(1)    6/  883498 :                     ;
(1)    7/  883498 :                     ; Input:
(1)    8/  883498 :                     ; a0 - LONG | Source data to transfer
(1)    9/  883498 :                     ; d0 - WORD | Size (aligned by 8, MUST end with 0 or 8)
(1)   10/  883498 :                     ;
(1)   11/  883498 :                     ; CALL THIS OUTSIDE OF VBLANK ONLY, THIS DISABLES
(1)   12/  883498 :                     ; INTERRUPTS.
(1)   13/  883498 :                     ;
(1)   14/  883498 :                     ; Hardware NOTE:
(1)   15/  883498 :                     ; THIS CODE ONLY WORKS PROPERLY ON THE
(1)   16/  883498 :                     ; $880000/$900000 AREAS.
(1)   17/  883498 :                     ; Emulators ignore this limitation.
(1)   18/  883498 :                     ; --------------------------------------------------------
(1)   19/  883498 :                     
(1)   20/  883498 :                     System_RomSendDreq:
(1)   21/  883498 : 40C7                		move.w	sr,d7
(1)   22/  88349A : 46FC 2700           		move.w	#$2700,sr
(1)   23/  88349E : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)   24/  8834A4 : 49F9 00A1 5112      		lea	($A15112).l,a4
(1)   25/  8834AA :                     ; 		btst	#7,comm12(a5)
(1)   26/  8834AA :                     ; 		bne.s	.bad
(1)   27/  8834AA :                     ; 		btst	#7,dreqctl+1(a5)	; If FIFO got full, skip.
(1)   28/  8834AA :                     ; 		bne.s	.bad
(1)   29/  8834AA : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Set 68S
(1)   30/  8834B0 : 3C00                		move.w	d0,d6			; Length in bytes
(1)   31/  8834B2 : E24E                		lsr.w	#1,d6			; d6 - (length/2)
(1)   32/  8834B4 : 3B46 0010           		move.w	d6,dreqlen(a5)		; Set transfer length (size/2)
(1)   33/  8834B8 : 3A06                		move.w	d6,d5			; d5 - (length/2)/4
(1)   34/  8834BA : E44D                		lsr.w	#2,d5
(1)   35/  8834BC : 9A7C 0001           		sub.w	#1,d5
(1)   36/  8834C0 : 08ED 0000 0003      		bset	#0,standby(a5)
(1)   37/  8834C6 : 082D 0006 002C      .wait_bit:	btst	#6,comm12(a5)
(1)   38/  8834CC : 67F8                		beq.s	.wait_bit
(1)   39/  8834CE : 08AD 0006 002C      		bclr	#6,comm12(a5)
(1)   40/  8834D4 : 3B7C 0004 0006      		move.w	#%100,dreqctl(a5)	; Set 68S
(1)   41/  8834DA : 3898                .l0:		move.w  (a0)+,(a4)		; *** CRITICAL PART***
(1)   42/  8834DC : 3898                		move.w  (a0)+,(a4)
(1)   43/  8834DE : 3898                		move.w  (a0)+,(a4)
(1)   44/  8834E0 : 3898                		move.w  (a0)+,(a4)
(1)   45/  8834E2 : 51CD FFF6           		dbf	d5,.l0
(1)   46/  8834E6 : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Set 68S
(1)   47/  8834EC : 46C7                		move.w	d7,sr
(1)   48/  8834EE : 4E75                		rts
(1)   49/  8834F0 :                     .bad:
(1)   50/  8834F0 :                     ; 		move.w	#%000,dreqctl(a5)
(1)   51/  8834F0 : 46C7                		move.w	d7,sr
(1)   52/  8834F2 : 4E75                		rts
(1)   53/  8834F4 :                     
      98/  8834F4 :                     Z80_CODE:	include "sound/gema_zdrv.asm"		; Called once
(1)    1/  8834F4 :                     ; ====================================================================
(1)    2/  8834F4 :                     ; --------------------------------------------------------
(1)    3/  8834F4 :                     ; GEMA/Nikona Z80 code v0.5
(1)    4/  8834F4 :                     ; (C)2023 GenesisFan64
(1)    5/  8834F4 :                     ;
(1)    6/  8834F4 :                     ; TIP:
(1)    7/  8834F4 :                     ; For the 32X put this on the 880000 area
(1)    8/  8834F4 :                     ; as this is only loaded once.
(1)    9/  8834F4 :                     ; --------------------------------------------------------
(1)   10/  8834F4 :                     
(1)   11/  8834F4 :                     Z80_TOP:
(1)   12/  8834F4 :                     		cpu Z80		; [AS] Enter Z80
(1)   13/       0 :                     		phase 0		; [AS]
(1)   14/       0 :                     
(1)   15/       0 :                     ; --------------------------------------------------------
(1)   16/       0 :                     ; SETTINGS
(1)   17/       0 :                     ; --------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     ; !! = leave as-is unless you know what you are doing.
(1)   20/       0 : =11H                MAX_TRKCHN	equ 17		; !! Max Internal tracker channels: 4PSG + 6FM + 7PWM (**AFFECTS 32X SIDE)
(1)   21/       0 : =8H                 MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) (**AFFECTS WAVE QUALITY)
(1)   22/       0 : =40H                MAX_RCACH	equ 40h		; Max storage for ROM pattern data *1-BIT SIZES ONLY, MUST BE ALIGNED*
(1)   23/       0 : =10H                MAX_TBLSIZE	equ 10h		; Max size for chip tables
(1)   24/       0 : =FH                 MAX_INS		equ 15		; Max Cache'd ROM instruments per track
(1)   25/       0 : =18H                MAX_BLOCKS	equ 24		; Max Cache'd ROM blocks per track
(1)   26/       0 : =FH                 MAX_HEADS	equ 15		; Max Cache'd ROM headers per track
(1)   27/       0 : =0H                 ZSET_TESTME	equ 0		; Set to 1 to "hear"-test the DAC playback
(1)   28/       0 :                     
(1)   29/       0 :                     ; --------------------------------------------------------
(1)   30/       0 :                     ; Structs
(1)   31/       0 :                     ; --------------------------------------------------------
(1)   32/       0 :                     
(1)   33/       0 :                     ; trkBuff struct: 00h-30h
(1)   34/       0 :                     ; unused bytes are free.
(1)   35/       0 :                     ;
(1)   36/       0 :                     ; trk_Status: %ERPx xxx0
(1)   37/       0 :                     ; E - enabled
(1)   38/       0 :                     ; R - Init|Restart track
(1)   39/       0 :                     ; P - refill-on-playback
(1)   40/       0 :                     ; 0 - Use global sub-beat
(1)   41/       0 : =0H                 trk_status	equ 00h	; ** Track Status and flags (MUST BE at 00h)
(1)   42/       0 : =1H                 trk_seqId	equ 01h ; ** Track ID to play.
(1)   43/       0 : =2H                 trk_setBlk	equ 02h	; ** Start on this block
(1)   44/       0 : =3H                 trk_tickSet	equ 03h	; ** Ticks for this track
(1)   45/       0 : =4H                 trk_Blocks	equ 04h ; [W] Current track's blocks
(1)   46/       0 : =6H                 trk_Patt	equ 06h ; [W] Current track's heads and patterns
(1)   47/       0 : =8H                 trk_Instr	equ 08h ; [W] Current track's instruments
(1)   48/       0 : =AH                 trk_Read	equ 0Ah	; [W] Track current pattern-read pos
(1)   49/       0 : =CH                 trk_Rows	equ 0Ch	; [W] Track current row length
(1)   50/       0 : =EH                 trk_cachHalf	equ 0Eh ; ROM-cache halfcheck
(1)   51/       0 : =FH                 trk_cachInc	equ 0Fh ; ROM-cache increment
(1)   52/       0 : =10H                trk_rowPause	equ 10h	; Row-pause timer
(1)   53/       0 : =11H                trk_tickTmr	equ 11h	; Ticks timer
(1)   54/       0 : =12H                trk_currBlk	equ 12h	; Current block
(1)   55/       0 : =13H                trk_Panning	equ 13h ; Global panning for this track %LR000000
(1)   56/       0 : =14H                trk_Priority	equ 14h ; Priority level for this buffer
(1)   57/       0 : =15H                trk_LastBkIns	equ 15h
(1)   58/       0 : =16H                trk_LastBkBlk	equ 16h
(1)   59/       0 : =17H                trk_LastBkHdrs	equ 17h
(1)   60/       0 : =1CH                trk_MaxChnls	equ 1Ch	; MAX avaialble channels
(1)   61/       0 : =1DH                trk_MaxBlks	equ 1Dh ;     ----      blocks
(1)   62/       0 : =1EH                trk_MaxHdrs	equ 1Eh ;     ----      headers
(1)   63/       0 : =1FH                trk_MaxIns	equ 1Fh ;     ----      intruments
(1)   64/       0 : =20H                trk_RomCPatt	equ 20h ; [3b] ROM current pattern data to be cache'd
(1)   65/       0 : =23H                trk_RomPatt	equ 23h ; [3b] ROM TOP pattern data
(1)   66/       0 : =26H                trk_ChnList	equ 26h ; ** [W] Pointer to channel list for this buffer
(1)   67/       0 : =28H                trk_ChnCBlk	equ 28h ; ** [W] Pointer to block storage
(1)   68/       0 : =2AH                trk_ChnCHead	equ 2Ah ; ** [W] Pointer to header storage
(1)   69/       0 : =2CH                trk_ChnCIns	equ 2Ch	; ** [W] Pointer to intrument storage (ALWAYS used)
(1)   70/       0 : =2EH                trk_ChnCach	equ 2Eh	; ** [W] Pointer to pattern storage
(1)   71/       0 :                     
(1)   72/       0 :                     ; chnBuff struct, 8 bytes ONLY
(1)   73/       0 :                     ;
(1)   74/       0 :                     ; chnl_Flags: LR00evin
(1)   75/       0 :                     ; LR - Left/Right panning bits (REVERSE: 0-ON 1-OFF)
(1)   76/       0 :                     ; e  - Effect*
(1)   77/       0 :                     ; v  - Volume*
(1)   78/       0 :                     ; i  - Intrument*
(1)   79/       0 :                     ; n  - Note*
(1)   80/       0 :                     ; * Gets cleared later.
(1)   81/       0 :                     
(1)   82/       0 : =0H                 chnl_Flags	equ 0	; Playback flags
(1)   83/       0 : =1H                 chnl_Chip	equ 1	; Current Chip ID + priority for this channel
(1)   84/       0 : =2H                 chnl_Note	equ 2
(1)   85/       0 : =3H                 chnl_Ins	equ 3	; Starting from 01h
(1)   86/       0 : =4H                 chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   87/       0 : =5H                 chnl_EffId	equ 5
(1)   88/       0 : =6H                 chnl_EffArg	equ 6
(1)   89/       0 : =7H                 chnl_Type	equ 7	; Impulse-note update bits
(1)   90/       0 :                     
(1)   91/       0 :                     ; --------------------------------------------------------
(1)   92/       0 :                     ; Variables
(1)   93/       0 :                     ; --------------------------------------------------------
(1)   94/       0 :                     
(1)   95/       0 :                     ; Z80 opcode labels for the wave playback routines:
(1)   96/       0 : =0H                 zopcNop		equ	00h
(1)   97/       0 : =8H                 zopcEx		equ	08h
(1)   98/       0 : =C9H                zopcRet		equ 	0C9h
(1)   99/       0 : =D9H                zopcExx		equ	0D9h		; (dac_me ONLY)
(1)  100/       0 : =F5H                zopcPushAf	equ	0F5h		; (dac_fill ONLY)
(1)  101/       0 :                     
(1)  102/       0 :                     ; PSG external control
(1)  103/       0 :                     ; GEMS style.
(1)  104/       0 : =0H                 COM		equ	0
(1)  105/       0 : =4H                 LEV		equ	4
(1)  106/       0 : =8H                 ATK		equ	8
(1)  107/       0 : =CH                 DKY		equ	12
(1)  108/       0 : =10H                SLV		equ	16
(1)  109/       0 : =14H                RRT		equ	20
(1)  110/       0 : =18H                MODE		equ	24
(1)  111/       0 : =1CH                DTL		equ	28
(1)  112/       0 : =20H                DTH		equ	32
(1)  113/       0 : =24H                ALV		equ	36
(1)  114/       0 : =28H                FLG		equ	40
(1)  115/       0 : =2CH                TMR		equ	44
(1)  116/       0 : =30H                PVOL		equ	48
(1)  117/       0 : =34H                PARP		equ	52
(1)  118/       0 : =38H                PTMR		equ	56
(1)  119/       0 :                     
(1)  120/       0 :                     ; PWM control
(1)  121/       0 : =0H                 PWCOM		equ	0
(1)  122/       0 : =8H                 PWPTH_V		equ	8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  123/       0 : =10H                PWPHL		equ	16	; Pitch LSB
(1)  124/       0 : =18H                PWOUTF		equ	24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  125/       0 : =20H                PWINSH		equ	32	; **
(1)  126/       0 : =28H                PWINSM		equ	40	; **
(1)  127/       0 : =30H                PWINSL		equ	48	; **
(1)  128/       0 :                     
(1)  129/       0 :                     ; ====================================================================
(1)  130/       0 :                     ; --------------------------------------------------------
(1)  131/       0 :                     ; Code starts here
(1)  132/       0 :                     ; --------------------------------------------------------
(1)  133/       0 :                     
(1)  134/       0 : F3                  		di			; Disable interrputs
(1)  135/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  136/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  137/       6 : 18 7B               		jr	z80_init	; Jump to z80_init
(1)  138/       8 :                     
(1)  139/       8 :                     ; --------------------------------------------------------
(1)  140/       8 :                     ; RST 8 (dac_me)
(1)  141/       8 :                     ; *** self-modifiable code ***
(1)  142/       8 :                     ;
(1)  143/       8 :                     ; Writes wave data to DAC using data stored
(1)  144/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  145/       8 :                     ; opcodes to keep the samplerate stable.
(1)  146/       8 :                     ;
(1)  147/       8 :                     ; Input (EXX):
(1)  148/       8 :                     ;  c - WAVE buffer MSB
(1)  149/       8 :                     ; de - Pitch (xx.00)
(1)  150/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  151/       8 :                     ;
(1)  152/       8 :                     ; Uses (EXX):
(1)  153/       8 :                     ; b
(1)  154/       8 :                     ;
(1)  155/       8 :                     ; Notes:
(1)  156/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  157/       8 :                     ; wave playback.
(1)  158/       8 :                     ;
(1)  159/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  160/       8 :                     ; and
(1)  161/       8 :                     ; call dac_off to disable and enable FM6.
(1)  162/       8 :                     ; --------------------------------------------------------
(1)  163/       8 :                     
(1)  164/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  165/       8 : (MACRO)             		org 8
(1)  166/       8 : D9                  dac_me:		exx			; <-- this changes between EXX(play) and RET(stop)
(1)  167/       9 : 08                  		ex	af,af'		; Swap af
(1)  168/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  169/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  170/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  171/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  172/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  173/      12 : 7E                  		ld	a,(hl)		; Now read byte from the wave buffer
(1)  174/      13 : 32 01 40            		ld	(Zym_data_1),a	; and write it to DAC
(1)  175/      16 : 65                  		ld	h,l		; get hl back
(1)  176/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  177/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  178/      19 : 08                  		ex	af,af'		; return af
(1)  179/      1A : D9                  		exx
(1)  180/      1B : C9                  		ret
(1)  181/      1C :                     
(1)  182/      1C :                     ; --------------------------------------------------------
(1)  183/      1C :                     ; 1Ch
(1)  184/      1C : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1)  185/      1E : E8 00               sbeatPtck	dw 200+32	; Default global subbeats (-32 for PAL)
(1)  186/      20 :                     
(1)  187/      20 :                     ; --------------------------------------------------------
(1)  188/      20 :                     ; RST 20h (dac_me)
(1)  189/      20 :                     ; *** self-modifiable code ***
(1)  190/      20 :                     ;
(1)  191/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  192/      20 :                     ; it playing.
(1)  193/      20 :                     ;
(1)  194/      20 :                     ; *** THIS BREAKS ALL REGISTERS IF REFILL
(1)  195/      20 :                     ; IS REQUESTED ***
(1)  196/      20 :                     ; --------------------------------------------------------
(1)  197/      20 :                     
(1)  198/      20 : (MACRO)             		org 20h
(1)  199/      20 : F5                  dac_fill:	push	af		; <-- changes between PUSH AF(playing) and RET(stopped)
(1)  200/      21 : 3A 2F 00            		ld	a,(dDacFifoMid)	; a - Get mid-way value
(1)  201/      24 : D9                  		exx
(1)  202/      25 : AC                  		xor	h		; Grab LSB.00
(1)  203/      26 : D9                  		exx
(1)  204/      27 : E6 80               		and	80h		; Check if bit changed
(1)  205/      29 : C4 CF 11            		call	nz,dac_refill	; If yes: Refill and update LSB to check
(1)  206/      2C : F1                  		pop	af
(1)  207/      2D : C9                  		ret
(1)  208/      2E :                     
(1)  209/      2E :                     ; --------------------------------------------------------
(1)  210/      2E :                     ; 02Eh
(1)  211/      2E : 00                  currTickBits	db 0			; 2Eh: Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1)  212/      2F : 00                  dDacFifoMid	db 0			; 2Fh: WAVE play halfway refill flag (00h/80h)
(1)  213/      30 : 00 00 00            dDacPntr	db 0,0,0		; 30h: WAVE play current ROM position
(1)  214/      33 : 00 00 00            dDacCntr	db 0,0,0		; 33h: WAVE play length counter
(1)  215/      36 : 00                  x68ksrclsb	db 0			; 36h: transferRom temporal LSB
(1)  216/      37 : 00                  x68ksrcmid	db 0			; 37h: transferRom temporal MID
(1)  217/      38 :                     
(1)  218/      38 :                     ; --------------------------------------------------------
(1)  219/      38 :                     ; Z80 Interrupt at 0038h
(1)  220/      38 :                     ; --------------------------------------------------------
(1)  221/      38 :                     
(1)  222/      38 : (MACRO)             		org 38h			; Align 38h
(1)  223/      38 : ED 73 A9 17         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, use tickFlag+1)
(1)  224/      3C : F3                  		di			; Disable interrupt
(1)  225/      3D : C9                  		ret
(1)  226/      3E :                     
(1)  227/      3E :                     ; --------------------------------------------------------
(1)  228/      3E :                     ; 03Eh
(1)  229/      3E : 00                  trkListPage	db 0			; 3Eh: Current tracklist page/bank
(1)  230/      3F : 00                  marsUpd		db 0			; 3Fh: Flag to request a PWM transfer
(1)  231/      40 :                     
(1)  232/      40 :                     ; --------------------------------------------------------
(1)  233/      40 :                     ; 68K Read/Write area at 40h
(1)  234/      40 :                     ; --------------------------------------------------------
(1)  235/      40 :                     
(1)  236/      40 : (MACRO)             		org 40h
(1)  237/      40 :                     commZfifo	ds 40h			; Buffer for commands: 40h bytes
(1)  238/      80 : 00                  commZWrite	db 0			; 80h: cmd fifo wptr (from 68k)
(1)  239/      81 : 00                  commZRomBlk	db 0			; 81h: 68k ROM block flag
(1)  240/      82 : 00                  marsBlock	db 0			; 82h: flag to BLOCK PWM transfers.
(1)  241/      83 :                     
(1)  242/      83 :                     ; --------------------------------------------------------
(1)  243/      83 :                     ; Initilize
(1)  244/      83 :                     ; --------------------------------------------------------
(1)  245/      83 :                     
(1)  246/      83 :                     z80_init:
(1)  247/      83 : CD 82 0E            		call	gema_init		; Init values
(1)  248/      86 : FB                  		ei
(1)  249/      87 :                     
(1)  250/      87 :                     ; --------------------------------------------------------
(1)  251/      87 :                     ; MAIN LOOP
(1)  252/      87 :                     ; --------------------------------------------------------
(1)  253/      87 :                     
(1)  254/      87 :                     drv_loop:
(1)  255/      87 : CF                  		rst	8
(1)  256/      88 : CD 2D 0F            		call	get_tick		; Check for Tick on VBlank
(1)  257/      8B : E7                  		rst	20h			; Refill wave
(1)  258/      8C : CF                  		rst	8
(1)  259/      8D : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  260/      8F : 3A AB 17            		ld	a,(tickCnt)
(1)  261/      92 : D6 01               		sub	1
(1)  262/      94 : 38 0B               		jr	c,.noticks
(1)  263/      96 : 32 AB 17            		ld	(tickCnt),a
(1)  264/      99 : CD EF 0F            		call	chip_env		; Process PSG and YM
(1)  265/      9C : CD 2D 0F            		call	get_tick		; Check for another tick
(1)  266/      9F : 06 01               		ld 	b,01b			; Set TICK (01b) flag, and clear BEAT
(1)  267/      A1 :                     .noticks:
(1)  268/      A1 : 3A 1D 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  269/      A4 : D6 01               		sub	1
(1)  270/      A6 : 38 06               		jr	c,.nobeats
(1)  271/      A8 : CF                  		rst	8
(1)  272/      A9 : 32 1D 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  273/      AC : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  274/      AE :                     .nobeats:
(1)  275/      AE : CF                  		rst	8
(1)  276/      AF : 78                  		ld	a,b			; Any beat/tick change?
(1)  277/      B0 : B7                  		or	a
(1)  278/      B1 : 28 14               		jr	z,.neither
(1)  279/      B3 : 32 2E 00            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  280/      B6 : CF                  		rst	8
(1)  281/      B7 : CD 2D 0F            		call	get_tick
(1)  282/      BA : CD FB 04            		call	set_chips		; Send changes to sound chips
(1)  283/      BD : CD 2D 0F            		call	get_tick
(1)  284/      C0 : CF                  		rst	8
(1)  285/      C1 : CD CE 01            		call	upd_track		; Update track data
(1)  286/      C4 : CD 2D 0F            		call	get_tick
(1)  287/      C7 :                     .neither:
(1)  288/      C7 : CD D6 0D            		call	ex_comm			; External communication
(1)  289/      CA : CD 2D 0F            		call	get_tick
(1)  290/      CD :                     .next_cmd:
(1)  291/      CD : 3A 80 00            		ld	a,(commZWrite)		; Check command READ and WRITE indexes
(1)  292/      D0 : 47                  		ld	b,a
(1)  293/      D1 : 3A C2 17            		ld	a,(commZRead)
(1)  294/      D4 : B8                  		cp	b
(1)  295/      D5 : 28 B0               		jr	z,drv_loop		; If both are equal: no requests
(1)  296/      D7 : CF                  		rst	8
(1)  297/      D8 : CD F0 00            		call	.grab_arg
(1)  298/      DB : FE FF               		cp	-1			; Got -1? (Start of command)
(1)  299/      DD : 20 A8               		jr	nz,drv_loop
(1)  300/      DF : CD F0 00            		call	.grab_arg		; Read command number
(1)  301/      E2 : 87                  		add	a,a			; * 2
(1)  302/      E3 : 21 0F 01            		ld	hl,.list		; Then jump to one of these...
(1)  303/      E6 : 16 00               		ld	d,0
(1)  304/      E8 : 5F                  		ld	e,a
(1)  305/      E9 : 19                  		add	hl,de
(1)  306/      EA : 7E                  		ld	a,(hl)
(1)  307/      EB : 23                  		inc	hl
(1)  308/      EC : 66                  		ld	h,(hl)
(1)  309/      ED : CF                  		rst	8
(1)  310/      EE : 6F                  		ld	l,a
(1)  311/      EF : E9                  		jp	(hl)
(1)  312/      F0 :                     
(1)  313/      F0 :                     ; --------------------------------------------------------
(1)  314/      F0 :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  315/      F0 :                     ; --------------------------------------------------------
(1)  316/      F0 :                     
(1)  317/      F0 :                     .grab_arg:
(1)  318/      F0 : D5                  		push	de
(1)  319/      F1 : E5                  		push	hl
(1)  320/      F2 :                     .getcbytel:
(1)  321/      F2 : 3A 80 00            		ld	a,(commZWrite)
(1)  322/      F5 : 57                  		ld	d,a
(1)  323/      F6 : CF                  		rst	8
(1)  324/      F7 : 3A C2 17            		ld	a,(commZRead)
(1)  325/      FA : BA                  		cp	d
(1)  326/      FB : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  327/      FD : 16 00               		ld	d,0
(1)  328/      FF : 5F                  		ld	e,a
(1)  329/     100 : 21 40 00            		ld	hl,commZfifo
(1)  330/     103 : 19                  		add	hl,de
(1)  331/     104 : CF                  		rst	8
(1)  332/     105 : 3C                  		inc	a
(1)  333/     106 : E6 3F               		and	3Fh		; ** command list limit
(1)  334/     108 : 32 C2 17            		ld	(commZRead),a
(1)  335/     10B : 7E                  		ld	a,(hl)		; a - the byte we got
(1)  336/     10C : E1                  		pop	hl
(1)  337/     10D : D1                  		pop	de
(1)  338/     10E : C9                  		ret
(1)  339/     10F :                     
(1)  340/     10F :                     ; --------------------------------------------------------
(1)  341/     10F :                     
(1)  342/     10F :                     .list:
(1)  343/     10F : 2F 01               		dw .cmnd_0		; 00h -
(1)  344/     111 : 32 01               		dw .cmnd_1		; 01h - Play by track number
(1)  345/     113 : 4E 01               		dw .cmnd_2		; 02h - Stop by track number
(1)  346/     115 : 2F 01               		dw .cmnd_0		; 03h - Resume by track number
(1)  347/     117 : 2F 01               		dw .cmnd_0		; 04h -
(1)  348/     119 : 2F 01               		dw .cmnd_0		; 05h -
(1)  349/     11B : 2F 01               		dw .cmnd_0		; 06h -
(1)  350/     11D : 2F 01               		dw .cmnd_0		; 07h -
(1)  351/     11F : 6B 01               		dw .cmnd_8		; 08h - Stop ALL
(1)  352/     121 : 2F 01               		dw .cmnd_0		; 09h -
(1)  353/     123 : 2F 01               		dw .cmnd_0		; 0Ah -
(1)  354/     125 : 2F 01               		dw .cmnd_0		; 0Bh -
(1)  355/     127 : 8D 01               		dw .cmnd_C		; 0Ch - Set GLOBAL sub-beats
(1)  356/     129 : 2F 01               		dw .cmnd_0		; 0Dh -
(1)  357/     12B : 2F 01               		dw .cmnd_0		; 0Eh -
(1)  358/     12D : 2F 01               		dw .cmnd_0		; 0Fh -
(1)  359/     12F :                     
(1)  360/     12F :                     ; --------------------------------------------------------
(1)  361/     12F :                     ; Command 00h
(1)  362/     12F :                     ;
(1)  363/     12F :                     ; Reserved for TESTING purposes.
(1)  364/     12F :                     ; --------------------------------------------------------
(1)  365/     12F :                     
(1)  366/     12F :                     ; TEST COMMAND
(1)  367/     12F :                     
(1)  368/     12F :                     .cmnd_0:
(1)  369/     12F : C3 CD 00            		jp	.next_cmd
(1)  370/     132 :                     
(1)  371/     132 :                     ; 	if MARS
(1)  372/     132 :                     ; 		ld	iy,pwmcom
(1)  373/     132 :                     ; 		ld	hl,.tempset
(1)  374/     132 :                     ; 		ld	de,8
(1)  375/     132 :                     ; 		ld	b,e
(1)  376/     132 :                     ; 		dec	b
(1)  377/     132 :                     ; .copyme:
(1)  378/     132 :                     ; 		ld	a,(hl)
(1)  379/     132 :                     ; 		ld	(iy),a
(1)  380/     132 :                     ; 		inc	hl
(1)  381/     132 :                     ; 		add	iy,de
(1)  382/     132 :                     ; 		djnz	.copyme
(1)  383/     132 :                     ; 		ld	a,1
(1)  384/     132 :                     ; 		ld	(marsUpd),a
(1)  385/     132 :                     ; 		jp	.next_cmd
(1)  386/     132 :                     ; .tempset:
(1)  387/     132 :                     ; 		db 0001b
(1)  388/     132 :                     ; 		db 01h
(1)  389/     132 :                     ; 		db 00h
(1)  390/     132 :                     ; 		db 11110000b|02h
(1)  391/     132 :                     ; 		db (SmpIns_TEST>>16)&0FFh
(1)  392/     132 :                     ; 		db (SmpIns_TEST>>8)&0FFh
(1)  393/     132 :                     ; 		db (SmpIns_TEST)&0FFh
(1)  394/     132 :                     ; 	else
(1)  395/     132 :                     ; 		jp	.next_cmd
(1)  396/     132 :                     ; 	endif
(1)  397/     132 :                     
(1)  398/     132 :                     ; 		call	dac_off
(1)  399/     132 :                     ; 		ld	iy,wave_Start
(1)  400/     132 :                     ; 		ld	hl,.tempset
(1)  401/     132 :                     ; 		ld	b,0Bh
(1)  402/     132 :                     ; .copyme:
(1)  403/     132 :                     ; 		ld	a,(hl)
(1)  404/     132 :                     ; 		ld	(iy),a
(1)  405/     132 :                     ; 		inc	hl
(1)  406/     132 :                     ; 		inc	iy
(1)  407/     132 :                     ; 		djnz	.copyme
(1)  408/     132 :                     ; 		ld	hl,100h
(1)  409/     132 :                     ; 		ld	(wave_Pitch),hl
(1)  410/     132 :                     ; 		ld	a,1
(1)  411/     132 :                     ; 		ld	(wave_Flags),a
(1)  412/     132 :                     ; 		call	dac_play
(1)  413/     132 :                     ; 		jp	.next_cmd
(1)  414/     132 :                     ; .tempset:
(1)  415/     132 :                     ; 		dw TEST_WAVE&0FFFFh
(1)  416/     132 :                     ; 		db TEST_WAVE>>16&0FFh
(1)  417/     132 :                     ; 		dw (TEST_WAVE_E-TEST_WAVE)&0FFFFh
(1)  418/     132 :                     ; 		db (TEST_WAVE_E-TEST_WAVE)>>16&0FFh
(1)  419/     132 :                     ; 		dw 0
(1)  420/     132 :                     ; 		db 0
(1)  421/     132 :                     ; 		dw 0100h;+(ZSET_WTUNE)
(1)  422/     132 :                     
(1)  423/     132 :                     ; --------------------------------------------------------
(1)  424/     132 :                     ; Command 01h:
(1)  425/     132 :                     ;
(1)  426/     132 :                     ; Make new track by sequence number
(1)  427/     132 :                     ; --------------------------------------------------------
(1)  428/     132 :                     
(1)  429/     132 :                     .cmnd_1:
(1)  430/     132 : CD F0 00            		call	.grab_arg	; d0: Sequence ID
(1)  431/     135 : 4F                  		ld	c,a		; copy to c
(1)  432/     136 : CD F0 00            		call	.grab_arg	; d1: Block from
(1)  433/     139 : 47                  		ld	b,a
(1)  434/     13A : CD 9E 01            		call	.srch_frid	; Search buffer with same ID or FREE to use.
(1)  435/     13D : FE FF               		cp	-1
(1)  436/     13F : CA CD 00            		jp	z,.next_cmd	; Return if failed.
(1)  437/     142 : 36 C0               		ld	(hl),0C0h	; ** Write trk_status flags: Enable+Restart
(1)  438/     144 : 23                  		inc	hl
(1)  439/     145 : 71                  		ld	(hl),c		; ** write trk_seqId
(1)  440/     146 : 23                  		inc	hl
(1)  441/     147 : 70                  		ld	(hl),b		; ** write trk_setBlk
(1)  442/     148 : CD CE 04            		call	get_RomTrcks
(1)  443/     14B : C3 CD 00            		jp	.next_cmd
(1)  444/     14E :                     
(1)  445/     14E :                     ; --------------------------------------------------------
(1)  446/     14E :                     ; Command 02h:
(1)  447/     14E :                     ;
(1)  448/     14E :                     ; Stop track by sequence number
(1)  449/     14E :                     ; --------------------------------------------------------
(1)  450/     14E :                     
(1)  451/     14E :                     .cmnd_2:
(1)  452/     14E : CD F0 00            		call	.grab_arg	; d0: Sequence ID
(1)  453/     151 : 4F                  		ld	c,a		; copy to c
(1)  454/     152 : 06 FF               		ld	b,-1
(1)  455/     154 : CD 9E 01            		call	.srch_frid
(1)  456/     157 : FE FF               		cp	-1
(1)  457/     159 : CA CD 00            		jp	z,.next_cmd
(1)  458/     15C : 7E                  		ld	a,(hl)
(1)  459/     15D : CB 7F               		bit	7,a
(1)  460/     15F : CA CD 00            		jp	z,.next_cmd
(1)  461/     162 : 36 FF               		ld	(hl),-1		; Flags | Enable+Restart bits
(1)  462/     164 : 23                  		inc	hl
(1)  463/     165 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  464/     167 : CF                  		rst	8
(1)  465/     168 : C3 CD 00            		jp	.next_cmd
(1)  466/     16B :                     
(1)  467/     16B :                     ; --------------------------------------------------------
(1)  468/     16B :                     ; Command 08h:
(1)  469/     16B :                     ;
(1)  470/     16B :                     ; Stop ALL tracks
(1)  471/     16B :                     ; --------------------------------------------------------
(1)  472/     16B :                     
(1)  473/     16B :                     .cmnd_8:
(1)  474/     16B : DD 21 9D 14         		ld	ix,nikona_BuffList
(1)  475/     16F :                     .next_sall:
(1)  476/     16F : DD 7E 00            		ld	a,(ix)
(1)  477/     172 : FE FF               		cp	-1
(1)  478/     174 : CA CD 00            		jp	z,.next_cmd
(1)  479/     177 : DD 66 01            		ld	h,(ix+1)
(1)  480/     17A : 6F                  		ld	l,a
(1)  481/     17B : 7E                  		ld	a,(hl)		; *** trk_status
(1)  482/     17C : CB 7F               		bit	7,a
(1)  483/     17E : 28 05               		jr	z,.not_on
(1)  484/     180 : 36 FF               		ld	(hl),-1		; *** trk_status: -1 request
(1)  485/     182 : 23                  		inc	hl
(1)  486/     183 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  487/     185 :                     ; 		inc	hl
(1)  488/     185 :                     ; 		ld	(hl),0
(1)  489/     185 :                     .not_on:
(1)  490/     185 : 11 10 00            		ld	de,10h
(1)  491/     188 : DD 19               		add	ix,de
(1)  492/     18A : C3 6F 01            		jp	.next_sall
(1)  493/     18D :                     
(1)  494/     18D :                     ; --------------------------------------------------------
(1)  495/     18D :                     ; Command 0Ch:
(1)  496/     18D :                     ;
(1)  497/     18D :                     ; Set global sub-beats
(1)  498/     18D :                     ; --------------------------------------------------------
(1)  499/     18D :                     
(1)  500/     18D :                     .cmnd_C:
(1)  501/     18D : CD F0 00            		call	.grab_arg	; d0.w: $00xx
(1)  502/     190 : 4F                  		ld	c,a
(1)  503/     191 : CD F0 00            		call	.grab_arg	; d0.w: $xx00
(1)  504/     194 : 32 1F 00            		ld	(sbeatPtck+1),a
(1)  505/     197 : 79                  		ld	a,c
(1)  506/     198 : 32 1E 00            		ld	(sbeatPtck),a
(1)  507/     19B : C3 CD 00            		jp	.next_cmd
(1)  508/     19E :                     
(1)  509/     19E :                     ; ------------------------------------------------
(1)  510/     19E :                     
(1)  511/     19E :                     ; c - trk_currId
(1)  512/     19E :                     ; b - trk_setBlk (-1: ignore)
(1)  513/     19E :                     .srch_frid:
(1)  514/     19E : DD 21 9D 14         		ld	ix,nikona_BuffList
(1)  515/     1A2 : 11 10 00            		ld	de,10h
(1)  516/     1A5 :                     .next:
(1)  517/     1A5 : DD 7E 00            		ld	a,(ix)
(1)  518/     1A8 : FE FF               		cp	-1
(1)  519/     1AA : C8                  		ret	z
(1)  520/     1AB : DD 66 01            		ld	h,(ix+1)
(1)  521/     1AE : 6F                  		ld	l,a
(1)  522/     1AF : 1E 10               		ld	e,10h
(1)  523/     1B1 : DD 19               		add	ix,de
(1)  524/     1B3 : 23                  		inc	hl
(1)  525/     1B4 : CF                  		rst	8
(1)  526/     1B5 : 23                  		inc	hl
(1)  527/     1B6 : 5E                  		ld	e,(hl)		; ** e - trk_currId
(1)  528/     1B7 : 2B                  		dec	hl
(1)  529/     1B8 :                     
(1)  530/     1B8 : 7E                  		ld	a,(hl)		; ** a - trk_Id
(1)  531/     1B9 : 2B                  		dec	hl
(1)  532/     1BA : B9                  		cp	c
(1)  533/     1BB : 20 09               		jr	nz,.not_fnd
(1)  534/     1BD : 78                  		ld	a,b
(1)  535/     1BE : FE FF               		cp	-1
(1)  536/     1C0 : 28 09               		jr	z,.found
(1)  537/     1C2 : 7B                  		ld	a,e
(1)  538/     1C3 : B8                  		cp	b
(1)  539/     1C4 : 28 05               		jr	z,.found
(1)  540/     1C6 :                     .not_fnd:
(1)  541/     1C6 : 7E                  		ld	a,(hl)		; ** a - trk_status
(1)  542/     1C7 : B7                  		or	a
(1)  543/     1C8 : FA A5 01            		jp	m,.next
(1)  544/     1CB :                     .found:
(1)  545/     1CB : CF                  		rst	8
(1)  546/     1CC : AF                  		xor	a
(1)  547/     1CD : C9                  		ret
(1)  548/     1CE :                     
(1)  549/     1CE :                     ; ====================================================================
(1)  550/     1CE :                     ; ----------------------------------------------------------------
(1)  551/     1CE :                     ; MAIN Playback section
(1)  552/     1CE :                     ; ----------------------------------------------------------------
(1)  553/     1CE :                     
(1)  554/     1CE :                     ; ============================================================
(1)  555/     1CE :                     ; --------------------------------------------------------
(1)  556/     1CE :                     ; Read INTERNAL mini-impulse-tracker data
(1)  557/     1CE :                     ; --------------------------------------------------------
(1)  558/     1CE :                     
(1)  559/     1CE :                     upd_track:
(1)  560/     1CE : E7                  		rst	20h
(1)  561/     1CF : FD 21 9D 14         		ld	iy,nikona_BuffList
(1)  562/     1D3 :                     .trk_buffrs:
(1)  563/     1D3 : CF                  		rst	8
(1)  564/     1D4 : FD 7E 00            		ld	a,(iy)
(1)  565/     1D7 : FE FF               		cp	-1
(1)  566/     1D9 : C8                  		ret	z
(1)  567/     1DA : FD E5               		push	iy
(1)  568/     1DC : FD 6E 00            		ld	l,(iy)
(1)  569/     1DF : FD 66 01            		ld	h,(iy+1)
(1)  570/     1E2 : CD EF 01            		call	.read_track
(1)  571/     1E5 : CF                  		rst	8
(1)  572/     1E6 : FD E1               		pop	iy
(1)  573/     1E8 : 11 10 00            		ld	de,10h
(1)  574/     1EB : FD 19               		add	iy,de
(1)  575/     1ED : 18 E4               		jr	.trk_buffrs
(1)  576/     1EF :                     ; ----------------------------------------
(1)  577/     1EF :                     ; iy - Track buffer
(1)  578/     1EF :                     
(1)  579/     1EF :                     .read_track:
(1)  580/     1EF : CF                  		rst	8
(1)  581/     1F0 : E5                  		push	hl
(1)  582/     1F1 : FD E1               		pop	iy
(1)  583/     1F3 : FD 46 00            		ld	b,(iy+trk_status)	; b - Track status and settings
(1)  584/     1F6 : CB 78               		bit	7,b			; bit7: Track active?
(1)  585/     1F8 : C8                  		ret	z
(1)  586/     1F9 : 78                  		ld	a,b
(1)  587/     1FA : FE FF               		cp	-1			; Mid-silence request?
(1)  588/     1FC : C8                  		ret	z
(1)  589/     1FD : 3A 2E 00            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  590/     200 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  591/     202 : 28 04               		jr	z,.sfxmd
(1)  592/     204 : CB 4F               		bit	1,a			; BEAT passed?
(1)  593/     206 : C8                  		ret	z			;
(1)  594/     207 : CF                  		rst	8
(1)  595/     208 :                     .sfxmd:
(1)  596/     208 : CB 47               		bit	0,a			; TICK passed?
(1)  597/     20A : C8                  		ret	z
(1)  598/     20B :                     	; *** Start reading notes ***
(1)  599/     20B : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  600/     20D : C4 DF 03            		call	nz,.first_fill
(1)  601/     210 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  602/     212 : C4 D8 03            		call	nz,.effect_fill
(1)  603/     215 : FD 7E 11            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  604/     218 : 3D                  		dec	a
(1)  605/     219 : FD 77 11            		ld	(iy+trk_tickTmr),a
(1)  606/     21C : B7                  		or	a
(1)  607/     21D : C0                  		ret	nz			; If TICK != 0, Exit
(1)  608/     21E : FD 7E 03            		ld	a,(iy+trk_tickSet)	; Set new tick timer
(1)  609/     221 : FD 77 11            		ld	(iy+trk_tickTmr),a
(1)  610/     224 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  611/     227 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  612/     22A : 79                  		ld	a,c			; Check rowcount
(1)  613/     22B : B0                  		or	b
(1)  614/     22C : 20 13               		jr	nz,.row_active
(1)  615/     22E : FD 7E 12            		ld	a,(iy+trk_currBlk)	; If bc == 0: Next block
(1)  616/     231 : 3C                  		inc	a
(1)  617/     232 : FD 77 12            		ld 	(iy+trk_currBlk),a
(1)  618/     235 : CD 63 03            		call	.set_track
(1)  619/     238 : FE FF               		cp	-1			; Track finished?
(1)  620/     23A : C8                  		ret	z
(1)  621/     23B : FD 4E 0C            		ld	c,(iy+trk_Rows)
(1)  622/     23E : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  623/     241 :                     .row_active:
(1)  624/     241 : CF                  		rst	8
(1)  625/     242 : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  626/     245 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  627/     248 :                     
(1)  628/     248 :                     ; --------------------------------
(1)  629/     248 :                     ; Main reading loop
(1)  630/     248 :                     ; --------------------------------
(1)  631/     248 :                     
(1)  632/     248 :                     .next_note:
(1)  633/     248 : FD 7E 10            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  634/     24B : B7                  		or	a
(1)  635/     24C : 20 16               		jr	nz,.decrow
(1)  636/     24E : 7E                  		ld	a,(hl)			; Check if timer or note
(1)  637/     24F : B7                  		or	a
(1)  638/     250 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  639/     252 : FA 6F 02            		jp	m,.has_note		; 80h-0FFh: note data
(1)  640/     255 : FD 77 10            		ld	(iy+trk_rowPause),a
(1)  641/     258 :                     
(1)  642/     258 :                     ; --------------------------------
(1)  643/     258 :                     ; Exit
(1)  644/     258 :                     ; --------------------------------
(1)  645/     258 :                     
(1)  646/     258 :                     .exit:
(1)  647/     258 : CF                  		rst	8
(1)  648/     259 : CD 2B 03            		call	.inc_cpatt
(1)  649/     25C : FD 75 0A            		ld	(iy+trk_Read),l		; Update read location
(1)  650/     25F : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  651/     262 : 18 03               		jr	.decrow_e
(1)  652/     264 :                     .decrow:
(1)  653/     264 : FD 35 10            		dec	(iy+trk_rowPause)
(1)  654/     267 :                     .decrow_e:
(1)  655/     267 : 0B                  		dec	bc			; Decrement this row
(1)  656/     268 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row and exit.
(1)  657/     26B : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  658/     26E : C9                  		ret
(1)  659/     26F :                     
(1)  660/     26F :                     ; --------------------------------
(1)  661/     26F :                     ; New note request
(1)  662/     26F :                     ; --------------------------------
(1)  663/     26F :                     
(1)  664/     26F :                     .has_note:
(1)  665/     26F : CF                  		rst	8
(1)  666/     270 : C5                  		push	bc			; Save rowcount
(1)  667/     271 : 4F                  		ld	c,a			; Backup control|channel to c
(1)  668/     272 : CD 2B 03            		call	.inc_cpatt		; Increment hl
(1)  669/     275 : 79                  		ld	a,c			; Read control|channel
(1)  670/     276 : FD 5E 26            		ld	e,(iy+trk_ChnList)	; Point to track-data
(1)  671/     279 : FD 56 27            		ld	d,(iy+(trk_ChnList+1))
(1)  672/     27C : D5                  		push	de
(1)  673/     27D : DD E1               		pop	ix
(1)  674/     27F : E6 3F               		and	00111111b		; Filter channel bits
(1)  675/     281 : 87                  		add	a,a
(1)  676/     282 : 87                  		add	a,a
(1)  677/     283 : 87                  		add	a,a			; * 8
(1)  678/     284 : 16 00               		ld 	d,0
(1)  679/     286 : 5F                  		ld	e,a
(1)  680/     287 : CF                  		rst	8
(1)  681/     288 : DD 19               		add	ix,de
(1)  682/     28A : DD 46 07            		ld	b,(ix+chnl_Type)	; b - Current TYPE byte
(1)  683/     28D : CB 71               		bit	6,c			; Next byte is new type?
(1)  684/     28F : 28 08               		jr	z,.old_type
(1)  685/     291 : 7E                  		ld	a,(hl)
(1)  686/     292 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  687/     295 : 47                  		ld	b,a			; Set to b
(1)  688/     296 : CD 2B 03            		call	.inc_cpatt
(1)  689/     299 :                     .old_type:
(1)  690/     299 :                     	; b - evinEVIN
(1)  691/     299 :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  692/     299 :                     	;     evin: byte is already stored on track-channel buffer
(1)  693/     299 :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  694/     299 : CF                  		rst	8
(1)  695/     29A : CB 40               		bit	0,b
(1)  696/     29C : 28 07               		jr	z,.no_note
(1)  697/     29E : 7E                  		ld	a,(hl)
(1)  698/     29F : DD 77 02            		ld	(ix+chnl_Note),a
(1)  699/     2A2 : CD 2B 03            		call	.inc_cpatt
(1)  700/     2A5 :                     .no_note:
(1)  701/     2A5 : CB 48               		bit	1,b
(1)  702/     2A7 : 28 07               		jr	z,.no_ins
(1)  703/     2A9 : 7E                  		ld	a,(hl)
(1)  704/     2AA : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  705/     2AD : CD 2B 03            		call	.inc_cpatt
(1)  706/     2B0 :                     .no_ins:
(1)  707/     2B0 : CB 50               		bit	2,b
(1)  708/     2B2 : 28 07               		jr	z,.no_vol
(1)  709/     2B4 : 7E                  		ld	a,(hl)
(1)  710/     2B5 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  711/     2B8 : CD 2B 03            		call	.inc_cpatt
(1)  712/     2BB :                     .no_vol:
(1)  713/     2BB : CB 58               		bit	3,b
(1)  714/     2BD : 28 0F               		jr	z,.no_eff
(1)  715/     2BF : 7E                  		ld	a,(hl)
(1)  716/     2C0 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  717/     2C3 : CD 2B 03            		call	.inc_cpatt
(1)  718/     2C6 : CF                  		rst	8
(1)  719/     2C7 : 7E                  		ld	a,(hl)
(1)  720/     2C8 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  721/     2CB : CD 2B 03            		call	.inc_cpatt
(1)  722/     2CE :                     .no_eff:
(1)  723/     2CE : 78                  		ld	a,b		; Merge the Impulse recycle bits into main bits
(1)  724/     2CF : 0F                  		rrca
(1)  725/     2D0 : 0F                  		rrca
(1)  726/     2D1 : 0F                  		rrca
(1)  727/     2D2 : 0F                  		rrca
(1)  728/     2D3 : E6 0F               		and	00001111b
(1)  729/     2D5 : 4F                  		ld	c,a
(1)  730/     2D6 : 78                  		ld	a,b
(1)  731/     2D7 : E6 0F               		and	00001111b
(1)  732/     2D9 : B1                  		or	c
(1)  733/     2DA : CF                  		rst	8
(1)  734/     2DB : 4F                  		ld	c,a
(1)  735/     2DC : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  736/     2DF : B1                  		or	c
(1)  737/     2E0 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  738/     2E3 : C1                  		pop	bc		; Restore rowcount
(1)  739/     2E4 :                     
(1)  740/     2E4 :                     	; Check for effects that affect
(1)  741/     2E4 :                     	; internal playback:
(1)  742/     2E4 :                     	; Jump, Ticks, etc.
(1)  743/     2E4 : E6 08               		and	1000b		; Only check for the EFFECT bit
(1)  744/     2E6 : CA 48 02            		jp	z,.next_note
(1)  745/     2E9 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  746/     2EC : B7                  		or	a		; 00h = invalid effect
(1)  747/     2ED : CA 48 02            		jp	z,.next_note
(1)  748/     2F0 : FE 01               		cp	1		; Effect A: Tick set
(1)  749/     2F2 : CC 02 03            		call	z,.eff_A
(1)  750/     2F5 : FE 02               		cp	2		; Effect B: Position Jump
(1)  751/     2F7 : CC 12 03            		call	z,.eff_B
(1)  752/     2FA : FE 03               		cp	3		; Effect C: Pattern break
(1)  753/     2FC : CA 28 03            		jp	z,.eff_C	; <-- JUMP and exit.
(1)  754/     2FF : C3 48 02            		jp	.next_note
(1)  755/     302 :                     
(1)  756/     302 :                     ; ----------------------------------------
(1)  757/     302 :                     ; Effect A: Set ticks
(1)  758/     302 :                     ; ----------------------------------------
(1)  759/     302 :                     
(1)  760/     302 :                     .eff_A:
(1)  761/     302 : CF                  		rst	8
(1)  762/     303 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  763/     306 : 1D                  		dec	e			; TODO: no minus protection
(1)  764/     307 : FD 73 03            		ld	(iy+trk_tickSet),e	; set for both Set and Timer.
(1)  765/     30A : FD 73 11            		ld	(iy+trk_tickTmr),e
(1)  766/     30D : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  767/     311 : C9                  		ret
(1)  768/     312 :                     
(1)  769/     312 :                     ; ----------------------------------------
(1)  770/     312 :                     ; Effect B: jump to a new block
(1)  771/     312 :                     ; ----------------------------------------
(1)  772/     312 :                     
(1)  773/     312 :                     .eff_B:
(1)  774/     312 : F5                  		push	af			; Save Flagbits
(1)  775/     313 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  776/     316 : FD 73 12            		ld 	(iy+trk_currBlk),e
(1)  777/     319 : CF                  		rst	8
(1)  778/     31A : FD 36 10 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  779/     31E : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  780/     322 : FD CB 00 EE         		set	5,(iy+trk_status)	; set fill-from-effect flag on exit
(1)  781/     326 : F1                  		pop	af
(1)  782/     327 : C9                  		ret
(1)  783/     328 :                     
(1)  784/     328 :                     ; ----------------------------------------
(1)  785/     328 :                     ; Effect C: Pattern break/exit
(1)  786/     328 :                     ;
(1)  787/     328 :                     ; Only used on SFX, arguments ignored.
(1)  788/     328 :                     ; ----------------------------------------
(1)  789/     328 :                     
(1)  790/     328 :                     .eff_C:
(1)  791/     328 : C3 C7 03            		jp	.track_end
(1)  792/     32B :                     
(1)  793/     32B :                     ; ----------------------------------------
(1)  794/     32B :                     ; Increment the current patt position
(1)  795/     32B :                     ; and recieve more data
(1)  796/     32B :                     ;
(1)  797/     32B :                     ; Breaks:
(1)  798/     32B :                     ; a,e
(1)  799/     32B :                     ; ----------------------------------------
(1)  800/     32B :                     
(1)  801/     32B :                     .inc_cpatt:
(1)  802/     32B : FD 5E 2E            		ld	e,(iy+trk_ChnCach)
(1)  803/     32E : 7D                  		ld	a,l
(1)  804/     32F : 3C                  		inc	a
(1)  805/     330 : E6 3F               		and	MAX_RCACH-1
(1)  806/     332 : FE 3E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  807/     334 : 30 03               		jr	nc,.ran_out
(1)  808/     336 : B3                  		or	e
(1)  809/     337 : 6F                  		ld	l,a
(1)  810/     338 : C9                  		ret
(1)  811/     339 :                     .ran_out:
(1)  812/     339 : FD 6E 2E            		ld	l,(iy+trk_ChnCach)
(1)  813/     33C : E5                  		push	hl
(1)  814/     33D : C5                  		push	bc
(1)  815/     33E : 06 00               		ld	b,0
(1)  816/     340 : 4F                  		ld	c,a
(1)  817/     341 : CF                  		rst	8
(1)  818/     342 : 5D                  		ld	e,l
(1)  819/     343 : 54                  		ld	d,h
(1)  820/     344 : FD 6E 20            		ld	l,(iy+trk_RomCPatt)
(1)  821/     347 : FD 66 21            		ld	h,(iy+(trk_RomCPatt+1))
(1)  822/     34A : FD 7E 22            		ld	a,(iy+(trk_RomCPatt+2))
(1)  823/     34D : 09                  		add	hl,bc
(1)  824/     34E : CE 00               		adc	a,0
(1)  825/     350 : FD 75 20            		ld	(iy+trk_RomCPatt),l
(1)  826/     353 : FD 74 21            		ld	(iy+(trk_RomCPatt+1)),h
(1)  827/     356 : CF                  		rst	8
(1)  828/     357 : FD 77 22            		ld	(iy+(trk_RomCPatt+2)),a
(1)  829/     35A : 01 40 00            		ld	bc,MAX_RCACH
(1)  830/     35D : CD 6E 0F            		call	transferRom	; *** ROM ACCESS ***
(1)  831/     360 : C1                  		pop	bc
(1)  832/     361 : E1                  		pop	hl
(1)  833/     362 : C9                  		ret
(1)  834/     363 :                     
(1)  835/     363 :                     ; ----------------------------------------
(1)  836/     363 :                     ; Set track pattern by trk_currBlk
(1)  837/     363 :                     ; ----------------------------------------
(1)  838/     363 :                     
(1)  839/     363 :                     .set_track:
(1)  840/     363 : CF                  		rst	8
(1)  841/     364 : 16 00               		ld	d,0
(1)  842/     366 : FD 5E 12            		ld	e,(iy+trk_currBlk)	; e - current block
(1)  843/     369 : FD 6E 04            		ld	l,(iy+trk_Blocks)	; hl - block data
(1)  844/     36C : FD 66 05            		ld	h,(iy+(trk_Blocks+1))
(1)  845/     36F : 19                  		add	hl,de
(1)  846/     370 : 7E                  		ld	a,(hl)			; Read byte
(1)  847/     371 : FE FF               		cp	-1			; If block == -1, end track
(1)  848/     373 : CA C7 03            		jp	z,.track_end
(1)  849/     376 : E7                  		rst	20h			; dacfill
(1)  850/     377 : 07                  		rlca
(1)  851/     378 : 07                  		rlca
(1)  852/     379 : 57                  		ld	d,a
(1)  853/     37A : E6 FC               		and	11111100b
(1)  854/     37C : 5F                  		ld	e,a
(1)  855/     37D : 7A                  		ld	a,d
(1)  856/     37E : E6 03               		and	00000011b
(1)  857/     380 : 57                  		ld	d,a
(1)  858/     381 : FD 6E 06            		ld	l,(iy+trk_Patt)		; Read CACHE patt heads
(1)  859/     384 : FD 66 07            		ld	h,(iy+(trk_Patt+1))
(1)  860/     387 : CF                  		rst	8
(1)  861/     388 : 19                  		add	hl,de
(1)  862/     389 : 5E                  		ld	e,(hl)			; de - Pos
(1)  863/     38A : 23                  		inc	hl
(1)  864/     38B : 56                  		ld	d,(hl)
(1)  865/     38C : 23                  		inc	hl
(1)  866/     38D : 7E                  		ld	a,(hl)
(1)  867/     38E : 23                  		inc	hl
(1)  868/     38F : FD 77 0C            		ld	(iy+trk_Rows),a
(1)  869/     392 : 7E                  		ld	a,(hl)
(1)  870/     393 : 23                  		inc	hl
(1)  871/     394 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1)  872/     397 : FD 6E 23            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1)  873/     39A : FD 66 24            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1)  874/     39D : CF                  		rst	8
(1)  875/     39E : FD 7E 25            		ld	a,(iy+(trk_RomPatt+2))
(1)  876/     3A1 : 19                  		add	hl,de
(1)  877/     3A2 : CE 00               		adc	a,0
(1)  878/     3A4 : FD 75 20            		ld	(iy+trk_RomCPatt),l
(1)  879/     3A7 : FD 74 21            		ld	(iy+(trk_RomCPatt+1)),h
(1)  880/     3AA : FD 77 22            		ld	(iy+(trk_RomCPatt+2)),a
(1)  881/     3AD : FD 5E 2E            		ld	e,(iy+trk_ChnCach)
(1)  882/     3B0 : FD 56 2F            		ld	d,(iy+(trk_ChnCach+1))
(1)  883/     3B3 : CF                  		rst	8
(1)  884/     3B4 : FD 73 0A            		ld	(iy+trk_Read),e
(1)  885/     3B7 : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1)  886/     3BA : 0E 40               		ld	c,MAX_RCACH
(1)  887/     3BC : FD 36 0E 00         		ld	(iy+trk_cachHalf),0
(1)  888/     3C0 : FD 36 10 00         		ld	(iy+trk_rowPause),0
(1)  889/     3C4 : C3 6E 0F            		jp	transferRom		; ** ROM access **
(1)  890/     3C7 :                     
(1)  891/     3C7 :                     ; ----------------------------------------
(1)  892/     3C7 :                     ; **JUMP ONLY**
(1)  893/     3C7 :                     
(1)  894/     3C7 :                     .track_end:
(1)  895/     3C7 : CD 90 04            		call	track_out
(1)  896/     3CA : CF                  		rst	8
(1)  897/     3CB : FD 36 10 00         		ld	(iy+trk_rowPause),0
(1)  898/     3CF : FD 36 11 00         		ld	(iy+trk_tickTmr),0
(1)  899/     3D3 : FD 36 00 00         		ld	(iy+trk_Status),0	; Disable track slot
(1)  900/     3D7 : C9                  		ret
(1)  901/     3D8 :                     
(1)  902/     3D8 :                     ; ----------------------------------------
(1)  903/     3D8 :                     ; Track refill
(1)  904/     3D8 :                     ; ----------------------------------------
(1)  905/     3D8 :                     
(1)  906/     3D8 :                     .effect_fill:
(1)  907/     3D8 : FD CB 00 AE         		res	5,(iy+trk_status)	; Reset refill-from-effect flag
(1)  908/     3DC : C3 63 03            		jp	.set_track
(1)  909/     3DF :                     
(1)  910/     3DF :                     ; ----------------------------------------
(1)  911/     3DF :                     ; Track Start/Reset
(1)  912/     3DF :                     ;
(1)  913/     3DF :                     ; iy - Track buffer
(1)  914/     3DF :                     ; ----------------------------------------
(1)  915/     3DF :                     
(1)  916/     3DF :                     .first_fill:
(1)  917/     3DF :                     ; 		rst	20h
(1)  918/     3DF : FD CB 00 B6         		res	6,(iy+trk_status)	; Reset FILL flag
(1)  919/     3E3 : CD 90 04            		call	track_out
(1)  920/     3E6 : FD 36 11 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1)  921/     3EA : FD 7E 02            		ld	a,(iy+trk_setBlk)	; Make start block as current block
(1)  922/     3ED : CF                  		rst	8
(1)  923/     3EE : FD 77 12            		ld 	(iy+trk_currBlk),a	; block
(1)  924/     3F1 : 11 00 00            		ld	de,0
(1)  925/     3F4 : 21 5D 17            		ld	hl,trkListCach		; Read MASTER Nicona track list
(1)  926/     3F7 : FD 7E 01            		ld	a,(iy+trk_seqId)
(1)  927/     3FA : E6 0F               		and	00001111b		; Filter sequence bits
(1)  928/     3FC : 87                  		add	a,a			; *4
(1)  929/     3FD : 87                  		add	a,a
(1)  930/     3FE : 5F                  		ld	e,a
(1)  931/     3FF : 19                  		add	hl,de
(1)  932/     400 : 7E                  		ld	a,(hl)
(1)  933/     401 : 23                  		inc	hl
(1)  934/     402 : CB 7F               		bit	7,a
(1)  935/     404 : 28 04               		jr	z,.no_glbl
(1)  936/     406 : FD CB 00 C6         		set	0,(iy+trk_status)	; Enable GLOBAL sub-beats
(1)  937/     40A :                     .no_glbl:
(1)  938/     40A : E6 7F               		and	01111111b
(1)  939/     40C : FD 77 03            		ld	(iy+trk_tickSet),a
(1)  940/     40F : 7E                  		ld	a,(hl)			; Read and temporally
(1)  941/     410 : 23                  		inc	hl			; grab it's pointers
(1)  942/     411 : 4E                  		ld	c,(hl)
(1)  943/     412 : CF                  		rst	8
(1)  944/     413 : 23                  		inc	hl
(1)  945/     414 : 6E                  		ld	l,(hl)
(1)  946/     415 : 61                  		ld	h,c
(1)  947/     416 : 11 AE 17            		ld	de,headerOut
(1)  948/     419 : 0E 0C               		ld	c,0Ch
(1)  949/     41B : CD 6E 0F            		call	transferRom		; ** ROM access **
(1)  950/     41E : DD 21 B9 17         		ld	ix,headerOut_e-1
(1)  951/     422 :                     
(1)  952/     422 :                     	; headerOut:
(1)  953/     422 :                     	; dc.l .blk,.pat,.ins
(1)  954/     422 :                     	; *** READING BACKWARDS
(1)  955/     422 : CD 7C 04            		call	.grab_rhead		; Instrument data
(1)  956/     425 : FD 4E 1F            		ld	c,(iy+trk_MaxIns)
(1)  957/     428 : CB 21               		sla	c			; *8
(1)  958/     42A : CB 21               		sla	c
(1)  959/     42C : CB 21               		sla	c
(1)  960/     42E : 78                  		ld	a,b
(1)  961/     42F : FD 5E 2C            		ld	e,(iy+trk_ChnCIns)
(1)  962/     432 : FD 56 2D            		ld	d,(iy+(trk_ChnCIns+1))
(1)  963/     435 : FD 73 08            		ld	(iy+trk_Instr),e
(1)  964/     438 : FD 72 09            		ld	(iy+(trk_Instr+1)),d
(1)  965/     43B : CF                  		rst	8
(1)  966/     43C : CD 6E 0F            		call	transferRom		; ** ROM access **
(1)  967/     43F : CD 7C 04            		call	.grab_rhead		; Pattern data
(1)  968/     442 : FD 4E 1E            		ld	c,(iy+trk_MaxHdrs)
(1)  969/     445 : CB 21               		sla	c			; *4
(1)  970/     447 : CB 21               		sla	c
(1)  971/     449 : 78                  		ld	a,b
(1)  972/     44A : FD 75 23            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1)  973/     44D : FD 74 24            		ld	(iy+(trk_RomPatt+1)),h
(1)  974/     450 : FD 77 25            		ld	(iy+(trk_RomPatt+2)),a
(1)  975/     453 : CF                  		rst	8
(1)  976/     454 : FD 5E 2A            		ld	e,(iy+trk_ChnCHead)
(1)  977/     457 : FD 56 2B            		ld	d,(iy+(trk_ChnCHead+1))
(1)  978/     45A : FD 73 06            		ld	(iy+trk_Patt),e
(1)  979/     45D : FD 72 07            		ld	(iy+(trk_Patt+1)),d
(1)  980/     460 : CD 6E 0F            		call	transferRom		; ** ROM access **
(1)  981/     463 : CD 7C 04            		call	.grab_rhead		; Block data
(1)  982/     466 : FD 4E 1D            		ld	c,(iy+trk_MaxBlks)
(1)  983/     469 : 78                  		ld	a,b
(1)  984/     46A : FD 5E 28            		ld	e,(iy+trk_ChnCBlk)
(1)  985/     46D : FD 56 29            		ld	d,(iy+(trk_ChnCBlk+1))
(1)  986/     470 : FD 73 04            		ld	(iy+trk_Blocks),e
(1)  987/     473 : FD 72 05            		ld	(iy+(trk_Blocks+1)),d
(1)  988/     476 : CD 6E 0F            		call	transferRom		; ** ROM access **
(1)  989/     479 : C3 63 03            		jp	.set_track
(1)  990/     47C :                     
(1)  991/     47C :                     ; Read 68K pointer:
(1)  992/     47C :                     ; hl - 00xxxx
(1)  993/     47C :                     ;  b - xx0000
(1)  994/     47C :                     .grab_rhead:
(1)  995/     47C : DD 6E 00            		ld	l,(ix)
(1)  996/     47F : DD 2B               		dec	ix
(1)  997/     481 : CF                  		rst	8
(1)  998/     482 : DD 66 00            		ld	h,(ix)
(1)  999/     485 : DD 2B               		dec	ix
(1) 1000/     487 : DD 46 00            		ld	b,(ix)
(1) 1001/     48A : DD 2B               		dec	ix
(1) 1002/     48C :                     ; 		ld	c,(ix)
(1) 1003/     48C : CF                  		rst	8
(1) 1004/     48D : DD 2B               		dec	ix
(1) 1005/     48F : C9                  		ret
(1) 1006/     490 :                     
(1) 1007/     490 :                     ; ----------------------------------------
(1) 1008/     490 :                     ; Reset tracker channels
(1) 1009/     490 :                     ;
(1) 1010/     490 :                     ; iy - Track buffer
(1) 1011/     490 :                     ;
(1) 1012/     490 :                     ; Breaks:
(1) 1013/     490 :                     ; ix
(1) 1014/     490 :                     ; ----------------------------------------
(1) 1015/     490 :                     
(1) 1016/     490 :                     ; ----------------------------------------
(1) 1017/     490 :                     ; Reset tracker channels
(1) 1018/     490 :                     ;
(1) 1019/     490 :                     ; iy - Track buffer
(1) 1020/     490 :                     ;
(1) 1021/     490 :                     ; Breaks:
(1) 1022/     490 :                     ; ix
(1) 1023/     490 :                     ; ----------------------------------------
(1) 1024/     490 :                     
(1) 1025/     490 :                     track_out:
(1) 1026/     490 :                     ; 		push	iy
(1) 1027/     490 : FD 5E 26            		ld	e,(iy+trk_ChnList)	; Point to track-data
(1) 1028/     493 : FD 56 27            		ld	d,(iy+(trk_ChnList+1))
(1) 1029/     496 : D5                  		push	de
(1) 1030/     497 : DD E1               		pop	ix
(1) 1031/     499 : CF                  		rst	8
(1) 1032/     49A : 11 08 00            		ld	de,8
(1) 1033/     49D : FD 46 1C            		ld	b,(iy+trk_MaxChnls)	; MAX_TRKCHN
(1) 1034/     4A0 : AF                  		xor	a
(1) 1035/     4A1 :                     .clrfe:
(1) 1036/     4A1 : DD 7E 01            		ld	a,(ix+chnl_Chip)
(1) 1037/     4A4 : B7                  		or	a
(1) 1038/     4A5 : 28 1D               		jr	z,.nochip
(1) 1039/     4A7 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1040/     4AB : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1041/     4AF : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1042/     4B3 : CF                  		rst	8
(1) 1043/     4B4 : FD 36 05 00         		ld	(iy+chnl_EffId),0
(1) 1044/     4B8 : FD 36 06 00         		ld	(iy+chnl_EffArg),0
(1) 1045/     4BC : FD 36 03 00         		ld	(iy+chnl_Ins),0
(1) 1046/     4C0 : FD 36 07 00         		ld	(iy+chnl_Type),0
(1) 1047/     4C4 :                     .nochip:
(1) 1048/     4C4 : DD 19               		add	ix,de
(1) 1049/     4C6 : 10 D9               		djnz	.clrfe
(1) 1050/     4C8 : 3E 01               		ld	a,1
(1) 1051/     4CA : 32 3F 00            		ld	(marsUpd),a
(1) 1052/     4CD :                     ; 		pop	iy
(1) 1053/     4CD : C9                  		ret
(1) 1054/     4CE :                     
(1) 1055/     4CE :                     ; ----------------------------------------
(1) 1056/     4CE :                     ; Load tracklist from ROM
(1) 1057/     4CE :                     ;
(1) 1058/     4CE :                     ; a - SeqID
(1) 1059/     4CE :                     ; ----------------------------------------
(1) 1060/     4CE :                     
(1) 1061/     4CE :                     get_RomTrcks:
(1) 1062/     4CE : E6 F0               		and	11110000b
(1) 1063/     4D0 : 5F                  		ld	e,a
(1) 1064/     4D1 : 3A 3E 00            		ld	a,(trkListPage)
(1) 1065/     4D4 : BB                  		cp	e
(1) 1066/     4D5 : C8                  		ret	z
(1) 1067/     4D6 :                     init_RomTrcks:
(1) 1068/     4D6 : 7B                  		ld	a,e
(1) 1069/     4D7 : 32 3E 00            		ld	(trkListPage),a
(1) 1070/     4DA : 07                  		rlca
(1) 1071/     4DB : 07                  		rlca			; 10h*4=40h
(1) 1072/     4DC : E6 C0               		and	11000000b
(1) 1073/     4DE : 5F                  		ld	e,a
(1) 1074/     4DF : 7A                  		ld	a,d
(1) 1075/     4E0 : CF                  		rst	8
(1) 1076/     4E1 : E6 03               		and	00000011b	; * 40h
(1) 1077/     4E3 : 57                  		ld	d,a
(1) 1078/     4E4 : 21 CF 14            		ld	hl,nikona_SetMstrList
(1) 1079/     4E7 : 23                  		inc	hl
(1) 1080/     4E8 : 7E                  		ld	a,(hl)
(1) 1081/     4E9 : 23                  		inc	hl
(1) 1082/     4EA : 4E                  		ld	c,(hl)
(1) 1083/     4EB : 23                  		inc	hl
(1) 1084/     4EC : 6E                  		ld	l,(hl)
(1) 1085/     4ED : CF                  		rst	8
(1) 1086/     4EE : 61                  		ld	h,c
(1) 1087/     4EF : 19                  		add	hl,de
(1) 1088/     4F0 : CE 00               		adc	a,0
(1) 1089/     4F2 : 11 5D 17            		ld	de,trkListCach
(1) 1090/     4F5 : 01 40 00            		ld	bc,4*10h
(1) 1091/     4F8 : C3 6E 0F            		jp	transferRom	; *** ROM ACCESS ***
(1) 1092/     4FB :                     
(1) 1093/     4FB :                     ; ============================================================
(1) 1094/     4FB :                     ; --------------------------------------------------------
(1) 1095/     4FB :                     ; Convert notes to soundchips
(1) 1096/     4FB :                     ; --------------------------------------------------------
(1) 1097/     4FB :                     
(1) 1098/     4FB :                     set_chips:
(1) 1099/     4FB : E7                  		rst	20h			; Refill wave
(1) 1100/     4FC : CD 2D 0F            		call	get_tick
(1) 1101/     4FF : FD 21 9D 14         		ld	iy,nikona_BuffList
(1) 1102/     503 :                     .trk_buffrs:
(1) 1103/     503 : CF                  		rst	8
(1) 1104/     504 : FD 7E 00            		ld	a,(iy)
(1) 1105/     507 : FE FF               		cp	-1
(1) 1106/     509 : 28 15               		jr	z,proc_chips
(1) 1107/     50B : FD E5               		push	iy
(1) 1108/     50D : FD 6E 00            		ld	l,(iy)
(1) 1109/     510 : FD 66 01            		ld	h,(iy+1)
(1) 1110/     513 : CD 40 05            		call	tblbuff_read
(1) 1111/     516 : CF                  		rst	8
(1) 1112/     517 : FD E1               		pop	iy
(1) 1113/     519 : 11 10 00            		ld	de,10h
(1) 1114/     51C : FD 19               		add	iy,de
(1) 1115/     51E : 18 E3               		jr	.trk_buffrs
(1) 1116/     520 :                     proc_chips:
(1) 1117/     520 : E7                  		rst	20h
(1) 1118/     521 : FD 21 15 15         		ld	iy,tblPSGN		; PSG Noise (FIRST)
(1) 1119/     525 : CD E3 06            		call	dtbl_singl
(1) 1120/     528 : 00                  		nop
(1) 1121/     529 : 00                  		nop
(1) 1122/     52A : FD 21 E3 14         		ld	iy,tblPSG		; PSG Squares
(1) 1123/     52E : CD CD 06            		call	dtbl_multi
(1) 1124/     531 : FD 21 25 15         		ld	iy,tblFM
(1) 1125/     535 : CD CD 06            		call	dtbl_multi
(1) 1126/     538 : FD 21 87 15         		ld	iy,tblPWM
(1) 1127/     53C : CD CD 06            		call	dtbl_multi
(1) 1128/     53F : C9                  		ret
(1) 1129/     540 :                     
(1) 1130/     540 :                     ; ----------------------------------------
(1) 1131/     540 :                     ; Read current track
(1) 1132/     540 :                     tblbuff_read:
(1) 1133/     540 : E5                  		push	hl
(1) 1134/     541 : FD E1               		pop	iy
(1) 1135/     543 : FD 46 00            		ld	b,(iy+trk_status)	; bit7: Track active?
(1) 1136/     546 : CB 78               		bit	7,b
(1) 1137/     548 : C8                  		ret	z
(1) 1138/     549 :                     ; 		ret
(1) 1139/     549 :                     ; .go_read:
(1) 1140/     549 : 78                  		ld	a,b			; trk_Status == -1?
(1) 1141/     54A : FE FF               		cp	-1
(1) 1142/     54C : C2 56 05            		jp	nz,.track_cont
(1) 1143/     54F : CD 90 04            		call	track_out
(1) 1144/     552 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1145/     556 :                     .track_cont:
(1) 1146/     556 : CF                  		rst	8
(1) 1147/     557 : FD 6E 26            		ld	l,(iy+trk_ChnList)
(1) 1148/     55A : FD 66 27            		ld	h,(iy+(trk_ChnList+1))
(1) 1149/     55D : E5                  		push	hl
(1) 1150/     55E : DD E1               		pop	ix			; iy - channel list
(1) 1151/     560 : FD 46 1C            		ld	b,(iy+trk_MaxChnls)	;MAX_TRKCHN
(1) 1152/     563 :                     
(1) 1153/     563 :                     ; ** Needs special delays to
(1) 1154/     563 :                     ; keep the samplerate
(1) 1155/     563 :                     .next_chnl:
(1) 1156/     563 : C5                  		push	bc
(1) 1157/     564 : DD 7E 00            		ld	a,(ix)			; ** chnl_Flags
(1) 1158/     567 : E6 0F               		and	00001111b
(1) 1159/     569 : C4 76 05            		call	nz,.do_chip
(1) 1160/     56C : C1                  		pop	bc
(1) 1161/     56D : 11 08 00            		ld	de,8
(1) 1162/     570 : DD 19               		add	ix,de
(1) 1163/     572 : CF                  		rst	8	; wave sync
(1) 1164/     573 : 10 EE               		djnz	.next_chnl
(1) 1165/     575 : C9                  		ret
(1) 1166/     576 :                     
(1) 1167/     576 :                     ; ----------------------------------------
(1) 1168/     576 :                     ; iy - Track buffer
(1) 1169/     576 :                     ; ix - Current channel
(1) 1170/     576 :                     
(1) 1171/     576 :                     .do_chip:
(1) 1172/     576 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1173/     579 : B7                  		or	a
(1) 1174/     57A : C8                  		ret	z
(1) 1175/     57B : FD 56 1F            		ld	d,(iy+trk_MaxIns)
(1) 1176/     57E : BA                  		cp	d
(1) 1177/     57F : C8                  		ret	z
(1) 1178/     580 : D0                  		ret	nc
(1) 1179/     581 : 3D                  		dec	a			; ins-1
(1) 1180/     582 : 0F                  		rrca				; * 08h
(1) 1181/     583 : 0F                  		rrca
(1) 1182/     584 : 0F                  		rrca
(1) 1183/     585 : 0F                  		rrca
(1) 1184/     586 : CF                  		rst	8
(1) 1185/     587 : 0F                  		rrca
(1) 1186/     588 : 57                  		ld	d,a
(1) 1187/     589 : E6 F8               		and	11111000b
(1) 1188/     58B : 5F                  		ld	e,a
(1) 1189/     58C : 7A                  		ld	a,d
(1) 1190/     58D : E6 07               		and	00000111b
(1) 1191/     58F : 57                  		ld	d,a
(1) 1192/     590 : FD 6E 08            		ld	l,(iy+trk_Instr)	; hl - Intrument data
(1) 1193/     593 : FD 66 09            		ld	h,(iy+(trk_Instr+1))
(1) 1194/     596 : 7B                  		ld	a,e
(1) 1195/     597 : 19                  		add	hl,de
(1) 1196/     598 : CF                  		rst	8
(1) 1197/     599 : E5                  		push	hl			; <-- save ins pos
(1) 1198/     59A : CD AC 05            		call	.grab_link
(1) 1199/     59D : D1                  		pop	de			; --> recover as de
(1) 1200/     59E : FE FF               		cp	-1			; Found any link?
(1) 1201/     5A0 : C8                  		ret	z
(1) 1202/     5A1 : FD 7E 14            		ld	a,(iy+trk_Priority)	; a - Set priority level
(1) 1203/     5A4 : 23                  		inc	hl			; Skip link
(1) 1204/     5A5 : 23                  		inc	hl
(1) 1205/     5A6 : 77                  		ld	(hl),a			; Write priority
(1) 1206/     5A7 : 23                  		inc	hl
(1) 1207/     5A8 : 73                  		ld	(hl),e			; Write Instrument pointer
(1) 1208/     5A9 : 23                  		inc	hl
(1) 1209/     5AA : 72                  		ld	(hl),d
(1) 1210/     5AB : C9                  		ret
(1) 1211/     5AC :                     
(1) 1212/     5AC :                     ; ----------------------------------------
(1) 1213/     5AC :                     ; Search for a linked channel on the
(1) 1214/     5AC :                     ; chip table
(1) 1215/     5AC :                     ;
(1) 1216/     5AC :                     ; Input:
(1) 1217/     5AC :                     ; hl - Intrument position
(1) 1218/     5AC :                     ;
(1) 1219/     5AC :                     ; Returns:
(1) 1220/     5AC :                     ; hl - Channel table to use
(1) 1221/     5AC :                     ;  a - Return value:
(1) 1222/     5AC :                     ;       0 - Found
(1) 1223/     5AC :                     ;      -1 - Not found
(1) 1224/     5AC :                     ; ----------------------------------------
(1) 1225/     5AC :                     
(1) 1226/     5AC :                     .grab_link:
(1) 1227/     5AC : 7E                  		ld	a,(hl)
(1) 1228/     5AD : E6 F0               		and	11110000b
(1) 1229/     5AF : F2 98 06            		jp	p,.set_asfull		; Set -1 if non-minus.
(1) 1230/     5B2 : 5F                  		ld	e,a			; e - NEW chip
(1) 1231/     5B3 : CF                  		rst	8
(1) 1232/     5B4 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - Check OUR chip
(1) 1233/     5B7 : E6 F0               		and	11110000b		; Filter chip bits
(1) 1234/     5B9 : CA 30 06            		jp	z,.new_chip		; If zero: Set new chip
(1) 1235/     5BC : BB                  		cp 	e
(1) 1236/     5BD : CA D3 05            		jp	z,.srch_link		; If same: Grab our link
(1) 1237/     5C0 : 57                  		ld	d,a			; d - OLD chip
(1) 1238/     5C1 : D5                  		push	de
(1) 1239/     5C2 : CD D3 05            		call	.srch_link		; Search our link (first)
(1) 1240/     5C5 : D1                  		pop	de
(1) 1241/     5C6 : FE FF               		cp	-1
(1) 1242/     5C8 : C8                  		ret	z
(1) 1243/     5C9 : CD B5 06            		call	.reset_link
(1) 1244/     5CC : DD 36 01 00         		ld	(ix+chnl_Chip),0
(1) 1245/     5D0 : C3 2F 06            		jp	.do_newchip
(1) 1246/     5D3 :                     
(1) 1247/     5D3 :                     ; ** RELINK **
(1) 1248/     5D3 :                     ; e - Our current chip
(1) 1249/     5D3 :                     .srch_link:
(1) 1250/     5D3 : CD 9B 06            		call	.pick_tbl	; Pick our table
(1) 1251/     5D6 : B7                  		or	a
(1) 1252/     5D7 : FA 1C 06            		jp	m,.singl_link
(1) 1253/     5DA : DD E5               		push	ix		; copy ix to bc
(1) 1254/     5DC : C1                  		pop	bc
(1) 1255/     5DD :                     .srch_lloop:
(1) 1256/     5DD : CF                  		rst	8
(1) 1257/     5DE : 7E                  		ld	a,(hl)		; Read LSB
(1) 1258/     5DF : FE FF               		cp	-1		; If -1, return -1
(1) 1259/     5E1 : 28 49               		jr	z,.refill
(1) 1260/     5E3 : B9                  		cp	c
(1) 1261/     5E4 : 20 07               		jr	nz,.invldl
(1) 1262/     5E6 : 23                  		inc	hl
(1) 1263/     5E7 : CF                  		rst	8
(1) 1264/     5E8 : 7E                  		ld	a,(hl)
(1) 1265/     5E9 : 2B                  		dec	hl
(1) 1266/     5EA : B8                  		cp	b
(1) 1267/     5EB : 28 09               		jr	z,.reroll
(1) 1268/     5ED :                     .invldl:
(1) 1269/     5ED : D5                  		push	de
(1) 1270/     5EE : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1271/     5F1 : CF                  		rst	8
(1) 1272/     5F2 : 19                  		add	hl,de
(1) 1273/     5F3 : D1                  		pop	de
(1) 1274/     5F4 : 18 E7               		jr	.srch_lloop
(1) 1275/     5F6 :                     .reroll:
(1) 1276/     5F6 :                     	; *** Special re-roll check ***
(1) 1277/     5F6 : E5                  		push	hl
(1) 1278/     5F7 : 01 05 00            		ld	bc,5		; <-- fake "iy+05h"
(1) 1279/     5FA : 09                  		add	hl,bc
(1) 1280/     5FB : 4E                  		ld	c,(hl)		; c - ID
(1) 1281/     5FC : E1                  		pop	hl
(1) 1282/     5FD : 7B                  		ld	a,e
(1) 1283/     5FE : FE 80               		cp	80h		; PSG?
(1) 1284/     600 : 28 02               		jr	z,.chk_psg
(1) 1285/     602 :                     ; 		cp	0A0h		; FM normal?
(1) 1286/     602 :                     ; 		jr	z,.chk_fm
(1) 1287/     602 : 18 26               		jr	.rnot_psg
(1) 1288/     604 :                     .chk_psg:
(1) 1289/     604 : 3A AC 17            		ld	a,(psgHatMode)
(1) 1290/     607 : E6 03               		and	011b
(1) 1291/     609 : FE 03               		cp	011b
(1) 1292/     60B : 20 1D               		jr	nz,.rnot_psg
(1) 1293/     60D : 79                  		ld	a,c
(1) 1294/     60E : FE 02               		cp	2
(1) 1295/     610 : 20 18               		jr	nz,.rnot_psg
(1) 1296/     612 : CF                  		rst	8
(1) 1297/     613 : 16 80               		ld	d,80h		; Set PSG silence
(1) 1298/     615 : CD B5 06            		call	.reset_link	; on PSG3
(1) 1299/     618 : C3 98 06            		jp	.set_asfull
(1) 1300/     61B : 00                  		nop
(1) 1301/     61C :                     
(1) 1302/     61C :                     ; ----------------------
(1) 1303/     61C :                     ; PSGN/FM3/FM6
(1) 1304/     61C :                     .singl_link:
(1) 1305/     61C : DD E5               		push	ix			; copy ix to bc
(1) 1306/     61E : C1                  		pop	bc
(1) 1307/     61F : 23                  		inc	hl			; Read MSB first
(1) 1308/     620 : CF                  		rst	8
(1) 1309/     621 : 7E                  		ld	a,(hl)
(1) 1310/     622 : 2B                  		dec	hl
(1) 1311/     623 : B8                  		cp	b			; MSB match?
(1) 1312/     624 : 20 06               		jr	nz,.refill
(1) 1313/     626 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1314/     627 : B9                  		cp	c
(1) 1315/     628 : 20 02               		jr	nz,.refill
(1) 1316/     62A :                     
(1) 1317/     62A :                     ; ----------------------
(1) 1318/     62A :                     
(1) 1319/     62A :                     .rnot_psg:
(1) 1320/     62A : AF                  		xor	a
(1) 1321/     62B : C9                  		ret
(1) 1322/     62C :                     ; ***
(1) 1323/     62C :                     .refill:
(1) 1324/     62C : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1325/     62F :                     .do_newchip:
(1) 1326/     62F : 7B                  		ld	a,e
(1) 1327/     630 :                     
(1) 1328/     630 :                     ; *** NEW CHIP ***
(1) 1329/     630 :                     ; e - Chip to set
(1) 1330/     630 :                     .new_chip:
(1) 1331/     630 : 7B                  		ld	a,e			; Read NEW chip
(1) 1332/     631 : B7                  		or	a			; If non-minus, exit.
(1) 1333/     632 : F0                  		ret	p
(1) 1334/     633 : CD 9B 06            		call	.pick_tbl
(1) 1335/     636 : CF                  		rst	8
(1) 1336/     637 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1337/     63A : B7                  		or	a
(1) 1338/     63B : FA 86 06            		jp	m,.singl_free
(1) 1339/     63E : E5                  		push	hl			; Backup START table
(1) 1340/     63F :                     ; PASS 1
(1) 1341/     63F :                     .srch_free:
(1) 1342/     63F : 7E                  		ld	a,(hl)			; Read LSB
(1) 1343/     640 : FE FF               		cp	-1			; If -1, return -1
(1) 1344/     642 : 28 0C               		jr	z,.pass_2
(1) 1345/     644 : 23                  		inc	hl
(1) 1346/     645 : 46                  		ld	b,(hl)			; Read MSB
(1) 1347/     646 : CF                  		rst	8
(1) 1348/     647 : 2B                  		dec	hl
(1) 1349/     648 : B0                  		or	b
(1) 1350/     649 : 28 26               		jr	z,.new_link_z
(1) 1351/     64B : CD 67 06            		call	.nextsrch_tbl
(1) 1352/     64E : 18 EF               		jr	.srch_free
(1) 1353/     650 :                     ; PASS 2
(1) 1354/     650 :                     .pass_2:
(1) 1355/     650 : CF                  		rst	8
(1) 1356/     651 : E1                  		pop	hl
(1) 1357/     652 :                     .next_prio:
(1) 1358/     652 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1359/     653 : FE FF               		cp	-1		; If -1, return -1
(1) 1360/     655 : C8                  		ret	z
(1) 1361/     656 : 23                  		inc	hl
(1) 1362/     657 : 23                  		inc	hl
(1) 1363/     658 : 7E                  		ld	a,(hl)
(1) 1364/     659 : 2B                  		dec	hl
(1) 1365/     65A : 2B                  		dec	hl
(1) 1366/     65B : B9                  		cp	c
(1) 1367/     65C : 38 17               		jr	c,.new_link_o
(1) 1368/     65E : B7                  		or	a
(1) 1369/     65F : 28 14               		jr	z,.new_link
(1) 1370/     661 : CF                  		rst	8
(1) 1371/     662 : CD 67 06            		call	.nextsrch_tbl
(1) 1372/     665 : 18 EB               		jr	.next_prio
(1) 1373/     667 :                     
(1) 1374/     667 :                     .nextsrch_tbl:
(1) 1375/     667 : D5                  		push	de
(1) 1376/     668 : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1377/     66B : 19                  		add	hl,de
(1) 1378/     66C : D1                  		pop	de
(1) 1379/     66D : CF                  		rst	8
(1) 1380/     66E : 00                  		nop	; wave sync
(1) 1381/     66F : 00                  		nop
(1) 1382/     670 : C9                  		ret
(1) 1383/     671 :                     .new_link_z:
(1) 1384/     671 : 33                  		inc	sp		; skip backup
(1) 1385/     672 : 33                  		inc	sp
(1) 1386/     673 : 18 00               		jr	.new_link
(1) 1387/     675 :                     
(1) 1388/     675 :                     ; OVERWRITE link
(1) 1389/     675 :                     .new_link_o:
(1) 1390/     675 :                     
(1) 1391/     675 :                     ; NEW link
(1) 1392/     675 :                     .new_link:
(1) 1393/     675 : CF                  		rst	8
(1) 1394/     676 : 23                  		inc	hl
(1) 1395/     677 : 23                  		inc	hl
(1) 1396/     678 :                     ; hl+2
(1) 1397/     678 :                     .l_hiprio:
(1) 1398/     678 : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1399/     67B : DD E5               		push	ix
(1) 1400/     67D : D1                  		pop	de
(1) 1401/     67E : CF                  		rst	8
(1) 1402/     67F : 71                  		ld	(hl),c		; write priority
(1) 1403/     680 : 2B                  		dec	hl		; -1
(1) 1404/     681 : 72                  		ld 	(hl),d		; MSB
(1) 1405/     682 : 2B                  		dec	hl
(1) 1406/     683 : 73                  		ld	(hl),e		; LSB
(1) 1407/     684 : AF                  		xor	a
(1) 1408/     685 : C9                  		ret
(1) 1409/     686 :                     ; Single slot
(1) 1410/     686 :                     .singl_free:
(1) 1411/     686 : CF                  		rst	8
(1) 1412/     687 : 46                  		ld	b,(hl)
(1) 1413/     688 : 23                  		inc	hl
(1) 1414/     689 : 7E                  		ld	a,(hl)
(1) 1415/     68A : 23                  		inc	hl
(1) 1416/     68B : B0                  		or	b
(1) 1417/     68C : 28 EA               		jr	z,.l_hiprio
(1) 1418/     68E : 7E                  		ld	a,(hl)
(1) 1419/     68F : B9                  		cp	c
(1) 1420/     690 : 28 E6               		jr	z,.l_hiprio
(1) 1421/     692 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1422/     694 : B7                  		or	a
(1) 1423/     695 : 28 E1               		jr	z,.l_hiprio
(1) 1424/     697 :                     .sngl_sprio:
(1) 1425/     697 : CF                  		rst	8
(1) 1426/     698 :                     
(1) 1427/     698 :                     ; Set "can't use" table flag
(1) 1428/     698 :                     .set_asfull:
(1) 1429/     698 : 3E FF               		ld	a,-1
(1) 1430/     69A : C9                  		ret
(1) 1431/     69B :                     
(1) 1432/     69B :                     ; Pick chip table
(1) 1433/     69B :                     ; In:
(1) 1434/     69B :                     ;  e - ID
(1) 1435/     69B :                     ;
(1) 1436/     69B :                     ; Out:
(1) 1437/     69B :                     ; hl - Table
(1) 1438/     69B :                     .pick_tbl:
(1) 1439/     69B : D5                  		push	de
(1) 1440/     69C : 0F                  		rrca
(1) 1441/     69D : 0F                  		rrca
(1) 1442/     69E : 0F                  		rrca
(1) 1443/     69F : 0F                  		rrca
(1) 1444/     6A0 : E6 07               		and	00000111b
(1) 1445/     6A2 : 87                  		add	a,a
(1) 1446/     6A3 : 21 D3 14            		ld	hl,tblList
(1) 1447/     6A6 : E5                  		push	hl
(1) 1448/     6A7 : 16 00               		ld	d,0
(1) 1449/     6A9 : 5F                  		ld	e,a
(1) 1450/     6AA : 19                  		add	hl,de
(1) 1451/     6AB : 5E                  		ld	e,(hl)
(1) 1452/     6AC : 23                  		inc	hl
(1) 1453/     6AD : 7E                  		ld	a,(hl)
(1) 1454/     6AE : 57                  		ld	d,a
(1) 1455/     6AF : CB BA               		res	7,d
(1) 1456/     6B1 : E1                  		pop	hl
(1) 1457/     6B2 : 19                  		add	hl,de
(1) 1458/     6B3 : D1                  		pop	de
(1) 1459/     6B4 : C9                  		ret
(1) 1460/     6B5 :                     
(1) 1461/     6B5 :                     ; d - Silence chip
(1) 1462/     6B5 :                     ;
(1) 1463/     6B5 :                     ; Uses:
(1) 1464/     6B5 :                     ; bc
(1) 1465/     6B5 :                     .reset_link:
(1) 1466/     6B5 : CF                  		rst	8
(1) 1467/     6B6 : 36 00               		ld	(hl),0			; Delete link
(1) 1468/     6B8 : 23                  		inc	hl
(1) 1469/     6B9 : 36 00               		ld	(hl),0
(1) 1470/     6BB : 23                  		inc	hl
(1) 1471/     6BC : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1472/     6BD : 01 06 00            		ld	bc,8-2			; Go to 08h
(1) 1473/     6C0 : 09                  		add	hl,bc
(1) 1474/     6C1 : 06 04               		ld	b,8/2
(1) 1475/     6C3 :                     .clrfull:
(1) 1476/     6C3 : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1477/     6C5 : 23                  		inc	hl
(1) 1478/     6C6 : 36 00               		ld	(hl),0
(1) 1479/     6C8 : 23                  		inc	hl
(1) 1480/     6C9 : CF                  		rst	8
(1) 1481/     6CA : 10 F7               		djnz	.clrfull
(1) 1482/     6CC : C9                  		ret
(1) 1483/     6CD :                     
(1) 1484/     6CD :                     ; ============================================
(1) 1485/     6CD :                     ; ----------------------------------------
(1) 1486/     6CD :                     ; Process chip using it's table
(1) 1487/     6CD :                     ;
(1) 1488/     6CD :                     ; iy - table to read
(1) 1489/     6CD :                     ;  c - Chip ID
(1) 1490/     6CD :                     ; ----------------------------------------
(1) 1491/     6CD :                     
(1) 1492/     6CD :                     dtbl_multi:
(1) 1493/     6CD : FD 7E 00            		ld	a,(iy)
(1) 1494/     6D0 : FE FF               		cp	-1
(1) 1495/     6D2 : C8                  		ret	z
(1) 1496/     6D3 : CD E4 06            		call	dtbl_frommul
(1) 1497/     6D6 : CF                  		rst	8
(1) 1498/     6D7 : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1499/     6DA : FD 19               		add	iy,de
(1) 1500/     6DC : 00                  		nop
(1) 1501/     6DD : 00                  		nop
(1) 1502/     6DE : 00                  		nop
(1) 1503/     6DF : 00                  		nop
(1) 1504/     6E0 : CF                  		rst	8
(1) 1505/     6E1 : 18 EA               		jr	dtbl_multi
(1) 1506/     6E3 :                     dtbl_singl:
(1) 1507/     6E3 : CF                  		rst	8
(1) 1508/     6E4 :                     
(1) 1509/     6E4 :                     dtbl_frommul:
(1) 1510/     6E4 : FD 5E 00            		ld	e,(iy)
(1) 1511/     6E7 : FD 56 01            		ld	d,(iy+1)
(1) 1512/     6EA : 7A                  		ld	a,d
(1) 1513/     6EB : B3                  		or	e
(1) 1514/     6EC : 20 53               		jr	nz,.linked
(1) 1515/     6EE : FD 7E 02            		ld	a,(iy+2)	; Any 80h+ Flag?
(1) 1516/     6F1 : B7                  		or	a
(1) 1517/     6F2 : F0                  		ret	p
(1) 1518/     6F3 : FD 7E 02            		ld	a,(iy+2)	; a - chip type
(1) 1519/     6F6 : CF                  		rst	8
(1) 1520/     6F7 : FD 36 02 00         		ld	(iy+2),0	; Reset priority
(1) 1521/     6FB :                     
(1) 1522/     6FB :                     ; ----------------------------------------
(1) 1523/     6FB :                     ; chip-silence request
(1) 1524/     6FB :                     ; iy - Table
(1) 1525/     6FB : E6 F0               		and	11110000b
(1) 1526/     6FD : FE 80               		cp	80h
(1) 1527/     6FF : 28 1A               		jr	z,.siln_psg
(1) 1528/     701 : FE 90               		cp	90h
(1) 1529/     703 : 28 12               		jr	z,.siln_psg_n
(1) 1530/     705 : FE A0               		cp	0A0h
(1) 1531/     707 : 28 1C               		jr	z,.siln_fm
(1) 1532/     709 : FE B0               		cp	0B0h
(1) 1533/     70B : 28 18               		jr	z,.siln_fm
(1) 1534/     70D : CF                  		rst	8
(1) 1535/     70E : FE C0               		cp	0C0h
(1) 1536/     710 : 28 10               		jr	z,.siln_dac
(1) 1537/     712 : FE D0               		cp	0D0h
(1) 1538/     714 : 28 15               		jr	z,.siln_pwm
(1) 1539/     716 : C9                  		ret
(1) 1540/     717 :                     .siln_psg_n:
(1) 1541/     717 : AF                  		xor	a
(1) 1542/     718 : 32 AC 17            		ld	(psgHatMode),a
(1) 1543/     71B :                     .siln_psg:
(1) 1544/     71B : CF                  		rst	8
(1) 1545/     71C : DD 21 21 17         		ld	ix,psgcom
(1) 1546/     720 : 18 13               		jr	.rcyl_com
(1) 1547/     722 :                     
(1) 1548/     722 :                     ; --------------------------------
(1) 1549/     722 :                     
(1) 1550/     722 :                     .siln_dac:
(1) 1551/     722 : CD 86 11            		call	dac_off
(1) 1552/     725 :                     .siln_fm:
(1) 1553/     725 : CD CE 0C            		call	.fm_keyoff
(1) 1554/     728 : C3 D6 0C            		jp	.fm_tloff
(1) 1555/     72B :                     
(1) 1556/     72B :                     ; --------------------------------
(1) 1557/     72B :                     
(1) 1558/     72B :                     .siln_pwm:
(1) 1559/     72B : 3E 01               		ld	a,1
(1) 1560/     72D : 32 3F 00            		ld	(marsUpd),a
(1) 1561/     730 : CF                  		rst	8
(1) 1562/     731 : DD 21 E9 16         		ld	ix,pwmcom
(1) 1563/     735 :                     .rcyl_com:
(1) 1564/     735 : 06 00               		ld	b,0
(1) 1565/     737 : FD 4E 05            		ld	c,(iy+05h)
(1) 1566/     73A : DD 09               		add	ix,bc
(1) 1567/     73C : DD 36 00 04         		ld	(ix),100b
(1) 1568/     740 : C9                  		ret
(1) 1569/     741 :                     
(1) 1570/     741 :                     ; ----------------------------------------
(1) 1571/     741 :                     ; Process channel now
(1) 1572/     741 :                     ; iy - Table
(1) 1573/     741 :                     ; ix - Tracker channel
(1) 1574/     741 :                     .linked:
(1) 1575/     741 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1576/     742 : 47                  		ld	b,a		; b - flags to check
(1) 1577/     743 : E6 0F               		and	00001111b	; Filter flags
(1) 1578/     745 : C8                  		ret	z
(1) 1579/     746 : 78                  		ld	a,b
(1) 1580/     747 : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1581/     749 : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1582/     74A : D5                  		push	de
(1) 1583/     74B : DD E1               		pop	ix
(1) 1584/     74D : FD 6E 03            		ld	l,(iy+03h)
(1) 1585/     750 : FD 66 04            		ld	h,(iy+04h)
(1) 1586/     753 :                     
(1) 1587/     753 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1588/     753 :                     	; iy - Our chip table
(1) 1589/     753 :                     	; ix - Track channel
(1) 1590/     753 :                     	; hl - Intrument data
(1) 1591/     753 : CB 40               		bit	0,b		; Note
(1) 1592/     755 : C4 60 0C            		call	nz,.note
(1) 1593/     758 : CB 48               		bit	1,b		; Intrument
(1) 1594/     75A : C4 EA 0A            		call	nz,.inst
(1) 1595/     75D : CF                  		rst	8
(1) 1596/     75E : CB 50               		bit	2,b		; Volume
(1) 1597/     760 : C4 E1 0A            		call	nz,.volu
(1) 1598/     763 : CB 58               		bit	3,b		; Effect
(1) 1599/     765 : C4 1C 0A            		call	nz,.effc
(1) 1600/     768 : 78                  		ld	a,b
(1) 1601/     769 : E6 0F               		and	00001111b
(1) 1602/     76B : C8                  		ret	z
(1) 1603/     76C : CF                  		rst	8
(1) 1604/     76D :                     
(1) 1605/     76D :                     ; ----------------------------------------
(1) 1606/     76D :                     ; Process channel now
(1) 1607/     76D :                     ;
(1) 1608/     76D :                     ; b - Note bits
(1) 1609/     76D :                     ; ----------------------------------------
(1) 1610/     76D :                     
(1) 1611/     76D : 7E                  		ld	a,(hl)
(1) 1612/     76E : E6 70               		and	01110000b	; <--
(1) 1613/     770 : 0F                  		rrca
(1) 1614/     771 : 0F                  		rrca
(1) 1615/     772 : 0F                  		rrca
(1) 1616/     773 : 16 00               		ld	d,0
(1) 1617/     775 : 5F                  		ld	e,a
(1) 1618/     776 : 21 7F 07            		ld	hl,.mk_list
(1) 1619/     779 : 19                  		add	hl,de
(1) 1620/     77A : 7E                  		ld	a,(hl)
(1) 1621/     77B : 23                  		inc	hl
(1) 1622/     77C : 66                  		ld	h,(hl)
(1) 1623/     77D : 6F                  		ld	l,a
(1) 1624/     77E : E9                  		jp	(hl)
(1) 1625/     77F :                     ; --------------------------------
(1) 1626/     77F :                     .mk_list:
(1) 1627/     77F : AD 07               		dw .mk_psg
(1) 1628/     781 : 8F 07               		dw .mk_psgn
(1) 1629/     783 : 23 08               		dw .mk_fm
(1) 1630/     785 : 95 08               		dw .mk_fmspc
(1) 1631/     787 : 1B 09               		dw .mk_dac
(1) 1632/     789 : 71 09               		dw .mk_pwm
(1) 1633/     78B : 00 00               		dw 0
(1) 1634/     78D : 00 00               		dw 0
(1) 1635/     78F :                     
(1) 1636/     78F :                     ; --------------------------------
(1) 1637/     78F :                     
(1) 1638/     78F :                     .mk_psgn:
(1) 1639/     78F : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1640/     792 : DD E5               		push	ix
(1) 1641/     794 : DD 21 24 17         		ld	ix,psgcom+3	; <-- direct ix point
(1) 1642/     798 : CF                  		rst	8
(1) 1643/     799 : FE FE               		cp	-2
(1) 1644/     79B : 28 76               		jr	z,.kycut_psgn
(1) 1645/     79D : FE FF               		cp	-1
(1) 1646/     79F : 28 62               		jr	z,.kyoff_psgn
(1) 1647/     7A1 : 5F                  		ld	e,a
(1) 1648/     7A2 : 3A AC 17            		ld	a,(psgHatMode)	; Tone 3?
(1) 1649/     7A5 : E6 03               		and	011b
(1) 1650/     7A7 : FE 03               		cp	011b
(1) 1651/     7A9 : 20 42               		jr	nz,.psg_keyon	; Normal
(1) 1652/     7AB : 18 19               		jr	.from_psgn	; Tone 3
(1) 1653/     7AD :                     .mk_psg:
(1) 1654/     7AD : CF                  		rst	8
(1) 1655/     7AE : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1656/     7B1 : DD E5               		push	ix
(1) 1657/     7B3 : DD 21 21 17         		ld	ix,psgcom	; ix - psgcom
(1) 1658/     7B7 : FD 5E 05            		ld	e,(iy+05h)
(1) 1659/     7BA : 16 00               		ld	d,0
(1) 1660/     7BC : DD 19               		add	ix,de
(1) 1661/     7BE : FE FE               		cp	-2
(1) 1662/     7C0 : 28 56               		jr	z,.kycut_psg
(1) 1663/     7C2 : FE FF               		cp	-1
(1) 1664/     7C4 : 28 42               		jr	z,.kyoff_psg
(1) 1665/     7C6 :                     .from_psgn:
(1) 1666/     7C6 : CF                  		rst	8
(1) 1667/     7C7 : 16 00               		ld	d,0		; de - note*2
(1) 1668/     7C9 : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1669/     7CC : 21 AD 12            		ld	hl,psgFreq_List
(1) 1670/     7CF : 19                  		add	hl,de
(1) 1671/     7D0 : 7E                  		ld	a,(hl)
(1) 1672/     7D1 : 23                  		inc	hl
(1) 1673/     7D2 : 66                  		ld	h,(hl)
(1) 1674/     7D3 : 6F                  		ld	l,a
(1) 1675/     7D4 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1676/     7D7 : 07                  		rlca			; << 3
(1) 1677/     7D8 : 07                  		rlca
(1) 1678/     7D9 : CF                  		rst	8
(1) 1679/     7DA : 07                  		rlca
(1) 1680/     7DB : 57                  		ld	d,a
(1) 1681/     7DC : E6 F8               		and	11111000b
(1) 1682/     7DE : 5F                  		ld	e,a
(1) 1683/     7DF : 7A                  		ld	a,d
(1) 1684/     7E0 : E6 07               		and	00000111b
(1) 1685/     7E2 : 57                  		ld	d,a
(1) 1686/     7E3 : 37                  		scf
(1) 1687/     7E4 : 3F                  		ccf
(1) 1688/     7E5 : ED 52               		sbc	hl,de
(1) 1689/     7E7 : DD 75 1C            		ld	(ix+DTL),l
(1) 1690/     7EA : DD 74 20            		ld	(ix+DTH),h
(1) 1691/     7ED :                     .psg_keyon:
(1) 1692/     7ED : FD 7E 08            		ld	a,(iy+08h)	; Set volume
(1) 1693/     7F0 : ED 44               		neg	a
(1) 1694/     7F2 : CF                  		rst	8
(1) 1695/     7F3 : 87                  		add	a,a
(1) 1696/     7F4 : 87                  		add	a,a
(1) 1697/     7F5 : 30 02               		jr	nc,.vmuch
(1) 1698/     7F7 : 3E FF               		ld	a,-1
(1) 1699/     7F9 :                     .vmuch:
(1) 1700/     7F9 : DD 77 30            		ld	(ix+PVOL),a
(1) 1701/     7FC : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1702/     800 : DD E1               		pop	ix
(1) 1703/     802 : C9                  		ret
(1) 1704/     803 :                     ; -1
(1) 1705/     803 :                     .kyoff_psgn:
(1) 1706/     803 : 3E 00               		ld	a,000b
(1) 1707/     805 : 32 AC 17            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1708/     808 :                     .kyoff_psg:
(1) 1709/     808 : CF                  		rst	8
(1) 1710/     809 : 0E 02               		ld	c,010b
(1) 1711/     80B : DD 71 00            		ld	(ix),c
(1) 1712/     80E : DD E1               		pop	ix
(1) 1713/     810 : C3 B2 0D            		jp	.chnl_ulnkoff
(1) 1714/     813 :                     ; -2
(1) 1715/     813 :                     .kycut_psgn:
(1) 1716/     813 : 3E 00               		ld	a,000b
(1) 1717/     815 : 32 AC 17            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1718/     818 :                     .kycut_psg:
(1) 1719/     818 : CF                  		rst	8
(1) 1720/     819 : 0E 04               		ld	c,100b
(1) 1721/     81B : DD 71 00            		ld	(ix),c
(1) 1722/     81E : DD E1               		pop	ix
(1) 1723/     820 : C3 C3 0D            		jp	.chnl_ulnkcut
(1) 1724/     823 :                     
(1) 1725/     823 :                     ; --------------------------------
(1) 1726/     823 :                     
(1) 1727/     823 :                     .mk_fm:
(1) 1728/     823 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1729/     826 : FE FE               		cp	-2
(1) 1730/     828 : CA 12 09            		jp	z,.fm_cut
(1) 1731/     82B : FE FF               		cp	-1
(1) 1732/     82D : CA 0C 09            		jp	z,.fm_off
(1) 1733/     830 :                     ; 		call	.fm_tloff
(1) 1734/     830 : CF                  		rst	8
(1) 1735/     831 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1736/     834 : 78                  		ld	a,b		; Note bit?
(1) 1737/     835 : E6 01               		and	0001b
(1) 1738/     837 : 28 1F               		jr	z,.nofm_note
(1) 1739/     839 : FD 46 05            		ld	b,(iy+05h)	; Check channel 3
(1) 1740/     83C : 78                  		ld	a,b
(1) 1741/     83D : FE 02               		cp	2
(1) 1742/     83F : 20 0B               		jr	nz,.not_dspc
(1) 1743/     841 : 11 00 27            		ld	de,2700h	; CH3 off
(1) 1744/     844 : CD 5B 11            		call	fm_send_1
(1) 1745/     847 : 3E 00               		ld	a,0
(1) 1746/     849 : 32 AD 17            		ld	(fmSpecial),a
(1) 1747/     84C :                     .not_dspc:
(1) 1748/     84C : 78                  		ld	a,b
(1) 1749/     84D : FE 06               		cp	6
(1) 1750/     84F : 20 04               		jr	nz,.not_dac
(1) 1751/     851 : CF                  		rst	8
(1) 1752/     852 : CD 86 11            		call	dac_off
(1) 1753/     855 :                     .not_dac:
(1) 1754/     855 : CD CE 0C            		call	.fm_keyoff
(1) 1755/     858 :                     .nofm_note:
(1) 1756/     858 : FD 7E 06            		ld	a,(iy+06h)
(1) 1757/     85B : 47                  		ld	b,a
(1) 1758/     85C : E6 1F               		and	00011111b
(1) 1759/     85E : 5F                  		ld	e,a
(1) 1760/     85F : 16 00               		ld	d,0
(1) 1761/     861 : 21 95 12            		ld	hl,fmFreq_List
(1) 1762/     864 : 19                  		add	hl,de
(1) 1763/     865 : 7E                  		ld	a,(hl)
(1) 1764/     866 : CF                  		rst	8
(1) 1765/     867 : 23                  		inc	hl
(1) 1766/     868 : 66                  		ld	h,(hl)
(1) 1767/     869 : 6F                  		ld	l,a
(1) 1768/     86A : 78                  		ld	a,b
(1) 1769/     86B : E6 E0               		and	11100000b
(1) 1770/     86D : 0F                  		rrca
(1) 1771/     86E : 0F                  		rrca
(1) 1772/     86F : B4                  		or	h
(1) 1773/     870 : 67                  		ld	h,a
(1) 1774/     871 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1775/     874 : CF                  		rst	8
(1) 1776/     875 : AF                  		xor	a		; Clear high
(1) 1777/     876 : 3F                  		ccf			; Clear carry
(1) 1778/     877 : CB 23               		sla	e		; << 2
(1) 1779/     879 : CB 23               		sla	e
(1) 1780/     87B : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1781/     87C : 57                  		ld	d,a
(1) 1782/     87D : 19                  		add	hl,de
(1) 1783/     87E : CD ED 0C            		call	.fm_setfreq
(1) 1784/     881 :                     .fmspc_set:
(1) 1785/     881 : CD 7E 0D            		call	.fm_wrtalpan	; Panning and effects
(1) 1786/     884 : CD 04 0D            		call	.fm_wrtlvol	; FM volume control
(1) 1790/     887 : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Eh - keys
(1) 1791/     88A : E6 F0               		and	11110000b
(1) 1792/     88C : B1                  		or	c
(1) 1793/     88D : 5F                  		ld	e,a
(1) 1794/     88E : 16 28               		ld	d,28h
(1) 1795/     890 : CD 5B 11            		call	fm_send_1
(1) 1796/     893 : CF                  		rst	8
(1) 1797/     894 : C9                  		ret
(1) 1799/     895 :                     
(1) 1800/     895 :                     ; --------------------------------
(1) 1801/     895 :                     
(1) 1802/     895 :                     .mk_fmspc:
(1) 1803/     895 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1804/     898 : FE FE               		cp	-2
(1) 1805/     89A : CA 12 09            		jp	z,.fm_cut
(1) 1806/     89D : FE FF               		cp	-1
(1) 1807/     89F : CA 0C 09            		jp	z,.fm_off
(1) 1808/     8A2 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1809/     8A5 : 78                  		ld	a,b
(1) 1810/     8A6 : E6 01               		and	0001b
(1) 1811/     8A8 : 28 D7               		jr	z,.fmspc_set
(1) 1812/     8AA : CD CE 0C            		call	.fm_keyoff
(1) 1813/     8AD : 21 8F 14            		ld	hl,fmcach_list	; Manual freqs
(1) 1814/     8B0 : FD 7E 05            		ld	a,(iy+05h)
(1) 1815/     8B3 : E6 07               		and	0111b
(1) 1816/     8B5 : 16 00               		ld	d,0
(1) 1817/     8B7 : 87                  		add	a,a
(1) 1818/     8B8 : 5F                  		ld	e,a
(1) 1819/     8B9 : CF                  		rst	8
(1) 1820/     8BA : 19                  		add	hl,de
(1) 1821/     8BB : 7E                  		ld	a,(hl)
(1) 1822/     8BC : 23                  		inc	hl
(1) 1823/     8BD : 66                  		ld	h,(hl)
(1) 1824/     8BE : 6F                  		ld	l,a
(1) 1825/     8BF : 11 20 00            		ld	de,20h		; point to regs
(1) 1826/     8C2 : 19                  		add	hl,de
(1) 1827/     8C3 : 16 AD               		ld	d,0ADh
(1) 1828/     8C5 : 5E                  		ld	e,(hl)
(1) 1829/     8C6 : CD 5B 11            		call	fm_send_1
(1) 1830/     8C9 : 23                  		inc	hl
(1) 1831/     8CA : 16 A9               		ld	d,0A9h
(1) 1832/     8CC : 5E                  		ld	e,(hl)
(1) 1833/     8CD : CD 5B 11            		call	fm_send_1
(1) 1834/     8D0 : 23                  		inc	hl
(1) 1835/     8D1 : CF                  		rst	8
(1) 1836/     8D2 : 16 AC               		ld	d,0ACh
(1) 1837/     8D4 : 5E                  		ld	e,(hl)
(1) 1838/     8D5 : CD 5B 11            		call	fm_send_1
(1) 1839/     8D8 : 23                  		inc	hl
(1) 1840/     8D9 : 16 A8               		ld	d,0A8h
(1) 1841/     8DB : 5E                  		ld	e,(hl)
(1) 1842/     8DC : CD 5B 11            		call	fm_send_1
(1) 1843/     8DF : 23                  		inc	hl
(1) 1844/     8E0 : 16 AE               		ld	d,0AEh
(1) 1845/     8E2 : 5E                  		ld	e,(hl)
(1) 1846/     8E3 : CD 5B 11            		call	fm_send_1
(1) 1847/     8E6 : 23                  		inc	hl
(1) 1848/     8E7 : CF                  		rst	8
(1) 1849/     8E8 : 16 AA               		ld	d,0AAh
(1) 1850/     8EA : 5E                  		ld	e,(hl)
(1) 1851/     8EB : CD 5B 11            		call	fm_send_1
(1) 1852/     8EE : 23                  		inc	hl
(1) 1853/     8EF : 16 A6               		ld	d,0A6h
(1) 1854/     8F1 : 5E                  		ld	e,(hl)
(1) 1855/     8F2 : CD 5B 11            		call	fm_send_1
(1) 1856/     8F5 : 23                  		inc	hl
(1) 1857/     8F6 : 16 A2               		ld	d,0A2h
(1) 1858/     8F8 : 5E                  		ld	e,(hl)
(1) 1859/     8F9 : CD 5B 11            		call	fm_send_1
(1) 1860/     8FC : 23                  		inc	hl
(1) 1861/     8FD : CF                  		rst	8
(1) 1862/     8FE : 11 40 27            		ld	de,2740h	; CH3 on
(1) 1863/     901 : CD 5B 11            		call	fm_send_1
(1) 1864/     904 : 3E 01               		ld	a,1
(1) 1865/     906 : 32 AD 17            		ld	(fmSpecial),a
(1) 1866/     909 : C3 81 08            		jp	.fmspc_set
(1) 1867/     90C :                     
(1) 1868/     90C :                     ; --------------------------------
(1) 1869/     90C :                     
(1) 1870/     90C :                     .fm_off:
(1) 1871/     90C : CD CE 0C            		call	.fm_keyoff
(1) 1872/     90F : C3 B2 0D            		jp	.chnl_ulnkoff
(1) 1873/     912 :                     .fm_cut:
(1) 1874/     912 : CD CE 0C            		call	.fm_keyoff
(1) 1875/     915 : CD D6 0C            		call	.fm_tloff
(1) 1876/     918 : C3 C3 0D            		jp	.chnl_ulnkcut
(1) 1877/     91B :                     
(1) 1878/     91B :                     ; --------------------------------
(1) 1879/     91B :                     
(1) 1880/     91B :                     .mk_dac:
(1) 1881/     91B : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1882/     91E : FE FE               		cp	-2
(1) 1883/     920 : CA 42 09            		jp	z,.dac_cut
(1) 1884/     923 : FE FF               		cp	-1
(1) 1885/     925 : CA 48 09            		jp	z,.dac_off
(1) 1886/     928 : CD 4B 09            		call	.dac_pitch
(1) 1887/     92B : 78                  		ld	a,b		; Note ONLY?
(1) 1888/     92C : E6 01               		and	0001b
(1) 1889/     92E : C8                  		ret	z
(1) 1890/     92F : CD 86 11            		call	dac_off
(1) 1891/     932 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 1892/     935 : 2F                  		cpl				; REVERSE bits
(1) 1893/     936 : E6 C0               		and	11000000b
(1) 1894/     938 : 5F                  		ld	e,a
(1) 1895/     939 : 16 B6               		ld	d,0B6h		; Channel 6 panning
(1) 1896/     93B : CD 66 11            		call	fm_send_2
(1) 1897/     93E : CF                  		rst	8
(1) 1898/     93F : C3 9B 11            		jp	dac_play
(1) 1899/     942 :                     .dac_cut:
(1) 1900/     942 : CD 86 11            		call	dac_off
(1) 1901/     945 : C3 B2 0D            		jp	.chnl_ulnkoff
(1) 1902/     948 :                     .dac_off:
(1) 1903/     948 : C3 C3 0D            		jp	.chnl_ulnkcut
(1) 1904/     94B :                     
(1) 1905/     94B :                     
(1) 1906/     94B :                     .dac_pitch:
(1) 1907/     94B : 16 00               		ld	d,0		; Freq index
(1) 1908/     94D : FD 5E 06            		ld	e,(iy+06h)
(1) 1909/     950 : 21 9F 13            		ld	hl,wavFreq_List
(1) 1910/     953 : 19                  		add	hl,de
(1) 1911/     954 : 7E                  		ld	a,(hl)
(1) 1912/     955 : 23                  		inc	hl
(1) 1913/     956 : 66                  		ld	h,(hl)
(1) 1914/     957 : CF                  		rst	8
(1) 1915/     958 : 6F                  		ld	l,a
(1) 1916/     959 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1917/     95C : AF                  		xor	a		; Clear high
(1) 1918/     95D : 3F                  		ccf			; Clear carry
(1) 1919/     95E : CB 23               		sla	e		; << 3
(1) 1920/     960 : CB 23               		sla	e
(1) 1921/     962 : CB 23               		sla	e
(1) 1922/     964 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1923/     965 : 57                  		ld	d,a
(1) 1924/     966 : 19                  		add	hl,de
(1) 1925/     967 : 22 A6 17            		ld	(wave_Pitch),hl
(1) 1926/     96A : D9                  		exx			; *
(1) 1927/     96B : ED 5B A6 17         		ld	de,(wave_Pitch)	; *
(1) 1928/     96F : D9                  		exx			; *
(1) 1929/     970 : C9                  		ret
(1) 1930/     971 :                     
(1) 1931/     971 :                     ; --------------------------------
(1) 1932/     971 :                     
(1) 1933/     971 :                     .mk_pwm:
(1) 1934/     971 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1935/     974 : 16 00               		ld	d,0
(1) 1936/     976 : FD 5E 05            		ld	e,(iy+05h)
(1) 1937/     979 : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 1938/     97C : DD E5               		push	ix
(1) 1939/     97E : DD 21 E9 16         		ld	ix,pwmcom
(1) 1940/     982 : DD 19               		add	ix,de
(1) 1941/     984 : FE FE               		cp	-2
(1) 1942/     986 : CA 0D 0A            		jp	z,.pwm_cut
(1) 1943/     989 : FE FF               		cp	-1
(1) 1944/     98B : CA FE 09            		jp	z,.pwm_off
(1) 1945/     98E : CF                  		rst	8
(1) 1946/     98F : 78                  		ld	a,b
(1) 1947/     990 : CB 40               		bit	0,b			; Note?
(1) 1948/     992 : 20 0E               		jr	nz,.pw_note
(1) 1949/     994 : CB 58               		bit	3,b			; Effect?
(1) 1950/     996 : 20 03               		jr	nz,.pw_effc
(1) 1951/     998 : DD E1               		pop	ix
(1) 1952/     99A : C9                  		ret
(1) 1953/     99B :                     
(1) 1954/     99B :                     ; --------------------------------
(1) 1955/     99B :                     
(1) 1956/     99B :                     .pw_effc:
(1) 1957/     99B : CD CB 09            		call	.pw_setup
(1) 1958/     99E : 0E 11               		ld	c,00010001b
(1) 1959/     9A0 : 18 05               		jr	.pw_send
(1) 1960/     9A2 :                     .pw_note:
(1) 1961/     9A2 : CD CB 09            		call	.pw_setup
(1) 1962/     9A5 : 0E 01               		ld	c,00000001b	; KeyON request
(1) 1963/     9A7 :                     .pw_send:
(1) 1964/     9A7 : DD 71 00            		ld	(ix),c
(1) 1965/     9AA : 01 08 00            		ld	bc,8
(1) 1966/     9AD : DD 09               		add	ix,bc
(1) 1967/     9AF : DD 77 00            		ld	(ix),a
(1) 1968/     9B2 : DD 09               		add	ix,bc
(1) 1969/     9B4 : DD 75 00            		ld	(ix),l
(1) 1970/     9B7 : DD 09               		add	ix,bc
(1) 1971/     9B9 : CF                  		rst	8
(1) 1972/     9BA : DD 7E 00            		ld	a,(ix)
(1) 1973/     9BD : E6 CF               		and	11001111b
(1) 1974/     9BF : B3                  		or	e
(1) 1975/     9C0 : DD 77 00            		ld	(ix),a
(1) 1977/     9C3 : 3E 01               		ld	a,1
(1) 1978/     9C5 : 32 3F 00            		ld	(marsUpd),a
(1) 1980/     9C8 : DD E1               		pop	ix
(1) 1981/     9CA : C9                  		ret
(1) 1982/     9CB :                     .pw_setup:
(1) 1983/     9CB : 16 00               		ld	d,0		; Freq index
(1) 1984/     9CD : FD 5E 06            		ld	e,(iy+06h)
(1) 1985/     9D0 : 21 9F 13            		ld	hl,wavFreq_List
(1) 1986/     9D3 : 19                  		add	hl,de
(1) 1987/     9D4 : 7E                  		ld	a,(hl)
(1) 1988/     9D5 : 23                  		inc	hl
(1) 1989/     9D6 : 66                  		ld	h,(hl)
(1) 1990/     9D7 : 6F                  		ld	l,a
(1) 1991/     9D8 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1992/     9DB : AF                  		xor	a		; Clear high
(1) 1993/     9DC : 3F                  		ccf			; Clear carry
(1) 1994/     9DD : CB 23               		sla	e		; << 2
(1) 1995/     9DF : CB 23               		sla	e
(1) 1996/     9E1 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1997/     9E2 : 57                  		ld	d,a
(1) 1998/     9E3 : 19                  		add	hl,de
(1) 1999/     9E4 : CF                  		rst	8
(1) 2000/     9E5 : 79                  		ld	a,c
(1) 2001/     9E6 : 0F                  		rrca
(1) 2002/     9E7 : 0F                  		rrca
(1) 2003/     9E8 : 2F                  		cpl
(1) 2004/     9E9 : E6 30               		and	00110000b
(1) 2005/     9EB : 5F                  		ld	e,a
(1) 2006/     9EC : AF                  		xor	a
(1) 2007/     9ED : FD 7E 08            		ld	a,(iy+08h)	; Read volume
(1) 2008/     9F0 : ED 44               		neg	a
(1) 2009/     9F2 : CB 27               		sla	a
(1) 2010/     9F4 : CB 27               		sla	a
(1) 2011/     9F6 : 30 02               		jr	nc,.pwv_much
(1) 2012/     9F8 : 3E FF               		ld	a,-1
(1) 2013/     9FA :                     .pwv_much:
(1) 2014/     9FA : E6 FC               		and	11111100b
(1) 2015/     9FC : B4                  		or	h		; Merge MSB freq
(1) 2016/     9FD : C9                  		ret
(1) 2017/     9FE :                     
(1) 2018/     9FE :                     ; --------------------------------
(1) 2019/     9FE :                     ; -1
(1) 2020/     9FE :                     .pwm_off:
(1) 2021/     9FE : CF                  		rst	8
(1) 2022/     9FF : DD 36 00 02         		ld	(ix),010b
(1) 2023/     A03 : 3E 01               		ld	a,1
(1) 2024/     A05 : 32 3F 00            		ld	(marsUpd),a
(1) 2025/     A08 : DD E1               		pop	ix
(1) 2026/     A0A : C3 B2 0D            		jp	.chnl_ulnkoff
(1) 2027/     A0D :                     ; -2
(1) 2028/     A0D :                     .pwm_cut:
(1) 2029/     A0D : CF                  		rst	8
(1) 2030/     A0E : DD 36 00 04         		ld	(ix),100b
(1) 2031/     A12 : 3E 01               		ld	a,1
(1) 2032/     A14 : 32 3F 00            		ld	(marsUpd),a
(1) 2033/     A17 : DD E1               		pop	ix
(1) 2034/     A19 : C3 C3 0D            		jp	.chnl_ulnkcut
(1) 2035/     A1C :                     
(1) 2036/     A1C :                     ; ----------------------------------------
(1) 2037/     A1C :                     ; NEW effect
(1) 2038/     A1C :                     ; ----------------------------------------
(1) 2039/     A1C :                     
(1) 2040/     A1C :                     .effc:
(1) 2041/     A1C : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2042/     A1F : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2043/     A22 : 57                  		ld	d,a
(1) 2044/     A23 : CF                  		rst	8
(1) 2045/     A24 : FE 04               		cp	4			; Effect D?
(1) 2046/     A26 : 28 0F               		jr	z,.effc_D
(1) 2047/     A28 : FE 05               		cp	5			; Effect E?
(1) 2048/     A2A : 28 4E               		jr	z,.effc_E
(1) 2049/     A2C : FE 06               		cp	6			; Effect F?
(1) 2050/     A2E : 28 5F               		jr	z,.effc_F
(1) 2051/     A30 : CF                  		rst	8
(1) 2052/     A31 : FE 18               		cp	24			; Effect X?
(1) 2053/     A33 : CA B0 0A            		jp	z,.effc_X
(1) 2054/     A36 : C9                  		ret
(1) 2055/     A37 :                     
(1) 2056/     A37 :                     ; ----------------------------------------
(1) 2057/     A37 :                     ; Effect D
(1) 2058/     A37 :                     ;
(1) 2059/     A37 :                     ; Volume slide down
(1) 2060/     A37 :                     ;
(1) 2061/     A37 :                     ; 0xh-Exh - Normal
(1) 2062/     A37 :                     ; Fxh-Fxh - Fine slide / 2
(1) 2063/     A37 :                     
(1) 2064/     A37 :                     .effc_D:
(1) 2065/     A37 : CD A4 0A            		call	.save_arg
(1) 2066/     A3A : 79                  		ld	a,c		; Setting == 0?
(1) 2067/     A3B : B7                  		or	a
(1) 2068/     A3C : C8                  		ret	z
(1) 2069/     A3D : E6 F0               		and	0F0h
(1) 2070/     A3F : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2071/     A41 : FE F0               		cp	0F0h
(1) 2072/     A43 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2073/     A45 : CF                  		rst	8
(1) 2074/     A46 : 79                  		ld	a,c
(1) 2075/     A47 : E6 0F               		and	00Fh
(1) 2076/     A49 : 28 1D               		jr	z,.norm_up	; x0h
(1) 2077/     A4B : FE 0F               		cp	00Fh
(1) 2078/     A4D : 28 17               		jr	z,.fine_up	; xFh
(1) 2079/     A4F : C9                  		ret
(1) 2080/     A50 :                     ; Go down
(1) 2081/     A50 :                     .norm_down:
(1) 2082/     A50 : CB 21               		sla	c
(1) 2083/     A52 :                     .fine_down:
(1) 2084/     A52 : CB 21               		sla	c
(1) 2085/     A54 : 79                  		ld	a,c
(1) 2086/     A55 : E6 3C               		and	00111100b
(1) 2087/     A57 : 4F                  		ld	c,a
(1) 2088/     A58 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2089/     A5B : CF                  		rst	8
(1) 2090/     A5C : 91                  		sub	a,c
(1) 2091/     A5D : 1E C0               		ld	e,0C0h
(1) 2092/     A5F : BB                  		cp	e
(1) 2093/     A60 : D2 76 0A            		jp	nc,.vol_dvld
(1) 2094/     A63 : 7B                  		ld	a,e
(1) 2095/     A64 : 18 10               		jr 	.vol_dvld
(1) 2096/     A66 :                     ; Go up
(1) 2097/     A66 :                     .fine_up:
(1) 2098/     A66 : CB 39               		srl	c
(1) 2099/     A68 :                     .norm_up:
(1) 2100/     A68 : CB 39               		srl	c
(1) 2101/     A6A : 79                  		ld	a,c
(1) 2102/     A6B : E6 3C               		and	00111100b
(1) 2103/     A6D : 4F                  		ld	c,a
(1) 2104/     A6E : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2105/     A71 : CF                  		rst	8
(1) 2106/     A72 : 81                  		add	a,c
(1) 2107/     A73 : 38 01               		jr	c,.vol_dvld
(1) 2108/     A75 : AF                  		xor	a
(1) 2109/     A76 :                     .vol_dvld:
(1) 2110/     A76 : FD 77 08            		ld	(iy+08h),a
(1) 2111/     A79 : C9                  		ret
(1) 2112/     A7A :                     
(1) 2113/     A7A :                     ; ----------------------------------------
(1) 2114/     A7A :                     ; Effect E
(1) 2115/     A7A :                     .effc_E:
(1) 2116/     A7A : CD A4 0A            		call	.save_arg
(1) 2117/     A7D : 79                  		ld	a,c
(1) 2118/     A7E : E6 F0               		and	0F0h
(1) 2119/     A80 : FE F0               		cp	0F0h
(1) 2120/     A82 : C8                  		ret	z
(1) 2121/     A83 : FE E0               		cp	0E0h
(1) 2122/     A85 : C8                  		ret	z
(1) 2123/     A86 : CF                  		rst	8
(1) 2124/     A87 : FD 7E 07            		ld	a,(iy+07h)
(1) 2125/     A8A : 91                  		sub	a,c
(1) 2126/     A8B : FD 77 07            		ld	(iy+07h),a
(1) 2127/     A8E : C9                  		ret
(1) 2128/     A8F :                     
(1) 2129/     A8F :                     ; ----------------------------------------
(1) 2130/     A8F :                     ; Effect F
(1) 2131/     A8F :                     .effc_F:
(1) 2132/     A8F : CD A4 0A            		call	.save_arg
(1) 2133/     A92 : 79                  		ld	a,c
(1) 2134/     A93 : E6 F0               		and	0F0h
(1) 2135/     A95 : FE F0               		cp	0F0h
(1) 2136/     A97 : C8                  		ret	z
(1) 2137/     A98 : FE E0               		cp	0E0h
(1) 2138/     A9A : C8                  		ret	z
(1) 2139/     A9B : CF                  		rst	8
(1) 2140/     A9C : FD 7E 07            		ld	a,(iy+07h)
(1) 2141/     A9F : 81                  		add	a,c
(1) 2142/     AA0 : FD 77 07            		ld	(iy+07h),a
(1) 2143/     AA3 : C9                  		ret
(1) 2144/     AA4 :                     
(1) 2145/     AA4 :                     ; --------------------------------
(1) 2146/     AA4 :                     ; e - got arg
(1) 2147/     AA4 :                     ; c - new arg
(1) 2148/     AA4 :                     .save_arg:
(1) 2149/     AA4 : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2150/     AA7 : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2151/     AA8 : B7                  		or	a
(1) 2152/     AA9 : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2153/     AAB : 4F                  		ld	c,a
(1) 2154/     AAC : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2155/     AAF :                     .D_cont:
(1) 2156/     AAF : C9                  		ret
(1) 2157/     AB0 :                     
(1) 2158/     AB0 :                     ; ----------------------------------------
(1) 2159/     AB0 :                     ; Effect X
(1) 2160/     AB0 :                     ;
(1) 2161/     AB0 :                     ; Panning arg:
(1) 2162/     AB0 :                     ; 00h LEFT <- 80h MIDDLE -> FFh RIGHT
(1) 2163/     AB0 :                     ;
(1) 2164/     AB0 :                     ; FM style %LR000000 (REVERSE: 0-on 1-off)
(1) 2165/     AB0 :                     
(1) 2166/     AB0 :                     .effc_X:
(1) 2167/     AB0 : 16 00               		ld	d,0
(1) 2168/     AB2 : 7E                  		ld	a,(hl)
(1) 2169/     AB3 : FE 80               		cp	80h		; PSG?
(1) 2170/     AB5 : 28 18               		jr	z,.res_pan
(1) 2171/     AB7 : FE 90               		cp	90h		; PSGN?
(1) 2172/     AB9 : 28 14               		jr	z,.res_pan
(1) 2173/     ABB : FD 36 09 00         		ld	(iy+09h),0
(1) 2174/     ABF : CF                  		rst	8
(1) 2175/     AC0 : E5                  		push	hl
(1) 2176/     AC1 : 21 D9 0A            		ld	hl,.fm_panlist
(1) 2177/     AC4 : 7B                  		ld	a,e
(1) 2178/     AC5 : 07                  		rlca
(1) 2179/     AC6 : 07                  		rlca
(1) 2180/     AC7 : 07                  		rlca
(1) 2181/     AC8 : E6 07               		and	0111b
(1) 2182/     ACA :                     ; 		ld	d,0
(1) 2183/     ACA : 5F                  		ld	e,a
(1) 2184/     ACB : CF                  		rst	8
(1) 2185/     ACC : 19                  		add	hl,de
(1) 2186/     ACD : 56                  		ld	d,(hl)
(1) 2187/     ACE : E1                  		pop	hl
(1) 2188/     ACF :                     .res_pan:
(1) 2189/     ACF : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2190/     AD2 : E6 3F               		and	00111111b
(1) 2191/     AD4 : B2                  		or	d
(1) 2192/     AD5 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2193/     AD8 : C9                  		ret
(1) 2194/     AD9 :                     
(1) 2195/     AD9 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2196/     AD9 :                     .fm_panlist:
(1) 2197/     AD9 : 40                  		db 01000000b
(1) 2198/     ADA : 40                  		db 01000000b
(1) 2199/     ADB : 40                  		db 01000000b
(1) 2200/     ADC : 00                  		db 00000000b
(1) 2201/     ADD : 00                  		db 00000000b
(1) 2202/     ADE : 80                  		db 10000000b
(1) 2203/     ADF : 80                  		db 10000000b
(1) 2204/     AE0 : 80                  		db 10000000b
(1) 2205/     AE1 :                     
(1) 2206/     AE1 :                     ; ----------------------------------------
(1) 2207/     AE1 :                     ; NEW volume
(1) 2208/     AE1 :                     ; ----------------------------------------
(1) 2209/     AE1 :                     
(1) 2210/     AE1 :                     .volu:
(1) 2211/     AE1 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2212/     AE4 : D6 40               		sub	a,64
(1) 2213/     AE6 : FD 77 08            		ld	(iy+08h),a	; <-- BASE volume
(1) 2214/     AE9 : C9                  		ret
(1) 2215/     AEA :                     
(1) 2216/     AEA :                     ; ----------------------------------------
(1) 2217/     AEA :                     ; NEW instrument
(1) 2218/     AEA :                     ; ----------------------------------------
(1) 2219/     AEA :                     
(1) 2220/     AEA :                     .inst:
(1) 2221/     AEA : 7E                  		ld	a,(hl)
(1) 2222/     AEB : E6 F0               		and	11110000b
(1) 2223/     AED : FE 80               		cp	80h
(1) 2224/     AEF : 28 1E               		jr	z,.ps_ins
(1) 2225/     AF1 : FE 90               		cp	90h
(1) 2226/     AF3 : 28 14               		jr	z,.pn_ins
(1) 2227/     AF5 : FE A0               		cp	0A0h
(1) 2228/     AF7 : 28 4C               		jr	z,.fm_ins
(1) 2229/     AF9 : FE B0               		cp	0B0h
(1) 2230/     AFB : 28 48               		jr	z,.fm_ins
(1) 2231/     AFD : FE C0               		cp	0C0h
(1) 2232/     AFF : CA C6 0B            		jp	z,.dac_ins
(1) 2233/     B02 : CF                  		rst	8
(1) 2234/     B03 : FE D0               		cp	0D0h
(1) 2235/     B05 : CA 1D 0C            		jp	z,.pwm_ins
(1) 2236/     B08 :                     
(1) 2237/     B08 :                     ; ----------------------------------------
(1) 2238/     B08 :                     
(1) 2239/     B08 :                     .invl_ins:
(1) 2240/     B08 : C9                  		ret
(1) 2241/     B09 :                     
(1) 2242/     B09 :                     ; ----------------------------------------
(1) 2243/     B09 :                     
(1) 2244/     B09 :                     ; PSG
(1) 2245/     B09 :                     .pn_ins:
(1) 2246/     B09 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2247/     B0A : E6 07               		and	0111b
(1) 2248/     B0C : 32 AC 17            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2249/     B0F :                     .ps_ins:
(1) 2250/     B0F : CF                  		rst	8
(1) 2251/     B10 : DD E5               		push	ix
(1) 2252/     B12 : E5                  		push	hl
(1) 2253/     B13 : 23                  		inc	hl		; Skip ID
(1) 2254/     B14 : DD 21 21 17         		ld	ix,psgcom	; Read psg control
(1) 2255/     B18 : FD 5E 05            		ld	e,(iy+05h)
(1) 2256/     B1B : 16 00               		ld	d,0
(1) 2257/     B1D : DD 19               		add	ix,de
(1) 2258/     B1F : 7E                  		ld	a,(hl)
(1) 2259/     B20 : CF                  		rst	8
(1) 2260/     B21 : 23                  		inc	hl
(1) 2261/     B22 : 7E                  		ld	a,(hl)
(1) 2262/     B23 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2263/     B26 : 23                  		inc	hl
(1) 2264/     B27 : 7E                  		ld	a,(hl)
(1) 2265/     B28 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2266/     B2B : 23                  		inc	hl
(1) 2267/     B2C : 7E                  		ld	a,(hl)
(1) 2268/     B2D : CF                  		rst	8
(1) 2269/     B2E : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2270/     B31 : 23                  		inc	hl
(1) 2271/     B32 : 7E                  		ld	a,(hl)
(1) 2272/     B33 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2273/     B36 : 23                  		inc	hl
(1) 2274/     B37 : 7E                  		ld	a,(hl)
(1) 2275/     B38 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2276/     B3B : 23                  		inc	hl
(1) 2277/     B3C : 7E                  		ld	a,(hl)
(1) 2278/     B3D : CF                  		rst	8
(1) 2279/     B3E : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2280/     B41 : E1                  		pop	hl
(1) 2281/     B42 : DD E1               		pop	ix
(1) 2282/     B44 : C9                  		ret
(1) 2283/     B45 :                     
(1) 2284/     B45 :                     ; --------
(1) 2285/     B45 :                     
(1) 2286/     B45 :                     .fm_ins:
(1) 2287/     B45 :                     ;  ret
(1) 2288/     B45 : DD E5               		push	ix
(1) 2289/     B47 : E5                  		push	hl
(1) 2290/     B48 : C5                  		push	bc
(1) 2291/     B49 :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2292/     B49 : FD 46 02            		ld	b,(iy+02h)
(1) 2293/     B4C : FD 7E 05            		ld	a,(iy+05h)
(1) 2294/     B4F : E6 07               		and	0111b
(1) 2295/     B51 : 16 00               		ld	d,0
(1) 2296/     B53 : 87                  		add	a,a
(1) 2297/     B54 : 5F                  		ld	e,a
(1) 2298/     B55 : DD 21 8F 14         		ld	ix,fmcach_list
(1) 2299/     B59 : DD 19               		add	ix,de
(1) 2300/     B5B : CF                  		rst	8
(1) 2301/     B5C : DD 5E 00            		ld	e,(ix)
(1) 2302/     B5F : DD 23               		inc	ix
(1) 2303/     B61 : DD 56 00            		ld	d,(ix)
(1) 2304/     B64 :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2305/     B64 :                     ; 		cp	b
(1) 2306/     B64 :                     ; 		jr	z,.same_patch
(1) 2307/     B64 :                     ; 		ld	(iy+0Bh),b
(1) 2308/     B64 : 23                  		inc	hl		; Skip id and pitch
(1) 2309/     B65 : 23                  		inc	hl
(1) 2310/     B66 : 46                  		ld	b,(hl)
(1) 2311/     B67 : 23                  		inc	hl
(1) 2312/     B68 : 4E                  		ld	c,(hl)
(1) 2313/     B69 : 23                  		inc	hl
(1) 2314/     B6A : 6E                  		ld	l,(hl)
(1) 2315/     B6B : 61                  		ld	h,c
(1) 2316/     B6C : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2317/     B6F : BC                  		cp	h
(1) 2318/     B70 : 20 07               		jr	nz,.new_romdat
(1) 2319/     B72 : CF                  		rst	8
(1) 2320/     B73 : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2321/     B76 : BD                  		cp	l
(1) 2322/     B77 : 28 38               		jr	z,.same_patch
(1) 2323/     B79 :                     .new_romdat:
(1) 2324/     B79 : FD 74 0A            		ld	(iy+0Ah),h
(1) 2325/     B7C : FD 75 0B            		ld	(iy+0Bh),l
(1) 2326/     B7F : 78                  		ld	a,b
(1) 2327/     B80 : D5                  		push	de
(1) 2328/     B81 : 01 28 00            		ld	bc,28h		; <- size
(1) 2329/     B84 : CD 6E 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 2330/     B87 :                     
(1) 2331/     B87 : E1                  		pop	hl
(1) 2332/     B88 : FD 7E 05            		ld	a,(iy+05h)
(1) 2333/     B8B : 4F                  		ld	c,a		; c - FM Key ID
(1) 2334/     B8C :                     ; 		call	.fm_keyoff
(1) 2335/     B8C :                     
(1) 2336/     B8C :                     	; hl - fmcach intrument
(1) 2337/     B8C :                     	; de - FM reg and data: 3000h
(1) 2338/     B8C :                     	;  c - FM keyChannel
(1) 2339/     B8C : 79                  		ld	a,c
(1) 2340/     B8D : E6 03               		and	011b
(1) 2341/     B8F : F6 30               		or	30h		; Start at reg 30h
(1) 2342/     B91 : 57                  		ld	d,a
(1) 2343/     B92 : 1E 00               		ld	e,0
(1) 2344/     B94 : CF                  		rst	8
(1) 2345/     B95 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2346/     B97 : CD B6 0B            		call	.fm_setrlist
(1) 2347/     B9A :                     ; 		ld	b,4
(1) 2348/     B9A :                     ; 		call	.fm_setrlist
(1) 2349/     B9A :                     ; 		ld	b,5*4
(1) 2350/     B9A :                     ; 		call	.fm_setrlist
(1) 2351/     B9A : 7E                  		ld	a,(hl)		; 0B0h
(1) 2352/     B9B : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2353/     B9E : 23                  		inc	hl
(1) 2354/     B9F : 7E                  		ld	a,(hl)		; 0B4h
(1) 2355/     BA0 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2356/     BA3 : 23                  		inc	hl
(1) 2357/     BA4 : CF                  		rst	8
(1) 2358/     BA5 : 7E                  		ld	a,(hl)
(1) 2359/     BA6 : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2360/     BA9 : 23                  		inc	hl
(1) 2361/     BAA : 7E                  		ld	a,(hl)		; 028h keys
(1) 2362/     BAB : E6 F0               		and	11110000b
(1) 2363/     BAD : CF                  		rst	8
(1) 2364/     BAE : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2365/     BB1 :                     .same_patch:
(1) 2366/     BB1 : C1                  		pop	bc
(1) 2367/     BB2 : E1                  		pop	hl
(1) 2368/     BB3 : DD E1               		pop	ix
(1) 2369/     BB5 : C9                  		ret
(1) 2370/     BB6 :                     ; b - numof_regs
(1) 2371/     BB6 :                     .fm_setrlist:
(1) 2372/     BB6 : 5E                  		ld	e,(hl)
(1) 2373/     BB7 : 23                  		inc	hl
(1) 2374/     BB8 : CD 52 11            		call	fm_autoreg
(1) 2375/     BBB : 00                  		nop
(1) 2376/     BBC : 00                  		nop
(1) 2377/     BBD : CF                  		rst	8
(1) 2378/     BBE : 00                  		nop
(1) 2379/     BBF : 14                  		inc	d		; +4
(1) 2380/     BC0 : 14                  		inc	d
(1) 2381/     BC1 : 14                  		inc	d
(1) 2382/     BC2 : 14                  		inc	d
(1) 2383/     BC3 : 10 F1               		djnz	.fm_setrlist
(1) 2384/     BC5 : C9                  		ret
(1) 2385/     BC6 :                     ; --------
(1) 2386/     BC6 :                     
(1) 2387/     BC6 :                     .dac_ins:
(1) 2388/     BC6 : DD 5E 03            		ld	e,(ix+chnl_Ins)	; b - current Ins
(1) 2389/     BC9 :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2390/     BC9 :                     ; 		cp	e
(1) 2391/     BC9 :                     ; 		jr	z,.same_dac
(1) 2392/     BC9 : FD 73 0B            		ld	(iy+0Bh),e
(1) 2393/     BCC : E5                  		push	hl
(1) 2394/     BCD : C5                  		push	bc
(1) 2395/     BCE : 7E                  		ld	a,(hl)
(1) 2396/     BCF : E6 0F               		and	01111b
(1) 2397/     BD1 : 32 A8 17            		ld	(wave_Flags),a
(1) 2398/     BD4 : CF                  		rst	8
(1) 2399/     BD5 : 23                  		inc	hl
(1) 2400/     BD6 : 23                  		inc	hl
(1) 2401/     BD7 : 5E                  		ld	e,(hl)
(1) 2402/     BD8 : 23                  		inc	hl
(1) 2403/     BD9 : 7E                  		ld	a,(hl)
(1) 2404/     BDA : 23                  		inc	hl
(1) 2405/     BDB : 6E                  		ld	l,(hl)
(1) 2406/     BDC : 67                  		ld	h,a
(1) 2407/     BDD : E5                  		push	hl
(1) 2408/     BDE : 7B                  		ld	a,e
(1) 2409/     BDF : 01 06 00            		ld	bc,6		; Skip header
(1) 2410/     BE2 : 09                  		add	hl,bc
(1) 2411/     BE3 : CE 00               		adc	a,0
(1) 2412/     BE5 : 22 9D 17            		ld	(wave_Start),hl	; Set START point
(1) 2413/     BE8 : 32 9F 17            		ld	(wave_Start+2),a
(1) 2414/     BEB : E1                  		pop	hl
(1) 2415/     BEC : 7B                  		ld	a,e
(1) 2416/     BED : 11 BC 17            		ld	de,sampleHead
(1) 2417/     BF0 : 01 06 00            		ld	bc,6
(1) 2418/     BF3 : D5                  		push	de
(1) 2419/     BF4 : CF                  		rst	8
(1) 2420/     BF5 : CD 6E 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 2421/     BF8 : E1                  		pop	hl
(1) 2422/     BF9 :                     	; hl - temporal header
(1) 2423/     BF9 : 5E                  		ld	e,(hl)
(1) 2424/     BFA : 23                  		inc	hl
(1) 2425/     BFB : 56                  		ld	d,(hl)
(1) 2426/     BFC : 23                  		inc	hl
(1) 2427/     BFD : 7E                  		ld	a,(hl)
(1) 2428/     BFE : 23                  		inc	hl
(1) 2429/     BFF : ED 53 A0 17         		ld	(wave_Len),de	; LEN
(1) 2430/     C03 : 32 A2 17            		ld	(wave_Len+2),a
(1) 2431/     C06 : 5E                  		ld	e,(hl)
(1) 2432/     C07 : 23                  		inc	hl
(1) 2433/     C08 : CF                  		rst	8
(1) 2434/     C09 : 56                  		ld	d,(hl)
(1) 2435/     C0A : 23                  		inc	hl
(1) 2436/     C0B : 7E                  		ld	a,(hl)
(1) 2437/     C0C : 23                  		inc	hl
(1) 2438/     C0D : ED 53 A3 17         		ld	(wave_Loop),de	; LOOP
(1) 2439/     C11 : 32 A5 17            		ld	(wave_Loop+2),a
(1) 2440/     C14 : 11 06 28            		ld	de,2806h	; keys off
(1) 2441/     C17 : CD 5B 11            		call	fm_send_1
(1) 2442/     C1A : C1                  		pop	bc
(1) 2443/     C1B : E1                  		pop	hl
(1) 2444/     C1C :                     ; .same_dac:
(1) 2445/     C1C : C9                  		ret
(1) 2446/     C1D :                     
(1) 2447/     C1D :                     ; --------
(1) 2448/     C1D :                     
(1) 2449/     C1D :                     .pwm_ins:
(1) 2450/     C1D : DD E5               		push	ix
(1) 2451/     C1F : E5                  		push	hl
(1) 2452/     C20 : C5                  		push	bc
(1) 2453/     C21 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 2454/     C22 : E6 03               		and	00000011b
(1) 2455/     C24 : 0F                  		rrca
(1) 2456/     C25 : 0F                  		rrca
(1) 2457/     C26 : 4F                  		ld	c,a
(1) 2458/     C27 :                     ; 		ld	(iy+0Ah),a	; 0Ah flags: %SlLR
(1) 2459/     C27 : CF                  		rst	8
(1) 2460/     C28 : 23                  		inc	hl		; Skip ID and Pitch
(1) 2461/     C29 : 23                  		inc	hl
(1) 2462/     C2A : 56                  		ld	d,(hl)
(1) 2463/     C2B : 23                  		inc	hl
(1) 2464/     C2C : 5E                  		ld	e,(hl)
(1) 2465/     C2D : 23                  		inc	hl
(1) 2466/     C2E : 7E                  		ld	a,(hl)
(1) 2467/     C2F : 23                  		inc	hl
(1) 2468/     C30 : 6E                  		ld	l,(hl)
(1) 2469/     C31 : 67                  		ld	h,a
(1) 2470/     C32 : 79                  		ld	a,c
(1) 2471/     C33 : B2                  		or	d
(1) 2472/     C34 : 57                  		ld	d,a
(1) 2473/     C35 : CF                  		rst	8
(1) 2474/     C36 :                     
(1) 2475/     C36 :                     	; de,hl - 32-bit PWM pointer
(1) 2476/     C36 : DD 21 E9 16         		ld	ix,pwmcom
(1) 2477/     C3A : 06 00               		ld	b,0
(1) 2478/     C3C : FD 4E 05            		ld	c,(iy+05h)
(1) 2479/     C3F : DD 09               		add	ix,bc
(1) 2480/     C41 : 01 18 00            		ld	bc,PWOUTF
(1) 2481/     C44 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 2482/     C46 : 01 08 00            		ld	bc,8
(1) 2483/     C49 : DD 72 00            		ld	(ix),d
(1) 2484/     C4C : DD 09               		add	ix,bc
(1) 2485/     C4E : DD 73 00            		ld	(ix),e
(1) 2486/     C51 : DD 09               		add	ix,bc
(1) 2487/     C53 : DD 74 00            		ld	(ix),h
(1) 2488/     C56 : DD 09               		add	ix,bc
(1) 2489/     C58 : DD 75 00            		ld	(ix),l
(1) 2490/     C5B : C1                  		pop	bc
(1) 2491/     C5C : E1                  		pop	hl
(1) 2492/     C5D : DD E1               		pop	ix
(1) 2493/     C5F : C9                  		ret
(1) 2494/     C60 :                     
(1) 2495/     C60 :                     ; ----------------------------------------
(1) 2496/     C60 :                     ; NEW note
(1) 2497/     C60 :                     ; ----------------------------------------
(1) 2498/     C60 :                     
(1) 2499/     C60 :                     .note:
(1) 2500/     C60 : 78                  		ld	a,b		; Volume bit?
(1) 2501/     C61 : E6 04               		and	0100b
(1) 2502/     C63 : 20 05               		jr	nz,.fm_hasvol
(1) 2503/     C65 : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 2504/     C69 : CF                  		rst	8
(1) 2505/     C6A :                     .fm_hasvol:
(1) 2506/     C6A : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2507/     C6D : 4F                  		ld	c,a
(1) 2508/     C6E : FE FF               		cp	-1
(1) 2509/     C70 : C8                  		ret	z
(1) 2510/     C71 : FE FE               		cp	-2
(1) 2511/     C73 : C8                  		ret	z
(1) 2512/     C74 : 7E                  		ld	a,(hl)
(1) 2513/     C75 : E6 F0               		and	11110000b
(1) 2514/     C77 : FE 80               		cp	80h
(1) 2515/     C79 : 28 12               		jr	z,.n_indx
(1) 2516/     C7B : CF                  		rst	8
(1) 2517/     C7C : FE 90               		cp	90h
(1) 2518/     C7E : 28 1C               		jr	z,.n_psgn
(1) 2519/     C80 : FE A0               		cp	0A0h
(1) 2520/     C82 : 28 1D               		jr	z,.n_fm
(1) 2521/     C84 :                     ; 		cp	0B0h		; ** Can't use notes on FM3 **
(1) 2522/     C84 :                     ; 		jr	z,.n_fm
(1) 2523/     C84 : FE C0               		cp	0C0h
(1) 2524/     C86 : 28 05               		jr	z,.n_indx
(1) 2525/     C88 : FE D0               		cp	0D0h
(1) 2526/     C8A : 28 01               		jr	z,.n_indx
(1) 2527/     C8C : C9                  		ret
(1) 2528/     C8D :                     
(1) 2529/     C8D :                     ; --------------------------------
(1) 2530/     C8D :                     
(1) 2531/     C8D :                     .n_indx:
(1) 2532/     C8D : 79                  		ld	a,c
(1) 2533/     C8E :                     .n_stfreq:
(1) 2534/     C8E : 23                  		inc	hl		; Skip ID
(1) 2535/     C8F : 5E                  		ld	e,(hl)		; Read pitch
(1) 2536/     C90 : 2B                  		dec	hl
(1) 2537/     C91 : 83                  		add	a,e		; Note + pitch
(1) 2538/     C92 : CF                  		rst	8
(1) 2539/     C93 : 87                  		add	a,a		; * 2
(1) 2540/     C94 : FD 77 06            		ld	(iy+06h),a
(1) 2541/     C97 : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 2542/     C9B : C9                  		ret
(1) 2543/     C9C :                     .n_psgn:
(1) 2544/     C9C : 79                  		ld	a,c
(1) 2545/     C9D : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 2546/     C9F : 18 ED               		jr	.n_stfreq
(1) 2547/     CA1 :                     ; FM
(1) 2548/     CA1 :                     .n_fm:
(1) 2549/     CA1 : 79                  		ld	a,c
(1) 2550/     CA2 : 23                  		inc	hl		; Skip ID
(1) 2551/     CA3 : 5E                  		ld	e,(hl)		; Read pitch
(1) 2552/     CA4 : 2B                  		dec	hl
(1) 2553/     CA5 : CF                  		rst	8
(1) 2554/     CA6 : 83                  		add	a,e		; Note + pitch
(1) 2555/     CA7 :                     	; Search for octave and note
(1) 2556/     CA7 : 0E 00               		ld	c,0		; c - octave
(1) 2557/     CA9 : 16 07               		ld	d,7
(1) 2558/     CAB :                     .get_oct:
(1) 2559/     CAB : 5F                  		ld	e,a		; e - note
(1) 2560/     CAC : D6 0C               		sub	12
(1) 2561/     CAE : B7                  		or	a
(1) 2562/     CAF : FA BB 0C            		jp	m,.fnd_oct
(1) 2563/     CB2 : 0C                  		inc	c
(1) 2564/     CB3 : CF                  		rst	8
(1) 2565/     CB4 : 00                  		nop	; wave sync
(1) 2566/     CB5 : 00                  		nop
(1) 2567/     CB6 : 00                  		nop
(1) 2568/     CB7 : 00                  		nop
(1) 2569/     CB8 : 15                  		dec	d
(1) 2570/     CB9 : 20 F0               		jr	nz,.get_oct
(1) 2571/     CBB :                     .fnd_oct:
(1) 2572/     CBB : 7B                  		ld	a,e
(1) 2573/     CBC : 87                  		add	a,a		; Note * 2
(1) 2574/     CBD : E6 1F               		and	00011111b
(1) 2575/     CBF : CB 09               		rrc	c
(1) 2576/     CC1 : CB 09               		rrc	c
(1) 2577/     CC3 : CB 09               		rrc	c
(1) 2578/     CC5 : B1                  		or	c
(1) 2579/     CC6 : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 2580/     CC9 : FD 36 07 00         		ld	(iy+07h),0
(1) 2581/     CCD : C9                  		ret
(1) 2582/     CCE :                     
(1) 2583/     CCE :                     ; ----------------------------------------
(1) 2584/     CCE :                     
(1) 2585/     CCE :                     .fm_keyoff:
(1) 2586/     CCE : 16 28               		ld	d,28h
(1) 2587/     CD0 : FD 5E 05            		ld	e,(iy+05h)
(1) 2588/     CD3 : C3 5B 11            		jp	fm_send_1
(1) 2589/     CD6 :                     .fm_tloff:
(1) 2590/     CD6 : 06 04               		ld	b,4
(1) 2591/     CD8 : FD 4E 05            		ld	c,(iy+05h)
(1) 2592/     CDB : 79                  		ld	a,c
(1) 2593/     CDC : E6 03               		and	011b
(1) 2594/     CDE : F6 40               		or	40h	; TL regs
(1) 2595/     CE0 :                     .tl_down:
(1) 2596/     CE0 : 57                  		ld	d,a
(1) 2597/     CE1 : 1E 7F               		ld	e,7Fh
(1) 2598/     CE3 : CD 52 11            		call	fm_autoreg
(1) 2599/     CE6 : CF                  		rst	8
(1) 2600/     CE7 : 7A                  		ld	a,d
(1) 2601/     CE8 : C6 04               		add	a,4
(1) 2602/     CEA : 10 F4               		djnz	.tl_down
(1) 2603/     CEC : C9                  		ret
(1) 2604/     CED :                     ; c - KeyID
(1) 2605/     CED :                     .fm_setfreq:
(1) 2606/     CED : 79                  		ld	a,c
(1) 2607/     CEE : E6 03               		and	011b
(1) 2608/     CF0 : F6 A4               		or	0A4h
(1) 2609/     CF2 : 57                  		ld	d,a
(1) 2610/     CF3 : 5C                  		ld	e,h
(1) 2611/     CF4 : CF                  		rst	8
(1) 2612/     CF5 : CD 52 11            		call	fm_autoreg
(1) 2613/     CF8 : 79                  		ld	a,c
(1) 2614/     CF9 : E6 03               		and	011b
(1) 2615/     CFB : F6 A0               		or	0A0h
(1) 2616/     CFD : 57                  		ld	d,a
(1) 2617/     CFE : 5D                  		ld	e,l
(1) 2618/     CFF : CD 52 11            		call	fm_autoreg
(1) 2619/     D02 : CF                  		rst	8
(1) 2620/     D03 : C9                  		ret
(1) 2621/     D04 :                     
(1) 2622/     D04 :                     ; --------------------------------
(1) 2623/     D04 :                     ; WRITE TL volume
(1) 2624/     D04 :                     
(1) 2625/     D04 :                     .fm_wrtlvol:
(1) 2626/     D04 : 21 8F 14            		ld	hl,fmcach_list
(1) 2627/     D07 : FD 7E 05            		ld	a,(iy+05h)
(1) 2628/     D0A : E6 07               		and	0111b
(1) 2629/     D0C : 16 00               		ld	d,0
(1) 2630/     D0E : CF                  		rst	8
(1) 2631/     D0F : 87                  		add	a,a
(1) 2632/     D10 : 5F                  		ld	e,a
(1) 2633/     D11 : 19                  		add	hl,de
(1) 2634/     D12 : 7E                  		ld	a,(hl)
(1) 2635/     D13 : 23                  		inc	hl
(1) 2636/     D14 : 66                  		ld	h,(hl)
(1) 2637/     D15 : 6F                  		ld	l,a
(1) 2638/     D16 : 23                  		inc	hl
(1) 2639/     D17 : 23                  		inc	hl
(1) 2640/     D18 : 23                  		inc	hl
(1) 2641/     D19 : CF                  		rst	8
(1) 2642/     D1A : 23                  		inc	hl		; Point to TL's
(1) 2643/     D1B : FD 7E 05            		ld	a,(iy+05h)
(1) 2644/     D1E : E6 03               		and	011b
(1) 2645/     D20 : F6 40               		or	40h		; TL registers
(1) 2646/     D22 : 57                  		ld	d,a
(1) 2647/     D23 :                     ; d - 40h+
(1) 2648/     D23 :                     ; hl - TL data
(1) 2649/     D23 :                     ; .fm_wrtlvol:
(1) 2650/     D23 : C5                  		push	bc
(1) 2651/     D24 : E5                  		push	hl
(1) 2652/     D25 : 21 76 0D            		ld	hl,.fm_cindx
(1) 2653/     D28 : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2654/     D2B : E6 07               		and	0111b
(1) 2655/     D2D : 06 00               		ld	b,0
(1) 2656/     D2F : 4F                  		ld	c,a
(1) 2657/     D30 : 09                  		add	hl,bc
(1) 2658/     D31 : FD 7E 08            		ld	a,(iy+08h)
(1) 2659/     D34 : CB 2F               		sra	a		; volume / 2
(1) 2660/     D36 : E6 7F               		and	01111111b
(1) 2661/     D38 : 4F                  		ld	c,a
(1) 2662/     D39 : CF                  		rst	8
(1) 2663/     D3A : 46                  		ld	b,(hl)
(1) 2664/     D3B : E1                  		pop	hl
(1) 2665/     D3C : CB 08               		rrc	b		; OP1
(1) 2666/     D3E : DC 69 0D            		call	c,.write_tl
(1) 2667/     D41 : 23                  		inc	hl
(1) 2668/     D42 : 14                  		inc	d
(1) 2669/     D43 : 14                  		inc	d
(1) 2670/     D44 : CF                  		rst	8
(1) 2671/     D45 : 14                  		inc	d
(1) 2672/     D46 : 14                  		inc	d
(1) 2673/     D47 : CB 08               		rrc	b		; OP2
(1) 2674/     D49 : DC 69 0D            		call	c,.write_tl
(1) 2675/     D4C : 23                  		inc	hl
(1) 2676/     D4D : 14                  		inc	d
(1) 2677/     D4E : 14                  		inc	d
(1) 2678/     D4F : 14                  		inc	d
(1) 2679/     D50 : 14                  		inc	d
(1) 2680/     D51 : CB 08               		rrc	b		; OP3
(1) 2681/     D53 : DC 69 0D            		call	c,.write_tl
(1) 2682/     D56 : 23                  		inc	hl
(1) 2683/     D57 : CF                  		rst	8
(1) 2684/     D58 : 14                  		inc	d
(1) 2685/     D59 : 14                  		inc	d
(1) 2686/     D5A : 14                  		inc	d
(1) 2687/     D5B : 14                  		inc	d
(1) 2688/     D5C : CB 08               		rrc	b		; OP4
(1) 2689/     D5E : DC 69 0D            		call	c,.write_tl
(1) 2690/     D61 : 23                  		inc	hl
(1) 2691/     D62 : 14                  		inc	d
(1) 2692/     D63 : 14                  		inc	d
(1) 2693/     D64 : 14                  		inc	d
(1) 2694/     D65 : 14                  		inc	d
(1) 2695/     D66 : CF                  		rst	8
(1) 2696/     D67 : C1                  		pop	bc
(1) 2697/     D68 : C9                  		ret
(1) 2698/     D69 :                     .write_tl:
(1) 2699/     D69 : 7E                  		ld	a,(hl)
(1) 2700/     D6A : 91                  		sub	a,c
(1) 2701/     D6B : C5                  		push	bc
(1) 2702/     D6C : 5F                  		ld	e,a
(1) 2703/     D6D : FD 4E 05            		ld	c,(iy+05h)
(1) 2704/     D70 : CD 52 11            		call	fm_autoreg
(1) 2705/     D73 : CF                  		rst	8
(1) 2706/     D74 : C1                  		pop	bc
(1) 2707/     D75 : C9                  		ret
(1) 2708/     D76 :                     ; Jump carry list
(1) 2709/     D76 :                     .fm_cindx:
(1) 2710/     D76 : 08                  		db 1000b
(1) 2711/     D77 : 08                  		db 1000b
(1) 2712/     D78 : 08                  		db 1000b
(1) 2713/     D79 : 08                  		db 1000b
(1) 2714/     D7A : 0C                  		db 1100b
(1) 2715/     D7B : 0E                  		db 1110b
(1) 2716/     D7C : 0E                  		db 1110b
(1) 2717/     D7D : 0F                  		db 1111b
(1) 2718/     D7E :                     ; c - KeyId
(1) 2719/     D7E :                     .fm_wrtalpan:
(1) 2720/     D7E : FD 7E 0C            		ld	a,(iy+0Ch)	; 0B0h algorithm
(1) 2721/     D81 : 5F                  		ld	e,a
(1) 2722/     D82 : 79                  		ld	a,c
(1) 2723/     D83 : E6 03               		and	011b
(1) 2724/     D85 : F6 B0               		or	0B0h
(1) 2725/     D87 : 57                  		ld	d,a
(1) 2726/     D88 : CD 52 11            		call	fm_autoreg
(1) 2727/     D8B : CF                  		rst	8
(1) 2728/     D8C : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2729/     D8F : 2F                  		cpl				; REVERSE bits
(1) 2730/     D90 : E6 C0               		and	11000000b
(1) 2731/     D92 : 5F                  		ld	e,a
(1) 2732/     D93 : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %LRaa0ppp
(1) 2733/     D96 : E6 3F               		and	00111111b
(1) 2734/     D98 : B3                  		or	e
(1) 2735/     D99 : 5F                  		ld	e,a
(1) 2736/     D9A : 79                  		ld	a,c
(1) 2737/     D9B : E6 03               		and	011b
(1) 2738/     D9D : F6 B4               		or	0B4h
(1) 2739/     D9F : 57                  		ld	d,a
(1) 2740/     DA0 : CD 52 11            		call	fm_autoreg
(1) 2741/     DA3 : CF                  		rst	8
(1) 2742/     DA4 : FD 7E 0E            		ld	a,(iy+0Eh)
(1) 2743/     DA7 : CB 5F               		bit	3,a
(1) 2744/     DA9 : 28 06               		jr	z,.no_lfo
(1) 2745/     DAB : 5F                  		ld	e,a
(1) 2746/     DAC : 16 22               		ld	d,22h
(1) 2747/     DAE : CD 5B 11            		call	fm_send_1
(1) 2748/     DB1 :                     .no_lfo:
(1) 2749/     DB1 : C9                  		ret
(1) 2750/     DB2 :                     
(1) 2751/     DB2 :                     ; ----------------------------------------
(1) 2752/     DB2 :                     
(1) 2753/     DB2 :                     .chnl_ulnkoff:
(1) 2754/     DB2 : 0E 00               		ld	c,0
(1) 2755/     DB4 :                     .chnl_ulnk:
(1) 2756/     DB4 : CF                  		rst	8
(1) 2757/     DB5 : AF                  		xor	a
(1) 2758/     DB6 : DD 77 01            		ld	(ix+chnl_Chip),a
(1) 2759/     DB9 : FD 77 00            		ld	(iy),a		; Delete link, chip and prio
(1) 2760/     DBC : FD 77 01            		ld	(iy+1),a
(1) 2761/     DBF : FD 71 02            		ld	(iy+2),c
(1) 2762/     DC2 : C9                  		ret
(1) 2763/     DC3 :                     .chnl_ulnkcut:
(1) 2764/     DC3 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 2765/     DC6 : CD B4 0D            		call	.chnl_ulnk
(1) 2766/     DC9 : FD 77 08            		ld	(iy+08h),a
(1) 2767/     DCC : FD 77 09            		ld	(iy+09h),a
(1) 2768/     DCF : FD 77 0A            		ld	(iy+0Ah),a
(1) 2769/     DD2 : FD 77 0B            		ld	(iy+0Bh),a
(1) 2770/     DD5 :                     ; 		push	iy
(1) 2771/     DD5 :                     ; 		pop	hl
(1) 2772/     DD5 :                     ; 		ld	bc,8-2		; Go to 08h
(1) 2773/     DD5 :                     ; 		add	hl,bc
(1) 2774/     DD5 :                     ; 		rst	8
(1) 2775/     DD5 :                     ; 		ld	b,8/2
(1) 2776/     DD5 :                     ; .clrfull:
(1) 2777/     DD5 :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 2778/     DD5 :                     ; 		inc	hl
(1) 2779/     DD5 :                     ; 		ld	(hl),0
(1) 2780/     DD5 :                     ; 		inc	hl
(1) 2781/     DD5 :                     ; 		rst	8
(1) 2782/     DD5 :                     ; 		djnz	.clrfull
(1) 2783/     DD5 : C9                  		ret
(1) 2784/     DD6 :                     
(1) 2785/     DD6 :                     ; ============================================================
(1) 2786/     DD6 :                     ; --------------------------------------------------------
(1) 2787/     DD6 :                     ; Communicate with the 32X from here.
(1) 2788/     DD6 :                     ; --------------------------------------------------------
(1) 2789/     DD6 :                     
(1) 2790/     DD6 :                     ex_comm:
(1) 2791/     DD6 : CF                  		rst	8
(1) 2792/     DD7 : 00                  		nop
(1) 2794/     DD8 : 3A 82 00            		ld	a,(marsBlock)	; Enable MARS requests?
(1) 2795/     DDB : B7                  		or	a
(1) 2796/     DDC : C2 76 0E            		jp	nz,.blocked
(1) 2797/     DDF : FD 21 00 D1         		ld	iy,8000h|5100h	; iy - mars sysreg (now $A15100)
(1) 2798/     DE3 : DD 21 E9 16         		ld	ix,pwmcom
(1) 2799/     DE7 :                     ; 		ld	hl,6000h	; Point BANK closely to the 32X area ($A10000)
(1) 2800/     DE7 :                     ; 		ld	(hl),0
(1) 2801/     DE7 :                     ; 		ld	(hl),1
(1) 2802/     DE7 :                     ; 		rst	8
(1) 2803/     DE7 :                     ; 		ld	(hl),0
(1) 2804/     DE7 :                     ; 		ld	(hl),0
(1) 2805/     DE7 :                     ; 		ld	(hl),0
(1) 2806/     DE7 :                     ; 		ld	(hl),0
(1) 2807/     DE7 :                     ; 		ld	(hl),1
(1) 2808/     DE7 :                     ; 		ld	(hl),0
(1) 2809/     DE7 :                     ; 		ld	(hl),1
(1) 2810/     DE7 :                     	; SLOW bankswitch to keep
(1) 2811/     DE7 :                     	; the wave playback stable.
(1) 2812/     DE7 : AF                  		xor	a
(1) 2813/     DE8 : 32 00 60            		ld	(6000h),a	; 0
(1) 2814/     DEB : 3E A1               		ld	a,10100001b
(1) 2815/     DED : 32 00 60            		ld	(6000h),a	; 1
(1) 2816/     DF0 : 0F                  		rrca
(1) 2817/     DF1 : 32 00 60            		ld	(6000h),a	; 0
(1) 2818/     DF4 : 0F                  		rrca
(1) 2819/     DF5 : 32 00 60            		ld	(6000h),a	; 0
(1) 2820/     DF8 : 0F                  		rrca
(1) 2821/     DF9 : 32 00 60            		ld	(6000h),a	; 0
(1) 2822/     DFC : CF                  		rst	8
(1) 2823/     DFD : 0F                  		rrca
(1) 2824/     DFE : 32 00 60            		ld	(6000h),a	; 0
(1) 2825/     E01 : 0F                  		rrca
(1) 2826/     E02 : 32 00 60            		ld	(6000h),a	; 1
(1) 2827/     E05 : 0F                  		rrca
(1) 2828/     E06 : 32 00 60            		ld	(6000h),a	; 0
(1) 2829/     E09 : 0F                  		rrca
(1) 2830/     E0A : 32 00 60            		ld	(6000h),a	; 1
(1) 2831/     E0D : CF                  		rst	8
(1) 2832/     E0E : 3A 3F 00            		ld	a,(marsUpd)	; NEW transfer?
(1) 2833/     E11 : B7                  		or	a
(1) 2834/     E12 : C8                  		ret	z
(1) 2835/     E13 : AF                  		xor	a
(1) 2836/     E14 : 32 3F 00            		ld	(marsUpd),a
(1) 2837/     E17 :                     .wait_enter:
(1) 2838/     E17 : 00                  		nop
(1) 2839/     E18 : 00                  		nop
(1) 2840/     E19 : FD 7E 2E            		ld	a,(iy+comm14)	; check if 68k got first.
(1) 2841/     E1C : CB 7F               		bit	7,a
(1) 2842/     E1E : 20 F7               		jr	nz,.wait_enter
(1) 2843/     E20 : E6 F0               		and	11110000b
(1) 2844/     E22 : F6 01               		or	1		; Set CMD task mode $01
(1) 2845/     E24 : FD 77 2E            		ld	(iy+comm14),a
(1) 2846/     E27 : CF                  		rst	8
(1) 2847/     E28 : E6 0F               		and	00001111b	; Did it write?
(1) 2848/     E2A : FE 01               		cp	1
(1) 2849/     E2C : 20 E9               		jr	nz,.wait_enter	; If not, retry.
(1) 2850/     E2E : FD CB 2E FE         		set	7,(iy+comm14)	; Lock bit
(1) 2851/     E32 : FD CB 03 CE         		set	1,(iy+standby)	; Request Slave CMD
(1) 2852/     E36 : 00                  		nop
(1) 2853/     E37 : 00                  		nop
(1) 2854/     E38 : 00                  		nop
(1) 2855/     E39 : 00                  		nop
(1) 2856/     E3A : 00                  		nop
(1) 2857/     E3B : CF                  		rst	8
(1) 2858/     E3C : 00                  		nop
(1) 2859/     E3D : 00                  		nop
(1) 2860/     E3E : 00                  		nop
(1) 2861/     E3F : 00                  		nop
(1) 2862/     E40 : 00                  		nop
(1) 2863/     E41 :                     ; .wait_cmd:
(1) 2864/     E41 :                     ; 		bit	1,(iy+standby)
(1) 2865/     E41 :                     ; 		jr	nz,.wait_cmd
(1) 2866/     E41 : 0E 0E               		ld	c,14		; c - 14 words/2-byte
(1) 2867/     E43 :                     .next_pass:
(1) 2868/     E43 : CF                  		rst	8
(1) 2869/     E44 : FD E5               		push	iy
(1) 2870/     E46 : E1                  		pop	hl
(1) 2871/     E47 : 11 28 00            		ld	de,comm8	; hl - comm8
(1) 2872/     E4A : 19                  		add	hl,de
(1) 2873/     E4B : 06 02               		ld	b,2
(1) 2874/     E4D : CF                  		rst	8
(1) 2875/     E4E :                     .next_comm:
(1) 2876/     E4E : DD 56 00            		ld	d,(ix)
(1) 2877/     E51 : DD 5E 01            		ld	e,(ix+1)
(1) 2878/     E54 : DD 23               		inc	ix
(1) 2879/     E56 : DD 23               		inc	ix
(1) 2880/     E58 : CF                  		rst	8
(1) 2881/     E59 : 72                  		ld	(hl),d
(1) 2882/     E5A : 23                  		inc	hl
(1) 2883/     E5B : 73                  		ld	(hl),e
(1) 2884/     E5C : 23                  		inc	hl
(1) 2885/     E5D : 10 EF               		djnz	.next_comm
(1) 2886/     E5F : FD CB 2E F6         		set	6,(iy+comm14)	; PASS data bit
(1) 2887/     E63 : CF                  		rst	8
(1) 2888/     E64 :                     .w_pass2:
(1) 2889/     E64 : 00                  		nop
(1) 2890/     E65 : FD CB 2E 76         		bit	6,(iy+comm14)	; PASS cleared?
(1) 2891/     E69 : 20 F9               		jr	nz,.w_pass2
(1) 2892/     E6B : 0D                  		dec	c
(1) 2893/     E6C : 20 D5               		jr	nz,.next_pass
(1) 2894/     E6E : FD CB 2E BE         		res	7,(iy+comm14)	; Break transfer loop
(1) 2895/     E72 : FD CB 2E B6         		res	6,(iy+comm14)	; Clear CLK
(1) 2896/     E76 :                     .blocked:
(1) 2897/     E76 : CF                  		rst	8
(1) 2898/     E77 : 21 E9 16            		ld	hl,pwmcom
(1) 2899/     E7A : 06 07               		ld	b,7		; MAX PWM channels
(1) 2900/     E7C : AF                  		xor	a
(1) 2901/     E7D :                     .clrcom:
(1) 2902/     E7D : 77                  		ld	(hl),a		; Reset our COM bytes
(1) 2903/     E7E : 23                  		inc	hl
(1) 2904/     E7F : 10 FC               		djnz	.clrcom
(1) 2906/     E81 : C9                  		ret
(1) 2907/     E82 :                     
(1) 2908/     E82 :                     ; ====================================================================
(1) 2909/     E82 :                     ; ----------------------------------------------------------------
(1) 2910/     E82 :                     ; Subroutines
(1) 2911/     E82 :                     ; ----------------------------------------------------------------
(1) 2912/     E82 :                     
(1) 2913/     E82 :                     ; --------------------------------------------------------
(1) 2914/     E82 :                     ; Init sound engine
(1) 2915/     E82 :                     ; --------------------------------------------------------
(1) 2916/     E82 :                     
(1) 2917/     E82 :                     gema_init:
(1) 2918/     E82 : CD 86 11            		call	dac_off
(1) 2919/     E85 : 3E 00               		ld	a,0
(1) 2920/     E87 : 32 3F 00            		ld	(marsUpd),a
(1) 2921/     E8A : 21 00 1D            		ld	hl,dWaveBuff	; hl - Wave buffer START
(1) 2922/     E8D : 11 01 1D            		ld	de,dWaveBuff+1	; de - Wave next byte
(1) 2923/     E90 : 01 FF 00            		ld	bc,100h-1	; bc - length for copying
(1) 2924/     E93 : 36 80               		ld	(hl),80h	; Set first byte
(1) 2925/     E95 : ED B0               		ldir			; Start copying
(1) 2926/     E97 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 2927/     E9A : 36 9F               		ld	(hl),09Fh
(1) 2928/     E9C : 36 BF               		ld	(hl),0BFh
(1) 2929/     E9E : 36 DF               		ld	(hl),0DFh
(1) 2930/     EA0 : 36 FF               		ld	(hl),0FFh
(1) 2931/     EA2 : 11 0B 22            		ld	de,2208h|3	; Set Default LFO
(1) 2932/     EA5 : CD 5B 11            		call	fm_send_1
(1) 2933/     EA8 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 2934/     EAB : CD 5B 11            		call	fm_send_1
(1) 2935/     EAE : 11 00 28            		ld	de,2800h	; FM KEYS off
(1) 2936/     EB1 : CD 5B 11            		call	fm_send_1
(1) 2937/     EB4 : 1C                  		inc	e
(1) 2938/     EB5 : CD 5B 11            		call	fm_send_1
(1) 2939/     EB8 : 1C                  		inc	e
(1) 2940/     EB9 : CD 5B 11            		call	fm_send_1
(1) 2941/     EBC : 1C                  		inc	e
(1) 2942/     EBD : 1C                  		inc	e
(1) 2943/     EBE : CD 5B 11            		call	fm_send_1
(1) 2944/     EC1 : 1C                  		inc	e
(1) 2945/     EC2 : CD 5B 11            		call	fm_send_1
(1) 2946/     EC5 : 1C                  		inc	e
(1) 2947/     EC6 : CD 5B 11            		call	fm_send_1
(1) 2948/     EC9 : 21 00 60            		ld	hl,6000h
(1) 2949/     ECC : 3E 01               		ld	a,1
(1) 2950/     ECE : 77                  		ld	(hl),a
(1) 2951/     ECF : 77                  		ld	(hl),a
(1) 2952/     ED0 : 77                  		ld	(hl),a
(1) 2953/     ED1 : 77                  		ld	(hl),a
(1) 2954/     ED2 : 77                  		ld	(hl),a
(1) 2955/     ED3 : 77                  		ld	(hl),a
(1) 2956/     ED4 : 77                  		ld	(hl),a
(1) 2957/     ED5 : 77                  		ld	(hl),a
(1) 2958/     ED6 : 77                  		ld	(hl),a
(1) 2959/     ED7 : FD 21 9D 14         		ld	iy,nikona_BuffList
(1) 2960/     EDB : 0E 01               		ld	c,1		; Start at this priority
(1) 2961/     EDD :                     .setup_list:
(1) 2962/     EDD : FD 7E 00            		ld	a,(iy)
(1) 2963/     EE0 : FE FF               		cp	-1
(1) 2964/     EE2 : 28 44               		jr	z,.end_setup
(1) 2965/     EE4 : FD 23               		inc	iy
(1) 2966/     EE6 : 6F                  		ld	l,a
(1) 2967/     EE7 : FD 66 00            		ld	h,(iy)
(1) 2968/     EEA : E5                  		push	hl
(1) 2969/     EEB : DD E1               		pop	ix
(1) 2970/     EED : DD 71 14            		ld	(ix+trk_Priority),c
(1) 2971/     EF0 : DD 36 01 FF         		ld	(ix+trk_seqId),-1	; Reset sequence ID
(1) 2972/     EF4 : FD 23               		inc	iy
(1) 2973/     EF6 : 11 26 00            		ld	de,trk_ChnList		; ** settings
(1) 2974/     EF9 : 19                  		add	hl,de
(1) 2975/     EFA :                     	; iy - src
(1) 2976/     EFA :                     	; hl - dst
(1) 2977/     EFA : 06 0A               		ld	b,5*2
(1) 2978/     EFC :                     .st_copy:
(1) 2979/     EFC : FD 7E 00            		ld	a,(iy)
(1) 2980/     EFF : 77                  		ld	(hl),a
(1) 2981/     F00 : FD 23               		inc	iy
(1) 2982/     F02 : 23                  		inc	hl
(1) 2983/     F03 : 10 F7               		djnz	.st_copy
(1) 2984/     F05 : 0C                  		inc	c
(1) 2985/     F06 : FD 7E 00            		ld	a,(iy)			; MAX blocks
(1) 2986/     F09 : DD 77 1D            		ld	(ix+trk_MaxBlks),a
(1) 2987/     F0C : FD 23               		inc	iy
(1) 2988/     F0E : FD 7E 00            		ld	a,(iy)			; MAX heads
(1) 2989/     F11 : DD 77 1E            		ld	(ix+trk_MaxHdrs),a
(1) 2990/     F14 : FD 23               		inc	iy
(1) 2991/     F16 : FD 7E 00            		ld	a,(iy)			; MAX intruments
(1) 2992/     F19 : DD 77 1F            		ld	(ix+trk_MaxIns),a
(1) 2993/     F1C : FD 23               		inc	iy
(1) 2994/     F1E : FD 7E 00            		ld	a,(iy)			; MAX channels
(1) 2995/     F21 : DD 77 1C            		ld	(ix+trk_MaxChnls),a
(1) 2996/     F24 : FD 23               		inc	iy
(1) 2997/     F26 : 18 B5               		jr	.setup_list
(1) 2998/     F28 :                     .end_setup:
(1) 2999/     F28 : 1E 00               		ld	e,0
(1) 3000/     F2A : C3 D6 04            		jp	init_RomTrcks
(1) 3001/     F2D :                     
(1) 3002/     F2D :                     ; --------------------------------------------------------
(1) 3003/     F2D :                     ; get_tick
(1) 3004/     F2D :                     ;
(1) 3005/     F2D :                     ; Checks if VBlank triggred a TICK
(1) 3006/     F2D :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3007/     F2D :                     ; --------------------------------------------------------
(1) 3008/     F2D :                     
(1) 3009/     F2D :                     get_tick:
(1) 3010/     F2D : F3                  		di				; Disable ints
(1) 3011/     F2E : F5                  		push	af
(1) 3012/     F2F : E5                  		push	hl
(1) 3013/     F30 : 21 AA 17            		ld	hl,tickFlag		; read last TICK flag
(1) 3014/     F33 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3015/     F34 : B7                  		or 	a
(1) 3016/     F35 : 28 13               		jr	z,.ctnotick
(1) 3017/     F37 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3018/     F39 : 23                  		inc	hl			; Move to tickCnt
(1) 3019/     F3A : 34                  		inc	(hl)			; and increment
(1) 3020/     F3B : CF                  		rst	8
(1) 3021/     F3C : D5                  		push	de
(1) 3022/     F3D : 2A 1C 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3023/     F40 : ED 5B 1E 00         		ld	de,(sbeatPtck)
(1) 3024/     F44 : CF                  		rst	8
(1) 3025/     F45 : 19                  		add	hl,de
(1) 3026/     F46 : 22 1C 00            		ld	(sbeatAcc),hl
(1) 3027/     F49 : D1                  		pop	de
(1) 3028/     F4A :                     .ctnotick:
(1) 3029/     F4A : E1                  		pop	hl
(1) 3030/     F4B : F1                  		pop	af
(1) 3031/     F4C : FB                  		ei				; Enable ints again
(1) 3032/     F4D : C9                  		ret
(1) 3033/     F4E :                     
(1) 3034/     F4E :                     ; --------------------------------------------------------
(1) 3035/     F4E :                     ; showRom
(1) 3036/     F4E :                     ; Get ROM bank position.
(1) 3037/     F4E :                     ;
(1) 3038/     F4E :                     ; Input:
(1) 3039/     F4E :                     ;  b - 68k address $xx0000
(1) 3040/     F4E :                     ; hl - 68k address $00xxxx
(1) 3041/     F4E :                     ;
(1) 3042/     F4E :                     ; Output:
(1) 3043/     F4E :                     ; hl - ROM position ready to use for reading
(1) 3044/     F4E :                     ; --------------------------------------------------------
(1) 3045/     F4E :                     
(1) 3046/     F4E :                     showRom:
(1) 3047/     F4E : CF                  		rst	8
(1) 3048/     F4F : D5                  		push	de
(1) 3049/     F50 : C5                  		push	bc
(1) 3050/     F51 : 11 00 60            		ld	de,6000h
(1) 3051/     F54 : 7C                  		ld	a,h
(1) 3052/     F55 : 07                  		rlca
(1) 3053/     F56 : CF                  		rst	8
(1) 3054/     F57 : 12                  		ld	(de),a
(1) 3055/     F58 : 78                  		ld	a,b
(1) 3056/     F59 : 12                  		ld	(de),a
(1) 3057/     F5A : 1F                  		rra
(1) 3058/     F5B : 12                  		ld	(de),a
(1) 3059/     F5C : 1F                  		rra
(1) 3060/     F5D : 12                  		ld	(de),a
(1) 3061/     F5E : 1F                  		rra
(1) 3062/     F5F : CF                  		rst	8
(1) 3063/     F60 : 12                  		ld	(de),a
(1) 3064/     F61 : 1F                  		rra
(1) 3065/     F62 : 12                  		ld	(de),a
(1) 3066/     F63 : 1F                  		rra
(1) 3067/     F64 : 12                  		ld	(de),a
(1) 3068/     F65 : 1F                  		rra
(1) 3069/     F66 : 12                  		ld	(de),a
(1) 3070/     F67 : 1F                  		rra
(1) 3071/     F68 : 12                  		ld	(de),a
(1) 3072/     F69 : C1                  		pop	bc
(1) 3073/     F6A : D1                  		pop	de
(1) 3074/     F6B : CB FC               		set	7,h
(1) 3075/     F6D : C9                  		ret
(1) 3076/     F6E :                     
(1) 3077/     F6E :                     ; --------------------------------------------------------
(1) 3078/     F6E :                     ; transferRom
(1) 3079/     F6E :                     ;
(1) 3080/     F6E :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3081/     F6E :                     ; to 68k that we want to access ROM
(1) 3082/     F6E :                     ;
(1) 3083/     F6E :                     ; Input:
(1) 3084/     F6E :                     ; a  - 68K Address $xx0000
(1) 3085/     F6E :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3086/     F6E :                     ; hl - 68K Address $00xxxx
(1) 3087/     F6E :                     ; de - Destination pointer
(1) 3088/     F6E :                     ;
(1) 3089/     F6E :                     ; Uses:
(1) 3090/     F6E :                     ; b
(1) 3091/     F6E :                     ;
(1) 3092/     F6E :                     ; Notes:
(1) 3093/     F6E :                     ; call RST 20h first if transfering anything other
(1) 3094/     F6E :                     ; than sample data, just to be safe.
(1) 3095/     F6E :                     ; --------------------------------------------------------
(1) 3096/     F6E :                     
(1) 3097/     F6E :                     transferRom:
(1) 3098/     F6E : CF                  		rst	8
(1) 3099/     F6F : DD E5               		push	ix
(1) 3100/     F71 : DD 21 81 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3101/     F75 : 22 36 00            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3102/     F78 : CB BC               		res	7,h
(1) 3103/     F7A : 06 00               		ld	b,0
(1) 3104/     F7C : 0B                  		dec	bc
(1) 3105/     F7D : 09                  		add	hl,bc
(1) 3106/     F7E : CB 7C               		bit	7,h
(1) 3107/     F80 : 20 0B               		jr	nz,.double
(1) 3108/     F82 : 2A 36 00            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3109/     F85 : 0C                  		inc	c
(1) 3110/     F86 : 47                  		ld	b,a
(1) 3111/     F87 : CD B1 0F            		call	.transfer
(1) 3112/     F8A : DD E1               		pop	ix
(1) 3113/     F8C : C9                  		ret
(1) 3114/     F8D :                     .double:
(1) 3115/     F8D : CF                  		rst	8
(1) 3116/     F8E : 47                  		ld	b,a		; double transfer
(1) 3117/     F8F : C5                  		push	bc
(1) 3118/     F90 : E5                  		push	hl
(1) 3119/     F91 : 79                  		ld	a,c
(1) 3120/     F92 : 95                  		sub	a,l
(1) 3121/     F93 : 4F                  		ld	c,a
(1) 3122/     F94 : 2A 36 00            		ld	hl,(x68ksrclsb)
(1) 3123/     F97 : CD B1 0F            		call	.transfer
(1) 3124/     F9A : E1                  		pop	hl
(1) 3125/     F9B : C1                  		pop	bc
(1) 3126/     F9C :                     ; 		rst	8
(1) 3127/     F9C : 4D                  		ld	c,l
(1) 3128/     F9D : 0C                  		inc	c
(1) 3129/     F9E : 3A 37 00            		ld	a,(x68ksrcmid)
(1) 3130/     FA1 : E6 80               		and	80h
(1) 3131/     FA3 : C6 80               		add	a,80h
(1) 3132/     FA5 : 67                  		ld	h,a
(1) 3133/     FA6 : 2E 00               		ld	l,0
(1) 3134/     FA8 : 30 01               		jr	nc,.x68knocarry
(1) 3135/     FAA : 04                  		inc	b
(1) 3136/     FAB :                     .x68knocarry:
(1) 3137/     FAB : CD B1 0F            		call	.transfer
(1) 3138/     FAE : DD E1               		pop	ix
(1) 3139/     FB0 : C9                  		ret
(1) 3140/     FB1 :                     
(1) 3141/     FB1 :                     ; ------------------------------------------------
(1) 3142/     FB1 :                     ; b  - Source ROM xx0000
(1) 3143/     FB1 :                     ;  c - Bytes to transfer (00h not allowed)
(1) 3144/     FB1 :                     ; hl - Source ROM 00xxxx (OR'd with 8000h)
(1) 3145/     FB1 :                     ; de - Destination address
(1) 3146/     FB1 :                     ; ix - Location of the ROM block flag(s)
(1) 3147/     FB1 :                     ;
(1) 3148/     FB1 :                     ; Uses:
(1) 3149/     FB1 :                     ; a
(1) 3150/     FB1 :                     ; ------------------------------------------------
(1) 3151/     FB1 :                     
(1) 3152/     FB1 :                     .transfer:
(1) 3153/     FB1 : CD 4E 0F            		call	showRom		; Pick ROM bank
(1) 3154/     FB4 :                     
(1) 3155/     FB4 :                     	; Transfer ROM data in packets
(1) 3156/     FB4 :                     	; while playing the cache'd sample
(1) 3157/     FB4 :                     	; *** CRITICAL PROCESS ***
(1) 3158/     FB4 :                     	;
(1) 3159/     FB4 :                     	; pseudo-reference
(1) 3160/     FB4 :                     	; for ldir:
(1) 3161/     FB4 :                     	; ld (de),(hl)	; load (hl) to (de), no a
(1) 3162/     FB4 :                     	; inc de	; next de
(1) 3163/     FB4 :                     	; inc hl	; next hl
(1) 3164/     FB4 :                     	; dec bc	; decrement bc
(1) 3165/     FB4 :                     	;
(1) 3166/     FB4 : 06 00               		ld	b,0
(1) 3167/     FB6 : 79                  		ld	a,c		; a - Size counter
(1) 3168/     FB7 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3169/     FB9 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3170/     FBB :                     .x68kloop:
(1) 3171/     FBB : CF                  		rst	8
(1) 3172/     FBC : 00                  		nop
(1) 3173/     FBD : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3174/     FBF : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3175/     FC3 : C4 DD 0F            		call	nz,.x68klpwt
(1) 3176/     FC6 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3177/     FC8 : CF                  		rst	8
(1) 3178/     FC9 : 00                  		nop
(1) 3179/     FCA : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3180/     FCC : D2 BB 0F            		jp	nc,.x68kloop
(1) 3181/     FCF :                     ; last block
(1) 3182/     FCF :                     .x68klast:
(1) 3183/     FCF : CF                  		rst	8
(1) 3184/     FD0 : C6 08               		add	a,MAX_TRFRPZ
(1) 3185/     FD2 : 4F                  		ld	c,a
(1) 3186/     FD3 : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3187/     FD7 : C4 DD 0F            		call	nz,.x68klpwt
(1) 3188/     FDA : ED B0               		ldir
(1) 3189/     FDC : C9                  		ret
(1) 3190/     FDD :                     
(1) 3191/     FDD :                     ; Wait here until Genesis unlocks ROM
(1) 3192/     FDD :                     .x68klpwt:
(1) 3193/     FDD : CF                  		rst	8
(1) 3194/     FDE : 00                  		nop
(1) 3195/     FDF : 00                  		nop
(1) 3196/     FE0 : 00                  		nop
(1) 3197/     FE1 : 00                  		nop
(1) 3198/     FE2 :                     .x68kpwtlp:
(1) 3199/     FE2 : CF                  		rst	8
(1) 3200/     FE3 : 00                  		nop
(1) 3201/     FE4 : 00                  		nop
(1) 3202/     FE5 : 00                  		nop
(1) 3203/     FE6 : 00                  		nop
(1) 3204/     FE7 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3205/     FEB : 20 F5               		jr	nz,.x68kpwtlp
(1) 3206/     FED : CF                  		rst	8
(1) 3207/     FEE : C9                  		ret
(1) 3208/     FEF :                     
(1) 3209/     FEF :                     ; ====================================================================
(1) 3210/     FEF :                     ; ----------------------------------------------------------------
(1) 3211/     FEF :                     ; Sound chip routines
(1) 3212/     FEF :                     ; ----------------------------------------------------------------
(1) 3213/     FEF :                     
(1) 3214/     FEF :                     ; --------------------------------------------------------
(1) 3215/     FEF :                     ; chip_env
(1) 3216/     FEF :                     ;
(1) 3217/     FEF :                     ; Process PSG and FM
(1) 3218/     FEF :                     ; --------------------------------------------------------
(1) 3219/     FEF :                     
(1) 3220/     FEF :                     chip_env:
(1) 3221/     FEF : FD 21 24 17         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3222/     FF3 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3223/     FF7 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3224/     FF9 : 06 04               		ld	b,4			; b - 4 channels
(1) 3225/     FFB :                     .vloop:
(1) 3226/     FFB : CF                  		rst	8
(1) 3227/     FFC : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3228/     FFF : FD 36 00 00         		ld	(iy+COM),0
(1) 3229/    1003 :                     
(1) 3230/    1003 :                     	; ----------------------------
(1) 3231/    1003 :                     	; bit 2 - stop sound
(1) 3232/    1003 : CB 53               		bit	2,e
(1) 3233/    1005 : 28 0C               		jr	z,.ckof
(1) 3234/    1007 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3235/    100B : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3236/    100F : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3237/    1013 :                     .ckof:
(1) 3238/    1013 :                     
(1) 3239/    1013 :                     	; ----------------------------
(1) 3240/    1013 :                     	; bit 1 - key off
(1) 3241/    1013 : CB 4B               		bit	1,e
(1) 3242/    1015 : 28 0F               		jr      z,.ckon
(1) 3243/    1017 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3244/    101A : B7                  		or	a
(1) 3245/    101B : 28 09               		jr	z,.ckon
(1) 3246/    101D : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3247/    1021 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3248/    1025 : CF                  		rst	8
(1) 3249/    1026 :                     .ckon:
(1) 3250/    1026 :                     
(1) 3251/    1026 :                     	; ----------------------------
(1) 3252/    1026 :                     	; bit 0 - key on
(1) 3253/    1026 : CB 43               		bit	0,e
(1) 3254/    1028 : 28 1A               		jr	z,.envproc
(1) 3255/    102A : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3256/    102E : 78                  		ld	a,b
(1) 3257/    102F : FE 04               		cp	4			; NOISE channel?
(1) 3258/    1031 : 20 08               		jr	nz,.nskip
(1) 3259/    1033 : CF                  		rst	8			; Set NOISE mode
(1) 3260/    1034 : 3A AC 17            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3261/    1037 : B1                  		or	c
(1) 3262/    1038 : DD 77 00            		ld	(ix),a
(1) 3263/    103B :                     .nskip:
(1) 3264/    103B : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3265/    103F : CF                  		rst	8
(1) 3266/    1040 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3267/    1044 :                     .nblock:
(1) 3268/    1044 :                     
(1) 3269/    1044 :                     	; ----------------------------
(1) 3270/    1044 :                     	; Process effects
(1) 3271/    1044 :                     	; ----------------------------
(1) 3272/    1044 :                     .envproc:
(1) 3273/    1044 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3274/    1047 : B7                  		or	a			; no modes
(1) 3275/    1048 : CA CE 10            		jp	z,.vedlp
(1) 3276/    104B : FE 01               		cp 	001b			; Attack mode
(1) 3277/    104D : 20 2C               		jr	nz,.chk2
(1) 3278/    104F : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3279/    1053 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3280/    1056 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3281/    1059 : B7                  		or	a
(1) 3282/    105A : 28 16               		jr	z,.atkend
(1) 3283/    105C : 57                  		ld	d,a			; c - attack rate
(1) 3284/    105D : 7B                  		ld	a,e			; a - attack level
(1) 3285/    105E : CF                  		rst	8
(1) 3286/    105F : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3287/    1062 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3288/    1063 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3289/    1065 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3290/    1067 : BB                  		cp	e			; attack rate == level?
(1) 3291/    1068 : 38 08               		jr	c,.atkend
(1) 3292/    106A : 28 06               		jr	z,.atkend
(1) 3293/    106C : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3294/    106F : CF                  		rst	8
(1) 3295/    1070 : 18 5C               		jr	.vedlp
(1) 3296/    1072 :                     .atkend:
(1) 3297/    1072 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3298/    1075 :                     .atkzero:
(1) 3299/    1075 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3300/    1079 : 18 53               		jr	.vedlp
(1) 3301/    107B :                     .chk2:
(1) 3302/    107B :                     
(1) 3303/    107B : FE 02               		cp	010b			; Decay mode
(1) 3304/    107D : 20 31               		jr	nz,.chk4
(1) 3305/    107F :                     .dectmr:
(1) 3306/    107F : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3307/    1083 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3308/    1086 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3309/    1089 : BB                  		cp	e
(1) 3310/    108A : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3311/    108C : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3312/    108E : CF                  		rst	8
(1) 3313/    108F : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3314/    1092 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3315/    1094 : BB                  		cp	e			; compare level
(1) 3316/    1095 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3317/    1097 : 18 08               		jr	.dksav
(1) 3318/    1099 :                     .dkadd:
(1) 3319/    1099 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3320/    109C : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3321/    109E : BB                  		cp	e			; compare level
(1) 3322/    109F : 30 05               		jr	nc,.dkyend
(1) 3323/    10A1 :                     .dksav:
(1) 3324/    10A1 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3325/    10A4 : 18 28               		jr	.vedlp
(1) 3326/    10A6 :                     .dkyend:
(1) 3327/    10A6 : CF                  		rst	8
(1) 3328/    10A7 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3329/    10AA : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3330/    10AE : 18 1E               		jr	.vedlp
(1) 3331/    10B0 :                     .chk4:
(1) 3332/    10B0 : FE 04               		cp	100b			; Sustain phase
(1) 3333/    10B2 : 20 1A               		jr	nz,.vedlp
(1) 3334/    10B4 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3335/    10B8 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3336/    10BB : CF                  		rst	8
(1) 3337/    10BC : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3338/    10BF : 38 05               		jr	c,.killenv		; release done
(1) 3339/    10C1 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3340/    10C4 : 18 08               		jr	.vedlp
(1) 3341/    10C6 :                     .killenv:
(1) 3342/    10C6 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3343/    10CA : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3344/    10CE :                     .vedlp:
(1) 3345/    10CE :                     
(1) 3346/    10CE :                     	; ----------------------------
(1) 3347/    10CE :                     	; PSG UPDATE
(1) 3348/    10CE :                     	; ----------------------------
(1) 3349/    10CE : FD 7E 28            		ld	a,(iy+FLG)
(1) 3350/    10D1 : B7                  		or	a
(1) 3351/    10D2 : 28 72               		jr	z,.noupd
(1) 3352/    10D4 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3353/    10D8 : 59                  		ld	e,c
(1) 3354/    10D9 : 3A AC 17            		ld	a,(psgHatMode)
(1) 3355/    10DC : 57                  		ld	d,a
(1) 3356/    10DD : E6 03               		and	011b
(1) 3357/    10DF : FE 03               		cp	011b
(1) 3358/    10E1 : 20 1D               		jr	nz,.normal
(1) 3359/    10E3 : CF                  		rst	8
(1) 3360/    10E4 : 78                  		ld	a,b		; Channel 4?
(1) 3361/    10E5 : FE 03               		cp	3
(1) 3362/    10E7 : 28 13               		jr	z,.silnc_3
(1) 3363/    10E9 : FE 04               		cp	4
(1) 3364/    10EB : 20 18               		jr	nz,.do_nfreq
(1) 3365/    10ED : 3A AC 17            		ld	a,(psgHatMode)
(1) 3366/    10F0 : 57                  		ld	d,a
(1) 3367/    10F1 : E6 03               		and	011b
(1) 3368/    10F3 : CF                  		rst	8
(1) 3369/    10F4 : FE 03               		cp	011b
(1) 3370/    10F6 : 20 30               		jr	nz,.vonly
(1) 3371/    10F8 : 1E C0               		ld	e,0C0h
(1) 3372/    10FA : 18 09               		jr	.do_nfreq
(1) 3373/    10FC :                     .silnc_3:
(1) 3374/    10FC : 3E FF               		ld	a,-1
(1) 3375/    10FE : 18 32               		jr	.vlmuch
(1) 3376/    1100 :                     .normal:
(1) 3377/    1100 : 78                  		ld	a,b
(1) 3378/    1101 : FE 04               		cp	4
(1) 3379/    1103 : 28 23               		jr	z,.vonly
(1) 3380/    1105 :                     .do_nfreq:
(1) 3381/    1105 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3382/    1108 : FD 66 20            		ld	h,(iy+DTH)
(1) 3383/    110B :                     
(1) 3384/    110B :                     	; freq effects go here
(1) 3385/    110B :                     	; (save e FIRST.)
(1) 3386/    110B :                     	;	push	de
(1) 3387/    110B :                     	;	pop	de
(1) 3388/    110B : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3389/    110C : E6 0F               		and	00001111b
(1) 3390/    110E : B3                  		or	e		; OR with channel set in e
(1) 3391/    110F : CF                  		rst	8
(1) 3392/    1110 : DD 77 00            		ld	(ix),a		; write it
(1) 3393/    1113 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3394/    1114 : 0F                  		rrca
(1) 3395/    1115 : 0F                  		rrca
(1) 3396/    1116 : 0F                  		rrca
(1) 3397/    1117 : 0F                  		rrca
(1) 3398/    1118 : E6 0F               		and	00001111b
(1) 3399/    111A : 5F                  		ld	e,a
(1) 3400/    111B : 7C                  		ld	a,h		; Grab MSB bits
(1) 3401/    111C : CF                  		rst	8
(1) 3402/    111D : 07                  		rlca
(1) 3403/    111E : 07                  		rlca
(1) 3404/    111F : 07                  		rlca
(1) 3405/    1120 : 07                  		rlca
(1) 3406/    1121 : E6 30               		and	00110000b
(1) 3407/    1123 : B3                  		or	e
(1) 3408/    1124 : DD 77 00            		ld	(ix),a
(1) 3409/    1127 : CF                  		rst	8
(1) 3410/    1128 :                     .vonly:
(1) 3411/    1128 : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3412/    112B : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3413/    112E : 30 02               		jr	nc,.vlmuch
(1) 3414/    1130 : 3E FF               		ld	a,-1
(1) 3415/    1132 :                     .vlmuch:
(1) 3416/    1132 : CB 3F               		srl	a			; (Level >> 4)
(1) 3417/    1134 : CB 3F               		srl	a
(1) 3418/    1136 : CB 3F               		srl	a
(1) 3419/    1138 : CF                  		rst	8
(1) 3420/    1139 : CB 3F               		srl	a
(1) 3421/    113B : E6 0F               		and	00001111b		; Filter volume value
(1) 3422/    113D : B1                  		or	c			; and OR with current channel
(1) 3423/    113E : F6 90               		or	90h			; Set volume-set mode
(1) 3425/    1140 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3427/    1143 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3428/    1146 :                     .noupd:
(1) 3429/    1146 :                     	; ----------------------------
(1) 3430/    1146 : FD 2B               		dec	iy			; next COM to check
(1) 3431/    1148 : 79                  		ld	a,c
(1) 3432/    1149 : CF                  		rst	8
(1) 3433/    114A : D6 20               		sub	a,20h			; next PSG backwards
(1) 3434/    114C : 4F                  		ld	c,a
(1) 3435/    114D : 05                  		dec	b
(1) 3436/    114E : C2 FB 0F            		jp	nz,.vloop
(1) 3437/    1151 : C9                  		ret
(1) 3438/    1152 :                     
(1) 3439/    1152 :                     ; ---------------------------------------------
(1) 3440/    1152 :                     ; FM register writes
(1) 3441/    1152 :                     ;
(1) 3442/    1152 :                     ; Input:
(1) 3443/    1152 :                     ; d - ctrl
(1) 3444/    1152 :                     ; e - data
(1) 3445/    1152 :                     ; ---------------------------------------------
(1) 3446/    1152 :                     
(1) 3447/    1152 :                     ; c - KeyID
(1) 3448/    1152 :                     fm_autoreg:
(1) 3449/    1152 : CB 51               		bit	2,c
(1) 3450/    1154 : CC 5B 11            		call	z,fm_send_1
(1) 3451/    1157 : C4 66 11            		call	nz,fm_send_2
(1) 3452/    115A : C9                  		ret
(1) 3453/    115B :                     ; Channels 1-3 and global registers
(1) 3454/    115B :                     fm_send_1:
(1) 3455/    115B : 7A                  		ld	a,d
(1) 3456/    115C : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3457/    115F : 00                  		nop
(1) 3458/    1160 : 7B                  		ld	a,e
(1) 3459/    1161 : 32 01 40            		ld	(Zym_data_1),a
(1) 3460/    1164 : 00                  		nop
(1) 3461/    1165 : C9                  		ret
(1) 3462/    1166 :                     ; Channels 4-6
(1) 3463/    1166 :                     fm_send_2:
(1) 3464/    1166 : 7A                  		ld	a,d
(1) 3465/    1167 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3466/    116A : 00                  		nop
(1) 3467/    116B : 7B                  		ld	a,e
(1) 3468/    116C : 32 03 40            		ld	(Zym_data_2),a
(1) 3469/    116F : 00                  		nop
(1) 3470/    1170 : C9                  		ret
(1) 3471/    1171 :                     
(1) 3472/    1171 :                     ; --------------------------------------------------------
(1) 3473/    1171 :                     ; brute-force WAVE ON/OFF playback
(1) 3474/    1171 :                     ; --------------------------------------------------------
(1) 3475/    1171 :                     
(1) 3476/    1171 :                     dac_on:
(1) 3477/    1171 : 3E 2B               		ld	a,2Bh
(1) 3478/    1173 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3479/    1176 : 3E 80               		ld	a,80h
(1) 3480/    1178 : 32 01 40            		ld	(Zym_data_1),a
(1) 3481/    117B : 3E D9               		ld 	a,zopcExx
(1) 3482/    117D : 32 08 00            		ld	(dac_me),a
(1) 3483/    1180 : 3E F5               		ld 	a,zopcPushAf
(1) 3484/    1182 : 32 20 00            		ld	(dac_fill),a
(1) 3485/    1185 : C9                  		ret
(1) 3486/    1186 :                     dac_off:
(1) 3487/    1186 : 3E 2B               		ld	a,2Bh
(1) 3488/    1188 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3489/    118B : 3E 00               		ld	a,00h
(1) 3490/    118D : 32 01 40            		ld	(Zym_data_1),a
(1) 3491/    1190 : 3E C9               		ld 	a,zopcRet
(1) 3492/    1192 : 32 08 00            		ld	(dac_me),a
(1) 3493/    1195 : 3E C9               		ld 	a,zopcRet
(1) 3494/    1197 : 32 20 00            		ld	(dac_fill),a
(1) 3495/    119A : C9                  		ret
(1) 3496/    119B :                     
(1) 3497/    119B :                     ; --------------------------------------------------------
(1) 3498/    119B :                     ; dac_play
(1) 3499/    119B :                     ;
(1) 3500/    119B :                     ; Plays a new sample
(1) 3501/    119B :                     ;
(1) 3502/    119B :                     ; NOTE:
(1) 3503/    119B :                     ; Set wave_Flags and wave_Pitch externally
(1) 3504/    119B :                     ; getting here.
(1) 3505/    119B :                     ; --------------------------------------------------------
(1) 3506/    119B :                     
(1) 3507/    119B :                     dac_play:
(1) 3508/    119B : F3                  		di
(1) 3509/    119C : CD 86 11            		call	dac_off
(1) 3510/    119F : D9                  		exx				; flip exx regs
(1) 3511/    11A0 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 3512/    11A3 : ED 5B A6 17         		ld	de,(wave_Pitch)		; de - Pitch
(1) 3513/    11A7 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 3514/    11AA : D9                  		exx				; move them back
(1) 3515/    11AB : 2A 9D 17            		ld	hl,(wave_Start)
(1) 3516/    11AE : 3A 9F 17            		ld 	a,(wave_Start+2)
(1) 3517/    11B1 : 22 30 00            		ld	(dDacPntr),hl
(1) 3518/    11B4 : 32 32 00            		ld	(dDacPntr+2),a
(1) 3519/    11B7 : 2A A0 17            		ld	hl,(wave_Len)
(1) 3520/    11BA : 3A A2 17            		ld 	a,(wave_Len+2)
(1) 3521/    11BD : 22 33 00            		ld	(dDacCntr),hl
(1) 3522/    11C0 : 32 35 00            		ld	(dDacCntr+2),a
(1) 3523/    11C3 : AF                  		xor	a
(1) 3524/    11C4 : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3525/    11C7 : CD CF 11            		call	dac_firstfill
(1) 3526/    11CA : CD 71 11            		call	dac_on
(1) 3527/    11CD : FB                  		ei
(1) 3528/    11CE : C9                  		ret
(1) 3529/    11CF :                     
(1) 3530/    11CF :                     ; --------------------------------------------------------
(1) 3531/    11CF :                     
(1) 3532/    11CF :                     dac_firstfill:
(1) 3533/    11CF :                     ; 		push	af
(1) 3534/    11CF :                     dac_refill:
(1) 3535/    11CF : CF                  		rst	8
(1) 3536/    11D0 : C5                  		push	bc
(1) 3537/    11D1 : D5                  		push	de
(1) 3538/    11D2 : E5                  		push	hl
(1) 3539/    11D3 : 3A A8 17            		ld	a,(wave_Flags)	; Already finished?
(1) 3540/    11D6 : FE 07               		cp	111b
(1) 3541/    11D8 : D2 8E 12            		jp	nc,.dacfill_end
(1) 3542/    11DB : 3A 35 00            		ld	a,(dDacCntr+2)	; Last bytes
(1) 3543/    11DE : 2A 33 00            		ld	hl,(dDacCntr)
(1) 3544/    11E1 : 01 80 00            		ld	bc,80h
(1) 3545/    11E4 : 37                  		scf
(1) 3546/    11E5 : 3F                  		ccf
(1) 3547/    11E6 : ED 42               		sbc	hl,bc
(1) 3548/    11E8 : DE 00               		sbc	a,0
(1) 3549/    11EA : 32 35 00            		ld	(dDacCntr+2),a
(1) 3550/    11ED : 22 33 00            		ld	(dDacCntr),hl
(1) 3551/    11F0 : 16 1D               		ld	d,dWaveBuff>>8
(1) 3552/    11F2 : B7                  		or	a
(1) 3553/    11F3 : FA 1D 12            		jp	m,.dac_over
(1) 3554/    11F6 : 3A 2F 00            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 3555/    11F9 : 5F                  		ld	e,a
(1) 3556/    11FA : C6 80               		add 	a,80h
(1) 3557/    11FC : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3558/    11FF : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3559/    1202 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3560/    1205 : CD 6E 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3561/    1208 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3562/    120B : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3563/    120E : 01 80 00            		ld	bc,80h
(1) 3564/    1211 : 09                  		add	hl,bc
(1) 3565/    1212 : CE 00               		adc	a,0
(1) 3566/    1214 : 22 30 00            		ld	(dDacPntr),hl
(1) 3567/    1217 : 32 32 00            		ld	(dDacPntr+2),a
(1) 3568/    121A : C3 91 12            		jp	.dacfill_ret
(1) 3569/    121D :                     
(1) 3570/    121D :                     ; NOTE:
(1) 3571/    121D :                     ; This doesn't finish at the exact
(1) 3572/    121D :                     ; the END point.
(1) 3573/    121D :                     .dac_over:
(1) 3574/    121D : 16 1D               		ld	d,dWaveBuff>>8
(1) 3575/    121F : 3A A8 17            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 3576/    1222 : E6 01               		and	001b
(1) 3577/    1224 : C2 47 12            		jp	nz,.dacfill_loop
(1) 3578/    1227 : 7D                  		ld	a,l
(1) 3579/    1228 : C6 80               		add	a,80h
(1) 3580/    122A : 4F                  		ld	c,a
(1) 3581/    122B : 06 00               		ld	b,0
(1) 3582/    122D : C5                  		push	bc
(1) 3583/    122E : 3A 2F 00            		ld	a,(dDacFifoMid)
(1) 3584/    1231 : 5F                  		ld	e,a
(1) 3585/    1232 : C6 80               		add	a,80h
(1) 3586/    1234 : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3587/    1237 : C1                  		pop	bc
(1) 3588/    1238 : 79                  		ld	a,c
(1) 3589/    1239 : B0                  		or	b
(1) 3590/    123A : 28 52               		jr	z,.dacfill_end
(1) 3591/    123C : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3592/    123F : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3593/    1242 : CD 6E 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3594/    1245 : 18 47               		jr	.dacfill_end
(1) 3595/    1247 :                     .dacfill_loop:
(1) 3596/    1247 :                     	; loop sample
(1) 3597/    1247 : C5                  		push	bc
(1) 3598/    1248 : D5                  		push	de
(1) 3599/    1249 : 3A A5 17            		ld	a,(wave_Loop+2)
(1) 3600/    124C : 4F                  		ld	c,a
(1) 3601/    124D : ED 5B A3 17         		ld	de,(wave_Loop)
(1) 3602/    1251 : 2A 9D 17            		ld	hl,(wave_Start)
(1) 3603/    1254 : 3A 9F 17            		ld 	a,(wave_Start+2)
(1) 3604/    1257 : 81                  		add	a,c
(1) 3605/    1258 : 19                  		add	hl,de
(1) 3606/    1259 : CE 00               		adc	a,0
(1) 3607/    125B : 22 30 00            		ld	(dDacPntr),hl
(1) 3608/    125E : 32 32 00            		ld	(dDacPntr+2),a
(1) 3609/    1261 : 2A A0 17            		ld	hl,(wave_Len)
(1) 3610/    1264 : 3A A2 17            		ld 	a,(wave_Len+2)
(1) 3611/    1267 : 91                  		sub	a,c
(1) 3612/    1268 : 37                  		scf
(1) 3613/    1269 : 3F                  		ccf
(1) 3614/    126A : ED 52               		sbc	hl,de
(1) 3615/    126C : DE 00               		sbc	a,0
(1) 3616/    126E : 22 33 00            		ld	(dDacCntr),hl
(1) 3617/    1271 : 32 35 00            		ld	(dDacCntr+2),a
(1) 3618/    1274 : D1                  		pop	de
(1) 3619/    1275 : C1                  		pop	bc
(1) 3620/    1276 : 78                  		ld	a,b
(1) 3621/    1277 : B1                  		or	c
(1) 3622/    1278 : 28 17               		jr	z,.dacfill_ret
(1) 3623/    127A : 3A 2F 00            		ld	a,(dDacFifoMid)
(1) 3624/    127D : 5F                  		ld	e,a
(1) 3625/    127E : C6 80               		add	a,80h
(1) 3626/    1280 : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3627/    1283 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3628/    1286 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3629/    1289 : CD 6E 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3630/    128C : 18 03               		jr	.dacfill_ret
(1) 3631/    128E :                     
(1) 3632/    128E :                     .dacfill_end:
(1) 3633/    128E : CD 86 11            		call	dac_off		; DAC finished
(1) 3634/    1291 :                     
(1) 3635/    1291 :                     .dacfill_ret:
(1) 3636/    1291 : E1                  		pop	hl
(1) 3637/    1292 : D1                  		pop	de
(1) 3638/    1293 : C1                  		pop	bc
(1) 3639/    1294 :                     ; 		pop	af
(1) 3640/    1294 : C9                  		ret
(1) 3641/    1295 :                     
(1) 3642/    1295 :                     ; ====================================================================
(1) 3643/    1295 :                     ; ----------------------------------------------------------------
(1) 3644/    1295 :                     ; Tables
(1) 3645/    1295 :                     ; ----------------------------------------------------------------
(1) 3646/    1295 :                     
(1) 3647/    1295 : 84 02               fmFreq_List:	dw 644
(1) 3648/    1297 : A9 02               		dw 681
(1) 3649/    1299 : D2 02               		dw 722
(1) 3650/    129B : FD 02               		dw 765
(1) 3651/    129D : 2A 03               		dw 810
(1) 3652/    129F : 5A 03               		dw 858
(1) 3653/    12A1 : 8E 03               		dw 910
(1) 3654/    12A3 : C4 03               		dw 964
(1) 3655/    12A5 : FD 03               		dw 1021
(1) 3656/    12A7 : 39 04               		dw 1081
(1) 3657/    12A9 : 7A 04               		dw 1146
(1) 3658/    12AB : BE 04               		dw 1214
(1) 3659/    12AD :                     psgFreq_List:
(1) 3660/    12AD : FF FF               		dw -1		; C-0 00
(1) 3661/    12AF : FF FF               		dw -1
(1) 3662/    12B1 : FF FF               		dw -1
(1) 3663/    12B3 : FF FF               		dw -1
(1) 3664/    12B5 : FF FF               		dw -1
(1) 3665/    12B7 : FF FF               		dw -1
(1) 3666/    12B9 : FF FF               		dw -1
(1) 3667/    12BB : FF FF               		dw -1
(1) 3668/    12BD : FF FF               		dw -1
(1) 3669/    12BF : FF FF               		dw -1
(1) 3670/    12C1 : FF FF               		dw -1
(1) 3671/    12C3 : FF FF               		dw -1
(1) 3672/    12C5 : FF FF               		dw -1		; C-1 0C
(1) 3673/    12C7 : FF FF               		dw -1
(1) 3674/    12C9 : FF FF               		dw -1
(1) 3675/    12CB : FF FF               		dw -1
(1) 3676/    12CD : FF FF               		dw -1
(1) 3677/    12CF : FF FF               		dw -1
(1) 3678/    12D1 : FF FF               		dw -1
(1) 3679/    12D3 : FF FF               		dw -1
(1) 3680/    12D5 : FF FF               		dw -1
(1) 3681/    12D7 : FF FF               		dw -1
(1) 3682/    12D9 : FF FF               		dw -1
(1) 3683/    12DB : FF FF               		dw -1
(1) 3684/    12DD : FF FF               		dw -1		; C-2 18
(1) 3685/    12DF : FF FF               		dw -1
(1) 3686/    12E1 : FF FF               		dw -1
(1) 3687/    12E3 : FF FF               		dw -1
(1) 3688/    12E5 : FF FF               		dw -1
(1) 3689/    12E7 : FF FF               		dw -1
(1) 3690/    12E9 : FF FF               		dw -1
(1) 3691/    12EB : FF FF               		dw -1
(1) 3692/    12ED : FF FF               		dw -1
(1) 3693/    12EF : FF FF               		dw -1
(1) 3694/    12F1 : FF FF               		dw -1
(1) 3695/    12F3 : FF FF               		dw -1
(1) 3696/    12F5 : FF FF               		dw -1		; C-3 24
(1) 3697/    12F7 : FF FF               		dw -1
(1) 3698/    12F9 : FF FF               		dw -1
(1) 3699/    12FB : FF FF               		dw -1
(1) 3700/    12FD : FF FF               		dw -1
(1) 3701/    12FF : FF FF               		dw -1
(1) 3702/    1301 : FF FF               		dw -1
(1) 3703/    1303 : FF FF               		dw -1
(1) 3704/    1305 : FF FF               		dw -1
(1) 3705/    1307 : F8 03               		dw 3F8h
(1) 3706/    1309 : BF 03               		dw 3BFh
(1) 3707/    130B : 89 03               		dw 389h
(1) 3708/    130D : 56 03               		dw 356h		; C-4 30
(1) 3709/    130F : 26 03               		dw 326h
(1) 3710/    1311 : F9 02               		dw 2F9h
(1) 3711/    1313 : CE 02               		dw 2CEh
(1) 3712/    1315 : A5 02               		dw 2A5h
(1) 3713/    1317 : 80 02               		dw 280h
(1) 3714/    1319 : 5C 02               		dw 25Ch
(1) 3715/    131B : 3A 02               		dw 23Ah
(1) 3716/    131D : 1A 02               		dw 21Ah
(1) 3717/    131F : FB 01               		dw 1FBh
(1) 3718/    1321 : DF 01               		dw 1DFh
(1) 3719/    1323 : C4 01               		dw 1C4h
(1) 3720/    1325 : AB 01               		dw 1ABh		; C-5 3C
(1) 3721/    1327 : 93 01               		dw 193h
(1) 3722/    1329 : 7D 01               		dw 17Dh
(1) 3723/    132B : 67 01               		dw 167h
(1) 3724/    132D : 53 01               		dw 153h
(1) 3725/    132F : 40 01               		dw 140h
(1) 3726/    1331 : 2E 01               		dw 12Eh
(1) 3727/    1333 : 1D 01               		dw 11Dh
(1) 3728/    1335 : 0D 01               		dw 10Dh
(1) 3729/    1337 : FE 00               		dw 0FEh
(1) 3730/    1339 : EF 00               		dw 0EFh
(1) 3731/    133B : E2 00               		dw 0E2h
(1) 3732/    133D : D6 00               		dw 0D6h		; C-6 48
(1) 3733/    133F : C9 00               		dw 0C9h
(1) 3734/    1341 : BE 00               		dw 0BEh
(1) 3735/    1343 : B4 00               		dw 0B4h
(1) 3736/    1345 : A9 00               		dw 0A9h
(1) 3737/    1347 : A0 00               		dw 0A0h
(1) 3738/    1349 : 97 00               		dw 097h
(1) 3739/    134B : 8F 00               		dw 08Fh
(1) 3740/    134D : 87 00               		dw 087h
(1) 3741/    134F : 7F 00               		dw 07Fh
(1) 3742/    1351 : 78 00               		dw 078h
(1) 3743/    1353 : 71 00               		dw 071h
(1) 3744/    1355 : 6B 00               		dw 06Bh		; C-7 54
(1) 3745/    1357 : 65 00               		dw 065h
(1) 3746/    1359 : 5F 00               		dw 05Fh
(1) 3747/    135B : 5A 00               		dw 05Ah
(1) 3748/    135D : 55 00               		dw 055h
(1) 3749/    135F : 50 00               		dw 050h
(1) 3750/    1361 : 4B 00               		dw 04Bh
(1) 3751/    1363 : 47 00               		dw 047h
(1) 3752/    1365 : 43 00               		dw 043h
(1) 3753/    1367 : 40 00               		dw 040h
(1) 3754/    1369 : 3C 00               		dw 03Ch
(1) 3755/    136B : 39 00               		dw 039h
(1) 3756/    136D : 36 00               		dw 036h		; C-8 60
(1) 3757/    136F : 33 00               		dw 033h
(1) 3758/    1371 : 30 00               		dw 030h
(1) 3759/    1373 : 2D 00               		dw 02Dh
(1) 3760/    1375 : 2B 00               		dw 02Bh
(1) 3761/    1377 : 28 00               		dw 028h
(1) 3762/    1379 : 26 00               		dw 026h
(1) 3763/    137B : 24 00               		dw 024h
(1) 3764/    137D : 22 00               		dw 022h
(1) 3765/    137F : 20 00               		dw 020h
(1) 3766/    1381 : 1F 00               		dw 01Fh
(1) 3767/    1383 : 1D 00               		dw 01Dh
(1) 3768/    1385 : 1B 00               		dw 01Bh		; C-9 6C
(1) 3769/    1387 : 1A 00               		dw 01Ah
(1) 3770/    1389 : 18 00               		dw 018h
(1) 3771/    138B : 17 00               		dw 017h
(1) 3772/    138D : 16 00               		dw 016h
(1) 3773/    138F : 15 00               		dw 015h
(1) 3774/    1391 : 13 00               		dw 013h
(1) 3775/    1393 : 12 00               		dw 012h
(1) 3776/    1395 : 11 00               		dw 011h
(1) 3777/    1397 : 10 00                		dw 010h
(1) 3778/    1399 : 09 00                		dw 009h
(1) 3779/    139B : 08 00                		dw 008h
(1) 3780/    139D : 06 00               		dw 006h
(1) 3781/    139F :                     
(1) 3782/    139F : 00 01               wavFreq_List:	dw 100h		; C-0
(1) 3783/    13A1 : 00 01               		dw 100h
(1) 3784/    13A3 : 00 01               		dw 100h
(1) 3785/    13A5 : 00 01               		dw 100h
(1) 3786/    13A7 : 00 01               		dw 100h
(1) 3787/    13A9 : 00 01               		dw 100h
(1) 3788/    13AB : 00 01               		dw 100h
(1) 3789/    13AD : 00 01               		dw 100h
(1) 3790/    13AF : 00 01               		dw 100h
(1) 3791/    13B1 : 00 01               		dw 100h
(1) 3792/    13B3 : 00 01               		dw 100h
(1) 3793/    13B5 : 00 01               		dw 100h
(1) 3794/    13B7 : 00 01               		dw 100h		; C-1
(1) 3795/    13B9 : 00 01               		dw 100h
(1) 3796/    13BB : 00 01               		dw 100h
(1) 3797/    13BD : 00 01               		dw 100h
(1) 3798/    13BF : 00 01               		dw 100h
(1) 3799/    13C1 : 00 01               		dw 100h
(1) 3800/    13C3 : 00 01               		dw 100h
(1) 3801/    13C5 : 00 01               		dw 100h
(1) 3802/    13C7 : 00 01               		dw 100h
(1) 3803/    13C9 : 00 01               		dw 100h
(1) 3804/    13CB : 00 01               		dw 100h
(1) 3805/    13CD : 00 01               		dw 100h
(1) 3806/    13CF : 00 01               		dw 100h		; C-2
(1) 3807/    13D1 : 00 01               		dw 100h
(1) 3808/    13D3 : 00 01               		dw 100h
(1) 3809/    13D5 : 00 01               		dw 100h
(1) 3810/    13D7 : 00 01               		dw 100h
(1) 3811/    13D9 : 00 01               		dw 100h
(1) 3812/    13DB : 00 01               		dw 100h
(1) 3813/    13DD : 00 01               		dw 100h
(1) 3814/    13DF : 00 01               		dw 100h
(1) 3815/    13E1 : 00 01               		dw 100h
(1) 3816/    13E3 : 36 00               		dw 036h
(1) 3817/    13E5 : 3B 00               		dw 03Bh
(1) 3818/    13E7 : 3E 00               		dw 03Eh		; C-3
(1) 3819/    13E9 : 43 00               		dw 043h		; C#3
(1) 3820/    13EB : 46 00               		dw 046h		; D-3
(1) 3821/    13ED : 49 00               		dw 049h		; D#3
(1) 3822/    13EF : 4E 00               		dw 04Eh		; E-3
(1) 3823/    13F1 : 54 00               		dw 054h		; F-3
(1) 3824/    13F3 : 58 00               		dw 058h		; F#3
(1) 3825/    13F5 : 5E 00               		dw 05Eh		; G-3 -17
(1) 3826/    13F7 : 63 00               		dw 063h		; G#3
(1) 3827/    13F9 : 68 00               		dw 068h		; A-3
(1) 3828/    13FB : 70 00               		dw 070h		; A#3
(1) 3829/    13FD : 75 00               		dw 075h		; B-3
(1) 3830/    13FF : 85 00               		dw 085h		; C-4 -12
(1) 3831/    1401 : 87 00               		dw 087h		; C#4
(1) 3832/    1403 : 8C 00               		dw 08Ch		; D-4
(1) 3833/    1405 : 9A 00               		dw 09Ah		; D#4
(1) 3834/    1407 : 9E 00               		dw 09Eh		; E-4
(1) 3835/    1409 : AD 00               		dw 0ADh		; F-4
(1) 3836/    140B : B2 00               		dw 0B2h		; F#4
(1) 3837/    140D : C0 00               		dw 0C0h		; G-4
(1) 3838/    140F : CC 00               		dw 0CCh		; G#4
(1) 3839/    1411 : D7 00               		dw 0D7h		; A-4
(1) 3840/    1413 : E6 00               		dw 0E6h		; A#4
(1) 3841/    1415 : F0 00               		dw 0F0h		; B-4
(1) 3842/    1417 : 00 01               		dw 100h		; C-5 ****
(1) 3843/    1419 : 10 01               		dw 110h		; C#5
(1) 3844/    141B : 20 01               		dw 120h		; D-5
(1) 3845/    141D : 2E 01               		dw 12Eh		; D#5
(1) 3846/    141F : 42 01               		dw 142h		; E-5
(1) 3847/    1421 : 5A 01               		dw 15Ah		; F-5
(1) 3848/    1423 : 6A 01               		dw 16Ah		; F#5 +6
(1) 3849/    1425 : 7F 01               		dw 17Fh		; G-5
(1) 3850/    1427 : 91 01               		dw 191h		; G#5
(1) 3851/    1429 : AC 01               		dw 1ACh		; A-5
(1) 3852/    142B : C2 01               		dw 1C2h		; A#5
(1) 3853/    142D : E0 01               		dw 1E0h		; B-5
(1) 3854/    142F : F8 01               		dw 1F8h		; C-6 +12
(1) 3855/    1431 : 10 02               		dw 210h		; C#6
(1) 3856/    1433 : 40 02               		dw 240h		; D-6
(1) 3857/    1435 : 60 02               		dw 260h		; D#6
(1) 3858/    1437 : 80 02               		dw 280h		; E-6
(1) 3859/    1439 : A0 02               		dw 2A0h		; F-6
(1) 3860/    143B : D0 02               		dw 2D0h		; F#6
(1) 3861/    143D : F8 02               		dw 2F8h		; G-6
(1) 3862/    143F : 20 03               		dw 320h		; G#6
(1) 3863/    1441 : 50 03               		dw 350h		; A-6
(1) 3864/    1443 : 80 03               		dw 380h		; A#6
(1) 3865/    1445 : C0 03               		dw 3C0h		; B-6
(1) 3866/    1447 : 00 04               		dw 400h		; C-7
(1) 3867/    1449 : 00 01               		dw 100h
(1) 3868/    144B : 00 01               		dw 100h
(1) 3869/    144D : 00 01               		dw 100h
(1) 3870/    144F : 00 01               		dw 100h
(1) 3871/    1451 : 00 01               		dw 100h
(1) 3872/    1453 : 00 01               		dw 100h
(1) 3873/    1455 : 00 01               		dw 100h
(1) 3874/    1457 : 00 01               		dw 100h
(1) 3875/    1459 : 00 01               		dw 100h
(1) 3876/    145B : 00 01               		dw 100h
(1) 3877/    145D : 00 01               		dw 100h
(1) 3878/    145F : 00 01               		dw 100h		; C-8
(1) 3879/    1461 : 00 01               		dw 100h
(1) 3880/    1463 : 00 01               		dw 100h
(1) 3881/    1465 : 00 01               		dw 100h
(1) 3882/    1467 : 00 01               		dw 100h
(1) 3883/    1469 : 00 01               		dw 100h
(1) 3884/    146B : 00 01               		dw 100h
(1) 3885/    146D : 00 01               		dw 100h
(1) 3886/    146F : 00 01               		dw 100h
(1) 3887/    1471 : 00 01               		dw 100h
(1) 3888/    1473 : 00 01               		dw 100h
(1) 3889/    1475 : 00 01               		dw 100h
(1) 3890/    1477 : 00 01               		dw 100h		; C-9
(1) 3891/    1479 : 00 01               		dw 100h
(1) 3892/    147B : 00 01               		dw 100h
(1) 3893/    147D : 00 01               		dw 100h
(1) 3894/    147F : 00 01               		dw 100h
(1) 3895/    1481 : 00 01               		dw 100h
(1) 3896/    1483 : 00 01               		dw 100h
(1) 3897/    1485 : 00 01               		dw 100h
(1) 3898/    1487 : 00 01               		dw 100h
(1) 3899/    1489 : 00 01               		dw 100h
(1) 3900/    148B : 00 01               		dw 100h
(1) 3901/    148D : 00 01               		dw 100h
(1) 3902/    148F :                     
(1) 3903/    148F : F9 15               fmcach_list:	dw fmcach_1
(1) 3904/    1491 : 21 16               		dw fmcach_2
(1) 3905/    1493 : 49 16               		dw fmcach_3
(1) 3906/    1495 : 00 00               		dw 0		; <-- skipped
(1) 3907/    1497 : 71 16               		dw fmcach_4
(1) 3908/    1499 : 99 16               		dw fmcach_5
(1) 3909/    149B : C1 16               		dw fmcach_6
(1) 3910/    149D :                     
(1) 3911/    149D :                     ; ====================================================================
(1) 3912/    149D :                     ; ----------------------------------------------------------------
(1) 3913/    149D :                     ; MASTER buffers list
(1) 3914/    149D :                     ;
(1) 3915/    149D :                     ; dw track_buffer
(1) 3916/    149D :                     ; dw channel_list,block_cache,header_cache,instr_cache,track_cache
(1) 3917/    149D :                     ; db max_blocks,max_headers,max_instr,max_chnls
(1) 3918/    149D :                     ;
(1) 3919/    149D :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 3920/    149D :                     ; ----------------------------------------------------------------
(1) 3921/    149D :                     
(1) 3922/    149D :                     nikona_BuffList:
(1) 3923/    149D : C3 17 53 18 07 1C   	dw trkBuff_0,trkChnl_0,trkBlks_0,trkHdrs_0,trkInsD_0,trkCach_0
                    EB 19 9F 1A 00 1E 
(1) 3924/    14A9 : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3925/    14AD : F3 17 DB 18 1F 1C   	dw trkBuff_1,trkChnl_1,trkBlks_1,trkHdrs_1,trkInsD_1,trkCach_1
                    27 1A 17 1B 40 1E 
(1) 3926/    14B9 : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3927/    14BD : 23 18 63 19 37 1C   	dw trkBuff_2,trkChnl_2,trkBlks_2,trkHdrs_2,trkInsD_2,trkCach_2
                    63 1A 8F 1B 80 1E 
(1) 3928/    14C9 : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3929/    14CD : FF FF               	dw -1
(1) 3930/    14CF :                     
(1) 3931/    14CF :                     nikona_SetMstrList:
(1) 3932/    14CF : 00                  	db 0				; ** 32-bit 68k address **
(1) 3933/    14D0 : 88                  	db (Gema_MasterList>>16)&0FFh
(1) 3934/    14D1 : 80                  	db (Gema_MasterList>>8)&0FFh
(1) 3935/    14D2 : 00                  	db Gema_MasterList&0FFh
(1) 3936/    14D3 :                     
(1) 3937/    14D3 :                     ; ====================================================================
(1) 3938/    14D3 :                     ; ----------------------------------------------------------------
(1) 3939/    14D3 :                     ; Buffer section
(1) 3940/    14D3 :                     ; ----------------------------------------------------------------
(1) 3941/    14D3 :                     
(1) 3942/    14D3 :                     ; --------------------------------------------------------
(1) 3943/    14D3 :                     ; Channel table struct:
(1) 3944/    14D3 :                     ; 00  - Linked tracker channel
(1) 3945/    14D3 :                     ; 02  - 00h-7Fh: Priority level / 80h+ Silence request (chip ID)
(1) 3946/    14D3 :                     ; 03  - Intrument cache pointer
(1) 3947/    14D3 :                     ; 05  - Chip index (YM2612: KEY index)
(1) 3948/    14D3 :                     ; 06  - Frequency list index (YM2612: oct|index)
(1) 3949/    14D3 :                     ; 07  - Pitchbend add/sub
(1) 3950/    14D3 :                     ; 08  - Current volume: 00-max
(1) 3951/    14D3 :                     ; 09  - Stored effect setting
(1) 3952/    14D3 :                     ; 0A  - FREE
(1) 3953/    14D3 :                     ; 0B  - FREE
(1) 3954/    14D3 :                     ; 0C+ - Misc. settings for the current chip
(1) 3955/    14D3 :                     
(1) 3956/    14D3 :                     ; PSG   80h
(1) 3957/    14D3 :                     ; PSGN  90h
(1) 3958/    14D3 :                     ; FM   0A0h
(1) 3959/    14D3 :                     ; FM3  0B0h
(1) 3960/    14D3 :                     ; DAC  0C0h
(1) 3961/    14D3 :                     ; PWM  0D0h
(1) 3962/    14D3 :                     ; --------------------------------------------------------
(1) 3963/    14D3 :                     
(1) 3964/    14D3 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 3965/    14D5 : 42 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 3966/    14D7 : 52 00               		dw tblFM-tblList		; 0A0h
(1) 3967/    14D9 : 92 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 3968/    14DB : A2 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 3969/    14DD : B4 00               		dw tblPWM-tblList		; 0D0h
(1) 3970/    14DF : 00 00               		dw 0
(1) 3971/    14E1 : 00 00               		dw 0
(1) 3972/    14E3 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3973/    14EB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3974/    14F3 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3975/    14FB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3976/    1503 : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
                    00 00 
(1) 3977/    150B : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3978/    1513 : FF FF               		dw -1	; end-of-list
(1) 3979/    1515 : 00 00 00 00 00 03   tblPSGN:	db 00h,00h,00h,00h,00h,03h,00h,03h	; Noise
                    00 03 
(1) 3980/    151D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3981/    1525 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3982/    152D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3983/    1535 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3984/    153D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3985/    1545 : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 4 <--
                    00 00 
(1) 3986/    154D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3987/    1555 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 5
                    00 00 
(1) 3988/    155D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3989/    1565 : 00 00 00 00 00 02   tblFM3:		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3 <--
                    00 00 
(1) 3990/    156D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3991/    1575 : 00 00 00 00 00 06   tblFM6:		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 6 <--
                    00 00 
(1) 3992/    157D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3993/    1585 : FF FF               		dw -1	; end-of-list
(1) 3994/    1587 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3995/    158F : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3996/    1597 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3997/    159F : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3998/    15A7 : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
                    00 00 
(1) 3999/    15AF : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4000/    15B7 : 00 00 00 00 00 03   		db 00h,00h,00h,00h,00h,03h,00h,00h	; Channel 4
                    00 00 
(1) 4001/    15BF : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4002/    15C7 : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 5
                    00 00 
(1) 4003/    15CF : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4004/    15D7 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 6
                    00 00 
(1) 4005/    15DF : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4006/    15E7 : 00 00 00 00 00 06   		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 7
                    00 00 
(1) 4007/    15EF : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4008/    15F7 : FF FF               		dw -1	; end-of-list
(1) 4009/    15F9 :                     
(1) 4010/    15F9 :                     ; FM patch storage
(1) 4011/    15F9 :                     fmcach_1	ds 28h
(1) 4012/    1621 :                     fmcach_2	ds 28h
(1) 4013/    1649 :                     fmcach_3	ds 28h
(1) 4014/    1671 :                     fmcach_4	ds 28h
(1) 4015/    1699 :                     fmcach_5	ds 28h
(1) 4016/    16C1 :                     fmcach_6	ds 28h
(1) 4017/    16E9 :                     
(1) 4018/    16E9 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: KeyOn/KeyOff/KeyCut bits
                    00 00 
(1) 4019/    16F1 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
                    00 00 
(1) 4020/    16F9 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
                    00 00 
(1) 4021/    1701 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags: Stereo/Loop/Left/Right | 32-bit**
                    00 00 
(1) 4022/    1709 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - **sample location
                    00 00 
(1) 4023/    1711 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4024/    1719 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4025/    1721 :                     
(1) 4026/    1721 : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4027/    1725 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4028/    1729 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4029/    172D : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4030/    1731 : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4031/    1735 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4032/    1739 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4033/    173D : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4034/    1741 : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4035/    1745 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4036/    1749 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4037/    174D : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4038/    1751 : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4039/    1755 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4040/    1759 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4041/    175D :                     
(1) 4042/    175D :                     ; mailboxes	ds 40h		; GEMS style mailboxes/events
(1) 4043/    175D :                     trkListCach	ds 4*10h	; 40h bytes
(1) 4044/    179D : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4045/    179F : 00                  		db 0
(1) 4046/    17A0 : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4047/    17A2 : 00                  		db 0
(1) 4048/    17A3 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4049/    17A5 : 00                  		db 0
(1) 4050/    17A6 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4051/    17A8 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4052/    17A9 :                     
(1) 4053/    17A9 :                     
(1) 4054/    17A9 : 00                  tickSpSet	db 0		; **
(1) 4055/    17AA : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4056/    17AB : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4057/    17AC : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4058/    17AD : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4059/    17AE :                     headerOut	ds 00Ch		; Temporal storage for 68k pointers
(1) 4060/    17BA :                     headerOut_e	ds 2
(1) 4061/    17BC :                     sampleHead	ds 006h
(1) 4062/    17C2 : 00                  commZRead	db 0			; cmd fifo READ pointer (here)
(1) 4063/    17C3 :                     
(1) 4064/    17C3 :                     ; --------------------------------------------------------
(1) 4065/    17C3 :                     ; * USER customizable section *
(1) 4066/    17C3 :                     ;
(1) 4067/    17C3 :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4068/    17C3 :                     ; --------------------------------------------------------
(1) 4069/    17C3 :                     
(1) 4070/    17C3 :                     trkBuff_0	ds 30h			; TRACK BUFFER 0
(1) 4071/    17F3 :                     trkBuff_1	ds 30h			; TRACK BUFFER 1
(1) 4072/    1823 :                     trkBuff_2	ds 30h			; TRACK BUFFER 2
(1) 4073/    1853 :                     ; trkBuff_3	ds 30h			; TRACK BUFFER 3
(1) 4074/    1853 :                     trkChnl_0	ds 8*MAX_TRKCHN
(1) 4075/    18DB :                     trkChnl_1	ds 8*MAX_TRKCHN
(1) 4076/    1963 :                     trkChnl_2	ds 8*MAX_TRKCHN
(1) 4077/    19EB :                     ; trkChnl_3	ds 8*MAX_TRKCHN
(1) 4078/    19EB :                     trkHdrs_0	ds 4*MAX_HEADS		; dw point,rowcntr
(1) 4079/    1A27 :                     trkHdrs_1	ds 4*MAX_HEADS
(1) 4080/    1A63 :                     trkHdrs_2	ds 4*MAX_HEADS
(1) 4081/    1A9F :                     ; trkHdrs_3	ds 4*MAX_HEADS
(1) 4082/    1A9F :                     trkInsD_0	ds 8*MAX_INS
(1) 4083/    1B17 :                     trkInsD_1	ds 8*MAX_INS
(1) 4084/    1B8F :                     trkInsD_2	ds 8*MAX_INS
(1) 4085/    1C07 :                     ; trkInsD_3	ds 8*MAX_INS
(1) 4086/    1C07 :                     trkBlks_0	ds MAX_BLOCKS
(1) 4087/    1C1F :                     trkBlks_1	ds MAX_BLOCKS
(1) 4088/    1C37 :                     trkBlks_2	ds MAX_BLOCKS
(1) 4089/    1C4F :                     ; trkBlks_3	ds MAX_BLOCKS
(1) 4090/    1C4F :                     
(1) 4091/    1C4F :                     ; ====================================================================
(1) 4092/    1C4F :                     ; ----------------------------------------------------------------
(1) 4093/    1C4F :                     ; WAVE playback buffer
(1) 4094/    1C4F :                     ;
(1) 4095/    1C4F :                     ; Located at 200h
(1) 4096/    1C4F :                     ; ----------------------------------------------------------------
(1) 4097/    1C4F :                     
(1) 4098/    1C4F : (MACRO)             		org 1D00h
(1) 4098/    1C4F : 00                                                  db 0
(1) 4098/    1C50 : 00                                                  db 0
(1) 4098/    1C51 : 00                                                  db 0
(1) 4098/    1C52 : 00                                                  db 0
(1) 4098/    1C53 : 00                                                  db 0
(1) 4098/    1C54 : 00                                                  db 0
(1) 4098/    1C55 : 00                                                  db 0
(1) 4098/    1C56 : 00                                                  db 0
(1) 4098/    1C57 : 00                                                  db 0
(1) 4098/    1C58 : 00                                                  db 0
(1) 4098/    1C59 : 00                                                  db 0
(1) 4098/    1C5A : 00                                                  db 0
(1) 4098/    1C5B : 00                                                  db 0
(1) 4098/    1C5C : 00                                                  db 0
(1) 4098/    1C5D : 00                                                  db 0
(1) 4098/    1C5E : 00                                                  db 0
(1) 4098/    1C5F : 00                                                  db 0
(1) 4098/    1C60 : 00                                                  db 0
(1) 4098/    1C61 : 00                                                  db 0
(1) 4098/    1C62 : 00                                                  db 0
(1) 4098/    1C63 : 00                                                  db 0
(1) 4098/    1C64 : 00                                                  db 0
(1) 4098/    1C65 : 00                                                  db 0
(1) 4098/    1C66 : 00                                                  db 0
(1) 4098/    1C67 : 00                                                  db 0
(1) 4098/    1C68 : 00                                                  db 0
(1) 4098/    1C69 : 00                                                  db 0
(1) 4098/    1C6A : 00                                                  db 0
(1) 4098/    1C6B : 00                                                  db 0
(1) 4098/    1C6C : 00                                                  db 0
(1) 4098/    1C6D : 00                                                  db 0
(1) 4098/    1C6E : 00                                                  db 0
(1) 4098/    1C6F : 00                                                  db 0
(1) 4098/    1C70 : 00                                                  db 0
(1) 4098/    1C71 : 00                                                  db 0
(1) 4098/    1C72 : 00                                                  db 0
(1) 4098/    1C73 : 00                                                  db 0
(1) 4098/    1C74 : 00                                                  db 0
(1) 4098/    1C75 : 00                                                  db 0
(1) 4098/    1C76 : 00                                                  db 0
(1) 4098/    1C77 : 00                                                  db 0
(1) 4098/    1C78 : 00                                                  db 0
(1) 4098/    1C79 : 00                                                  db 0
(1) 4098/    1C7A : 00                                                  db 0
(1) 4098/    1C7B : 00                                                  db 0
(1) 4098/    1C7C : 00                                                  db 0
(1) 4098/    1C7D : 00                                                  db 0
(1) 4098/    1C7E : 00                                                  db 0
(1) 4098/    1C7F : 00                                                  db 0
(1) 4098/    1C80 : 00                                                  db 0
(1) 4098/    1C81 : 00                                                  db 0
(1) 4098/    1C82 : 00                                                  db 0
(1) 4098/    1C83 : 00                                                  db 0
(1) 4098/    1C84 : 00                                                  db 0
(1) 4098/    1C85 : 00                                                  db 0
(1) 4098/    1C86 : 00                                                  db 0
(1) 4098/    1C87 : 00                                                  db 0
(1) 4098/    1C88 : 00                                                  db 0
(1) 4098/    1C89 : 00                                                  db 0
(1) 4098/    1C8A : 00                                                  db 0
(1) 4098/    1C8B : 00                                                  db 0
(1) 4098/    1C8C : 00                                                  db 0
(1) 4098/    1C8D : 00                                                  db 0
(1) 4098/    1C8E : 00                                                  db 0
(1) 4098/    1C8F : 00                                                  db 0
(1) 4098/    1C90 : 00                                                  db 0
(1) 4098/    1C91 : 00                                                  db 0
(1) 4098/    1C92 : 00                                                  db 0
(1) 4098/    1C93 : 00                                                  db 0
(1) 4098/    1C94 : 00                                                  db 0
(1) 4098/    1C95 : 00                                                  db 0
(1) 4098/    1C96 : 00                                                  db 0
(1) 4098/    1C97 : 00                                                  db 0
(1) 4098/    1C98 : 00                                                  db 0
(1) 4098/    1C99 : 00                                                  db 0
(1) 4098/    1C9A : 00                                                  db 0
(1) 4098/    1C9B : 00                                                  db 0
(1) 4098/    1C9C : 00                                                  db 0
(1) 4098/    1C9D : 00                                                  db 0
(1) 4098/    1C9E : 00                                                  db 0
(1) 4098/    1C9F : 00                                                  db 0
(1) 4098/    1CA0 : 00                                                  db 0
(1) 4098/    1CA1 : 00                                                  db 0
(1) 4098/    1CA2 : 00                                                  db 0
(1) 4098/    1CA3 : 00                                                  db 0
(1) 4098/    1CA4 : 00                                                  db 0
(1) 4098/    1CA5 : 00                                                  db 0
(1) 4098/    1CA6 : 00                                                  db 0
(1) 4098/    1CA7 : 00                                                  db 0
(1) 4098/    1CA8 : 00                                                  db 0
(1) 4098/    1CA9 : 00                                                  db 0
(1) 4098/    1CAA : 00                                                  db 0
(1) 4098/    1CAB : 00                                                  db 0
(1) 4098/    1CAC : 00                                                  db 0
(1) 4098/    1CAD : 00                                                  db 0
(1) 4098/    1CAE : 00                                                  db 0
(1) 4098/    1CAF : 00                                                  db 0
(1) 4098/    1CB0 : 00                                                  db 0
(1) 4098/    1CB1 : 00                                                  db 0
(1) 4098/    1CB2 : 00                                                  db 0
(1) 4098/    1CB3 : 00                                                  db 0
(1) 4098/    1CB4 : 00                                                  db 0
(1) 4098/    1CB5 : 00                                                  db 0
(1) 4098/    1CB6 : 00                                                  db 0
(1) 4098/    1CB7 : 00                                                  db 0
(1) 4098/    1CB8 : 00                                                  db 0
(1) 4098/    1CB9 : 00                                                  db 0
(1) 4098/    1CBA : 00                                                  db 0
(1) 4098/    1CBB : 00                                                  db 0
(1) 4098/    1CBC : 00                                                  db 0
(1) 4098/    1CBD : 00                                                  db 0
(1) 4098/    1CBE : 00                                                  db 0
(1) 4098/    1CBF : 00                                                  db 0
(1) 4098/    1CC0 : 00                                                  db 0
(1) 4098/    1CC1 : 00                                                  db 0
(1) 4098/    1CC2 : 00                                                  db 0
(1) 4098/    1CC3 : 00                                                  db 0
(1) 4098/    1CC4 : 00                                                  db 0
(1) 4098/    1CC5 : 00                                                  db 0
(1) 4098/    1CC6 : 00                                                  db 0
(1) 4098/    1CC7 : 00                                                  db 0
(1) 4098/    1CC8 : 00                                                  db 0
(1) 4098/    1CC9 : 00                                                  db 0
(1) 4098/    1CCA : 00                                                  db 0
(1) 4098/    1CCB : 00                                                  db 0
(1) 4098/    1CCC : 00                                                  db 0
(1) 4098/    1CCD : 00                                                  db 0
(1) 4098/    1CCE : 00                                                  db 0
(1) 4098/    1CCF : 00                                                  db 0
(1) 4098/    1CD0 : 00                                                  db 0
(1) 4098/    1CD1 : 00                                                  db 0
(1) 4098/    1CD2 : 00                                                  db 0
(1) 4098/    1CD3 : 00                                                  db 0
(1) 4098/    1CD4 : 00                                                  db 0
(1) 4098/    1CD5 : 00                                                  db 0
(1) 4098/    1CD6 : 00                                                  db 0
(1) 4098/    1CD7 : 00                                                  db 0
(1) 4098/    1CD8 : 00                                                  db 0
(1) 4098/    1CD9 : 00                                                  db 0
(1) 4098/    1CDA : 00                                                  db 0
(1) 4098/    1CDB : 00                                                  db 0
(1) 4098/    1CDC : 00                                                  db 0
(1) 4098/    1CDD : 00                                                  db 0
(1) 4098/    1CDE : 00                                                  db 0
(1) 4098/    1CDF : 00                                                  db 0
(1) 4098/    1CE0 : 00                                                  db 0
(1) 4098/    1CE1 : 00                                                  db 0
(1) 4098/    1CE2 : 00                                                  db 0
(1) 4098/    1CE3 : 00                                                  db 0
(1) 4098/    1CE4 : 00                                                  db 0
(1) 4098/    1CE5 : 00                                                  db 0
(1) 4098/    1CE6 : 00                                                  db 0
(1) 4098/    1CE7 : 00                                                  db 0
(1) 4098/    1CE8 : 00                                                  db 0
(1) 4098/    1CE9 : 00                                                  db 0
(1) 4098/    1CEA : 00                                                  db 0
(1) 4098/    1CEB : 00                                                  db 0
(1) 4098/    1CEC : 00                                                  db 0
(1) 4098/    1CED : 00                                                  db 0
(1) 4098/    1CEE : 00                                                  db 0
(1) 4098/    1CEF : 00                                                  db 0
(1) 4098/    1CF0 : 00                                                  db 0
(1) 4098/    1CF1 : 00                                                  db 0
(1) 4098/    1CF2 : 00                                                  db 0
(1) 4098/    1CF3 : 00                                                  db 0
(1) 4098/    1CF4 : 00                                                  db 0
(1) 4098/    1CF5 : 00                                                  db 0
(1) 4098/    1CF6 : 00                                                  db 0
(1) 4098/    1CF7 : 00                                                  db 0
(1) 4098/    1CF8 : 00                                                  db 0
(1) 4098/    1CF9 : 00                                                  db 0
(1) 4098/    1CFA : 00                                                  db 0
(1) 4098/    1CFB : 00                                                  db 0
(1) 4098/    1CFC : 00                                                  db 0
(1) 4098/    1CFD : 00                                                  db 0
(1) 4098/    1CFE : 00                                                  db 0
(1) 4098/    1CFF : 00                                                  db 0
(1) 4098/    1D00 :                     
(1) 4099/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4100/    1E00 :                     trkCach_0	ds MAX_RCACH	; ** MUST BE aligned **
(1) 4101/    1E40 :                     trkCach_1	ds MAX_RCACH
(1) 4102/    1E80 :                     trkCach_2	ds MAX_RCACH
(1) 4103/    1EC0 :                     trkCach_3	ds MAX_RCACH
(1) 4104/    1F00 :                     
(1) 4105/    1F00 :                     ; --------------------------------------------------------
(1) 4106/    1F00 :                     
(1) 4107/    1F00 :                     		cpu 68000	; [AS] Exit Z80
(1) 4108/    1F00 :                     		padding off	; [AS] NO padding (again)
(1) 4109/  8853F4 :                     		phase Z80_TOP+*	; [AS] Relocate PC
(1) 4110/  8853F4 :                     		align 2		; [AS] Align by 2
(1) 4111/  8853F4 :                     
      99/  8853F4 :                     Z80_CODE_END:
     100/  8853F4 :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/  8853F4 :                     ; ================================================================
(1)    2/  8853F4 :                     ; ------------------------------------------------------------
(1)    3/  8853F4 :                     ; DATA SECTION
(1)    4/  8853F4 :                     ;
(1)    5/  8853F4 :                     ; SOUND
(1)    6/  8853F4 :                     ; ------------------------------------------------------------
(1)    7/  8853F4 :                     
(1)    8/  8853F4 :                     ; ticks - %gttttttt
(1)    9/  8853F4 :                     ;   loc - 68k pointer
(1)   10/  8853F4 :                     ;
(1)   11/  8853F4 :                     ; t-Ticks
(1)   12/  8853F4 :                     ; g-Use global tempo
(1)   13/  8853F4 :                     gemaTrk macro ticks,loc
(1)   14/  8853F4 :                     	dc.l ((ticks&$FF)<<24)|loc
(1)   15/  8853F4 :                     	endm
(1)   16/  8853F4 :                     
(1)   17/  8853F4 :                     ; gemaHead
(1)   18/  8853F4 :                     ; block point, patt point, ins point
(1)   19/  8853F4 :                     ; numof_blocks,numof_patts,numof_ins
(1)   20/  8853F4 :                     gemaHead macro blk,pat,ins
(1)   21/  8853F4 :                     	dc.l blk
(1)   22/  8853F4 :                     	dc.l pat
(1)   23/  8853F4 :                     	dc.l ins
(1)   24/  8853F4 :                     	endm
(1)   25/  8853F4 :                     
(1)   26/  8853F4 :                     ; Instrument macros
(1)   27/  8853F4 :                     ; do note that some 24-bit pointers add 90h to the MSB automaticly.
(1)   28/  8853F4 :                     gInsNull macro
(1)   29/  8853F4 :                     	dc.b $00,$00,$00,$00
(1)   30/  8853F4 :                     	dc.b $00,$00,$00,$00
(1)   31/  8853F4 :                     	endm
(1)   32/  8853F4 :                     
(1)   33/  8853F4 :                     ; alv: attack level
(1)   34/  8853F4 :                     ; atk: attack rate
(1)   35/  8853F4 :                     ; slv: sustain
(1)   36/  8853F4 :                     ; dky: decay rate (up)
(1)   37/  8853F4 :                     ; rrt: release rate (down)
(1)   38/  8853F4 :                     ; vib: (TODO)
(1)   39/  8853F4 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   40/  8853F4 :                     	dc.b $80,pitch,alv,atk
(1)   41/  8853F4 :                     	dc.b slv,dky,rrt,vib
(1)   42/  8853F4 :                     	endm
(1)   43/  8853F4 :                     
(1)   44/  8853F4 :                     ; same args as gInsPsg
(1)   45/  8853F4 :                     ; only one more argument for the noise type:
(1)   46/  8853F4 :                     ; mode: noise mode
(1)   47/  8853F4 :                     ;       %tmm
(1)   48/  8853F4 :                     ;        t  - Bass(0)|Noise(1)
(1)   49/  8853F4 :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   50/  8853F4 :                     ;
(1)   51/  8853F4 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   52/  8853F4 :                     	dc.b $90|mode,pitch,alv,atk
(1)   53/  8853F4 :                     	dc.b slv,dky,rrt,vib
(1)   54/  8853F4 :                     	endm
(1)   55/  8853F4 :                     
(1)   56/  8853F4 :                     ; 24-bit ROM pointer to FM patch data
(1)   57/  8853F4 :                     gInsFm macro pitch,fmins
(1)   58/  8853F4 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   59/  8853F4 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   60/  8853F4 :                     	endm
(1)   61/  8853F4 :                     
(1)   62/  8853F4 :                     ; Same args as gInsFm, but the last 4 words of the data
(1)   63/  8853F4 :                     ; are the custom freqs for each operator in this order:
(1)   64/  8853F4 :                     ; OP1 OP2 OP3 OP4
(1)   65/  8853F4 :                     ;
(1)   66/  8853F4 :                     ; NOTE: pitch is useless here...
(1)   67/  8853F4 :                     gInsFm3	macro pitch,fmins
(1)   68/  8853F4 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   69/  8853F4 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   70/  8853F4 :                     	endm
(1)   71/  8853F4 :                     
(1)   72/  8853F4 :                     ; start: Pointer to sample data:
(1)   73/  8853F4 :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   74/  8853F4 :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   75/  8853F4 :                     ;        dc.b (sound data)	; <-- Then the actual sound data
(1)   76/  8853F4 :                     ;
(1)   77/  8853F4 :                     ; flags: $00 - No Loop
(1)   78/  8853F4 :                     ; 	 $01 - Loop
(1)   79/  8853F4 :                     gInsDac	macro pitch,start,flags
(1)   80/  8853F4 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   81/  8853F4 :                     	dc.b start&$FF,0,0,0
(1)   82/  8853F4 :                     	endm
(1)   83/  8853F4 :                     
(1)   84/  8853F4 :                     ; start: Pointer to sample data:
(1)   85/  8853F4 :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   86/  8853F4 :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   87/  8853F4 :                     ;        dc.b (data)		; Then the actual sound data
(1)   88/  8853F4 :                     ;
(1)   89/  8853F4 :                     ; flags: %00SL
(1)   90/  8853F4 :                     ;            L - Loop sample No/Yes
(1)   91/  8853F4 :                     ;           S  - Sample data is on STEREO
(1)   92/  8853F4 :                     gInsPwm	macro pitch,start,flags
(1)   93/  8853F4 :                      if MARS
(1)   94/  8853F4 :                     	dc.b $D0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   95/  8853F4 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   96/  8853F4 :                      else
(1)   97/  8853F4 :                     	dc.b $00,$00,$00,$00
(1)   98/  8853F4 :                     	dc.b $00,$00,$00,$00
(1)   99/  8853F4 :                      endif
(1)  100/  8853F4 :                     	endm
(1)  101/  8853F4 :                     
(1)  102/  8853F4 :                     ; ------------------------------------------------------------
(1)  103/  8853F4 :                     
(1)  104/  8853F4 :                     	align $8000
(1)  105/  888000 :                     
(1)  106/  888000 :                     ; ------------------------------------------------------------
(1)  107/  888000 :                     ; Nikona MAIN track-list
(1)  108/  888000 :                     ;
(1)  109/  888000 :                     ; ONLY the ticks can be set here.
(1)  110/  888000 :                     ; You can change the ticks mid-track using effect A
(1)  111/  888000 :                     ;
(1)  112/  888000 :                     ; Add $80 to the ticks value to use the GLOBAL
(1)  113/  888000 :                     ; sub-beats
(1)  114/  888000 :                     ;
(1)  115/  888000 :                     ; To set the sub-beats send the SetBeats command
(1)  116/  888000 :                     ; BEFORE playing your track:
(1)  117/  888000 :                     ; 	move.w	#new_beats,d0
(1)  118/  888000 :                     ; 	bsr	gemaSetBeats
(1)  119/  888000 :                     ; 	move.w	#track_id,d0
(1)  120/  888000 :                     ;	bsr	gemaPlayTrack
(1)  121/  888000 :                     ; ------------------------------------------------------------
(1)  122/  888000 :                     
(1)  123/  888000 :                     Gema_MasterList:
(1)  124/  888000 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0	; Ticks, Track pointer (Default tempo: 150/120)
(1)  124/  888000 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  125/  888004 : (MACRO)             	gemaTrk $80|6,GemaTrk_MAIN_0
(1)  125/  888004 : 8689 46A7                   dc.l (($80|6&$FF)<<24)|GEMATRK_MAIN_0
(1)  126/  888008 : (MACRO)             	gemaTrk $80|6,GemaTrk_BodyOver
(1)  126/  888008 : 8689 2434                   dc.l (($80|6&$FF)<<24)|GEMATRK_BODYOVER
(1)  127/  88800C : (MACRO)             	gemaTrk 7,GemaTrk_MOVEME
(1)  127/  88800C : 0789 2C96                   dc.l ((7&$FF)<<24)|GEMATRK_MOVEME
(1)  128/  888010 : (MACRO)             	gemaTrk 4,GemaTrk_xtrim
(1)  128/  888010 : 0489 3BC8                   dc.l ((4&$FF)<<24)|GEMATRK_XTRIM
(1)  129/  888014 : (MACRO)             	gemaTrk $80|3,GemaTrk_TEST_6
(1)  129/  888014 : 8389 0808                   dc.l (($80|3&$FF)<<24)|GEMATRK_TEST_6
(1)  130/  888018 : (MACRO)             	gemaTrk 7,GemaTrk_TEST_1
(1)  130/  888018 : 0788 9CFC                   dc.l ((7&$FF)<<24)|GEMATRK_TEST_1
(1)  131/  88801C : (MACRO)             	gemaTrk $80|3,GemaTrk_TEST_2
(1)  131/  88801C : 8388 8080                   dc.l (($80|3&$FF)<<24)|GEMATRK_TEST_2
(1)  132/  888020 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_3
(1)  132/  888020 : 0388 D1D6                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_3
(1)  133/  888024 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_4
(1)  133/  888024 : 0388 EAA0                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_4
(1)  134/  888028 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_5
(1)  134/  888028 : 0388 FFBC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_5
(1)  135/  88802C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  135/  88802C : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  136/  888030 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  136/  888030 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  137/  888034 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  137/  888034 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  138/  888038 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  138/  888038 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  139/  88803C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  139/  88803C : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  140/  888040 :                     
(1)  141/  888040 : (MACRO)             	gemaTrk $80|4,GemaTrk_TEST_1
(1)  141/  888040 : 8488 9CFC                   dc.l (($80|4&$FF)<<24)|GEMATRK_TEST_1
(1)  142/  888044 : (MACRO)             	gemaTrk $80|2,GemaTrk_TEST_0
(1)  142/  888044 : 8289 45AC                   dc.l (($80|2&$FF)<<24)|GEMATRK_TEST_0
(1)  143/  888048 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  143/  888048 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  144/  88804C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  144/  88804C : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  145/  888050 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  145/  888050 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  146/  888054 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  146/  888054 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  147/  888058 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  147/  888058 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  148/  88805C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  148/  88805C : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  149/  888060 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  149/  888060 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  150/  888064 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  150/  888064 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  151/  888068 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  151/  888068 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  152/  88806C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  152/  88806C : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  153/  888070 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  153/  888070 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  154/  888074 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  154/  888074 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  155/  888078 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  155/  888078 : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  156/  88807C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  156/  88807C : 0389 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  157/  888080 :                     
(1)  158/  888080 :                     ; ------------------------------------------------------------
(1)  159/  888080 :                     ; BGM tracks
(1)  160/  888080 :                     ; ------------------------------------------------------------
(1)  161/  888080 :                     
(1)  162/  888080 :                     GemaTrk_TEST_2:
(1)  163/  888080 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  163/  888080 : 0088 808C                   dc.l .BLK
(1)  163/  888084 : 0088 80A2                   dc.l .PAT
(1)  163/  888088 : 0088 9CC4                   dc.l .INS
(1)  164/  88808C :                     .blk:
(1)  165/  88808C :                     	binclude "sound/tracks/wegot_blk.bin"
(1)  166/  8880A1 :                     	align 2
(1)  167/  8880A2 :                     .pat:
(1)  168/  8880A2 :                     	binclude "sound/tracks/wegot_patt.bin"
(1)  169/  889CC3 :                     	align 2
(1)  170/  889CC4 :                     .ins:
(1)  171/  889CC4 : (MACRO)             	gInsFm 0,FmIns_Synth_plus
(1)  171/  889CC4 : A000 8958                   dc.b $A0,0,((FMINS_SYNTH_PLUS>>16)&$FF),((FMINS_SYNTH_PLUS>>8)&$FF)
(1)  171/  889CC8 : 1200 0000                   dc.b FMINS_SYNTH_PLUS&$FF,$00,$00,$00
(1)  172/  889CCC : (MACRO)             	gInsFm 0,FmIns_Bass_4
(1)  172/  889CCC : A000 8957                   dc.b $A0,0,((FMINS_BASS_4>>16)&$FF),((FMINS_BASS_4>>8)&$FF)
(1)  172/  889CD0 : D200 0000                   dc.b FMINS_BASS_4&$FF,$00,$00,$00
(1)  173/  889CD4 : (MACRO)             	gInsDac 0,DacIns_wegot_kick,0
(1)  173/  889CD4 : C000 89AC                   dc.b $C0|0,0,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  173/  889CD8 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  174/  889CDC : (MACRO)             	gInsFm 0,FmIns_Bass_club
(1)  174/  889CDC : A000 8958                   dc.b $A0,0,((FMINS_BASS_CLUB>>16)&$FF),((FMINS_BASS_CLUB>>8)&$FF)
(1)  174/  889CE0 : 3200 0000                   dc.b FMINS_BASS_CLUB&$FF,$00,$00,$00
(1)  175/  889CE4 : (MACRO)             	gInsFm3 0,FmIns_Sp_Openhat
(1)  175/  889CE4 : B000 8957                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  175/  889CE8 : 5A00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  176/  889CEC : (MACRO)             	gInsPsg 0,$10,$04,$20,$04,$02,$00;gInsFm -12,FmIns_Trumpet_carnival;;
(1)  176/  889CEC : 8000 1004                   dc.b $80,0,$10,$04
(1)  176/  889CF0 : 2004 0200                   dc.b $20,$04,$02,$00
(1)  177/  889CF4 : (MACRO)             	gInsDac 0,DacIns_wegot_crash,0
(1)  177/  889CF4 : C000 8980                   dc.b $C0|0,0,((DACINS_WEGOT_CRASH>>16)&$FF),((DACINS_WEGOT_CRASH>>8)&$FF)
(1)  177/  889CF8 : 0000 0000                   dc.b DACINS_WEGOT_CRASH&$FF,0,0,0
(1)  178/  889CFC :                     
(1)  179/  889CFC :                     GemaTrk_TEST_1:
(1)  180/  889CFC : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  180/  889CFC : 0088 9D08                   dc.l .BLK
(1)  180/  889D00 : 0088 9D17                   dc.l .PAT
(1)  180/  889D04 : 0088 D166                   dc.l .INS
(1)  181/  889D08 :                     .blk:
(1)  182/  889D08 :                     	binclude "sound/tracks/vectr_blk.bin"
(1)  183/  889D17 :                     .pat:
(1)  184/  889D17 :                     	binclude "sound/tracks/vectr_patt.bin"
(1)  185/  88D166 :                     .ins:
(1)  186/  88D166 : (MACRO)             	gInsPwm -17,SmpIns_Vctr01,%001
(1)  186/  88D166 : D1EF 0209                   dc.b $D0|%001,-17,((SMPINS_VCTR01>>24)&$FF),((SMPINS_VCTR01>>16)&$FF)
(1)  186/  88D16A : 4720 0000                   dc.b ((SMPINS_VCTR01>>8)&$FF),SMPINS_VCTR01&$FF,0,0
(1)  187/  88D16E : (MACRO)             	gInsFm -3,FmIns_brass_eur
(1)  187/  88D16E : A0FD 8958                   dc.b $A0,-3,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  187/  88D172 : B200 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  188/  88D176 : (MACRO)             	gInsPwm -15,SmpIns_VctrCrash,0
(1)  188/  88D176 : D0F1 0209                   dc.b $D0|0,-15,((SMPINS_VCTRCRASH>>24)&$FF),((SMPINS_VCTRCRASH>>16)&$FF)
(1)  188/  88D17A : DD14 0000                   dc.b ((SMPINS_VCTRCRASH>>8)&$FF),SMPINS_VCTRCRASH&$FF,0,0
(1)  189/  88D17E : (MACRO)             	gInsPwm -17,SmpIns_Vctr04,%001
(1)  189/  88D17E : D1EF 0209                   dc.b $D0|%001,-17,((SMPINS_VCTR04>>24)&$FF),((SMPINS_VCTR04>>16)&$FF)
(1)  189/  88D182 : 6358 0000                   dc.b ((SMPINS_VCTR04>>8)&$FF),SMPINS_VCTR04&$FF,0,0
(1)  190/  88D186 : (MACRO)             	gInsNull
(1)  190/  88D186 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  190/  88D18A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  191/  88D18E : (MACRO)             	gInsPwm -15,SmpIns_VctrTimpani,%101
(1)  191/  88D18E : D5F1 0209                   dc.b $D0|%101,-15,((SMPINS_VCTRTIMPANI>>24)&$FF),((SMPINS_VCTRTIMPANI>>16)&$FF)
(1)  191/  88D192 : AAA0 0000                   dc.b ((SMPINS_VCTRTIMPANI>>8)&$FF),SMPINS_VCTRTIMPANI&$FF,0,0
(1)  192/  88D196 : (MACRO)             	gInsFm -22,FmIns_Bass_8
(1)  192/  88D196 : A0EA 8957                   dc.b $A0,-22,((FMINS_BASS_8>>16)&$FF),((FMINS_BASS_8>>8)&$FF)
(1)  192/  88D19A : F200 0000                   dc.b FMINS_BASS_8&$FF,$00,$00,$00
(1)  193/  88D19E : (MACRO)             	gInsPsg 0,$40,$08,$10,$01,$01,$00
(1)  193/  88D19E : 8000 4008                   dc.b $80,0,$40,$08
(1)  193/  88D1A2 : 1001 0100                   dc.b $10,$01,$01,$00
(1)  194/  88D1A6 : (MACRO)             	gInsNull;gInsPsgN 0,$40,$08,$10,$01,$01,$00,%110
(1)  194/  88D1A6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  194/  88D1AA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  195/  88D1AE : (MACRO)             	gInsPwm -17,SmpIns_VctrSnare,%000
(1)  195/  88D1AE : D0EF 0209                   dc.b $D0|%000,-17,((SMPINS_VCTRSNARE>>24)&$FF),((SMPINS_VCTRSNARE>>16)&$FF)
(1)  195/  88D1B2 : 7DC8 0000                   dc.b ((SMPINS_VCTRSNARE>>8)&$FF),SMPINS_VCTRSNARE&$FF,0,0
(1)  196/  88D1B6 : (MACRO)             	gInsPwm -17,SmpIns_VctrKick,%000
(1)  196/  88D1B6 : D0EF 0209                   dc.b $D0|%000,-17,((SMPINS_VCTRKICK>>24)&$FF),((SMPINS_VCTRKICK>>16)&$FF)
(1)  196/  88D1BA : 9B0C 0000                   dc.b ((SMPINS_VCTRKICK>>8)&$FF),SMPINS_VCTRKICK&$FF,0,0
(1)  197/  88D1BE : (MACRO)             	gInsFm3 0,FmIns_Sp_Closedhat
(1)  197/  88D1BE : B000 8957                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  197/  88D1C2 : 8200 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  198/  88D1C6 : (MACRO)             	gInsFm3 0,FmIns_Sp_Openhat
(1)  198/  88D1C6 : B000 8957                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  198/  88D1CA : 5A00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  199/  88D1CE : (MACRO)             	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  199/  88D1CE : D1EF 020A                   dc.b $D0|%001,-17,((SMPINS_VCTRBRASS>>24)&$FF),((SMPINS_VCTRBRASS>>16)&$FF)
(1)  199/  88D1D2 : 197C 0000                   dc.b ((SMPINS_VCTRBRASS>>8)&$FF),SMPINS_VCTRBRASS&$FF,0,0
(1)  200/  88D1D6 :                     .ins_e:
(1)  201/  88D1D6 :                     
(1)  202/  88D1D6 :                     GemaTrk_TEST_3:
(1)  203/  88D1D6 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  203/  88D1D6 : 0088 D1E2                   dc.l .BLK
(1)  203/  88D1DA : 0088 D1F0                   dc.l .PAT
(1)  203/  88D1DE : 0088 EA80                   dc.l .INS
(1)  204/  88D1E2 :                     .blk:
(1)  205/  88D1E2 :                     	binclude "sound/tracks/gigalo_blk.bin"
(1)  206/  88D1EF :                     	align 2
(1)  207/  88D1F0 :                     .pat:
(1)  208/  88D1F0 :                     	binclude "sound/tracks/gigalo_patt.bin"
(1)  209/  88EA80 :                     	align 2
(1)  210/  88EA80 :                     .ins:
(1)  211/  88EA80 : (MACRO)             	gInsPsg 0,$10,$04,$20,$06,$08,$00
(1)  211/  88EA80 : 8000 1004                   dc.b $80,0,$10,$04
(1)  211/  88EA84 : 2006 0800                   dc.b $20,$06,$08,$00
(1)  212/  88EA88 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$04,$20,$00,%100
(1)  212/  88EA88 : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  212/  88EA8C : 0004 2000                   dc.b $00,$04,$20,$00
(1)  213/  88EA90 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$04,$20,$00,%101
(1)  213/  88EA90 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  213/  88EA94 : 0004 2000                   dc.b $00,$04,$20,$00
(1)  214/  88EA98 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$04,$40,$00,%110
(1)  214/  88EA98 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  214/  88EA9C : 0004 4000                   dc.b $00,$04,$40,$00
(1)  215/  88EAA0 :                     
(1)  216/  88EAA0 :                     GemaTrk_TEST_4:
(1)  217/  88EAA0 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  217/  88EAA0 : 0088 EAAC                   dc.l .BLK
(1)  217/  88EAA4 : 0088 EABE                   dc.l .PAT
(1)  217/  88EAA8 : 0088 FFA4                   dc.l .INS
(1)  218/  88EAAC :                     .blk:
(1)  219/  88EAAC :                     	binclude "sound/tracks/temple_blk.bin"
(1)  220/  88EABE :                     	align 2
(1)  221/  88EABE :                     .pat:
(1)  222/  88EABE :                     	binclude "sound/tracks/temple_patt.bin"
(1)  223/  88FFA4 :                     	align 2
(1)  224/  88FFA4 :                     .ins:
(1)  225/  88FFA4 : (MACRO)             	gInsPsg 0,$00,$08,$20,$06,$03,$00
(1)  225/  88FFA4 : 8000 0008                   dc.b $80,0,$00,$08
(1)  225/  88FFA8 : 2006 0300                   dc.b $20,$06,$03,$00
(1)  226/  88FFAC : (MACRO)             	gInsPsg 0,$00,$00,$30,$04,$04,$00
(1)  226/  88FFAC : 8000 0000                   dc.b $80,0,$00,$00
(1)  226/  88FFB0 : 3004 0400                   dc.b $30,$04,$04,$00
(1)  227/  88FFB4 : (MACRO)             	gInsPsgN 0,$00,$30,$08,$10,$38,$01,%101
(1)  227/  88FFB4 : 9500 0030                   dc.b $90|%101,0,$00,$30
(1)  227/  88FFB8 : 0810 3801                   dc.b $08,$10,$38,$01
(1)  228/  88FFBC :                     
(1)  229/  88FFBC :                     GemaTrk_TEST_5:
(1)  230/  88FFBC : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  230/  88FFBC : 0088 FFC8                   dc.l .BLK
(1)  230/  88FFC0 : 0088 FFD0                   dc.l .PAT
(1)  230/  88FFC4 : 0089 07F8                   dc.l .INS
(1)  231/  88FFC8 :                     .blk:
(1)  232/  88FFC8 :                     	binclude "sound/tracks/brinstr_blk.bin"
(1)  233/  88FFD0 :                     	align 2
(1)  234/  88FFD0 :                     .pat:
(1)  235/  88FFD0 :                     	binclude "sound/tracks/brinstr_patt.bin"
(1)  236/  8907F7 :                     	align 2
(1)  237/  8907F8 :                     .ins:
(1)  238/  8907F8 : (MACRO)             	gInsPsg 0,$40,$08,$20,$01,$04,$00
(1)  238/  8907F8 : 8000 4008                   dc.b $80,0,$40,$08
(1)  238/  8907FC : 2001 0400                   dc.b $20,$01,$04,$00
(1)  239/  890800 : (MACRO)             	gInsPsgN 0,$10,$08,$20,$02,$01,$00,%011
(1)  239/  890800 : 9300 1008                   dc.b $90|%011,0,$10,$08
(1)  239/  890804 : 2002 0100                   dc.b $20,$02,$01,$00
(1)  240/  890808 :                     
(1)  241/  890808 :                     GemaTrk_TEST_6:
(1)  242/  890808 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  242/  890808 : 0089 0814                   dc.l .BLK
(1)  242/  89080C : 0089 081C                   dc.l .PAT
(1)  242/  890810 : 0089 23B4                   dc.l .INS
(1)  243/  890814 :                     .blk:
(1)  244/  890814 :                     	binclude "sound/tracks/cirno_blk.bin"
(1)  245/  89081B :                     	align 2
(1)  246/  89081C :                     .pat:
(1)  247/  89081C :                     	binclude "sound/tracks/cirno_patt.bin"
(1)  248/  8923B4 :                     	align 2
(1)  249/  8923B4 :                     .ins:
(1)  250/  8923B4 : (MACRO)             	gInsFm -12,FmIns_PianoM1
(1)  250/  8923B4 : A0F4 8959                   dc.b $A0,-12,((FMINS_PIANOM1>>16)&$FF),((FMINS_PIANOM1>>8)&$FF)
(1)  250/  8923B8 : 7200 0000                   dc.b FMINS_PIANOM1&$FF,$00,$00,$00
(1)  251/  8923BC : (MACRO)             	gInsNull
(1)  251/  8923BC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  251/  8923C0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  252/  8923C4 : (MACRO)             	gInsFm -12,FmIns_Bass_4
(1)  252/  8923C4 : A0F4 8957                   dc.b $A0,-12,((FMINS_BASS_4>>16)&$FF),((FMINS_BASS_4>>8)&$FF)
(1)  252/  8923C8 : D200 0000                   dc.b FMINS_BASS_4&$FF,$00,$00,$00
(1)  253/  8923CC : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$40,$00,%110
(1)  253/  8923CC : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  253/  8923D0 : 0000 4000                   dc.b $00,$00,$40,$00
(1)  254/  8923D4 : (MACRO)             	gInsDac +12,DacIns_wegot_kick,0
(1)  254/  8923D4 : C00C 89AC                   dc.b $C0|0,+12,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  254/  8923D8 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  255/  8923DC : (MACRO)             	gInsDac +12,DacIns_wegot_kick,0
(1)  255/  8923DC : C00C 89AC                   dc.b $C0|0,+12,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  255/  8923E0 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  256/  8923E4 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$40,$00,%110
(1)  256/  8923E4 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  256/  8923E8 : 0000 4000                   dc.b $00,$00,$40,$00
(1)  257/  8923EC : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$08,$00,%100
(1)  257/  8923EC : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  257/  8923F0 : 0000 0800                   dc.b $00,$00,$08,$00
(1)  258/  8923F4 : (MACRO)             	gInsDac +6,DacIns_Snare_1,0
(1)  258/  8923F4 : C006 89B4                   dc.b $C0|0,+6,((DACINS_SNARE_1>>16)&$FF),((DACINS_SNARE_1>>8)&$FF)
(1)  258/  8923F8 : 4400 0000                   dc.b DACINS_SNARE_1&$FF,0,0,0
(1)  259/  8923FC : (MACRO)             	gInsFm -12,FmIns_Marimba
(1)  259/  8923FC : A0F4 895A                   dc.b $A0,-12,((FMINS_MARIMBA>>16)&$FF),((FMINS_MARIMBA>>8)&$FF)
(1)  259/  892400 : F200 0000                   dc.b FMINS_MARIMBA&$FF,$00,$00,$00
(1)  260/  892404 : (MACRO)             	gInsPsg 0,$10,$20,$40,$01,$01,$00
(1)  260/  892404 : 8000 1020                   dc.b $80,0,$10,$20
(1)  260/  892408 : 4001 0100                   dc.b $40,$01,$01,$00
(1)  261/  89240C : (MACRO)             	gInsNull
(1)  261/  89240C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  261/  892410 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  262/  892414 : (MACRO)             	gInsNull
(1)  262/  892414 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  262/  892418 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  263/  89241C : (MACRO)             	gInsNull
(1)  263/  89241C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  263/  892420 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  264/  892424 : (MACRO)             	gInsNull
(1)  264/  892424 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  264/  892428 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  265/  89242C : (MACRO)             	gInsNull
(1)  265/  89242C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  265/  892430 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  266/  892434 :                     
(1)  267/  892434 :                     ; ------------------------------------------------------------
(1)  268/  892434 :                     
(1)  269/  892434 :                     GemaTrk_BodyOver:
(1)  270/  892434 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  270/  892434 : 0089 2440                   dc.l .BLK
(1)  270/  892438 : 0089 2456                   dc.l .PAT
(1)  270/  89243C : 0089 2C4E                   dc.l .INS
(1)  271/  892440 :                     .blk:
(1)  272/  892440 :                     	binclude "sound/tracks/bodyover_blk.bin"
(1)  273/  892455 :                     	align 2
(1)  274/  892456 :                     .pat:
(1)  275/  892456 :                     	binclude "sound/tracks/bodyover_patt.bin"
(1)  276/  892C4D :                     	align 2
(1)  277/  892C4E :                     .ins:
(1)  278/  892C4E : (MACRO)             	gInsPwm 0,SmpIns_Nadie,%10
(1)  278/  892C4E : D200 0205                   dc.b $D0|%10,0,((SMPINS_NADIE>>24)&$FF),((SMPINS_NADIE>>16)&$FF)
(1)  278/  892C52 : 4270 0000                   dc.b ((SMPINS_NADIE>>8)&$FF),SMPINS_NADIE&$FF,0,0
(1)  279/  892C56 : (MACRO)             	gInsPwm 0,SmpIns_Kick,%10
(1)  279/  892C56 : D200 0209                   dc.b $D0|%10,0,((SMPINS_KICK>>24)&$FF),((SMPINS_KICK>>16)&$FF)
(1)  279/  892C5A : 01B8 0000                   dc.b ((SMPINS_KICK>>8)&$FF),SMPINS_KICK&$FF,0,0
(1)  280/  892C5E : (MACRO)             	gInsPwm 0,SmpIns_Snare_2,%00
(1)  280/  892C5E : D000 020A                   dc.b $D0|%00,0,((SMPINS_SNARE_2>>24)&$FF),((SMPINS_SNARE_2>>16)&$FF)
(1)  280/  892C62 : 4864 0000                   dc.b ((SMPINS_SNARE_2>>8)&$FF),SMPINS_SNARE_2&$FF,0,0
(1)  281/  892C66 : (MACRO)             	gInsFm -24,FmIns_Bass_groove_2
(1)  281/  892C66 : A0E8 895A                   dc.b $A0,-24,((FMINS_BASS_GROOVE_2>>16)&$FF),((FMINS_BASS_GROOVE_2>>8)&$FF)
(1)  281/  892C6A : 1200 0000                   dc.b FMINS_BASS_GROOVE_2&$FF,$00,$00,$00
(1)  282/  892C6E : (MACRO)             	gInsFm -36,FmIns_Ding_Baseball
(1)  282/  892C6E : A0DC 8959                   dc.b $A0,-36,((FMINS_DING_BASEBALL>>16)&$FF),((FMINS_DING_BASEBALL>>8)&$FF)
(1)  282/  892C72 : 1200 0000                   dc.b FMINS_DING_BASEBALL&$FF,$00,$00,$00
(1)  283/  892C76 : (MACRO)             	gInsFm 0,FmIns_Trumpet_1
(1)  283/  892C76 : A000 8958                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  283/  892C7A : 7200 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  284/  892C7E : (MACRO)             	gInsFm3 0,FmIns_Sp_ClosedHat
(1)  284/  892C7E : B000 8957                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  284/  892C82 : 8200 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  285/  892C86 : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  285/  892C86 : B000 8957                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  285/  892C8A : 5A00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  286/  892C8E : (MACRO)             	gInsPsg +12,$00,$00,$00,$00,$02,0
(1)  286/  892C8E : 800C 0000                   dc.b $80,+12,$00,$00
(1)  286/  892C92 : 0000 0200                   dc.b $00,$00,$02,0
(1)  287/  892C96 :                     
(1)  288/  892C96 :                     GemaTrk_MOVEME:
(1)  289/  892C96 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  289/  892C96 : 0089 2CA2                   dc.l .BLK
(1)  289/  892C9A : 0089 2CBA                   dc.l .PAT
(1)  289/  892C9E : 0089 3B30                   dc.l .INS
(1)  290/  892CA2 :                     .blk:
(1)  291/  892CA2 :                     	binclude "sound/tracks/moveme_blk.bin"
(1)  292/  892CB9 :                     	align 2
(1)  293/  892CBA :                     .pat:
(1)  294/  892CBA :                     	binclude "sound/tracks/moveme_patt.bin"
(1)  295/  893B2F :                     	align 2
(1)  296/  893B30 :                     .ins:
(1)  297/  893B30 : (MACRO)             	gInsPwm 0,SmpIns_MoveMe_Hit,%10
(1)  297/  893B30 : D200 0207                   dc.b $D0|%10,0,((SMPINS_MOVEME_HIT>>24)&$FF),((SMPINS_MOVEME_HIT>>16)&$FF)
(1)  297/  893B34 : A990 0000                   dc.b ((SMPINS_MOVEME_HIT>>8)&$FF),SMPINS_MOVEME_HIT&$FF,0,0
(1)  298/  893B38 : (MACRO)             	gInsFm 0,FmIns_Bass_Duck
(1)  298/  893B38 : A000 895A                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(1)  298/  893B3C : 7200 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(1)  299/  893B40 : (MACRO)             	gInsPwm 0,SmpIns_MoveMe_Brass,%11
(1)  299/  893B40 : D300 0207                   dc.b $D0|%11,0,((SMPINS_MOVEME_BRASS>>24)&$FF),((SMPINS_MOVEME_BRASS>>16)&$FF)
(1)  299/  893B44 : D84C 0000                   dc.b ((SMPINS_MOVEME_BRASS>>8)&$FF),SMPINS_MOVEME_BRASS&$FF,0,0
(1)  300/  893B48 : (MACRO)             	gInsFm 0,FmIns_ClosedHat
(1)  300/  893B48 : A000 8959                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  300/  893B4C : 5200 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  301/  893B50 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(1)  301/  893B50 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  301/  893B54 : 0000 0400                   dc.b $00,$00,$04,0
(1)  302/  893B58 : (MACRO)             	gInsFm -12,FmIns_HBeat_tom
(1)  302/  893B58 : A0F4 895C                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  302/  893B5C : 5200 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  303/  893B60 : (MACRO)             	gInsPwm 0,SmpIns_Snare_moveme,%10
(1)  303/  893B60 : D200 0209                   dc.b $D0|%10,0,((SMPINS_SNARE_MOVEME>>24)&$FF),((SMPINS_SNARE_MOVEME>>16)&$FF)
(1)  303/  893B64 : 1BB8 0000                   dc.b ((SMPINS_SNARE_MOVEME>>8)&$FF),SMPINS_SNARE_MOVEME&$FF,0,0
(1)  304/  893B68 : (MACRO)             	gInsPwm 0,SmpIns_Kick,%10
(1)  304/  893B68 : D200 0209                   dc.b $D0|%10,0,((SMPINS_KICK>>24)&$FF),((SMPINS_KICK>>16)&$FF)
(1)  304/  893B6C : 01B8 0000                   dc.b ((SMPINS_KICK>>8)&$FF),SMPINS_KICK&$FF,0,0
(1)  305/  893B70 : (MACRO)             	gInsFm -12,FmIns_Trumpet_carnival
(1)  305/  893B70 : A0F4 8958                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  305/  893B74 : 9200 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  306/  893B78 : (MACRO)             	gInsPsg 0,$20,$20,$10,$01,$08,0
(1)  306/  893B78 : 8000 2020                   dc.b $80,0,$20,$20
(1)  306/  893B7C : 1001 0800                   dc.b $10,$01,$08,0
(1)  307/  893B80 : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  307/  893B80 : B000 8957                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  307/  893B84 : 5A00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  308/  893B88 : (MACRO)             	gInsNull;gInsPwm -17,SmpIns_MyTime,%10
(1)  308/  893B88 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  308/  893B8C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  309/  893B90 : (MACRO)             	gInsPsg +12,$20,$10,$10,$0C,$0C,0
(1)  309/  893B90 : 800C 2010                   dc.b $80,+12,$20,$10
(1)  309/  893B94 : 100C 0C00                   dc.b $10,$0C,$0C,0
(1)  310/  893B98 : (MACRO)             	gInsPsg 0,$00,$00,$00,$00,$06,0
(1)  310/  893B98 : 8000 0000                   dc.b $80,0,$00,$00
(1)  310/  893B9C : 0000 0600                   dc.b $00,$00,$06,0
(1)  311/  893BA0 : (MACRO)             	gInsNull
(1)  311/  893BA0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  311/  893BA4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  312/  893BA8 : (MACRO)             	gInsNull
(1)  312/  893BA8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  312/  893BAC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  313/  893BB0 : (MACRO)             	gInsNull
(1)  313/  893BB0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  313/  893BB4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  314/  893BB8 : (MACRO)             	gInsNull
(1)  314/  893BB8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  314/  893BBC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  315/  893BC0 : (MACRO)             	gInsNull
(1)  315/  893BC0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  315/  893BC4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  316/  893BC8 :                     
(1)  317/  893BC8 :                     GemaTrk_xtrim:
(1)  318/  893BC8 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  318/  893BC8 : 0089 3BD4                   dc.l .BLK
(1)  318/  893BCC : 0089 3BDA                   dc.l .PAT
(1)  318/  893BD0 : 0089 4584                   dc.l .INS
(1)  319/  893BD4 :                     .blk:
(1)  320/  893BD4 :                     	binclude "sound/tracks/xtrim_blk.bin"
(1)  321/  893BD9 :                     	align 2
(1)  322/  893BDA :                     .pat:
(1)  323/  893BDA :                     	binclude "sound/tracks/xtrim_patt.bin"
(1)  324/  894583 :                     	align 2
(1)  325/  894584 :                     .ins:
(1)  326/  894584 : (MACRO)             	gInsFm 0,FmIns_Bass_calm
(1)  326/  894584 : A000 8958                   dc.b $A0,0,((FMINS_BASS_CALM>>16)&$FF),((FMINS_BASS_CALM>>8)&$FF)
(1)  326/  894588 : 5200 0000                   dc.b FMINS_BASS_CALM&$FF,$00,$00,$00
(1)  327/  89458C : (MACRO)             	gInsFm 0,FmIns_ClosedHat
(1)  327/  89458C : A000 8959                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  327/  894590 : 5200 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  328/  894594 : (MACRO)             	gInsPsg 0,$00,$20,$00,$04,$04,0
(1)  328/  894594 : 8000 0020                   dc.b $80,0,$00,$20
(1)  328/  894598 : 0004 0400                   dc.b $00,$04,$04,0
(1)  329/  89459C : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  329/  89459C : B000 8957                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  329/  8945A0 : 5A00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  330/  8945A4 : (MACRO)             	gInsDac 0,DacIns_wegot_kick,%10
(1)  330/  8945A4 : C200 89AC                   dc.b $C0|%10,0,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  330/  8945A8 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  331/  8945AC :                     
(1)  332/  8945AC :                     ; ------------------------------------------------------------
(1)  333/  8945AC :                     ; FIRST TRACK
(1)  334/  8945AC :                     
(1)  335/  8945AC :                     GemaTrk_TEST_0:
(1)  336/  8945AC : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  336/  8945AC : 0089 45B8                   dc.l .BLK
(1)  336/  8945B0 : 0089 45BB                   dc.l .PAT
(1)  336/  8945B4 : 0089 467F                   dc.l .INS
(1)  337/  8945B8 :                     
(1)  338/  8945B8 :                     ; Max. 24 blocks
(1)  339/  8945B8 :                     .blk:
(1)  340/  8945B8 :                     	binclude "sound/tracks/test_blk.bin"
(1)  341/  8945BB :                     ; Max. 24 patterns
(1)  342/  8945BB :                     .pat:
(1)  343/  8945BB :                     	binclude "sound/tracks/test_patt.bin"
(1)  344/  89467F :                     
(1)  345/  89467F :                     ; Max. 16 instruments
(1)  346/  89467F :                     ; Starting from 1.
(1)  347/  89467F :                     .ins:
(1)  348/  89467F :                     ; 	gInsDac 0,DacIns_TESTINS,0
(1)  349/  89467F :                     
(1)  350/  89467F :                     ; 	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  351/  89467F :                     ; 	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  352/  89467F :                     
(1)  353/  89467F : (MACRO)             	gInsPsg 0,$00,$00,$00,$00,$00,0
(1)  353/  89467F : 8000 0000                   dc.b $80,0,$00,$00
(1)  353/  894683 : 0000 0000                   dc.b $00,$00,$00,0
(1)  354/  894687 : (MACRO)             	gInsFm -12,FmIns_Trumpet_2
(1)  354/  894687 : A0F4 895A                   dc.b $A0,-12,((FMINS_TRUMPET_2>>16)&$FF),((FMINS_TRUMPET_2>>8)&$FF)
(1)  354/  89468B : B200 0000                   dc.b FMINS_TRUMPET_2&$FF,$00,$00,$00
(1)  355/  89468F :                     ; 	gInsPsgN +12,$20,$20,$10,$00,$04,0,%011
(1)  356/  89468F :                     
(1)  357/  89468F : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  357/  89468F : B000 8957                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  357/  894693 : 5A00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  358/  894697 : (MACRO)             	gInsDac -12,DacIns_Snare_1,0
(1)  358/  894697 : C0F4 89B4                   dc.b $C0|0,-12,((DACINS_SNARE_1>>16)&$FF),((DACINS_SNARE_1>>8)&$FF)
(1)  358/  89469B : 4400 0000                   dc.b DACINS_SNARE_1&$FF,0,0,0
(1)  359/  89469F : (MACRO)             	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  359/  89469F : D1EF 020A                   dc.b $D0|%001,-17,((SMPINS_VCTRBRASS>>24)&$FF),((SMPINS_VCTRBRASS>>16)&$FF)
(1)  359/  8946A3 : 197C 0000                   dc.b ((SMPINS_VCTRBRASS>>8)&$FF),SMPINS_VCTRBRASS&$FF,0,0
(1)  360/  8946A7 :                     
(1)  361/  8946A7 :                     ; ------------------------------------------------------------
(1)  362/  8946A7 :                     
(1)  363/  8946A7 :                     GemaTrk_MAIN_0:
(1)  364/  8946A7 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  364/  8946A7 : 0089 46B3                   dc.l .BLK
(1)  364/  8946AB : 0089 46C1                   dc.l .PAT
(1)  364/  8946AF : 0089 5712                   dc.l .INS
(1)  365/  8946B3 :                     .blk:
(1)  366/  8946B3 :                     	binclude "sound/tracks/main0_blk.bin"
(1)  367/  8946C1 :                     .pat:
(1)  368/  8946C1 :                     	binclude "sound/tracks/main0_patt.bin"
(1)  369/  895712 :                     .ins:
(1)  370/  895712 : (MACRO)             	gInsDac   0,DacIns_wegot_kick,0
(1)  370/  895712 : C000 89AC                   dc.b $C0|0,0,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  370/  895716 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  371/  89571A : (MACRO)             	gInsPsgN  0,$00,$00,$00,$00,$0A,0,%101 ;gInsDac   0,DacIns_Snare_scd,0
(1)  371/  89571A : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  371/  89571E : 0000 0A00                   dc.b $00,$00,$0A,0
(1)  372/  895722 : (MACRO)             	gInsFm  -36,FmIns_Guitar_bball
(1)  372/  895722 : A0DC 895C                   dc.b $A0,-36,((FMINS_GUITAR_BBALL>>16)&$FF),((FMINS_GUITAR_BBALL>>8)&$FF)
(1)  372/  895726 : 9200 0000                   dc.b FMINS_GUITAR_BBALL&$FF,$00,$00,$00
(1)  373/  89572A : (MACRO)             	gInsFm3   0,FmIns_Sp_OpenHat
(1)  373/  89572A : B000 8957                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  373/  89572E : 5A00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  374/  895732 : (MACRO)             	gInsFm    0,FmIns_Bass_low_1
(1)  374/  895732 : A000 895C                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  374/  895736 : D200 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  375/  89573A : (MACRO)             	gInsFm   0,FmIns_Sewer_1
(1)  375/  89573A : A000 895C                   dc.b $A0,0,((FMINS_SEWER_1>>16)&$FF),((FMINS_SEWER_1>>8)&$FF)
(1)  375/  89573E : F200 0000                   dc.b FMINS_SEWER_1&$FF,$00,$00,$00
(1)  376/  895742 : (MACRO)             	gInsPsg  0,$20,$40,$00,$02,$08,0
(1)  376/  895742 : 8000 2040                   dc.b $80,0,$20,$40
(1)  376/  895746 : 0002 0800                   dc.b $00,$02,$08,0
(1)  377/  89574A : (MACRO)             	gInsFm   0,FmIns_Piano_m1
(1)  377/  89574A : A000 895C                   dc.b $A0,0,((FMINS_PIANO_M1>>16)&$FF),((FMINS_PIANO_M1>>8)&$FF)
(1)  377/  89574E : 7200 0000                   dc.b FMINS_PIANO_M1&$FF,$00,$00,$00
(1)  378/  895752 : (MACRO)             	gInsFm   0,FmIns_Hats_1
(1)  378/  895752 : A000 895C                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(1)  378/  895756 : B200 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(1)  379/  89575A :                     
     101/  89575A :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/  89575A :                     ; ====================================================================
(1)    2/  89575A :                     ; --------------------------------------------------------
(1)    3/  89575A :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/  89575A :                     ;
(1)    5/  89575A :                     ; This must be located at the 68k's 880000 area.
(1)    6/  89575A :                     ;
(1)    7/  89575A :                     ; Use the included FM_EDITOR.bin ROM to make your
(1)    8/  89575A :                     ; own instruments/patches
(1)    9/  89575A :                     ; --------------------------------------------------------
(1)   10/  89575A :                     
(1)   11/  89575A :                     ; Notes:
(1)   12/  89575A :                     ;
(1)   13/  89575A :                     ; Savestate FM data is located at: $2478
(1)   14/  89575A :                     ;
(1)   15/  89575A :                     ; Sizes:
(1)   16/  89575A :                     ; Normal FM ins: $20
(1)   17/  89575A :                     ; Special FM ins: $28
(1)   18/  89575A :                     ;
(1)   19/  89575A :                     ; REGISTER FORMAT:
(1)   20/  89575A :                     ; dc.b $30,$34,$38,$3C
(1)   21/  89575A :                     ; dc.b $40,$44,$48,$4C
(1)   22/  89575A :                     ; dc.b $50,$54,$58,$5C
(1)   23/  89575A :                     ; dc.b $60,$64,$68,$6C
(1)   24/  89575A :                     ; dc.b $70,$74,$78,$7C
(1)   25/  89575A :                     ; dc.b $80,$84,$88,$8C
(1)   26/  89575A :                     ; dc.b $90,$94,$98,$9C
(1)   27/  89575A :                     ; dc.b $B0,$B4,$22,$28
(1)   28/  89575A :                     ; ** Extra words for FM3 special:
(1)   29/  89575A :                     ; dc.w OP1,OP2,OP3,OP4
(1)   30/  89575A :                     ;
(1)   31/  89575A :                     ; $22 LFO: %0000evvv
(1)   32/  89575A :                     ; e - Enable
(1)   33/  89575A :                     ; v - Value
(1)   34/  89575A :                     ;
(1)   35/  89575A :                     ; $28 KEYS: %oooo0000
(1)   36/  89575A :                     ; o - Operators 4-1
(1)   37/  89575A :                     
(1)   38/  89575A :                     
(1)   39/  89575A :                     
(1)   40/  89575A :                     ; FM3 Special
(1)   41/  89575A :                     FmIns_Sp_OpenHat:
(1)   42/  89575A :                     		binclude "sound/instr/fm/fm3_openhat.gsx",$2478,$28
(1)   43/  895782 :                     FmIns_Sp_ClosedHat:
(1)   44/  895782 :                     		binclude "sound/instr/fm/fm3_closedhat.gsx",$2478,$28
(1)   45/  8957AA :                     FmIns_Sp_Cowbell:
(1)   46/  8957AA :                     		binclude "sound/instr/fm/fm3_cowbell.gsx",$2478,$28
(1)   47/  8957D2 :                     FmIns_Bass_4:
(1)   48/  8957D2 :                     		binclude "sound/instr/fm/bass_4.gsx",$2478,$20
(1)   49/  8957F2 :                     FmIns_Bass_8:
(1)   50/  8957F2 :                     		binclude "sound/instr/fm/bass_8.gsx",$2478,$20
(1)   51/  895812 :                     FmIns_Synth_Plus:
(1)   52/  895812 :                     		binclude "sound/instr/fm/OLD_synthplus.gsx",$2478,$20
(1)   53/  895832 :                     FmIns_Bass_club:
(1)   54/  895832 :                     		binclude "sound/instr/fm/OLD_bass_club.gsx",$2478,$20
(1)   55/  895852 :                     FmIns_Bass_calm:
(1)   56/  895852 :                     		binclude "sound/instr/fm/bass_calm.gsx",$2478,$20
(1)   57/  895872 :                     FmIns_Trumpet_1:
(1)   58/  895872 :                     		binclude "sound/instr/fm/OLD_trumpet_1.gsx",$2478,$20
(1)   59/  895892 :                     FmIns_Trumpet_carnival:
(1)   60/  895892 :                     		binclude "sound/instr/fm/OLD_trumpet_carnivl.gsx",$2478,$20
(1)   61/  8958B2 :                     FmIns_brass_eur:
(1)   62/  8958B2 :                     		binclude "sound/instr/fm/OLD_brass_eur.gsx",$2478,$20
(1)   63/  8958D2 :                     FmIns_Bass_Oil:
(1)   64/  8958D2 :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   65/  8958F2 :                     FmIns_Organ_Ito:
(1)   66/  8958F2 :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)   67/  895912 :                     FmIns_Ding_Baseball:
(1)   68/  895912 :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)   69/  895932 :                     FmIns_DrumKick_gem:
(1)   70/  895932 :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)   71/  895952 :                     FmIns_ClosedHat:
(1)   72/  895952 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)   73/  895972 :                     FmIns_PianoM1:
(1)   74/  895972 :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   75/  895992 :                     FmIns_Bass_1:
(1)   76/  895992 :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   77/  8959B2 :                     FmIns_Bass_2:
(1)   78/  8959B2 :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   79/  8959D2 :                     FmIns_Bass_donna:
(1)   80/  8959D2 :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   81/  8959F2 :                     FmIns_Bass_groove:
(1)   82/  8959F2 :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   83/  895A12 :                     FmIns_Bass_groove_2:
(1)   84/  895A12 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   85/  895A32 :                     FmIns_Bass_groove_gem:
(1)   86/  895A32 :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   87/  895A52 :                     FmIns_Bass_italo:
(1)   88/  895A52 :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   89/  895A72 :                     FmIns_Bass_duck:
(1)   90/  895A72 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   91/  895A92 :                     FmIns_Piano_Aqua:
(1)   92/  895A92 :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   93/  895AB2 :                     FmIns_Trumpet_2:
(1)   94/  895AB2 :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)   95/  895AD2 :                     FmIns_Trumpet_puy:
(1)   96/  895AD2 :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)   97/  895AF2 :                     FmIns_Marimba:
(1)   98/  895AF2 :                     		binclude "sound/instr/fm/marimba.gsx",$2478,$20
(1)   99/  895B12 :                     FmIns_Ambient_dark:
(1)  100/  895B12 :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  101/  895B32 :                     FmIns_Ambient_spook:
(1)  102/  895B32 :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  103/  895B52 :                     FmIns_Ambient_3:
(1)  104/  895B52 :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  105/  895B72 :                     FmIns_Ding_toy:
(1)  106/  895B72 :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  107/  895B92 :                     FmIns_Brass_Puy:
(1)  108/  895B92 :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  109/  895BB2 :                     FmIns_Flaute_cave:
(1)  110/  895BB2 :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  111/  895BD2 :                     FmIns_Banjo_puy:
(1)  112/  895BD2 :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  113/  895BF2 :                     FmIns_PSynth_plus:
(1)  114/  895BF2 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  115/  895C12 :                     FmIns_Ding_1:
(1)  116/  895C12 :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  117/  895C32 :                     FmIns_Trombone_gem:
(1)  118/  895C32 :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  119/  895C52 :                     FmIns_HBeat_tom:
(1)  120/  895C52 :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  121/  895C72 :                     
(1)  122/  895C72 :                     
(1)  123/  895C72 :                     FmIns_Piano_m1:
(1)  124/  895C72 :                     		binclude "sound/instr/fm/piano_m1.gsx",$2478,$20
(1)  125/  895C92 :                     FmIns_Guitar_bball:
(1)  126/  895C92 :                     		binclude "sound/instr/fm/guitar_bball.gsx",$2478,$20
(1)  127/  895CB2 :                     FmIns_Hats_1:
(1)  128/  895CB2 :                     		binclude "sound/instr/fm/fm_hats_spot.bin"
(1)  129/  895CD2 :                     FmIns_Bass_low_1:
(1)  130/  895CD2 :                     		binclude "sound/instr/fm/bass_low_1.bin"
(1)  131/  895CF2 :                     FmIns_Sewer_1:
(1)  132/  895CF2 :                     		binclude "sound/instr/fm/sewer_1.bin"
(1)  133/  895D12 :                     FmIns_Piano_Hard:
(1)  134/  895D12 :                     		binclude "sound/instr/fm/piano_hard.bin"
(1)  135/  895D32 :                     
     102/  895D32 :                     		include "sound/smpl_dac.asm"		; GEMA: DAC samples
(1)    1/  895D32 :                     ; ====================================================================
(1)    2/  895D32 :                     ; --------------------------------------------------------
(1)    3/  895D32 :                     ; GEMA/Nikona DAC instruments "digital"
(1)    4/  895D32 :                     ;
(1)    5/  895D32 :                     ; This must be located at the 68k's 900000 area.
(1)    6/  895D32 :                     ; ** 68K BANK 0 only **
(1)    7/  895D32 :                     ;
(1)    8/  895D32 :                     ; BASE Samplerate is at 16000hz
(1)    9/  895D32 :                     ; --------------------------------------------------------
(1)   10/  895D32 :                     
(1)   11/  895D32 :                     ; Special sample data macro
(1)   12/  895D32 :                     gSmpHead macro len,loop
(1)   13/  895D32 :                     	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   14/  895D32 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   15/  895D32 :                     	endm
(1)   16/  895D32 :                     
(1)   17/  895D32 :                     	align $8000	; <-- just to be safe.
(1)   18/  898000 :                     DacIns_wegot_crash:
(1)   19/  898000 : (MACRO)             	gSmpHead .end-.start,0
(1)   19/  898000 : C42C 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   19/  898003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   20/  898006 :                     .start:	binclude "sound/instr/smpl/wegot_crash.wav",$2C
(1)   21/  89ACCA :                     .end:
(1)   22/  89ACCA :                     DacIns_wegot_kick:
(1)   23/  89ACCA : (MACRO)             	gSmpHead .end-.start,0
(1)   23/  89ACCA : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   23/  89ACCD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   24/  89ACD0 :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   25/  89B444 :                     .end:
(1)   26/  89B444 :                     
(1)   27/  89B444 :                     DacIns_Snare_1:
(1)   28/  89B444 : (MACRO)             	gSmpHead .end-.start,0
(1)   28/  89B444 : 2411 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   28/  89B447 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   29/  89B44A :                     .start:	binclude "sound/instr/smpl/snare_1.wav",$2C
(1)   30/  89C56E :                     .end:
(1)   31/  89C56E :                     
(1)   32/  89C56E :                     DacIns_TESTINS:
(1)   33/  89C56E : (MACRO)             	gSmpHead .end-.start,0
(1)   33/  89C56E : 00E7 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   33/  89C571 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   34/  89C574 :                     .start:	binclude "sound/instr/smpl/test.wav",$2C
(1)   35/  8AAC74 :                     .end:
(1)   36/  8AAC74 :                     
(1)   37/  8AAC74 :                     ; TEST SAMPLE
(1)   38/  8AAC74 :                     TEST_WAVE:
(1)   39/  8AAC74 :                     	binclude "sound/instr/smpl/test.wav",$2C
(1)   40/  8B9374 :                     TEST_WAVE_E:
(1)   41/  8B9374 :                     	align 2
(1)   42/  8B9374 :                     
     103/   39374 :                     		dephase
     104/   39374 :                     		align 2
     105/   39374 :                     
     106/   39374 :                     ; ====================================================================
     107/   39374 :                     ; ----------------------------------------------------------------
     108/   39374 :                     ; 68K DATA BANKs at $900000 1MB max
     109/   39374 :                     ; ----------------------------------------------------------------
     110/   39374 :                     
     111/   39374 :                     ; ---------------------------------------------
     112/   39374 :                     ; BANK 0
     113/   39374 :                     ; ---------------------------------------------
     114/   39374 :                     
     115/  939374 :                     		phase $900000+*			; ** Currently this one only.
     116/  939374 :                     MDBNK0_START:
     117/  939374 :                     		include "data/md_bank0.asm"	; <-- 68K ONLY bank data
(1)    1/  939374 :                     ; ====================================================================
(1)    2/  939374 :                     ; ----------------------------------------------------------------
(1)    3/  939374 :                     ; BANK 0 of 68k data ($900000-$9FFFFF)
(1)    4/  939374 :                     ; for big stuff like maps, levels, etc.
(1)    5/  939374 :                     ;
(1)    6/  939374 :                     ; For graphics use DMA and place your files at
(1)    7/  939374 :                     ; md_dma.asm (Watch out for the $20000 limit.)
(1)    8/  939374 :                     ;
(1)    9/  939374 :                     ; Maximum size: $0FFFFF bytes per bank
(1)   10/  939374 :                     ; ----------------------------------------------------------------
(1)   11/  939374 :                     
(1)   12/  939374 :                     		include "data/m_palettes.asm"	; All 32X palettes will be here.
(2)    1/  939374 :                     ; ====================================================================
(2)    2/  939374 :                     ; ----------------------------------------------------------------
(2)    3/  939374 :                     ; Put your 32X palettes here
(2)    4/  939374 :                     ;
(2)    5/  939374 :                     ; These are located on a single 68K $900000+ bank
(2)    6/  939374 :                     ;
(2)    7/  939374 :                     ; Labels MUST be aligned by 2
(2)    8/  939374 :                     ; ----------------------------------------------------------------
(2)    9/  939374 :                     
(2)   10/  939374 :                     		align 2
(2)   11/  939374 :                     PalMars_Title:
(2)   12/  939374 :                     		binclude "data/title/mars/bg_mars_pal.bin"
(2)   13/  939574 :                     		align 2
(2)   14/  939574 :                     
(1)   13/  939574 :                     
(1)   14/  939574 :                     ; ----------------------------------------------------------------
(1)   15/  939574 :                     
     118/  939574 :                     MDBNK0_END:
     119/   39574 :                     		dephase
     120/   39574 :                     ; 		org $100000-4			; Fill this bank and
     121/   39574 :                     ; 		dc.b "BNK0"			; add a tag at the end
     122/   39574 :                     
     127/   39574 :                     
     128/   39574 :                     ; ---------------------------------------------
     129/   39574 :                     ; BANK 1
     130/   39574 :                     ; ---------------------------------------------
     131/   39574 :                     
     132/   39574 :                     ; 		phase $900000
     133/   39574 :                     ; 		include "data/md_bank1.asm"
     134/   39574 :                     ; 		dephase
     135/   39574 :                     ; 		org $200000-4
     136/   39574 :                     ; 		dc.b "BNK1"
     137/   39574 :                     
     138/   39574 :                     ; ---------------------------------------------
     139/   39574 :                     ; BANK 2
     140/   39574 :                     ; ---------------------------------------------
     141/   39574 :                     
     142/   39574 :                     ; 		phase $900000
     143/   39574 :                     ; 		include "data/md_bank2.asm"
     144/   39574 :                     ; 		dephase
     145/   39574 :                     ; 		org $300000-4
     146/   39574 :                     ; 		dc.b "BNK2"
     147/   39574 :                     
     148/   39574 :                     ; ---------------------------------------------
     149/   39574 :                     ; BANK 3
     150/   39574 :                     ; ---------------------------------------------
     151/   39574 :                     
     152/   39574 :                     ; 		phase $900000
     153/   39574 :                     ; 		include "data/md_bank3.asm"
     154/   39574 :                     ; 		dephase
     155/   39574 :                     ; 		org $400000-4
     156/   39574 :                     ; 		dc.b "BNK3"
     157/   39574 :                     
     158/   39574 :                     ; ====================================================================
     159/   39574 :                     ; ----------------------------------------------------------------
     160/   39574 :                     ; MD DMA data: Requires RV bit set to 1, BANK-free
     161/   39574 :                     ; ----------------------------------------------------------------
     162/   39574 :                     
     163/   39574 :                     		align 4
     164/   39574 :                     		include "data/md_dma.asm"
(1)    1/   39574 :                     ; ====================================================================
(1)    2/   39574 :                     ; ----------------------------------------------------------------
(1)    3/   39574 :                     ; DMA ROM-DATA Transfer section
(1)    4/   39574 :                     ; 
(1)    5/   39574 :                     ; RV bit must be enabled to read from here
(1)    6/   39574 :                     ; ----------------------------------------------------------------
(1)    7/   39574 :                     
(1)    8/   39574 :                     		align $8000
(1)    9/   40000 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)   10/   41000 :                     ASCII_FONT_e:
(1)   11/   41000 :                     ; Art_MenuFont:
(1)   12/   41000 :                     ; 		binclude "data/title/menu_art.bin"
(1)   13/   41000 :                     ; Art_MenuFont_e:
(1)   14/   41000 :                     ; 		align 2
(1)   15/   41000 :                     
(1)   16/   41000 :                     		align $8000
(1)   17/   48000 :                     ; Art_Title_FG:
(1)   18/   48000 :                     ; 		binclude "data/title/title_art.bin"
(1)   19/   48000 :                     ; Art_Title_FG_e:
(1)   20/   48000 :                     ; 		align 2
(1)   21/   48000 :                     Art_Title_BG:
(1)   22/   48000 :                     		binclude "data/title/bg_art.bin"
(1)   23/   4F200 :                     Art_Title_BG_e:
(1)   24/   4F200 :                     		align 2
(1)   25/   4F200 :                     
(1)   26/   4F200 :                     
(1)   27/   4F200 :                     
(1)   28/   4F200 :                     
     165/   4F200 :                     
     166/   4F200 :                     ; ====================================================================
     167/   4F200 :                     ; ----------------------------------------------------------------
     168/   4F200 :                     ; SH2 SDRAM CODE
     169/   4F200 :                     ; ----------------------------------------------------------------
     170/   4F200 :                     
     171/   4F200 :                     		align 4
     172/   4F200 :                     MARS_RAMDATA:
     173/   4F200 :                     		include "system/mars/code.asm"
(1)    1/   4F200 :                     ; ====================================================================
(1)    2/   4F200 :                     ; ----------------------------------------------------------------
(1)    3/   4F200 :                     ; MARS SH2 SDRAM section, shared for both CPUs
(1)    4/   4F200 :                     ; ----------------------------------------------------------------
(1)    5/   4F200 :                     
(1)    6/   4F200 :                     ; *************************************************
(1)    7/   4F200 :                     ; communication setup:
(1)    8/   4F200 :                     ;
(1)    9/   4F200 :                     ; comm0-comm7  - ** FREE ***
(1)   10/   4F200 :                     ; comm8-comm11 - Used by Z80 for getting it's data
(1)   11/   4F200 :                     ;                packets
(1)   12/   4F200 :                     ; comm12       - Master CPU control
(1)   13/   4F200 :                     ; comm14       - Slave CPU control
(1)   14/   4F200 :                     ; *************************************************
(1)   15/   4F200 :                     
(1)   16/ 6000000 :                     		phase CS3	; Now we are at SDRAM
(1)   17/ 6000000 :                     		cpu SH7600	; Should be SH7095 but this CPU mode works.
(1)   18/ 6000000 :                     
(1)   19/ 6000000 :                     ; ; CPU METER MACRO
(1)   20/ 6000000 :                     ; testme macro color
(1)   21/ 6000000 :                     ; 		mov	#color,r1
(1)   22/ 6000000 :                     ; 		mov	#_vdpreg,r2
(1)   23/ 6000000 :                     ; 		mov	#_vdpreg+bitmapmd,r3
(1)   24/ 6000000 :                     ; -		mov.b	@(vdpsts,r2),r0
(1)   25/ 6000000 :                     ; 		tst	#HBLK,r0
(1)   26/ 6000000 :                     ; 		bt	-
(1)   27/ 6000000 :                     ; 		mov.b	r1,@r3
(1)   28/ 6000000 :                     ; 	endm
(1)   29/ 6000000 :                     
(1)   30/ 6000000 :                     ; ====================================================================
(1)   31/ 6000000 :                     ; ----------------------------------------------------------------
(1)   32/ 6000000 :                     ; Settings
(1)   33/ 6000000 :                     ; ----------------------------------------------------------------
(1)   34/ 6000000 :                     
(1)   35/ 6000000 : =$1                 SH2_DEBUG	equ 1			; Set to 1 too see if CPUs are active using comm counters (0 and 1)
(1)   36/ 6000000 : =$6040000           STACK_MSTR	equ CS3|$40000
(1)   37/ 6000000 : =$603F000           STACK_SLV	equ CS3|$3F000
(1)   38/ 6000000 :                     
(1)   39/ 6000000 :                     ; ====================================================================
(1)   40/ 6000000 :                     ; ----------------------------------------------------------------
(1)   41/ 6000000 :                     ; MARS GLOBAL gbr variables for both SH2
(1)   42/ 6000000 :                     ; ----------------------------------------------------------------
(1)   43/ 6000000 :                     
(1)   44/ 6000000 : (MACRO)             			struct 0
(1)   44/ 6000000 :                     
(1)   44/ 6000000 :                     ;       if WPATCH=1
(1)   44/ 6000000 :                     ; GLBL_LASTPC   set *
(1)   44/ 6000000 :                     ; GLBL_LASTORG  set *
(1)   44/ 6000000 :                     ;               dephase
(1)   44/ 6000000 :                     ;               phase 0
(1)   44/ 6000000 :                     ;       else
(1)   44/ 6000000 : =$6000000           GLBL_LASTPC     set *
(1)   44/   4F200 :                                     dephase
(1)   44/   4F200 : =$4F200             GLBL_LASTORG    set *
(1)   44/       0 :                                     phase 0
(1)   44/       0 :                     ;       endif
(1)   45/       0 :                     marsGbl_PlyPzList_R	ds.l 1	; Current graphic piece to draw
(1)   46/       4 :                     marsGbl_PlyPzList_W	ds.l 1	; Current graphic piece to write
(1)   47/       8 :                     marsGbl_PlyPzList_Start	ds.l 1	; Polygon pieces list Start point
(1)   48/       C :                     marsGbl_PlyPzList_End	ds.l 1	; Polygon pieces list End point
(1)   49/      10 :                     marsGbl_WdgMode		ds.w 1	; Current watchdog task
(1)   50/      12 :                     marsGbl_WdgHold		ds.w 1	; Watchdog pause
(1)   51/      14 :                     marsGbl_WdgReady	ds.w 1
(1)   52/      16 :                     marsGbl_WdgDivLock	ds.w 1	; Tell to Watchdog that we got during mid-division.
(1)   53/      18 :                     marsGbl_PolyBuffNum	ds.w 1	; Polygon-list swap number **SHARED**
(1)   54/      1A :                     marsGbl_PlyPzCntr	ds.w 1	; Number of graphic pieces to draw
(1)   55/      1C :                     marsGbl_XShift		ds.w 1	; Xshift bit at the start of master_loop (TODO: a HBlank list)
(1)   56/      1E :                     marsGbl_WaveEnable	ds.w 1	; General linetable wave effect: Disable/Enable
(1)   57/      20 :                     marsGbl_WaveSpd		ds.w 1	; Linetable wave speed
(1)   58/      22 :                     marsGbl_WaveMax		ds.w 1	; Maximum wave
(1)   59/      24 :                     marsGbl_WaveDeform	ds.w 1	; Wave increment value
(1)   60/      26 :                     marsGbl_WaveTan		ds.w 1	; Linetable wave tan
(1)   61/      28 :                     sizeof_MarsGbl		ds.l 0
(1)   62/      28 : (MACRO)             			finish
(1)   62/       0 :                                     !org GLBL_LASTORG
(1)   62/ 6000000 :                                     phase GLBL_LASTPC
(1)   63/ 6000000 :                     
(1)   64/ 6000000 :                     ; ====================================================================
(1)   65/ 6000000 :                     ; ----------------------------------------------------------------
(1)   66/ 6000000 :                     ; MASTER CPU VECTOR LIST (vbr)
(1)   67/ 6000000 :                     ; ----------------------------------------------------------------
(1)   68/ 6000000 :                     
(1)   69/ 6000000 :                     		align 4
(1)   70/ 6000000 :                     SH2_Master:
(1)   71/ 6000000 : 0600 0F20 0604 0000 		dc.l SH2_M_Entry,STACK_MSTR	; Power PC, Stack
(1)   72/ 6000008 : 0600 0F20 0604 0000 		dc.l SH2_M_Entry,STACK_MSTR	; Reset PC, Stack
(1)   73/ 6000010 : 0600 0324           		dc.l SH2_M_ErrIllg		; Illegal instruction
(1)   74/ 6000014 : 0000 0000           		dc.l 0				; reserved
(1)   75/ 6000018 : 0600 0328           		dc.l SH2_M_ErrInvl		; Invalid slot instruction
(1)   76/ 600001C : 2010 0400           		dc.l $20100400			; reserved
(1)   77/ 6000020 : 2010 0420           		dc.l $20100420			; reserved
(1)   78/ 6000024 : 0600 032C           		dc.l SH2_M_ErrAddr		; CPU address error
(1)   79/ 6000028 : 0600 0330           		dc.l SH2_M_ErrDma		; DMA address error
(1)   80/ 600002C : 0600 0334           		dc.l SH2_M_ErrNmi		; NMI vector
(1)   81/ 6000030 : 0600 0338           		dc.l SH2_M_ErrUser		; User break vector
(1)   82/ 6000034 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0		; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)   83/ 6000058 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)   84/ 600007C : 0000 0000           		dc.l 0
(1)   85/ 6000080 : 0600 0320           		dc.l SH2_M_Error		; Trap user vectors
(1)   86/ 6000084 : 0600 0320           		dc.l SH2_M_Error
(1)   87/ 6000088 : 0600 0320           		dc.l SH2_M_Error
(1)   88/ 600008C : 0600 0320           		dc.l SH2_M_Error
(1)   89/ 6000090 : 0600 0320           		dc.l SH2_M_Error
(1)   90/ 6000094 : 0600 0320           		dc.l SH2_M_Error
(1)   91/ 6000098 : 0600 0320           		dc.l SH2_M_Error
(1)   92/ 600009C : 0600 0320           		dc.l SH2_M_Error
(1)   93/ 60000A0 : 0600 0320           		dc.l SH2_M_Error
(1)   94/ 60000A4 : 0600 0320           		dc.l SH2_M_Error
(1)   95/ 60000A8 : 0600 0320           		dc.l SH2_M_Error
(1)   96/ 60000AC : 0600 0320           		dc.l SH2_M_Error
(1)   97/ 60000B0 : 0600 0320           		dc.l SH2_M_Error
(1)   98/ 60000B4 : 0600 0320           		dc.l SH2_M_Error
(1)   99/ 60000B8 : 0600 0320           		dc.l SH2_M_Error
(1)  100/ 60000BC : 0600 0320           		dc.l SH2_M_Error
(1)  101/ 60000C0 : 0600 0320           		dc.l SH2_M_Error
(1)  102/ 60000C4 : 0600 0320           		dc.l SH2_M_Error
(1)  103/ 60000C8 : 0600 0320           		dc.l SH2_M_Error
(1)  104/ 60000CC : 0600 0320           		dc.l SH2_M_Error
(1)  105/ 60000D0 : 0600 0320           		dc.l SH2_M_Error
(1)  106/ 60000D4 : 0600 0320           		dc.l SH2_M_Error
(1)  107/ 60000D8 : 0600 0320           		dc.l SH2_M_Error
(1)  108/ 60000DC : 0600 0320           		dc.l SH2_M_Error
(1)  109/ 60000E0 : 0600 0320           		dc.l SH2_M_Error
(1)  110/ 60000E4 : 0600 0320           		dc.l SH2_M_Error
(1)  111/ 60000E8 : 0600 0320           		dc.l SH2_M_Error
(1)  112/ 60000EC : 0600 0320           		dc.l SH2_M_Error
(1)  113/ 60000F0 : 0600 0320           		dc.l SH2_M_Error
(1)  114/ 60000F4 : 0600 0320           		dc.l SH2_M_Error
(1)  115/ 60000F8 : 0600 0320           		dc.l SH2_M_Error
(1)  116/ 60000FC : 0600 0320           		dc.l SH2_M_Error
(1)  117/ 6000100 : 0600 0250            		dc.l master_irq		; Level 1 IRQ
(1)  118/ 6000104 : 0600 0250           		dc.l master_irq		; Level 2 & 3 IRQ
(1)  119/ 6000108 : 0600 0250           		dc.l master_irq		; Level 4 & 5 IRQ
(1)  120/ 600010C : 0600 0250           		dc.l master_irq		; Level 6 & 7 IRQ: PWM interupt
(1)  121/ 6000110 : 0600 0250           		dc.l master_irq		; Level 8 & 9 IRQ: Command interupt
(1)  122/ 6000114 : 0600 0250           		dc.l master_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  123/ 6000118 : 0600 0250           		dc.l master_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  124/ 600011C : 0600 0250           		dc.l master_irq		; Level 14 & 15 IRQ: Reset Button
(1)  125/ 6000120 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  126/ 6000120 : 0600 0250           		dc.l master_irq		; Watchdog (custom)
(1)  127/ 6000124 : 0600 0250           		dc.l master_irq		; DMA
(1)  128/ 6000128 :                     
(1)  129/ 6000128 :                     ; ====================================================================
(1)  130/ 6000128 :                     ; ----------------------------------------------------------------
(1)  131/ 6000128 :                     ; SLAVE CPU VECTOR LIST (vbr)
(1)  132/ 6000128 :                     ; ----------------------------------------------------------------
(1)  133/ 6000128 :                     
(1)  134/ 6000128 :                     		align 4
(1)  135/ 6000128 :                     SH2_Slave:
(1)  136/ 6000128 : 0600 1448 0603 F000 		dc.l SH2_S_Entry,STACK_SLV	; Cold PC,SP
(1)  137/ 6000130 : 0600 1448 0603 F000 		dc.l SH2_S_Entry,STACK_SLV	; Manual PC,SP
(1)  138/ 6000138 : 0600 0350           		dc.l SH2_S_ErrIllg		; Illegal instruction
(1)  139/ 600013C : 0000 0000           		dc.l 0				; reserved
(1)  140/ 6000140 : 0600 0354           		dc.l SH2_S_ErrInvl		; Invalid slot instruction
(1)  141/ 6000144 : 2010 0400           		dc.l $20100400			; reserved
(1)  142/ 6000148 : 2010 0420           		dc.l $20100420			; reserved
(1)  143/ 600014C : 0600 0358           		dc.l SH2_S_ErrAddr		; CPU address error
(1)  144/ 6000150 : 0600 035C           		dc.l SH2_S_ErrDma		; DMA address error
(1)  145/ 6000154 : 0600 0360           		dc.l SH2_S_ErrNmi		; NMI vector
(1)  146/ 6000158 : 0600 0364           		dc.l SH2_S_ErrUser		; User break vector
(1)  147/ 600015C : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0		; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  148/ 6000180 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  149/ 60001A4 : 0000 0000           		dc.l 0
(1)  150/ 60001A8 : 0600 034C           		dc.l SH2_S_Error		; Trap user vectors
(1)  151/ 60001AC : 0600 034C           		dc.l SH2_S_Error
(1)  152/ 60001B0 : 0600 034C           		dc.l SH2_S_Error
(1)  153/ 60001B4 : 0600 034C           		dc.l SH2_S_Error
(1)  154/ 60001B8 : 0600 034C           		dc.l SH2_S_Error
(1)  155/ 60001BC : 0600 034C           		dc.l SH2_S_Error
(1)  156/ 60001C0 : 0600 034C           		dc.l SH2_S_Error
(1)  157/ 60001C4 : 0600 034C           		dc.l SH2_S_Error
(1)  158/ 60001C8 : 0600 034C           		dc.l SH2_S_Error
(1)  159/ 60001CC : 0600 034C           		dc.l SH2_S_Error
(1)  160/ 60001D0 : 0600 034C           		dc.l SH2_S_Error
(1)  161/ 60001D4 : 0600 034C           		dc.l SH2_S_Error
(1)  162/ 60001D8 : 0600 034C           		dc.l SH2_S_Error
(1)  163/ 60001DC : 0600 034C           		dc.l SH2_S_Error
(1)  164/ 60001E0 : 0600 034C           		dc.l SH2_S_Error
(1)  165/ 60001E4 : 0600 034C           		dc.l SH2_S_Error
(1)  166/ 60001E8 : 0600 034C           		dc.l SH2_S_Error
(1)  167/ 60001EC : 0600 034C           		dc.l SH2_S_Error
(1)  168/ 60001F0 : 0600 034C           		dc.l SH2_S_Error
(1)  169/ 60001F4 : 0600 034C           		dc.l SH2_S_Error
(1)  170/ 60001F8 : 0600 034C           		dc.l SH2_S_Error
(1)  171/ 60001FC : 0600 034C           		dc.l SH2_S_Error
(1)  172/ 6000200 : 0600 034C           		dc.l SH2_S_Error
(1)  173/ 6000204 : 0600 034C           		dc.l SH2_S_Error
(1)  174/ 6000208 : 0600 034C           		dc.l SH2_S_Error
(1)  175/ 600020C : 0600 034C           		dc.l SH2_S_Error
(1)  176/ 6000210 : 0600 034C           		dc.l SH2_S_Error
(1)  177/ 6000214 : 0600 034C           		dc.l SH2_S_Error
(1)  178/ 6000218 : 0600 034C           		dc.l SH2_S_Error
(1)  179/ 600021C : 0600 034C           		dc.l SH2_S_Error
(1)  180/ 6000220 : 0600 034C           		dc.l SH2_S_Error
(1)  181/ 6000224 : 0600 034C           		dc.l SH2_S_Error
(1)  182/ 6000228 : 0600 0278            		dc.l slave_irq		; Level 1 IRQ
(1)  183/ 600022C : 0600 0278           		dc.l slave_irq		; Level 2 & 3 IRQ
(1)  184/ 6000230 : 0600 0278           		dc.l slave_irq		; Level 4 & 5 IRQ
(1)  185/ 6000234 : 0600 0278           		dc.l slave_irq		; Level 6 & 7 IRQ: PWM interupt
(1)  186/ 6000238 : 0600 0278           		dc.l slave_irq		; Level 8 & 9 IRQ: Command interupt
(1)  187/ 600023C : 0600 0278           		dc.l slave_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  188/ 6000240 : 0600 0278           		dc.l slave_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  189/ 6000244 : 0600 0278           		dc.l slave_irq		; Level 14 & 15 IRQ: Reset Button
(1)  190/ 6000248 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  191/ 6000248 : 0600 0278           		dc.l slave_irq		; Watchdog
(1)  192/ 600024C : 0600 0278           		dc.l slave_irq		; DMA
(1)  193/ 6000250 :                     
(1)  194/ 6000250 :                     ; ====================================================================
(1)  195/ 6000250 :                     ; ----------------------------------------------------------------
(1)  196/ 6000250 :                     ; IRQ
(1)  197/ 6000250 :                     ;
(1)  198/ 6000250 :                     ; r0-r1 are safe
(1)  199/ 6000250 :                     ;
(1)  200/ 6000250 :                     ; sr: %xxxxMQIIIIxxST
(1)  201/ 6000250 :                     ; ----------------------------------------------------------------
(1)  202/ 6000250 :                     
(1)  203/ 6000250 :                     		align 4
(1)  204/ 6000250 :                     master_irq:
(1)  205/ 6000250 : 2F06                		mov.l	r0,@-r15
(1)  206/ 6000252 : 2F16                		mov.l	r1,@-r15
(1)  207/ 6000254 : 4F22                		sts.l	pr,@-r15
(1)  208/ 6000256 : 0002                		stc	sr,r0
(1)  209/ 6000258 : 4009                		shlr2	r0
(1)  210/ 600025A : C93C                		and	#$3C,r0
(1)  211/ 600025C : 6103                		mov	r0,r1
(1)  212/ 600025E : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  213/ 6000260 : 600C                		extu.b	r0,r0
(1)  214/ 6000262 : 400E                		ldc	r0,sr
(1)  215/ 6000264 : C70E                		mova	int_m_list,r0
(1)  216/ 6000266 : 301C                		add	r1,r0
(1)  217/ 6000268 : 6102                		mov	@r0,r1
(1)  218/ 600026A : 410B                		jsr	@r1
(1)  219/ 600026C : 0009                		nop
(1)  220/ 600026E : 4F26                		lds.l	@r15+,pr
(1)  221/ 6000270 : 61F6                		mov.l	@r15+,r1
(1)  222/ 6000272 : 60F6                		mov.l	@r15+,r0
(1)  223/ 6000274 : 002B                		rte
(1)  224/ 6000276 : 0009                		nop
(1)  225/ 6000278 :                     		align 4
(1)  226/ 6000278 :                     
(1)  227/ 6000278 :                     ; ====================================================================
(1)  228/ 6000278 :                     
(1)  229/ 6000278 :                     slave_irq:
(1)  230/ 6000278 : 2F06                		mov.l	r0,@-r15
(1)  231/ 600027A : 2F16                		mov.l	r1,@-r15
(1)  232/ 600027C : 4F22                		sts.l	pr,@-r15
(1)  233/ 600027E : 0002                		stc	sr,r0
(1)  234/ 6000280 : 4009                		shlr2	r0
(1)  235/ 6000282 : C93C                		and	#$3C,r0
(1)  236/ 6000284 : 6103                		mov	r0,r1
(1)  237/ 6000286 : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  238/ 6000288 : 600C                		extu.b	r0,r0
(1)  239/ 600028A : 400E                		ldc	r0,sr
(1)  240/ 600028C : C714                		mova	int_s_list,r0
(1)  241/ 600028E : 301C                		add	r1,r0
(1)  242/ 6000290 : 6102                		mov	@r0,r1
(1)  243/ 6000292 : 410B                		jsr	@r1
(1)  244/ 6000294 : 0009                		nop
(1)  245/ 6000296 : 4F26                		lds.l	@r15+,pr
(1)  246/ 6000298 : 61F6                		mov.l	@r15+,r1
(1)  247/ 600029A : 60F6                		mov.l	@r15+,r0
(1)  248/ 600029C : 002B                		rte
(1)  249/ 600029E : 0009                		nop
(1)  250/ 60002A0 :                     		align 4
(1)  251/ 60002A0 :                     
(1)  252/ 60002A0 :                     ; ------------------------------------------------
(1)  253/ 60002A0 :                     ; irq list
(1)  254/ 60002A0 :                     ; ------------------------------------------------
(1)  255/ 60002A0 :                     
(1)  256/ 60002A0 :                     		align 4
(1)  257/ 60002A0 :                     ;				  Level:
(1)  258/ 60002A0 :                     int_m_list:
(1)  259/ 60002A0 : 0600 0380           		dc.l m_irq_bad	; 0
(1)  260/ 60002A4 : 0600 0380           		dc.l m_irq_bad	; 1
(1)  261/ 60002A8 : 0600 0380           		dc.l m_irq_bad	; 2
(1)  262/ 60002AC : C000 0000           		dc.l $C0000000	; 3 Watchdog (TOP code on Cache)
(1)  263/ 60002B0 : 0600 0380           		dc.l m_irq_bad	; 4
(1)  264/ 60002B4 : 0600 03F0           		dc.l m_irq_dma	; 5 DMA
(1)  265/ 60002B8 : 0600 0384           		dc.l m_irq_pwm	; 6
(1)  266/ 60002BC : 0600 0384           		dc.l m_irq_pwm	; 7
(1)  267/ 60002C0 : 0600 039C           		dc.l m_irq_cmd	; 8
(1)  268/ 60002C4 : 0600 039C           		dc.l m_irq_cmd	; 9
(1)  269/ 60002C8 : 0600 040C           		dc.l m_irq_h	; A
(1)  270/ 60002CC : 0600 040C           		dc.l m_irq_h	; B
(1)  271/ 60002D0 : 0600 0428           		dc.l m_irq_v	; C
(1)  272/ 60002D4 : 0600 0428           		dc.l m_irq_v	; D
(1)  273/ 60002D8 : 0600 0444           		dc.l m_irq_vres	; E
(1)  274/ 60002DC : 0600 0444           		dc.l m_irq_vres	; F
(1)  275/ 60002E0 :                     int_s_list:
(1)  276/ 60002E0 : 0600 04C4           		dc.l s_irq_bad	; 0
(1)  277/ 60002E4 : 0600 04C4           		dc.l s_irq_bad	; 1
(1)  278/ 60002E8 : 0600 04C4           		dc.l s_irq_bad	; 2
(1)  279/ 60002EC : C000 0000           		dc.l $C0000000	; 3 Watchdog (TOP code on Cache)
(1)  280/ 60002F0 : 0600 04C4           		dc.l s_irq_bad	; 4
(1)  281/ 60002F4 : 0600 04C4           		dc.l s_irq_bad	; 5 DMA
(1)  282/ 60002F8 : C000 0014           		dc.l s_irq_pwm	; 6
(1)  283/ 60002FC : C000 0014           		dc.l s_irq_pwm	; 7
(1)  284/ 6000300 : 0600 04C8           		dc.l s_irq_cmd	; 8
(1)  285/ 6000304 : 0600 04C8           		dc.l s_irq_cmd	; 9
(1)  286/ 6000308 : 0600 0720           		dc.l s_irq_h	; A
(1)  287/ 600030C : 0600 0720           		dc.l s_irq_h	; B
(1)  288/ 6000310 : 0600 073C           		dc.l s_irq_v	; C
(1)  289/ 6000314 : 0600 073C           		dc.l s_irq_v	; D
(1)  290/ 6000318 : 0600 0758           		dc.l s_irq_vres	; E
(1)  291/ 600031C : 0600 0758           		dc.l s_irq_vres	; F
(1)  292/ 6000320 :                     
(1)  293/ 6000320 :                     ; ====================================================================
(1)  294/ 6000320 :                     ; ----------------------------------------------------------------
(1)  295/ 6000320 :                     ; Error handler
(1)  296/ 6000320 :                     ; ----------------------------------------------------------------
(1)  297/ 6000320 :                     
(1)  298/ 6000320 :                     ; *** Only works on HARDWARE ***
(1)  299/ 6000320 :                     ;
(1)  300/ 6000320 :                     ; comm2: (CPU)(CODE)
(1)  301/ 6000320 :                     ; comm4: PC counter
(1)  302/ 6000320 :                     ;
(1)  303/ 6000320 :                     ;  CPU | The CPU who got the error:
(1)  304/ 6000320 :                     ;        $00 - Master
(1)  305/ 6000320 :                     ;        $01 - Slave
(1)  306/ 6000320 :                     ;
(1)  307/ 6000320 :                     ; CODE | Error type:
(1)  308/ 6000320 :                     ;	 $00: Unknown error
(1)  309/ 6000320 :                     ;	 $01: Illegal instruction
(1)  310/ 6000320 :                     ;	 $02: Invalid slot instruction
(1)  311/ 6000320 :                     ;	 $03: Address error
(1)  312/ 6000320 :                     ;	 $04: DMA error
(1)  313/ 6000320 :                     ;	 $05: NMI vector
(1)  314/ 6000320 :                     ;	 $06: User break
(1)  315/ 6000320 :                     
(1)  316/ 6000320 :                     SH2_M_Error:
(1)  317/ 6000320 : A00C                		bra	SH2_M_ErrCode
(1)  318/ 6000322 : E000                		mov	#0,r0
(1)  319/ 6000324 :                     SH2_M_ErrIllg:
(1)  320/ 6000324 : A00A                		bra	SH2_M_ErrCode
(1)  321/ 6000326 : E001                		mov	#1,r0
(1)  322/ 6000328 :                     SH2_M_ErrInvl:
(1)  323/ 6000328 : A008                		bra	SH2_M_ErrCode
(1)  324/ 600032A : E002                		mov	#2,r0
(1)  325/ 600032C :                     SH2_M_ErrAddr:
(1)  326/ 600032C : A006                		bra	SH2_M_ErrCode
(1)  327/ 600032E : E003                		mov	#3,r0
(1)  328/ 6000330 :                     SH2_M_ErrDma:
(1)  329/ 6000330 : A004                		bra	SH2_M_ErrCode
(1)  330/ 6000332 : E004                		mov	#4,r0
(1)  331/ 6000334 :                     SH2_M_ErrNmi:
(1)  332/ 6000334 : A002                		bra	SH2_M_ErrCode
(1)  333/ 6000336 : E005                		mov	#5,r0
(1)  334/ 6000338 :                     SH2_M_ErrUser:
(1)  335/ 6000338 : A000                		bra	SH2_M_ErrCode
(1)  336/ 600033A : E006                		mov	#6,r0
(1)  337/ 600033C :                     ; r0 - value
(1)  338/ 600033C :                     SH2_M_ErrCode:
(1)  339/ 600033C : D10E                		mov	#_sysreg+comm2,r1
(1)  340/ 600033E : 2101                		mov.w	r0,@r1
(1)  341/ 6000340 : D10E                		mov	#_sysreg+comm4,r1
(1)  342/ 6000342 : 60F2                		mov	@r15,r0
(1)  343/ 6000344 : 2102                		mov	r0,@r1
(1)  344/ 6000346 : AFFE                		bra	*
(1)  345/ 6000348 : 0009                		nop
(1)  346/ 600034A :                     		align 4
(1)  347/ 600034C :                     
(1)  348/ 600034C :                     ; ----------------------------------------------------
(1)  349/ 600034C :                     
(1)  350/ 600034C :                     SH2_S_Error:
(1)  351/ 600034C : A00C                		bra	SH2_S_ErrCode
(1)  352/ 600034E : E000                		mov	#0,r0
(1)  353/ 6000350 :                     SH2_S_ErrIllg:
(1)  354/ 6000350 : A00A                		bra	SH2_S_ErrCode
(1)  355/ 6000352 : E0FF                		mov	#-1,r0
(1)  356/ 6000354 :                     SH2_S_ErrInvl:
(1)  357/ 6000354 : A008                		bra	SH2_S_ErrCode
(1)  358/ 6000356 : E0FE                		mov	#-2,r0
(1)  359/ 6000358 :                     SH2_S_ErrAddr:
(1)  360/ 6000358 : A006                		bra	SH2_S_ErrCode
(1)  361/ 600035A : E0FD                		mov	#-3,r0
(1)  362/ 600035C :                     SH2_S_ErrDma:
(1)  363/ 600035C : A004                		bra	SH2_S_ErrCode
(1)  364/ 600035E : E0FC                		mov	#-4,r0
(1)  365/ 6000360 :                     SH2_S_ErrNmi:
(1)  366/ 6000360 : A002                		bra	SH2_S_ErrCode
(1)  367/ 6000362 : E0FB                		mov	#-5,r0
(1)  368/ 6000364 :                     SH2_S_ErrUser:
(1)  369/ 6000364 : A000                		bra	SH2_S_ErrCode
(1)  370/ 6000366 : E0FA                		mov	#-6,r0
(1)  371/ 6000368 :                     ; r0 - value
(1)  372/ 6000368 :                     SH2_S_ErrCode:
(1)  373/ 6000368 : D103                		mov	#_sysreg+comm2,r1
(1)  374/ 600036A : 2101                		mov.w	r0,@r1
(1)  375/ 600036C : D103                		mov	#_sysreg+comm4,r1
(1)  376/ 600036E : 60F2                		mov	@r15,r0
(1)  377/ 6000370 : 2102                		mov	r0,@r1
(1)  378/ 6000372 : AFFE                		bra	*
(1)  379/ 6000374 : 0009                		nop
(1)  380/ 6000376 :                     		align 4
(1)  381/ 6000378 : 2000 4022 2000 4024 		ltorg
(1)  382/ 6000380 :                     
(1)  383/ 6000380 :                     ; ====================================================================
(1)  384/ 6000380 :                     ; ----------------------------------------------------------------
(1)  385/ 6000380 :                     ; Interrupts
(1)  386/ 6000380 :                     ; ----------------------------------------------------------------
(1)  387/ 6000380 :                     
(1)  388/ 6000380 :                     ; =================================================================
(1)  389/ 6000380 :                     ; ------------------------------------------------
(1)  390/ 6000380 :                     ; Master | Unused interrupt
(1)  391/ 6000380 :                     ; ------------------------------------------------
(1)  392/ 6000380 :                     
(1)  393/ 6000380 :                     		align 4
(1)  394/ 6000380 :                     m_irq_bad:
(1)  395/ 6000380 : 000B                		rts
(1)  396/ 6000382 : 0009                		nop
(1)  397/ 6000384 :                     		align 4
(1)  398/ 6000384 :                     
(1)  399/ 6000384 :                     ; =================================================================
(1)  400/ 6000384 :                     ; ------------------------------------------------
(1)  401/ 6000384 :                     ; Master | PWM Interrupt
(1)  402/ 6000384 :                     ; ------------------------------------------------
(1)  403/ 6000384 :                     
(1)  404/ 6000384 :                     m_irq_pwm:
(1)  405/ 6000384 : 919A                		mov	#_FRT,r1
(1)  406/ 6000386 : 8417                		mov.b	@(7,r1),r0
(1)  407/ 6000388 : CA02                		xor	#2,r0
(1)  408/ 600038A : 8017                		mov.b	r0,@(7,r1)
(1)  409/ 600038C : D140                		mov	#_sysreg+pwmintclr,r1
(1)  410/ 600038E : 2101                		mov.w	r0,@r1
(1)  411/ 6000390 : 0009                		nop
(1)  412/ 6000392 : 0009                		nop
(1)  413/ 6000394 : 0009                		nop
(1)  414/ 6000396 : 0009                		nop
(1)  415/ 6000398 : 000B                		rts
(1)  416/ 600039A : 0009                		nop
(1)  417/ 600039C :                     		align 4
(1)  418/ 600039C :                     
(1)  419/ 600039C :                     ; =================================================================
(1)  420/ 600039C :                     ; ------------------------------------------------
(1)  421/ 600039C :                     ; Master | CMD Interrupt
(1)  422/ 600039C :                     ; ------------------------------------------------
(1)  423/ 600039C :                     
(1)  424/ 600039C :                     	; *** HARDWARE NOTE ***
(1)  425/ 600039C :                     	; DMA takes a little to start properly:
(1)  426/ 600039C :                     	; after writing _DMAOPERATION = 1 put
(1)  427/ 600039C :                     	; 2 instructions (or 2 nops) if you want
(1)  428/ 600039C :                     	; to manually check if the DMA it's active.
(1)  429/ 600039C :                     	;
(1)  430/ 600039C :                     	; On Emulators it just starts right away
(1)  431/ 600039C :                     m_irq_cmd:
(1)  432/ 600039C : 918E                		mov	#_FRT,r1
(1)  433/ 600039E : 8417                		mov.b	@(7,r1),r0
(1)  434/ 60003A0 : CA02                		xor	#2,r0
(1)  435/ 60003A2 : 8017                		mov.b	r0,@(7,r1)
(1)  436/ 60003A4 : D13B                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  437/ 60003A6 : 2101                		mov.w	r0,@r1
(1)  438/ 60003A8 : 6011                		mov.w	@r1,r0
(1)  439/ 60003AA :                     
(1)  440/ 60003AA : 2F26                		mov	r2,@-r15
(1)  441/ 60003AC : 2F36                		mov	r3,@-r15
(1)  442/ 60003AE : 2F46                		mov	r4,@-r15
(1)  443/ 60003B0 : D439                		mov	#_sysreg,r4		; r4 - sysreg base
(1)  444/ 60003B2 : E380                		mov	#_DMASOURCE0,r3		; r3 - DMA base register
(1)  445/ 60003B4 : D239                		mov	#_sysreg+comm12,r2	; r2 - comm to write the signal
(1)  446/ 60003B6 : D13A                		mov	#_sysreg+dreqfifo,r1	; r1 - Source point: DREQ FIFO
(1)  447/ 60003B8 : E000                		mov	#0,r0			; _DMAOPERATION = 0
(1)  448/ 60003BA : 130C                		mov	r0,@($30,r3)
(1)  449/ 60003BC : 907F                		mov	#%0100010011100000,r0	; Transfer mode + DMA enable bit OFF
(1)  450/ 60003BE : 1303                		mov	r0,@($C,r3)
(1)  451/ 60003C0 : D038                		mov	#RAM_Mars_DreqDma,r0
(1)  452/ 60003C2 : 1301                		mov	r0,@(4,r3)		; Destination
(1)  453/ 60003C4 : 8548                		mov.w	@(dreqlen,r4),r0	; NOTE: no 0-size check, be careful.
(1)  454/ 60003C6 : 600D                		extu.w	r0,r0
(1)  455/ 60003C8 : 1302                		mov	r0,@(8,r3)		; Length (set by 68k)
(1)  456/ 60003CA : 2312                		mov	r1,@r3			; Source
(1)  457/ 60003CC : 9078                		mov	#%0100010011100101,r0	; Transfer mode + DMA enable + Enable DMA interrupt
(1)  458/ 60003CE : 1303                		mov	r0,@($C,r3)		; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  459/ 60003D0 : E001                		mov	#1,r0			; _DMAOPERATION = 1
(1)  460/ 60003D2 : 130C                		mov	r0,@($30,r3)
(1)  461/ 60003D4 : 6020                		mov.b	@r2,r0			; Tell Genesis we can recieve DREQ data
(1)  462/ 60003D6 : CB40                		or	#%01000000,r0
(1)  463/ 60003D8 : 2200                		mov.b	r0,@r2
(1)  464/ 60003DA : 64F6                		mov	@r15+,r4
(1)  465/ 60003DC : 63F6                		mov	@r15+,r3
(1)  466/ 60003DE : 62F6                		mov	@r15+,r2
(1)  467/ 60003E0 : 0009                		nop
(1)  468/ 60003E2 : 0009                		nop
(1)  469/ 60003E4 : 0009                		nop
(1)  470/ 60003E6 : 0009                		nop
(1)  471/ 60003E8 : 0009                		nop
(1)  472/ 60003EA : 000B                		rts
(1)  473/ 60003EC : 0009                		nop
(1)  474/ 60003EE :                     		align 4
(1)  475/ 60003F0 :                     
(1)  476/ 60003F0 :                     ; ------------------------------------------------
(1)  477/ 60003F0 :                     ; Master | DMA Exit
(1)  478/ 60003F0 :                     ;
(1)  479/ 60003F0 :                     ; This will trigger when DMA is a FEW writes
(1)  480/ 60003F0 :                     ; away from finishing the transfer,
(1)  481/ 60003F0 :                     ; NOT exactly on finish.
(1)  482/ 60003F0 :                     ;
(1)  483/ 60003F0 :                     ; Check for the DMA-active bit BEFORE
(1)  484/ 60003F0 :                     ; writing _DMAOPERATION = 0
(1)  485/ 60003F0 :                     ; ------------------------------------------------
(1)  486/ 60003F0 :                     
(1)  487/ 60003F0 :                     		align 4
(1)  488/ 60003F0 :                     m_irq_dma:
(1)  489/ 60003F0 : 9164                		mov	#_FRT,r1
(1)  490/ 60003F2 : 8417                		mov.b	@(7,r1),r0
(1)  491/ 60003F4 : CA02                		xor	#2,r0
(1)  492/ 60003F6 : 8017                		mov.b	r0,@(7,r1)
(1)  493/ 60003F8 : E180                		mov	#_DMASOURCE0,r1		; Pick DMA Channel 0
(1)  494/ 60003FA : 5013                .wait_dma:	mov	@($C,r1),r0
(1)  495/ 60003FC : C802                		tst	#%10,r0			; DMA finished?
(1)  496/ 60003FE : 89FC                		bt	.wait_dma
(1)  497/ 6000400 : E000                		mov	#0,r0			; _DMAOPERATION = 0
(1)  498/ 6000402 : 110C                		mov	r0,@($30,r1)
(1)  499/ 6000404 : 905B                		mov	#%0100010011100000,r0	; Transfer mode + DMA enable OFF
(1)  500/ 6000406 : 1103                		mov	r0,@($C,r1)
(1)  501/ 6000408 : 000B                		rts
(1)  502/ 600040A : 0009                		nop
(1)  503/ 600040C :                     		align 4
(1)  504/ 600040C :                     
(1)  505/ 600040C :                     ; =================================================================
(1)  506/ 600040C :                     ; ------------------------------------------------
(1)  507/ 600040C :                     ; Master | HBlank
(1)  508/ 600040C :                     ; ------------------------------------------------
(1)  509/ 600040C :                     
(1)  510/ 600040C :                     m_irq_h:
(1)  511/ 600040C : 9156                		mov	#_FRT,r1
(1)  512/ 600040E : 8417                		mov.b	@(7,r1),r0
(1)  513/ 6000410 : CA02                		xor	#2,r0
(1)  514/ 6000412 : 8017                		mov.b	r0,@(7,r1)
(1)  515/ 6000414 : D124                		mov	#_sysreg+hintclr,r1
(1)  516/ 6000416 : 2101                		mov.w	r0,@r1
(1)  517/ 6000418 : 0009                		nop
(1)  518/ 600041A : 0009                		nop
(1)  519/ 600041C : 0009                		nop
(1)  520/ 600041E : 0009                		nop
(1)  521/ 6000420 : 0009                		nop
(1)  522/ 6000422 : 000B                		rts
(1)  523/ 6000424 : 0009                		nop
(1)  524/ 6000426 :                     		align 4
(1)  525/ 6000428 :                     
(1)  526/ 6000428 :                     ; =================================================================
(1)  527/ 6000428 :                     ; ------------------------------------------------
(1)  528/ 6000428 :                     ; Master | VBlank
(1)  529/ 6000428 :                     ; ------------------------------------------------
(1)  530/ 6000428 :                     
(1)  531/ 6000428 :                     m_irq_v:
(1)  532/ 6000428 : 9148                		mov	#_FRT,r1
(1)  533/ 600042A : 8417                		mov.b	@(7,r1),r0
(1)  534/ 600042C : CA02                		xor	#2,r0
(1)  535/ 600042E : 8017                		mov.b	r0,@(7,r1)
(1)  536/ 6000430 : D11E                		mov	#_sysreg+vintclr,r1
(1)  537/ 6000432 : 2101                		mov.w	r0,@r1
(1)  538/ 6000434 : 0009                		nop
(1)  539/ 6000436 : 0009                		nop
(1)  540/ 6000438 : 0009                		nop
(1)  541/ 600043A : 0009                		nop
(1)  542/ 600043C : 0009                		nop
(1)  543/ 600043E : 000B                		rts
(1)  544/ 6000440 : 0009                		nop
(1)  545/ 6000442 :                     		align 4
(1)  546/ 6000444 :                     
(1)  547/ 6000444 :                     ; =================================================================
(1)  548/ 6000444 :                     ; ------------------------------------------------
(1)  549/ 6000444 :                     ; Master | VRES Interrupt (RESET button)
(1)  550/ 6000444 :                     ; ------------------------------------------------
(1)  551/ 6000444 :                     
(1)  552/ 6000444 :                     m_irq_vres:
(1)  553/ 6000444 : D114                		mov	#_sysreg,r1
(1)  554/ 6000446 : 60F3                		mov	r15,r0
(1)  555/ 6000448 : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  556/ 600044A : E180                		mov	#_DMASOURCE0,r1
(1)  557/ 600044C : E000                		mov	#0,r0
(1)  558/ 600044E : 110C                		mov	r0,@($30,r1)
(1)  559/ 6000450 : 9035                		mov	#%0100010011100000,r0
(1)  560/ 6000452 : 1103                		mov	r0,@($C,r1)
(1)  561/ 6000454 : E190                		mov	#_DMASOURCE1,r1
(1)  562/ 6000456 : E000                		mov	#0,r0
(1)  563/ 6000458 : 110C                		mov	r0,@($30,r1)
(1)  564/ 600045A : 9030                		mov	#%0100010011100000,r0
(1)  565/ 600045C : 1103                		mov	r0,@($C,r1)
(1)  566/ 600045E :                     
(1)  567/ 600045E : D10E                		mov	#_sysreg,r1
(1)  568/ 6000460 : 8513                		mov.w	@(dreqctl,r1),r0
(1)  569/ 6000462 : C801                		tst	#1,r0
(1)  570/ 6000464 : 8B0E                		bf	.rv_busy
(1)  571/ 6000466 : DF12                		mov	#(CS3|$40000)-8,r15
(1)  572/ 6000468 : D012                		mov	#SH2_M_HotStart,r0
(1)  573/ 600046A : 2F02                		mov	r0,@r15
(1)  574/ 600046C : 9029                		mov.w   #$F0,r0
(1)  575/ 600046E : 1F01                		mov	r0,@(4,r15)
(1)  576/ 6000470 : D109                		mov	#_sysreg,r1
(1)  577/ 6000472 : D011                		mov	#"M_OK",r0
(1)  578/ 6000474 : 1108                		mov	r0,@(comm0,r1)
(1)  579/ 6000476 : 0009                		nop
(1)  580/ 6000478 : 0009                		nop
(1)  581/ 600047A : 0009                		nop
(1)  582/ 600047C : 0009                		nop
(1)  583/ 600047E : 0009                		nop
(1)  584/ 6000480 : 002B                		rte
(1)  585/ 6000482 : 0009                		nop
(1)  586/ 6000484 :                     		align 4
(1)  587/ 6000484 :                     .rv_busy:
(1)  588/ 6000484 : 911A                		mov	#_FRT,r1
(1)  589/ 6000486 : 8417                		mov.b	@(7,r1),r0
(1)  590/ 6000488 : CA02                		xor	#2,r0
(1)  591/ 600048A : 8017                		mov.b	r0,@(7,r1)
(1)  592/ 600048C : AFFE                		bra	*
(1)  593/ 600048E : 0009                		nop
(1)  594/ 6000490 :                     		align 4
(1)  595/ 6000490 : 2000 401C 2000 401A 		ltorg		; Save literals
                    2000 4000 2000 402C 
                    2000 4012 2600 5070 
                    2000 4018 2000 4016 
                    0603 FFF8 0600 0F62 
                    4D5F 4F4B FE10 44E0 
                    44E5 00F0           
(1)  596/ 60004C4 :                     
(1)  597/ 60004C4 :                     ; =================================================================
(1)  598/ 60004C4 :                     ; ------------------------------------------------
(1)  599/ 60004C4 :                     ; Slave | Unused Interrupt
(1)  600/ 60004C4 :                     ; ------------------------------------------------
(1)  601/ 60004C4 :                     
(1)  602/ 60004C4 :                     		align 4
(1)  603/ 60004C4 :                     s_irq_bad:
(1)  604/ 60004C4 : 000B                		rts
(1)  605/ 60004C6 : 0009                		nop
(1)  606/ 60004C8 :                     		align 4
(1)  607/ 60004C8 :                     
(1)  608/ 60004C8 :                     ; =================================================================
(1)  609/ 60004C8 :                     ; ------------------------------------------------
(1)  610/ 60004C8 :                     ; Slave | PWM Interrupt
(1)  611/ 60004C8 :                     ; ------------------------------------------------
(1)  612/ 60004C8 :                     
(1)  613/ 60004C8 :                     ; moved to cache_slv.asm
(1)  614/ 60004C8 :                     
(1)  615/ 60004C8 :                     ; =================================================================
(1)  616/ 60004C8 :                     ; ------------------------------------------------
(1)  617/ 60004C8 :                     ; Slave | CMD Interrupt
(1)  618/ 60004C8 :                     ; ------------------------------------------------
(1)  619/ 60004C8 :                     
(1)  620/ 60004C8 :                     		align 4
(1)  621/ 60004C8 :                     s_irq_cmd:
(1)  622/ 60004C8 : D111                		mov	.tag_FRT,r1
(1)  623/ 60004CA : 8417                		mov.b	@(7,r1),r0
(1)  624/ 60004CC : CA02                		xor	#2,r0
(1)  625/ 60004CE : 8017                		mov.b	r0,@(7,r1)
(1)  626/ 60004D0 : D184                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  627/ 60004D2 : 2101                		mov.w	r0,@r1
(1)  628/ 60004D4 : 6011                		mov.w	@r1,r0
(1)  629/ 60004D6 :                     
(1)  630/ 60004D6 :                     	; ---------------------------------
(1)  631/ 60004D6 :                     	; *** START of PWM driver for GEMA
(1)  632/ 60004D6 :                     	; ---------------------------------
(1)  633/ 60004D6 : D184                		mov	#_sysreg+comm14,r1
(1)  634/ 60004D8 : 6010                		mov.b	@r1,r0			; MSB only
(1)  635/ 60004DA : C90F                		and	#%00001111,r0
(1)  636/ 60004DC : 2008                		tst	r0,r0
(1)  637/ 60004DE : 8915                		bt	.go_exit
(1)  638/ 60004E0 : 2F26                		mov	r2,@-r15
(1)  639/ 60004E2 : 2F36                		mov	r3,@-r15
(1)  640/ 60004E4 : 2F46                		mov	r4,@-r15
(1)  641/ 60004E6 : 2F56                		mov	r5,@-r15
(1)  642/ 60004E8 : 2F66                		mov	r6,@-r15
(1)  643/ 60004EA : 2F76                		mov	r7,@-r15
(1)  644/ 60004EC : 2F86                		mov	r8,@-r15
(1)  645/ 60004EE : 2F96                		mov	r9,@-r15
(1)  646/ 60004F0 : 2FA6                		mov	r10,@-r15
(1)  647/ 60004F2 : 2FB6                		mov	r11,@-r15
(1)  648/ 60004F4 : 2FC6                		mov	r12,@-r15
(1)  649/ 60004F6 : 2FD6                		mov	r13,@-r15
(1)  650/ 60004F8 : 2FE6                		mov	r14,@-r15
(1)  651/ 60004FA : 4F12                		sts	macl,@-r15
(1)  652/ 60004FC : 4F02                		sts	mach,@-r15
(1)  653/ 60004FE : 4F22                		sts	pr,@-r15
(1)  654/ 6000500 : 4008                		shll2	r0
(1)  655/ 6000502 : D17A                		mov	#.list,r1
(1)  656/ 6000504 : 310C                		add	r0,r1
(1)  657/ 6000506 : 6012                		mov	@r1,r0
(1)  658/ 6000508 : 402B                		jmp	@r0
(1)  659/ 600050A : 0009                		nop
(1)  660/ 600050C :                     		align 4
(1)  661/ 600050C :                     .go_exit:
(1)  662/ 600050C : A0E3                		bra	.no_cmdtask
(1)  663/ 600050E : 0009                		nop
(1)  664/ 6000510 :                     		align 4
(1)  665/ 6000510 : FFFF FE10           .tag_FRT:	dc.l _FRT
(1)  666/ 6000514 :                     
(1)  667/ 6000514 :                     ; ---------------------------------
(1)  668/ 6000514 :                     
(1)  669/ 6000514 :                     		align 4
(1)  670/ 6000514 :                     .list:
(1)  671/ 6000514 : 0600 06B6           		dc.l .no_trnsfrex
(1)  672/ 6000518 : 0600 0578           		dc.l .mode_1		; PWM transfer from Z80
(1)  673/ 600051C : 0600 0554           		dc.l .mode_2		; PWM backup enter
(1)  674/ 6000520 : 0600 0568           		dc.l .mode_3		; PWM backup exit
(1)  675/ 6000524 : 0600 06B6           		dc.l .no_trnsfrex
(1)  676/ 6000528 : 0600 06B6           		dc.l .no_trnsfrex
(1)  677/ 600052C : 0600 06B6           		dc.l .no_trnsfrex
(1)  678/ 6000530 : 0600 06B6           		dc.l .no_trnsfrex
(1)  679/ 6000534 : 0600 06B6           		dc.l .no_trnsfrex
(1)  680/ 6000538 : 0600 06B6           		dc.l .no_trnsfrex
(1)  681/ 600053C : 0600 06B6           		dc.l .no_trnsfrex
(1)  682/ 6000540 : 0600 06B6           		dc.l .no_trnsfrex
(1)  683/ 6000544 : 0600 06B6           		dc.l .no_trnsfrex
(1)  684/ 6000548 : 0600 06B6           		dc.l .no_trnsfrex
(1)  685/ 600054C : 0600 06B6           		dc.l .no_trnsfrex
(1)  686/ 6000550 : 0600 06B6           		dc.l .no_trnsfrex
(1)  687/ 6000554 :                     
(1)  688/ 6000554 :                     ; ---------------------------------
(1)  689/ 6000554 :                     ; CMD Mode 2: PWM Backup enter
(1)  690/ 6000554 :                     ; ---------------------------------
(1)  691/ 6000554 :                     
(1)  692/ 6000554 :                     .mode_2:
(1)  693/ 6000554 : D066                		mov	#MarsSnd_Refill,r0
(1)  694/ 6000556 : 400B                		jsr	@r0
(1)  695/ 6000558 : 0009                		nop
(1)  696/ 600055A : D166                		mov	#MarsSnd_RvMode,r1	; Set backup-playback flag
(1)  697/ 600055C : E001                		mov	#1,r0
(1)  698/ 600055E : 2102                		mov	r0,@r1
(1)  699/ 6000560 : D161                		mov	#_sysreg+comm14,r1
(1)  700/ 6000562 : E000                		mov	#0,r0
(1)  701/ 6000564 : A0A7                		bra	.no_trnsfrex
(1)  702/ 6000566 : 2100                		mov.b	r0,@r1
(1)  703/ 6000568 :                     		align 4
(1)  704/ 6000568 :                     
(1)  705/ 6000568 :                     ; ---------------------------------
(1)  706/ 6000568 :                     ; CMD Mode 3: PWM Backup exit
(1)  707/ 6000568 :                     ; ---------------------------------
(1)  708/ 6000568 :                     
(1)  709/ 6000568 :                     .mode_3:
(1)  710/ 6000568 : D163                		mov	#MarsSnd_RvMode,r1	; Clear backup-playback flag
(1)  711/ 600056A : E000                		mov	#0,r0
(1)  712/ 600056C : 2102                		mov	r0,@r1
(1)  713/ 600056E : D15E                		mov	#_sysreg+comm14,r1
(1)  714/ 6000570 : E000                		mov	#0,r0
(1)  715/ 6000572 : A0A0                		bra	.no_trnsfrex
(1)  716/ 6000574 : 2100                		mov.b	r0,@r1
(1)  717/ 6000576 :                     		align 4
(1)  718/ 6000578 :                     
(1)  719/ 6000578 :                     ; ---------------------------------
(1)  720/ 6000578 :                     ; CMD Mode 1:
(1)  721/ 6000578 :                     ; Z80 transfer AND process
(1)  722/ 6000578 :                     ; new PWM's
(1)  723/ 6000578 :                     ; ---------------------------------
(1)  724/ 6000578 :                     
(1)  725/ 6000578 :                     .mode_1:
(1)  726/ 6000578 :                     	; First we recieve changes from Z80
(1)  727/ 6000578 :                     	; using comm8  for data
(1)  728/ 6000578 :                     	;  and  comm14 for busy/clock bits (bits 7,6)
(1)  729/ 6000578 :                     
(1)  730/ 6000578 : D160                		mov	#_sysreg+comm8,r1	; Input
(1)  731/ 600057A : D261                		mov	#MarsSnd_PwmControl,r2	; Output
(1)  732/ 600057C : D35A                		mov	#_sysreg+comm14,r3	; control comm
(1)  733/ 600057E : 0009                		nop
(1)  734/ 6000580 :                     .wait_1:
(1)  735/ 6000580 : 6030                		mov.b	@r3,r0
(1)  736/ 6000582 : C9F0                		and	#%11110000,r0
(1)  737/ 6000584 : C880                		tst	#%10000000,r0		; Chain exit?
(1)  738/ 6000586 : 8908                		bt	.exit_c
(1)  739/ 6000588 : C840                		tst	#%01000000,r0		; Wait PASS
(1)  740/ 600058A : 89F9                		bt	.wait_1
(1)  741/ 600058C :                     .copy_1:
(1)  742/ 600058C : 6012                		mov	@r1,r0
(1)  743/ 600058E : 2202                		mov	r0,@r2
(1)  744/ 6000590 : 7204                		add	#4,r2
(1)  745/ 6000592 : 6030                		mov.b	@r3,r0			; PASSed.
(1)  746/ 6000594 : C9BF                		and	#%10111111,r0
(1)  747/ 6000596 : AFF3                		bra	.wait_1
(1)  748/ 6000598 : 2300                		mov.b	r0,@r3
(1)  749/ 600059A :                     .exit_c:
(1)  750/ 600059A :                     
(1)  751/ 600059A :                     	; *** Now update the PWM's
(1)  752/ 600059A : E100                		mov	#0,r1				; r1 - Current PWM slot
(1)  753/ 600059C : DE59                		mov	#MarsSnd_PwmControl,r14
(1)  754/ 600059E : 9ABD                		mov	#MAX_PWMCHNL,r10
(1)  755/ 60005A0 :                     .next_chnl:
(1)  756/ 60005A0 : 60E0                		mov.b	@r14,r0
(1)  757/ 60005A2 : C9FF                		and	#$FF,r0
(1)  758/ 60005A4 : 8800                		cmp/eq	#0,r0
(1)  759/ 60005A6 : 8909                		bt	.no_req2
(1)  760/ 60005A8 : 2DDA                		xor	r13,r13
(1)  761/ 60005AA : 2ED0                		mov.b	r13,@r14
(1)  762/ 60005AC : 6703                		mov	r0,r7
(1)  763/ 60005AE : C907                		and	#%111,r0
(1)  764/ 60005B0 : 8801                		cmp/eq	#%001,r0
(1)  765/ 60005B2 : 8911                		bt	.pwm_keyon
(1)  766/ 60005B4 : 8802                		cmp/eq	#%010,r0
(1)  767/ 60005B6 : 8903                		bt	.pwm_keyoff
(1)  768/ 60005B8 : 8804                		cmp/eq	#%100,r0
(1)  769/ 60005BA : 8907                		bt	.pwm_keycut
(1)  770/ 60005BC :                     .no_req2:
(1)  771/ 60005BC : A073                		bra	.no_req
(1)  772/ 60005BE : 0009                		nop
(1)  773/ 60005C0 :                     ; KEY OFF...
(1)  774/ 60005C0 :                     .pwm_keyoff:
(1)  775/ 60005C0 : E240                		mov	#$40,r2
(1)  776/ 60005C2 : D051                		mov	#MarsSound_SetVolume,r0
(1)  777/ 60005C4 : 400B                		jsr	@r0
(1)  778/ 60005C6 : 0009                		nop
(1)  779/ 60005C8 : A06D                		bra	.no_req
(1)  780/ 60005CA : 0009                		nop
(1)  781/ 60005CC :                     .pwm_keycut:
(1)  782/ 60005CC : E200                		mov	#0,r2
(1)  783/ 60005CE : D04F                		mov	#MarsSound_PwmEnable,r0
(1)  784/ 60005D0 : 400B                		jsr	@r0
(1)  785/ 60005D2 : 0009                		nop
(1)  786/ 60005D4 : A067                		bra	.no_req
(1)  787/ 60005D6 : 0009                		nop
(1)  788/ 60005D8 :                     		align 4
(1)  789/ 60005D8 :                     
(1)  790/ 60005D8 :                     	; Normal playback
(1)  791/ 60005D8 :                     .pwm_keyon:
(1)  792/ 60005D8 : 6073                		mov	r7,r0		; <-- check COM bits again
(1)  793/ 60005DA : C810                		tst	#$10,r0		; %xxx?xxxx
(1)  794/ 60005DC : 8918                		bt	.no_pitchbnd
(1)  795/ 60005DE : 6DE3                		mov	r14,r13
(1)  796/ 60005E0 : 7D08                		add	#8,r13		; skip COM
(1)  797/ 60005E2 : 60D0                		mov.b	@r13,r0		; r2 - Get pitch MSB bits
(1)  798/ 60005E4 : 7D08                		add	#8,r13
(1)  799/ 60005E6 : C903                		and	#%11,r0
(1)  800/ 60005E8 : 4018                		shll8	r0
(1)  801/ 60005EA : 6203                		mov	r0,r2
(1)  802/ 60005EC : 60D0                		mov.b	@r13,r0		; Pitch LSB
(1)  803/ 60005EE : 7D08                		add	#8,r13
(1)  804/ 60005F0 : C9FF                		and	#$FF,r0
(1)  805/ 60005F2 : 202B                		or	r2,r0
(1)  806/ 60005F4 : 6203                		mov	r0,r2
(1)  807/ 60005F6 : D046                		mov	#MarsSound_SetPwmPitch,r0
(1)  808/ 60005F8 : 400B                		jsr	@r0
(1)  809/ 60005FA : 0009                		nop
(1)  810/ 60005FC : 6DE3                		mov	r14,r13
(1)  811/ 60005FE : 7D08                		add	#8,r13		; point to volume values
(1)  812/ 6000600 : 60D0                		mov.b	@r13,r0
(1)  813/ 6000602 : C9FC                		and	#%11111100,r0	; skip MSB pitch bits
(1)  814/ 6000604 : 6203                		mov	r0,r2
(1)  815/ 6000606 : D043                		mov	#MarsSound_SetVolume,r0
(1)  816/ 6000608 : 400B                		jsr	@r0
(1)  817/ 600060A : 0009                		nop
(1)  818/ 600060C : A04B                		bra	.no_req
(1)  819/ 600060E : 0009                		nop
(1)  820/ 6000610 :                     .no_pitchbnd:
(1)  821/ 6000610 : 6073                		mov	r7,r0
(1)  822/ 6000612 : C801                		tst	#$01,r0		; key-on?
(1)  823/ 6000614 : 8947                		bt	.no_req
(1)  824/ 6000616 : 6DE3                		mov	r14,r13
(1)  825/ 6000618 : 7D08                		add	#8,r13		; skip COM
(1)  826/ 600061A : 60D0                		mov.b	@r13,r0
(1)  827/ 600061C : 7D08                		add	#8,r13
(1)  828/ 600061E : 6503                		mov	r0,r5
(1)  829/ 6000620 : C9FC                		and	#%11111100,r0	; skip MSB pitch bits
(1)  830/ 6000622 : 6603                		mov	r0,r6		; r6 - Volume
(1)  831/ 6000624 : 6053                		mov	r5,r0		; r5 - Get pitch MSB bits
(1)  832/ 6000626 : C903                		and	#%00000011,r0
(1)  833/ 6000628 : 4018                		shll8	r0
(1)  834/ 600062A : 6503                		mov	r0,r5
(1)  835/ 600062C : 60D0                		mov.b	@r13,r0		; Pitch LSB
(1)  836/ 600062E : 7D08                		add	#8,r13
(1)  837/ 6000630 : C9FF                		and	#$FF,r0
(1)  838/ 6000632 : 205B                		or	r5,r0
(1)  839/ 6000634 : 6503                		mov	r0,r5
(1)  840/ 6000636 : 60D0                		mov.b	@r13,r0		; flags | SH2 BANK
(1)  841/ 6000638 : 7D08                		add	#8,r13
(1)  842/ 600063A : 6703                		mov	r0,r7		; r7 - Flags
(1)  843/ 600063C : C90F                		and	#%1111,r0
(1)  844/ 600063E : 6803                		mov	r0,r8		; r8 - SH2 section (ROM or SDRAM)
(1)  845/ 6000640 : 4828                		shll16	r8
(1)  846/ 6000642 : 4818                		shll8	r8
(1)  847/ 6000644 : 4709                		shlr2	r7
(1)  848/ 6000646 : 4709                		shlr2	r7
(1)  849/ 6000648 : 60D0                		mov.b	@r13,r0		; r2 - START point
(1)  850/ 600064A : 7D08                		add	#8,r13
(1)  851/ 600064C : C9FF                		and	#$FF,r0
(1)  852/ 600064E : 4028                		shll16	r0
(1)  853/ 6000650 : 6303                		mov	r0,r3
(1)  854/ 6000652 : 60D0                		mov.b	@r13,r0
(1)  855/ 6000654 : 7D08                		add	#8,r13
(1)  856/ 6000656 : C9FF                		and	#$FF,r0
(1)  857/ 6000658 : 4018                		shll8	r0
(1)  858/ 600065A : 6203                		mov	r0,r2
(1)  859/ 600065C : 60D0                		mov.b	@r13,r0
(1)  860/ 600065E : 7D08                		add	#8,r13
(1)  861/ 6000660 : C9FF                		and	#$FF,r0
(1)  862/ 6000662 : 203B                		or	r3,r0
(1)  863/ 6000664 : 202B                		or	r2,r0
(1)  864/ 6000666 : 6203                		mov	r0,r2
(1)  865/ 6000668 :                     
(1)  866/ 6000668 : 6423                		mov	r2,r4		; r4 - START copy
(1)  867/ 600066A : 228B                		or	r8,r2		; add CS2
(1)  868/ 600066C : 6024                		mov.b	@r2+,r0		; r3 - Length
(1)  869/ 600066E : C9FF                		and	#$FF,r0
(1)  870/ 6000670 : 6303                		mov	r0,r3
(1)  871/ 6000672 : 6024                		mov.b	@r2+,r0
(1)  872/ 6000674 : C9FF                		and	#$FF,r0
(1)  873/ 6000676 : 4018                		shll8	r0
(1)  874/ 6000678 : 230B                		or	r0,r3
(1)  875/ 600067A : 6024                		mov.b	@r2+,r0
(1)  876/ 600067C : C9FF                		and	#$FF,r0
(1)  877/ 600067E : 4028                		shll16	r0
(1)  878/ 6000680 : 230B                		or	r0,r3
(1)  879/ 6000682 : 334C                		add	r4,r3		; add end+start
(1)  880/ 6000684 : 238B                		or	r8,r3		; add CS2
(1)  881/ 6000686 : 6024                		mov.b	@r2+,r0		; get loop point
(1)  882/ 6000688 : C9FF                		and	#$FF,r0
(1)  883/ 600068A : 6403                		mov	r0,r4
(1)  884/ 600068C : 6024                		mov.b	@r2+,r0
(1)  885/ 600068E : C9FF                		and	#$FF,r0
(1)  886/ 6000690 : 4018                		shll8	r0
(1)  887/ 6000692 : 240B                		or	r0,r4
(1)  888/ 6000694 : 6024                		mov.b	@r2+,r0
(1)  889/ 6000696 : C9FF                		and	#$FF,r0
(1)  890/ 6000698 : 4028                		shll16	r0
(1)  891/ 600069A : 240B                		or	r0,r4
(1)  892/ 600069C : 903F                		mov	#%11111100,r0	; ???
(1)  893/ 600069E : 2809                		and	r0,r8
(1)  894/ 60006A0 : D01D                		mov	#MarsSound_SetPwm,r0
(1)  895/ 60006A2 : 400B                		jsr	@r0
(1)  896/ 60006A4 : 0009                		nop
(1)  897/ 60006A6 :                     .no_req:
(1)  898/ 60006A6 : 7101                		add	#1,r1		; next PWM slot
(1)  899/ 60006A8 : 4A10                		dt	r10
(1)  900/ 60006AA : 8901                		bt	.end_chnls
(1)  901/ 60006AC : AF78                		bra	.next_chnl
(1)  902/ 60006AE : 7E01                		add	#1,r14		; next PWM entry
(1)  903/ 60006B0 :                     .end_chnls:
(1)  904/ 60006B0 : D10D                		mov	#_sysreg+comm14,r1
(1)  905/ 60006B2 : 200A                		xor	r0,r0
(1)  906/ 60006B4 : 2100                		mov.b	r0,@r1
(1)  907/ 60006B6 :                     .no_trnsfrex:
(1)  908/ 60006B6 : 4F26                		lds	@r15+,pr
(1)  909/ 60006B8 : 4F06                		lds	@r15+,mach
(1)  910/ 60006BA : 4F16                		lds	@r15+,macl
(1)  911/ 60006BC : 6EF6                		mov	@r15+,r14
(1)  912/ 60006BE : 6DF6                		mov	@r15+,r13
(1)  913/ 60006C0 : 6CF6                		mov	@r15+,r12
(1)  914/ 60006C2 : 6BF6                		mov	@r15+,r11
(1)  915/ 60006C4 : 6AF6                		mov	@r15+,r10
(1)  916/ 60006C6 : 69F6                		mov	@r15+,r9
(1)  917/ 60006C8 : 68F6                		mov	@r15+,r8
(1)  918/ 60006CA : 67F6                		mov	@r15+,r7
(1)  919/ 60006CC : 66F6                		mov	@r15+,r6
(1)  920/ 60006CE : 65F6                		mov	@r15+,r5
(1)  921/ 60006D0 : 64F6                		mov	@r15+,r4
(1)  922/ 60006D2 : 63F6                		mov	@r15+,r3
(1)  923/ 60006D4 : 62F6                		mov	@r15+,r2
(1)  924/ 60006D6 :                     .no_cmdtask:
(1)  925/ 60006D6 :                     	; ---------------------------------
(1)  926/ 60006D6 :                     	; *** END of PWM driver for GEMA
(1)  927/ 60006D6 :                     	; ---------------------------------
(1)  928/ 60006D6 :                     
(1)  929/ 60006D6 : 0009                		nop
(1)  930/ 60006D8 : 0009                		nop
(1)  931/ 60006DA : 0009                		nop
(1)  932/ 60006DC : 0009                		nop
(1)  933/ 60006DE : 0009                		nop
(1)  934/ 60006E0 : 000B                		rts
(1)  935/ 60006E2 : 0009                		nop
(1)  936/ 60006E4 :                     		align 4
(1)  937/ 60006E4 : 2000 401A 2000 402E 		ltorg
                    0600 0514 0600 0EA8 
                    C000 0530 C000 0530 
                    2000 4028 C000 0534 
                    C000 0534 0600 0E80 
                    0600 0E98 0600 0E68 
                    0600 0E80 0600 0E28 
                    0007 00FC           
(1)  938/ 6000720 :                     
(1)  939/ 6000720 :                     ; =================================================================
(1)  940/ 6000720 :                     ; ------------------------------------------------
(1)  941/ 6000720 :                     ; Slave | HBlank
(1)  942/ 6000720 :                     ; ------------------------------------------------
(1)  943/ 6000720 :                     
(1)  944/ 6000720 :                     s_irq_h:
(1)  945/ 6000720 : 914C                		mov	#_FRT,r1
(1)  946/ 6000722 : 8417                		mov.b	@(7,r1),r0
(1)  947/ 6000724 : CA02                		xor	#2,r0
(1)  948/ 6000726 : 8017                		mov.b	r0,@(7,r1)
(1)  949/ 6000728 : D11E                		mov	#_sysreg+hintclr,r1
(1)  950/ 600072A : 2101                		mov.w	r0,@r1
(1)  951/ 600072C : 0009                		nop
(1)  952/ 600072E : 0009                		nop
(1)  953/ 6000730 : 0009                		nop
(1)  954/ 6000732 : 0009                		nop
(1)  955/ 6000734 : 0009                		nop
(1)  956/ 6000736 : 000B                		rts
(1)  957/ 6000738 : 0009                		nop
(1)  958/ 600073A :                     		align 4
(1)  959/ 600073C :                     
(1)  960/ 600073C :                     ; =================================================================
(1)  961/ 600073C :                     ; ------------------------------------------------
(1)  962/ 600073C :                     ; Slave | VBlank
(1)  963/ 600073C :                     ; ------------------------------------------------
(1)  964/ 600073C :                     
(1)  965/ 600073C :                     s_irq_v:
(1)  966/ 600073C : 913E                		mov	#_FRT,r1
(1)  967/ 600073E : 8417                		mov.b	@(7,r1),r0
(1)  968/ 6000740 : CA02                		xor	#2,r0
(1)  969/ 6000742 : 8017                		mov.b	r0,@(7,r1)
(1)  970/ 6000744 : D118                		mov	#_sysreg+vintclr,r1
(1)  971/ 6000746 : 2101                		mov.w	r0,@r1
(1)  972/ 6000748 : 0009                		nop
(1)  973/ 600074A : 0009                		nop
(1)  974/ 600074C : 0009                		nop
(1)  975/ 600074E : 0009                		nop
(1)  976/ 6000750 : 0009                		nop
(1)  977/ 6000752 : 000B                		rts
(1)  978/ 6000754 : 0009                		nop
(1)  979/ 6000756 :                     		align 4
(1)  980/ 6000758 :                     
(1)  981/ 6000758 :                     ; =================================================================
(1)  982/ 6000758 :                     ; ------------------------------------------------
(1)  983/ 6000758 :                     ; Slave | VRES Interrupt (RESET button on Genesis)
(1)  984/ 6000758 :                     ; ------------------------------------------------
(1)  985/ 6000758 :                     
(1)  986/ 6000758 :                     s_irq_vres:
(1)  987/ 6000758 : D114                		mov	#_sysreg,r1
(1)  988/ 600075A : 60F3                		mov	r15,r0
(1)  989/ 600075C : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  990/ 600075E : E180                		mov	#_DMASOURCE0,r1
(1)  991/ 6000760 : E000                		mov	#0,r0
(1)  992/ 6000762 : 110C                		mov	r0,@($30,r1)
(1)  993/ 6000764 : 902B                		mov	#%0100010011100000,r0
(1)  994/ 6000766 : 1103                		mov	r0,@($C,r1)
(1)  995/ 6000768 : E190                		mov	#_DMASOURCE1,r1
(1)  996/ 600076A : E000                		mov	#0,r0
(1)  997/ 600076C : 110C                		mov	r0,@($30,r1)
(1)  998/ 600076E : 9026                		mov	#%0100010011100000,r0
(1)  999/ 6000770 : 1103                		mov	r0,@($C,r1)
(1) 1000/ 6000772 :                     
(1) 1001/ 6000772 : D10E                		mov	#_sysreg,r1
(1) 1002/ 6000774 : 8513                		mov.w	@(dreqctl,r1),r0
(1) 1003/ 6000776 : C801                		tst	#1,r0
(1) 1004/ 6000778 : 8B0E                		bf	.rv_busy
(1) 1005/ 600077A : DF0D                		mov	#(CS3|$3F000)-8,r15
(1) 1006/ 600077C : D00D                		mov	#SH2_S_HotStart,r0
(1) 1007/ 600077E : 2F02                		mov	r0,@r15
(1) 1008/ 6000780 : 901E                		mov.w   #$F0,r0
(1) 1009/ 6000782 : 1F01                		mov	r0,@(4,r15)
(1) 1010/ 6000784 : D109                		mov	#_sysreg,r1
(1) 1011/ 6000786 : D00C                		mov	#"S_OK",r0
(1) 1012/ 6000788 : 1109                		mov	r0,@(comm4,r1)
(1) 1013/ 600078A : 0009                		nop
(1) 1014/ 600078C : 0009                		nop
(1) 1015/ 600078E : 0009                		nop
(1) 1016/ 6000790 : 0009                		nop
(1) 1017/ 6000792 : 0009                		nop
(1) 1018/ 6000794 : 002B                		rte
(1) 1019/ 6000796 : 0009                		nop
(1) 1020/ 6000798 :                     		align 4
(1) 1021/ 6000798 :                     .rv_busy:
(1) 1022/ 6000798 : 9110                		mov	#_FRT,r1
(1) 1023/ 600079A : 8417                		mov.b	@(7,r1),r0
(1) 1024/ 600079C : CA02                		xor	#2,r0
(1) 1025/ 600079E : 8017                		mov.b	r0,@(7,r1)
(1) 1026/ 60007A0 : AFFE                		bra	*
(1) 1027/ 60007A2 : 0009                		nop
(1) 1028/ 60007A4 :                     		align 4
(1) 1029/ 60007A4 : 2000 4018 2000 4016 		ltorg		; Save literals
                    2000 4000 0603 EFF8 
                    0600 1498 535F 4F4B 
                    FE10 44E0 00F0      
(1) 1030/ 60007C2 :                     
(1) 1031/ 60007C2 :                     ; ; =================================================================
(1) 1032/ 60007C2 :                     ; ; ------------------------------------------------
(1) 1033/ 60007C2 :                     ; ; Master | Watchdog interrupt
(1) 1034/ 60007C2 :                     ; ; ------------------------------------------------
(1) 1035/ 60007C2 :                     ;
(1) 1036/ 60007C2 :                     ; ; m_irq_wdg:
(1) 1037/ 60007C2 :                     ; ; check cache_m_plgn.asm
(1) 1038/ 60007C2 :                     ;
(1) 1039/ 60007C2 :                     ; ; =================================================================
(1) 1040/ 60007C2 :                     ; ; ------------------------------------------------
(1) 1041/ 60007C2 :                     ; ; Slave | Watchdog interrupt
(1) 1042/ 60007C2 :                     ; ; ------------------------------------------------
(1) 1043/ 60007C2 :                     ;
(1) 1044/ 60007C2 :                     ; 		align 4
(1) 1045/ 60007C2 :                     ; s_irq_wdg:
(1) 1046/ 60007C2 :                     ; ; 		mov	#$F0,r0
(1) 1047/ 60007C2 :                     ; ; 		ldc	r0,sr
(1) 1048/ 60007C2 :                     ; 		mov	r2,@-r15
(1) 1049/ 60007C2 :                     ; 		mov	#_FRT,r1
(1) 1050/ 60007C2 :                     ; 		mov.b   @(7,r1),r0
(1) 1051/ 60007C2 :                     ; 		xor     #2,r0
(1) 1052/ 60007C2 :                     ; 		mov.b   r0,@(7,r1)
(1) 1053/ 60007C2 :                     ;
(1) 1054/ 60007C2 :                     ; 		mov.w	#$FE80,r1
(1) 1055/ 60007C2 :                     ; 		mov.w   #$A518,r0		; Watchdog OFF
(1) 1056/ 60007C2 :                     ; 		mov.w   r0,@r1
(1) 1057/ 60007C2 :                     ; 		or      #$20,r0			; ON again
(1) 1058/ 60007C2 :                     ; 		mov.w   r0,@r1
(1) 1059/ 60007C2 :                     ; 		mov	#$10,r2
(1) 1060/ 60007C2 :                     ; 		mov.w   #$5A00,r0		; Timer for the next one
(1) 1061/ 60007C2 :                     ; 		or	r2,r0
(1) 1062/ 60007C2 :                     ; 		mov.w	r0,@r1
(1) 1063/ 60007C2 :                     ;
(1) 1064/ 60007C2 :                     ; 		mov	@r15+,r2
(1) 1065/ 60007C2 :                     ; 		rts
(1) 1066/ 60007C2 :                     ; 		nop
(1) 1067/ 60007C2 :                     ; 		align 4
(1) 1068/ 60007C2 :                     ; 		ltorg
(1) 1069/ 60007C2 :                     
(1) 1070/ 60007C2 :                     ; ====================================================================
(1) 1071/ 60007C2 :                     ; ----------------------------------------------------------------
(1) 1072/ 60007C2 :                     ; Mars_ClearCacheRam
(1) 1073/ 60007C2 :                     ;
(1) 1074/ 60007C2 :                     ; Clear the entire "fast code" section for the current CPU
(1) 1075/ 60007C2 :                     ; ----------------------------------------------------------------
(1) 1076/ 60007C2 :                     
(1) 1077/ 60007C2 :                     		align 4
(1) 1078/ 60007C4 :                     Mars_ClearCacheRam:
(1) 1079/ 60007C4 : D112                		mov.l	#$C0000000+$800,r1
(1) 1080/ 60007C6 : E000                		mov	#0,r0
(1) 1081/ 60007C8 : 9226                		mov.w	#$80,r2
(1) 1082/ 60007CA :                     .loop:
(1) 1083/ 60007CA : 2106                		mov	r0,@-r1
(1) 1084/ 60007CC : 2106                		mov	r0,@-r1
(1) 1085/ 60007CE : 2106                		mov	r0,@-r1
(1) 1086/ 60007D0 : 2106                		mov	r0,@-r1
(1) 1087/ 60007D2 : 4210                		dt	r2
(1) 1088/ 60007D4 : 8BF9                		bf	.loop
(1) 1089/ 60007D6 : 000B                		rts
(1) 1090/ 60007D8 : 0009                		nop
(1) 1091/ 60007DA :                     		align 4
(1) 1092/ 60007DC :                     
(1) 1093/ 60007DC :                     ; ----------------------------------------------------------------
(1) 1094/ 60007DC :                     ; Mars_LoadCacheRam
(1) 1095/ 60007DC :                     ;
(1) 1096/ 60007DC :                     ; Loads "fast code" into the SH2's cache, $800 bytes maximum.
(1) 1097/ 60007DC :                     ;
(1) 1098/ 60007DC :                     ; Input:
(1) 1099/ 60007DC :                     ; r1 - CACHE Code to send
(1) 1100/ 60007DC :                     ; r2 - Size/4
(1) 1101/ 60007DC :                     ;
(1) 1102/ 60007DC :                     ; Breaks:
(1) 1103/ 60007DC :                     ; r3
(1) 1104/ 60007DC :                     ; ----------------------------------------------------------------
(1) 1105/ 60007DC :                     
(1) 1106/ 60007DC :                     		align 4
(1) 1107/ 60007DC :                     Mars_LoadCacheRam:
(1) 1108/ 60007DC : 4F03                		stc	sr,@-r15	; Interrupts OFF
(1) 1109/ 60007DE : E0F0                		mov.b	#$F0,r0		; ** $F0
(1) 1110/ 60007E0 : 600C                		extu.b	r0,r0
(1) 1111/ 60007E2 : 400E                		ldc	r0,sr
(1) 1112/ 60007E4 : 9319                		mov	#_CCR,r3
(1) 1113/ 60007E6 : E010                		mov	#%00010000,r0	; Cache purge + Disable
(1) 1114/ 60007E8 : 2301                		mov.w	r0,@r3
(1) 1115/ 60007EA : 0009                		nop
(1) 1116/ 60007EC : 0009                		nop
(1) 1117/ 60007EE : 0009                		nop
(1) 1118/ 60007F0 : 0009                		nop
(1) 1119/ 60007F2 : 0009                		nop
(1) 1120/ 60007F4 : 0009                		nop
(1) 1121/ 60007F6 : 0009                		nop
(1) 1122/ 60007F8 : 0009                		nop
(1) 1123/ 60007FA : E009                		mov	#%00001001,r0	; Cache two-way mode + Enable
(1) 1124/ 60007FC : 2301                		mov.w	r0,@r3
(1) 1125/ 60007FE : D305                		mov 	#$C0000000,r3
(1) 1126/ 6000800 :                     .copy:
(1) 1127/ 6000800 : 6016                		mov 	@r1+,r0
(1) 1128/ 6000802 : 2302                		mov 	r0,@r3
(1) 1129/ 6000804 : 4210                		dt	r2
(1) 1130/ 6000806 : 8FFB                		bf/s	.copy
(1) 1131/ 6000808 : 7304                		add 	#4,r3
(1) 1132/ 600080A : 000B                		rts
(1) 1133/ 600080C : 4F07                		ldc	@r15+,sr
(1) 1134/ 600080E :                     		align 4
(1) 1135/ 6000810 : C000 0800 C000 0000 		ltorg
                    0080 FE92           
(1) 1136/ 600081C :                     
(1) 1137/ 600081C :                     ; --------------------------------------------------------
(1) 1138/ 600081C :                     ; Mars_SetWatchdog
(1) 1139/ 600081C :                     ;
(1) 1140/ 600081C :                     ; Prepares watchdog interrupt
(1) 1141/ 600081C :                     ;
(1) 1142/ 600081C :                     ; Input:
(1) 1143/ 600081C :                     ; r1 - Watchdog CPU clock divider
(1) 1144/ 600081C :                     ; r2 - Watchdog Pre-timer
(1) 1145/ 600081C :                     ; --------------------------------------------------------
(1) 1146/ 600081C :                     
(1) 1147/ 600081C :                     		align 4
(1) 1148/ 600081C :                     Mars_SetWatchdog:
(1) 1149/ 600081C : 0402                		stc	sr,r4
(1) 1150/ 600081E : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 1151/ 6000820 : 600C                		extu.b	r0,r0
(1) 1152/ 6000822 : 400E                		ldc 	r0,sr
(1) 1153/ 6000824 : 930E                		mov.l	#_CCR,r3		; Refresh Cache
(1) 1154/ 6000826 : E008                		mov	#%00001000,r0		; Two-way mode
(1) 1155/ 6000828 : 2301                		mov.w	r0,@r3
(1) 1156/ 600082A : E019                		mov	#%00011001,r0		; Cache purge / Two-way mode / Cache ON
(1) 1157/ 600082C : 2301                		mov.w	r0,@r3
(1) 1158/ 600082E : 930A                		mov.w	#$FE80,r3		; $FFFFFE80
(1) 1159/ 6000830 : 900A                		mov.w	#$5A00,r0		; Watchdog pre-timer
(1) 1160/ 6000832 : 202B                		or	r2,r0
(1) 1161/ 6000834 : 2301                		mov.w	r0,@r3
(1) 1162/ 6000836 : 9008                		mov.w	#$A538,r0		; Enable Watchdog
(1) 1163/ 6000838 : 201B                		or	r1,r0
(1) 1164/ 600083A : 2301                		mov.w	r0,@r3
(1) 1165/ 600083C : 440E                		ldc	r4,sr
(1) 1166/ 600083E : 000B                		rts
(1) 1167/ 6000840 : 0009                		nop
(1) 1168/ 6000842 :                     		align 4
(1) 1169/ 6000844 : FE92 FE80 5A00 A538 		ltorg
(1) 1170/ 600084C :                     
(1) 1171/ 600084C :                     ; ====================================================================
(1) 1172/ 600084C :                     ; ----------------------------------------------------------------
(1) 1173/ 600084C :                     ; MARS System features
(1) 1174/ 600084C :                     ; ----------------------------------------------------------------
(1) 1175/ 600084C :                     
(1) 1176/ 600084C :                     		include "system/mars/video.asm"
(2)    1/ 600084C :                     ; ====================================================================
(2)    2/ 600084C :                     ; ----------------------------------------------------------------
(2)    3/ 600084C :                     ; 32X Video
(2)    4/ 600084C :                     ;
(2)    5/ 600084C :                     ; Some routines are located on the cache folder for
(2)    6/ 600084C :                     ; speed reasons.
(2)    7/ 600084C :                     ; ----------------------------------------------------------------
(2)    8/ 600084C :                     
(2)    9/ 600084C :                     ; --------------------------------------------------------
(2)   10/ 600084C :                     ; Settings
(2)   11/ 600084C :                     ; --------------------------------------------------------
(2)   12/ 600084C :                     
(2)   13/ 600084C :                     ; SDRAM
(2)   14/ 600084C : =$2C000             MAX_SCRNBUFF	equ $2C000	; MAX SDRAM for each Screen mode
(2)   15/ 600084C : =$8                 MAX_SSPRSPD	equ 8		; Supersprite box increment: Size+this (maximum Super Sprite speed)
(2)   16/ 600084C : =$3D4               MAX_FACES	equ 980		; MAX polygon faces for 3D models
(2)   17/ 600084C : =$434               MAX_SVDP_PZ	equ 980+96	; MAX polygon pieces to draw
(2)   18/ 600084C : =$FFFFFFFFFF..      MAX_ZDIST	equ -$1900	; Maximum 3D field distance (-Z)
(2)   19/ 600084C :                     
(2)   20/ 600084C :                     ; FRAMEBUFFER
(2)   21/ 600084C : =$1F800             FBVRAM_BLANK	equ $1F800	; Location for the BLANK line
(2)   22/ 600084C : =$1D000             FBVRAM_PATCH	equ $1D000	; Framebuffer location for the affected XShift lines
(2)   23/ 600084C :                     
(2)   24/ 600084C :                     ; --------------------------------------------------------
(2)   25/ 600084C :                     ; Variables
(2)   26/ 600084C :                     ; --------------------------------------------------------
(2)   27/ 600084C :                     
(2)   28/ 600084C :                     ; Variables for 3D mode.
(2)   29/ 600084C : =$140               SCREEN_WIDTH	equ 320		; Screen width and height positions used
(2)   30/ 600084C : =$E0                SCREEN_HEIGHT	equ 224		; by 3D object rendering
(2)   31/ 600084C : =$80                PLGN_TEXURE	equ %10000000	; plypz_type (MSB)
(2)   32/ 600084C : =$40                PLGN_TRI	equ %01000000
(2)   33/ 600084C :                     
(2)   34/ 600084C :                     ; --------------------------------------------------------
(2)   35/ 600084C :                     ; Structs
(2)   36/ 600084C :                     ; --------------------------------------------------------
(2)   37/ 600084C :                     
(2)   38/ 600084C : (MACRO)             		struct 0
(2)   38/ 600084C :                     
(2)   38/ 600084C :                     ;       if WPATCH=1
(2)   38/ 600084C :                     ; GLBL_LASTPC   set *
(2)   38/ 600084C :                     ; GLBL_LASTORG  set *
(2)   38/ 600084C :                     ;               dephase
(2)   38/ 600084C :                     ;               phase 0
(2)   38/ 600084C :                     ;       else
(2)   38/ 600084C : =$600084C           GLBL_LASTPC     set *
(2)   38/   4FA4C :                                     dephase
(2)   38/   4FA4C : =$4FA4C             GLBL_LASTORG    set *
(2)   38/       0 :                                     phase 0
(2)   38/       0 :                     ;       endif
(2)   39/       0 :                     scrl_xpos_old	ds.l 1		; OLD Xpos position
(2)   40/       4 :                     scrl_ypos_old	ds.l 1		; OLD Ypos position
(2)   41/       8 :                     scrl_xset	ds.l 1		; Scroll X counter
(2)   42/       C :                     scrl_yset	ds.l 1		; Scroll Y counter
(2)   43/      10 :                     scrl_blksize	ds.l 1		; Block size for scrolling
(2)   44/      14 :                     scrl_intrl_size	ds.l 1		; Internal scroll FULL size (scrl_intrl_w*scrl_intrl_h)
(2)   45/      18 :                     scrl_intrl_w	ds.l 1		; Internal scroll Width (MUST be larger than 320)
(2)   46/      1C :                     scrl_intrl_h	ds.l 1		; Internal scroll Height
(2)   47/      20 :                     scrl_fbpos_y	ds.l 1		; Screen's Y position
(2)   48/      24 :                     scrl_fbpos	ds.l 1		; Screen's TOP-LEFT position
(2)   49/      28 :                     scrl_fbdata	ds.l 1		; Screen data location on framebuffer
(2)   50/      2C :                     scrl_xpos	ds.l 1		; $0000.0000
(2)   51/      30 :                     scrl_ypos	ds.l 1		; $0000.0000
(2)   52/      34 :                     sizeof_mscrl	ds.l 0
(2)   53/      34 : (MACRO)             		finish
(2)   53/       0 :                                     !org GLBL_LASTORG
(2)   53/ 600084C :                                     phase GLBL_LASTPC
(2)   54/ 600084C :                     
(2)   55/ 600084C : (MACRO)             		struct 0
(2)   55/ 600084C :                     
(2)   55/ 600084C :                     ;       if WPATCH=1
(2)   55/ 600084C :                     ; GLBL_LASTPC   set *
(2)   55/ 600084C :                     ; GLBL_LASTORG  set *
(2)   55/ 600084C :                     ;               dephase
(2)   55/ 600084C :                     ;               phase 0
(2)   55/ 600084C :                     ;       else
(2)   55/ 600084C : =$600084C           GLBL_LASTPC     set *
(2)   55/   4FA4C :                                     dephase
(2)   55/   4FA4C : =$4FA4C             GLBL_LASTORG    set *
(2)   55/       0 :                                     phase 0
(2)   55/       0 :                     ;       endif
(2)   56/       0 :                     plypz_type	ds.l 1		; Type + Material settings (width + index add)
(2)   57/       4 :                     plypz_mtrl	ds.l 1		; Material data (ROM or SDRAM)
(2)   58/       8 :                     plypz_ytb	ds.l 1		; Ytop | Ybottom
(2)   59/       C :                     plypz_xl	ds.l 1		;  Screen X-Left | X-Right  16-bit
(2)   60/      10 :                     plypz_src_xl	ds.l 1		; Texture X-Left | X-Right  16-bit
(2)   61/      14 :                     plypz_src_yl	ds.l 1		; Texture Y-Top  | Y-Bottom 16-bit
(2)   62/      18 :                     plypz_xl_dx	ds.l 1		; 0000.0000
(2)   63/      1C :                     plypz_xr_dx	ds.l 1		; 0000.0000
(2)   64/      20 :                     plypz_src_xl_dx	ds.l 1
(2)   65/      24 :                     plypz_src_xr_dx	ds.l 1
(2)   66/      28 :                     plypz_src_yl_dx	ds.l 1
(2)   67/      2C :                     plypz_src_yr_dx	ds.l 1
(2)   68/      30 :                     sizeof_plypz	ds.l 0
(2)   69/      30 : (MACRO)             		finish
(2)   69/       0 :                                     !org GLBL_LASTORG
(2)   69/ 600084C :                                     phase GLBL_LASTPC
(2)   70/ 600084C :                     
(2)   71/ 600084C :                     ; Polygon data
(2)   72/ 600084C :                     ; Size: $38
(2)   73/ 600084C : (MACRO)             		struct 0
(2)   73/ 600084C :                     
(2)   73/ 600084C :                     ;       if WPATCH=1
(2)   73/ 600084C :                     ; GLBL_LASTPC   set *
(2)   73/ 600084C :                     ; GLBL_LASTORG  set *
(2)   73/ 600084C :                     ;               dephase
(2)   73/ 600084C :                     ;               phase 0
(2)   73/ 600084C :                     ;       else
(2)   73/ 600084C : =$600084C           GLBL_LASTPC     set *
(2)   73/   4FA4C :                                     dephase
(2)   73/   4FA4C : =$4FA4C             GLBL_LASTORG    set *
(2)   73/       0 :                                     phase 0
(2)   73/       0 :                     ;       endif
(2)   74/       0 :                     polygn_type	ds.l 1		; %MSww wwww aaaa aaaa | %MS w-Texture width, a-Pixel increment
(2)   75/       4 :                     polygn_mtrl	ds.l 1		; Material Type: Color (0-255) or Texture data address
(2)   76/       8 :                     polygn_points	ds.l 4*2	; X/Y positions
(2)   77/      28 :                     polygn_srcpnts	ds.w 4*2	; X/Y texture points 16-bit, Ignored on solid color.
(2)   78/      38 :                     sizeof_polygn	ds.l 0
(2)   79/      38 : (MACRO)             		finish
(2)   79/       0 :                                     !org GLBL_LASTORG
(2)   79/ 600084C :                                     phase GLBL_LASTPC
(2)   80/ 600084C :                     
(2)   81/ 600084C :                     ; ====================================================================
(2)   82/ 600084C :                     ; ----------------------------------------------------------------
(2)   83/ 600084C :                     ; Init MARS Video
(2)   84/ 600084C :                     ;
(2)   85/ 600084C :                     ; Breaks:
(2)   86/ 600084C :                     ; r1-r4
(2)   87/ 600084C :                     ; ----------------------------------------------------------------
(2)   88/ 600084C :                     
(2)   89/ 600084C :                     		align 4
(2)   90/ 600084C :                     MarsVideo_Init:
(2)   91/ 600084C : 4F22                		sts	pr,@-r15
(2)   92/ 600084E : D10F                		mov	#_sysreg,r1
(2)   93/ 6000850 : 9024                		mov 	#FM,r0			; Set SVDP permission to SH2.
(2)   94/ 6000852 : 8010                  		mov.b	r0,@(adapter,r1)	; * The Genesis side will still control the
(2)   95/ 6000854 : D10E                		mov 	#_vdpreg,r1		; 256-color palette using DREQ *
(2)   96/ 6000856 : E000                		mov	#0,r0			; Start at BLANK
(2)   97/ 6000858 : 8011                		mov.b	r0,@(bitmapmd,r1)
(2)   98/ 600085A : D20E                		mov	#_framebuffer,r2	; Make default nametables
(2)   99/ 600085C : B006                		bsr	.def_fb
(2)  100/ 600085E : 0009                		nop
(2)  101/ 6000860 : B004                		bsr	.def_fb
(2)  102/ 6000862 : 0009                		nop
(2)  103/ 6000864 : 4F26                		lds	@r15+,pr
(2)  104/ 6000866 : 000B                		rts
(2)  105/ 6000868 : 0009                		nop
(2)  106/ 600086A :                     		align 4
(2)  107/ 600086C :                     .def_fb:
(2)  108/ 600086C : 6323                		mov	r2,r3
(2)  109/ 600086E : D00A                		mov	#FBVRAM_BLANK/2,r0	; The very last usable (blank) line.
(2)  110/ 6000870 : 9415                		mov	#240,r4
(2)  111/ 6000872 :                     .nxt_lne:
(2)  112/ 6000872 : 2301                		mov.w	r0,@r3
(2)  113/ 6000874 : 4410                		dt	r4
(2)  114/ 6000876 : 8FFC                		bf/s	.nxt_lne
(2)  115/ 6000878 : 7302                		add	#2,r3
(2)  116/ 600087A : 841B                		mov.b	@(framectl,r1),r0	; Frameswap request
(2)  117/ 600087C : CA01                		xor	#1,r0
(2)  118/ 600087E : 6303                		mov	r0,r3
(2)  119/ 6000880 : 801B                		mov.b	r0,@(framectl,r1)
(2)  120/ 6000882 : 841B                .wait_frm:	mov.b	@(framectl,r1),r0	; And wait until it flips
(2)  121/ 6000884 : 3300                		cmp/eq	r0,r3
(2)  122/ 6000886 : 8BFC                		bf	.wait_frm
(2)  123/ 6000888 : 000B                		rts
(2)  124/ 600088A : 0009                		nop
(2)  125/ 600088C :                     		align 4
(2)  126/ 600088C : 2000 4000 2000 4100 		ltorg
                    2400 0000 0000 FC00 
                    0080 00F0           
(2)  127/ 60008A0 :                     
(2)  128/ 60008A0 :                     ; ====================================================================
(2)  129/ 60008A0 :                     ; ----------------------------------------------------------------
(2)  130/ 60008A0 :                     ; Subroutines
(2)  131/ 60008A0 :                     ; ----------------------------------------------------------------
(2)  132/ 60008A0 :                     
(2)  133/ 60008A0 :                     ; --------------------------------------------------------
(2)  134/ 60008A0 :                     ; VideoMars_ClearScreen
(2)  135/ 60008A0 :                     ;
(2)  136/ 60008A0 :                     ; Clears screen using VDPFILL
(2)  137/ 60008A0 :                     ;
(2)  138/ 60008A0 :                     ; Input:
(2)  139/ 60008A0 :                     ; r1 | Framebuffer VRAM location
(2)  140/ 60008A0 :                     ; r2 | Width/2
(2)  141/ 60008A0 :                     ; r3 | Height
(2)  142/ 60008A0 :                     ; r4 | Pixel(s) to write
(2)  143/ 60008A0 :                     ;
(2)  144/ 60008A0 :                     ; Uses:
(2)  145/ 60008A0 :                     ; r5-r6
(2)  146/ 60008A0 :                     ; --------------------------------------------------------
(2)  147/ 60008A0 :                     
(2)  148/ 60008A0 :                     ; TODO: Fix this.
(2)  149/ 60008A0 :                     
(2)  150/ 60008A0 :                     		align 4
(2)  151/ 60008A0 :                     MarsVideo_ClearScreen:
(2)  152/ 60008A0 : 4101                		shlr	r1
(2)  153/ 60008A2 : 6513                		mov	r1,r5
(2)  154/ 60008A4 : D63E                		mov	#_vdpreg,r6
(2)  155/ 60008A6 :                     .fb_loop:
(2)  156/ 60008A6 : 6023                		mov	r2,r0
(2)  157/ 60008A8 : 8162                		mov.w	r0,@(filllength,r6)
(2)  158/ 60008AA : 6013                		mov	r1,r0
(2)  159/ 60008AC : 8163                		mov.w	r0,@(fillstart,r6)
(2)  160/ 60008AE : 6043                		mov	r4,r0
(2)  161/ 60008B0 : 8164                		mov.w	r0,@(filldata,r6)
(2)  162/ 60008B2 : 8565                .wait_fb2:	mov.w	@(vdpsts,r6),r0
(2)  163/ 60008B4 : C802                		tst	#%10,r0
(2)  164/ 60008B6 : 8BFC                		bf	.wait_fb2
(2)  165/ 60008B8 : 4310                		dt	r3
(2)  166/ 60008BA : 8FF4                		bf/s	.fb_loop
(2)  167/ 60008BC : 315C                		add	r5,r1
(2)  168/ 60008BE :                     .no_redraw_2:
(2)  169/ 60008BE : 000B                		rts
(2)  170/ 60008C0 : 0009                		nop
(2)  171/ 60008C2 :                     		align 4
(2)  172/ 60008C4 :                     
(2)  173/ 60008C4 :                     ; --------------------------------------------------------
(2)  174/ 60008C4 :                     ; MarsVideo_ResetNameTbl
(2)  175/ 60008C4 :                     ;
(2)  176/ 60008C4 :                     ; Reset the nametable, points all lines into a blank
(2)  177/ 60008C4 :                     ; line (FBVRAM_BLANK)
(2)  178/ 60008C4 :                     ;
(2)  179/ 60008C4 :                     ; Breaks:
(2)  180/ 60008C4 :                     ; r1-r2
(2)  181/ 60008C4 :                     ; --------------------------------------------------------
(2)  182/ 60008C4 :                     
(2)  183/ 60008C4 :                     MarsVideo_ResetNameTbl:
(2)  184/ 60008C4 : D137                		mov	#_framebuffer,r1
(2)  185/ 60008C6 : D038                		mov	#FBVRAM_BLANK,r0
(2)  186/ 60008C8 : 9272                		mov	#240,r2
(2)  187/ 60008CA :                     .nxt_lne2:
(2)  188/ 60008CA : 2101                		mov.w	r0,@r1
(2)  189/ 60008CC : 4210                		dt	r2
(2)  190/ 60008CE : 8FFC                		bf/s	.nxt_lne2
(2)  191/ 60008D0 : 7102                		add	#2,r1
(2)  192/ 60008D2 : 000B                		rts
(2)  193/ 60008D4 : 0009                		nop
(2)  194/ 60008D6 :                     		align 4
(2)  195/ 60008D8 :                     
(2)  196/ 60008D8 :                     ; --------------------------------------------------------
(2)  197/ 60008D8 :                     ; MarsVideo_MakeNameTbl
(2)  198/ 60008D8 :                     ;
(2)  199/ 60008D8 :                     ; Builds the nametable for a normal screen, if
(2)  200/ 60008D8 :                     ; marsGbl_WaveEnable is set, it will add a
(2)  201/ 60008D8 :                     ; wave effect to the linetable (in WORDS)
(2)  202/ 60008D8 :                     ;
(2)  203/ 60008D8 :                     ; Input:
(2)  204/ 60008D8 :                     ; r1 | Framebuffer position
(2)  205/ 60008D8 :                     ; r2 | Width (Width*2 for Direct color)
(2)  206/ 60008D8 :                     ; r3 | Height
(2)  207/ 60008D8 :                     ; r4 | Y line position
(2)  208/ 60008D8 :                     ;
(2)  209/ 60008D8 :                     ; Uses:
(2)  210/ 60008D8 :                     ; r1-r11
(2)  211/ 60008D8 :                     ; --------------------------------------------------------
(2)  212/ 60008D8 :                     
(2)  213/ 60008D8 :                     MarsVideo_MakeNameTbl:
(2)  214/ 60008D8 : DA32                		mov	#_framebuffer,r10
(2)  215/ 60008DA : 4400                		shll	r4
(2)  216/ 60008DC : 3A4C                		add	r4,r10
(2)  217/ 60008DE : D530                		mov 	#_vdpreg,r5
(2)  218/ 60008E0 : 8451                		mov.b	@(bitmapmd,r5),r0
(2)  219/ 60008E2 : C903                		and	#%11,r0
(2)  220/ 60008E4 : 8803                		cmp/eq	#3,r0			; Don't mess with the RLE lines.
(2)  221/ 60008E6 : 892C                		bt	.cant_use
(2)  222/ 60008E8 : C50F                		mov.w	@(marsGbl_WaveEnable,gbr),r0
(2)  223/ 60008EA : 2008                		tst	r0,r0
(2)  224/ 60008EC : 8922                		bt	.linetbl_normal
(2)  225/ 60008EE :                     
(2)  226/ 60008EE :                     	; Special linetable with
(2)  227/ 60008EE :                     	; wave deformation.
(2)  228/ 60008EE : C510                		mov.w	@(marsGbl_WaveSpd,gbr),r0
(2)  229/ 60008F0 : 6403                		mov	r0,r4
(2)  230/ 60008F2 : C513                		mov.w	@(marsGbl_WaveTan,gbr),r0
(2)  231/ 60008F4 : 955D                		mov	#$7FF,r5
(2)  232/ 60008F6 : 304C                		add	r4,r0			; wave speed
(2)  233/ 60008F8 : 2059                		and	r5,r0
(2)  234/ 60008FA : C113                		mov.w	r0,@(marsGbl_WaveTan,gbr)
(2)  235/ 60008FC : 6703                		mov	r0,r7
(2)  236/ 60008FE : C511                		mov.w	@(marsGbl_WaveMax,gbr),r0
(2)  237/ 6000900 : 6503                		mov	r0,r5
(2)  238/ 6000902 : C512                		mov.w	@(marsGbl_WaveDeform,gbr),r0
(2)  239/ 6000904 : 6403                		mov	r0,r4
(2)  240/ 6000906 : E600                		mov	#0,r6
(2)  241/ 6000908 : 9B53                		mov	#$7FF,r11
(2)  242/ 600090A : DC28                		mov	#sin_table,r12
(2)  243/ 600090C :                     .nxt_lne:
(2)  244/ 600090C : 6073                		mov	r7,r0
(2)  245/ 600090E : 374C                		add	r4,r7			; wave distord
(2)  246/ 6000910 : 27B9                		and	r11,r7
(2)  247/ 6000912 : 4008                		shll2	r0
(2)  248/ 6000914 : 09CE                		mov	@(r0,r12),r9
(2)  249/ 6000916 : 395D                		dmuls	r5,r9
(2)  250/ 6000918 : 091A                		sts	macl,r9
(2)  251/ 600091A : 4929                		shlr16	r9
(2)  252/ 600091C : 699F                		exts.w	r9,r9
(2)  253/ 600091E : 6013                		mov	r1,r0
(2)  254/ 6000920 : 306C                		add	r6,r0
(2)  255/ 6000922 : 309C                		add	r9,r0
(2)  256/ 6000924 : 4001                		shlr	r0
(2)  257/ 6000926 : 2A01                		mov.w	r0,@r10
(2)  258/ 6000928 : 362C                		add	r2,r6
(2)  259/ 600092A : 4310                		dt	r3
(2)  260/ 600092C : 8FEE                		bf/s	.nxt_lne
(2)  261/ 600092E : 7A02                		add	#2,r10
(2)  262/ 6000930 : 000B                		rts
(2)  263/ 6000932 : 0009                		nop
(2)  264/ 6000934 :                     		align 4
(2)  265/ 6000934 :                     
(2)  266/ 6000934 :                     .linetbl_normal:
(2)  267/ 6000934 : 4101                		shlr	r1
(2)  268/ 6000936 : 4201                		shlr	r2
(2)  269/ 6000938 :                     .nxt_lne2:
(2)  270/ 6000938 : 2A11                		mov.w	r1,@r10
(2)  271/ 600093A : 312C                		add	r2,r1
(2)  272/ 600093C : 4310                		dt	r3
(2)  273/ 600093E : 8FFB                		bf/s	.nxt_lne2
(2)  274/ 6000940 : 7A02                		add	#2,r10
(2)  275/ 6000942 :                     .cant_use:
(2)  276/ 6000942 : 000B                		rts
(2)  277/ 6000944 : 0009                		nop
(2)  278/ 6000946 :                     		align 4
(2)  279/ 6000948 :                     
(2)  280/ 6000948 :                     ; --------------------------------------------------------
(2)  281/ 6000948 :                     ; MarsVideo_FixTblShift
(2)  282/ 6000948 :                     ;
(2)  283/ 6000948 :                     ; Fix the affected $xxFF lines
(2)  284/ 6000948 :                     ;
(2)  285/ 6000948 :                     ; Input:
(2)  286/ 6000948 :                     ; r1 | Start line
(2)  287/ 6000948 :                     ; r2 | Number of lines
(2)  288/ 6000948 :                     ; r3 | Location for the fixed lines
(2)  289/ 6000948 :                     ;
(2)  290/ 6000948 :                     ; Break:
(2)  291/ 6000948 :                     ; r7-r14
(2)  292/ 6000948 :                     ; --------------------------------------------------------
(2)  293/ 6000948 :                     
(2)  294/ 6000948 :                     ; TODO: Check this later.
(2)  295/ 6000948 :                     
(2)  296/ 6000948 :                     MarsVideo_FixTblShift:
(2)  297/ 6000948 : DE15                		mov	#_vdpreg,r14
(2)  298/ 600094A : 84E1                		mov.b	@(bitmapmd,r14),r0	; Check if we are on indexed mode
(2)  299/ 600094C : C903                		and	#%11,r0
(2)  300/ 600094E : 8801                		cmp/eq	#1,r0
(2)  301/ 6000950 : 8B23                		bf	.ptchset
(2)  302/ 6000952 : C50E                		mov.w	@(marsGbl_XShift,gbr),r0	; XShift is set?
(2)  303/ 6000954 : C901                		and	#1,r0
(2)  304/ 6000956 : 2008                		tst	r0,r0
(2)  305/ 6000958 : 891F                		bt	.ptchset
(2)  306/ 600095A :                     
(2)  307/ 600095A : DE12                		mov	#_framebuffer,r14	; r14 - Framebuffer BASE
(2)  308/ 600095C : 6CE3                		mov	r14,r12			; r12 - Framebuffer output for the patched pixel lines
(2)  309/ 600095E : 3C3C                		add	r3,r12
(2)  310/ 6000960 : 6013                		mov	r1,r0
(2)  311/ 6000962 : 4008                		shll2	r0
(2)  312/ 6000964 : 3E0C                		add	r0,r14
(2)  313/ 6000966 : 6DE3                		mov	r14,r13			; r13 - Framebuffer lines to check
(2)  314/ 6000968 : 6B23                		mov	r2,r11			; r11 - Lines to check
(2)  315/ 600096A : E0FF                		mov	#-1,r0
(2)  316/ 600096C : 6A0C                		extu.b	r0,r10			; r10 - AND byte to check ($FF)
(2)  317/ 600096E : 690D                		extu.w	r0,r9			;  r9 - AND word limit ($FFFF)
(2)  318/ 6000970 :                     .loop:
(2)  319/ 6000970 : 60D1                		mov.w	@r13,r0
(2)  320/ 6000972 : 2099                		and	r9,r0
(2)  321/ 6000974 : 6703                		mov	r0,r7
(2)  322/ 6000976 : 20A9                		and	r10,r0
(2)  323/ 6000978 : 30A0                		cmp/eq	r10,r0
(2)  324/ 600097A : 8B0B                		bf	.tblexit
(2)  325/ 600097C : 4700                		shll	r7
(2)  326/ 600097E : 37EC                		add	r14,r7
(2)  327/ 6000980 : 60C3                		mov	r12,r0
(2)  328/ 6000982 : 4001                		shlr	r0
(2)  329/ 6000984 : 2D01                		mov.w	r0,@r13
(2)  330/ 6000986 : 9315                		mov	#(320+4)/2,r3
(2)  331/ 6000988 :                     .copy:
(2)  332/ 6000988 : 6071                		mov.w	@r7,r0
(2)  333/ 600098A : 2C01                		mov.w	r0,@r12
(2)  334/ 600098C : 7702                		add	#2,r7
(2)  335/ 600098E : 4310                		dt	r3
(2)  336/ 6000990 : 8FFA                		bf/s	.copy
(2)  337/ 6000992 : 7C02                		add	#2,r12
(2)  338/ 6000994 :                     .tblexit:
(2)  339/ 6000994 : 4B10                		dt	r11
(2)  340/ 6000996 : 8FEB                		bf/s	.loop
(2)  341/ 6000998 : 7D02                		add	#2,r13
(2)  342/ 600099A :                     .ptchset:
(2)  343/ 600099A : 000B                		rts
(2)  344/ 600099C : 0009                		nop
(2)  345/ 600099E :                     		align 4
(2)  346/ 60009A0 : 2000 4100 2400 0000 		ltorg
                    0001 F800 0600 2864 
                    00F0 07FF 00A2      
(2)  347/ 60009B6 :                     
(2)  348/ 60009B6 :                     ; ====================================================================
(2)  349/ 60009B6 :                     ; ----------------------------------------------------------------
(2)  350/ 60009B6 :                     ; 2D Section
(2)  351/ 60009B6 :                     ;
(2)  352/ 60009B6 :                     ; Routines that write to the framebuffer are
(2)  353/ 60009B6 :                     ; located at cache_m_2D.asm
(2)  354/ 60009B6 :                     ; ----------------------------------------------------------------
(2)  355/ 60009B6 :                     
(2)  356/ 60009B6 :                     ; --------------------------------------------------------
(2)  357/ 60009B6 :                     ; MarsVideo_MkScrlField
(2)  358/ 60009B6 :                     ;
(2)  359/ 60009B6 :                     ; This builds a new internal scrolling background
(2)  360/ 60009B6 :                     ;
(2)  361/ 60009B6 :                     ; Input:
(2)  362/ 60009B6 :                     ; r1 | Background buffer to initialize
(2)  363/ 60009B6 :                     ; r2 | Framebuffer VRAM position
(2)  364/ 60009B6 :                     ; r3 | Scroll Width (320 or large)
(2)  365/ 60009B6 :                     ; r4 | Scroll Height
(2)  366/ 60009B6 :                     ; r5 | Scroll block size (4 pixels minimum)
(2)  367/ 60009B6 :                     ; r6 | X start
(2)  368/ 60009B6 :                     ; r7 | Y start
(2)  369/ 60009B6 :                     ;
(2)  370/ 60009B6 :                     ; NOTE:
(2)  371/ 60009B6 :                     ; At the very last scrollable line: The next 320
(2)  372/ 60009B6 :                     ; pixels will be visible until that line resets
(2)  373/ 60009B6 :                     ; into 0 again.
(2)  374/ 60009B6 :                     ; When you write pixels in in the range of 0-320,
(2)  375/ 60009B6 :                     ; write the same pixels at the very end of
(2)  376/ 60009B6 :                     ; the scrolling area (add width*height)
(2)  377/ 60009B6 :                     ;
(2)  378/ 60009B6 :                     ; Breaks:
(2)  379/ 60009B6 :                     ; r3-r5,macl
(2)  380/ 60009B6 :                     ; --------------------------------------------------------
(2)  381/ 60009B6 :                     
(2)  382/ 60009B6 :                     		align 4
(2)  383/ 60009B8 :                     MarsVideo_MkScrlField:
(2)  384/ 60009B8 : E034                		mov	#sizeof_mscrl,r0
(2)  385/ 60009BA : 210E                		mulu	r0,r1
(2)  386/ 60009BC : 011A                		sts	macl,r1
(2)  387/ 60009BE : D033                		mov	#RAM_Mars_ScrlBuff,r0
(2)  388/ 60009C0 : 310C                		add	r0,r1
(2)  389/ 60009C2 :                     
(2)  390/ 60009C2 : 1154                		mov	r5,@(scrl_blksize,r1)
(2)  391/ 60009C4 : 335C                		add	r5,r3	; add "block"
(2)  392/ 60009C6 : 112A                		mov	r2,@(scrl_fbdata,r1)
(2)  393/ 60009C8 : 345C                		add	r5,r4
(2)  394/ 60009CA : 1136                		mov	r3,@(scrl_intrl_w,r1)
(2)  395/ 60009CC : 243E                		mulu	r3,r4
(2)  396/ 60009CE : 1147                		mov	r4,@(scrl_intrl_h,r1)
(2)  397/ 60009D0 : 001A                		sts	macl,r0
(2)  398/ 60009D2 : 1105                		mov	r0,@(scrl_intrl_size,r1)
(2)  399/ 60009D4 : 200A                		xor	r0,r0
(2)  400/ 60009D6 : 1100                		mov	r0,@(scrl_xpos_old,r1)
(2)  401/ 60009D8 : 1101                		mov	r0,@(scrl_ypos_old,r1)
(2)  402/ 60009DA : 1109                		mov	r0,@(scrl_fbpos,r1)
(2)  403/ 60009DC : 1108                		mov	r0,@(scrl_fbpos_y,r1)
(2)  404/ 60009DE : 1102                		mov	r0,@(scrl_xset,r1)
(2)  405/ 60009E0 : 1103                		mov	r0,@(scrl_yset,r1)
(2)  406/ 60009E2 : 000B                		rts
(2)  407/ 60009E4 : 0009                		nop
(2)  408/ 60009E6 :                     		align 4
(2)  409/ 60009E8 :                     
(2)  410/ 60009E8 :                     ; --------------------------------------------------------
(2)  411/ 60009E8 :                     ; MarsVideo_ShowScrlBg
(2)  412/ 60009E8 :                     ;
(2)  413/ 60009E8 :                     ; Make a visible section of any scrolling area
(2)  414/ 60009E8 :                     ; into the current framebuffer.
(2)  415/ 60009E8 :                     ;
(2)  416/ 60009E8 :                     ; Input:
(2)  417/ 60009E8 :                     ; r1 | Background buffer
(2)  418/ 60009E8 :                     ; r2 | Top Y
(2)  419/ 60009E8 :                     ; r3 | Bottom Y
(2)  420/ 60009E8 :                     ;
(2)  421/ 60009E8 :                     ; Breaks:
(2)  422/ 60009E8 :                     ; r4-r14
(2)  423/ 60009E8 :                     ;
(2)  424/ 60009E8 :                     ; NOTE:
(2)  425/ 60009E8 :                     ; After finishing all your screens call
(2)  426/ 60009E8 :                     ; MarsVideo_FixTblShift before doing frameswap
(2)  427/ 60009E8 :                     ; --------------------------------------------------------
(2)  428/ 60009E8 :                     
(2)  429/ 60009E8 :                     		align 4
(2)  430/ 60009E8 :                     MarsVideo_ShowScrlBg:
(2)  431/ 60009E8 : DE29                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  432/ 60009EA : EB00                		mov	#0,r11				; r11 - line counter
(2)  433/ 60009EC : 5D1A                		mov	@(scrl_fbdata,r1),r13		; r13 - Framebuffer pixeldata position
(2)  434/ 60009EE : 6623                		mov	r2,r6
(2)  435/ 60009F0 : 5C15                		mov	@(scrl_intrl_size,r1),r12	; r12 - Full size of screen-scroll
(2)  436/ 60009F2 : 6023                		mov	r2,r0
(2)  437/ 60009F4 : 5A16                		mov	@(scrl_intrl_w,r1),r10		; r10 - Next line to add
(2)  438/ 60009F6 : 4000                		shll	r0
(2)  439/ 60009F8 : 5719                		mov	@(scrl_fbpos,r1),r7
(2)  440/ 60009FA : 3E0C                		add	r0,r14
(2)  441/ 60009FC : 5018                		mov	@(scrl_fbpos_y,r1),r0
(2)  442/ 60009FE : 20AE                		mulu	r10,r0
(2)  443/ 6000A00 : 001A                		sts	macl,r0
(2)  444/ 6000A02 : 370C                		add	r0,r7
(2)  445/ 6000A04 : C50F                		mov.w	@(marsGbl_WaveEnable,gbr),r0
(2)  446/ 6000A06 : 2008                		tst	r0,r0
(2)  447/ 6000A08 : 8B12                		bf	.ln_wavy
(2)  448/ 6000A0A :                     .ln_loop:
(2)  449/ 6000A0A : 6873                		mov	r7,r8
(2)  450/ 6000A0C : 38C3                		cmp/ge	r12,r8
(2)  451/ 6000A0E : 8B00                		bf	.xl_r
(2)  452/ 6000A10 : 38C8                		sub	r12,r8
(2)  453/ 6000A12 :                     .xl_r:
(2)  454/ 6000A12 : 4811                		cmp/pz	r8
(2)  455/ 6000A14 : 8900                		bt	.xl_l
(2)  456/ 6000A16 : 38CC                		add	r12,r8
(2)  457/ 6000A18 :                     .xl_l:
(2)  458/ 6000A18 : 6783                		mov	r8,r7
(2)  459/ 6000A1A : 37AC                		add	r10,r7			; Add Y
(2)  460/ 6000A1C : 38DC                		add	r13,r8			; Add Framebuffer position
(2)  461/ 6000A1E : 4801                		shlr	r8			; Divide by 2, use Xshift for the missing bit
(2)  462/ 6000A20 : 2E81                		mov.w	r8,@r14			; Send to FB's table
(2)  463/ 6000A22 : 7E02                		add	#2,r14
(2)  464/ 6000A24 : 7B02                		add	#2,r11
(2)  465/ 6000A26 : 3630                		cmp/eq	r3,r6
(2)  466/ 6000A28 : 8FEF                		bf/s	.ln_loop
(2)  467/ 6000A2A : 7601                		add	#1,r6
(2)  468/ 6000A2C : 000B                		rts
(2)  469/ 6000A2E : 0009                		nop
(2)  470/ 6000A30 :                     		align 4
(2)  471/ 6000A30 :                     .ln_wavy:
(2)  472/ 6000A30 : C510                		mov.w	@(marsGbl_WaveSpd,gbr),r0
(2)  473/ 6000A32 : 6403                		mov	r0,r4
(2)  474/ 6000A34 : C513                		mov.w	@(marsGbl_WaveTan,gbr),r0
(2)  475/ 6000A36 : 952F                		mov	#$7FF,r5
(2)  476/ 6000A38 : 304C                		add	r4,r0			; wave speed
(2)  477/ 6000A3A : 2059                		and	r5,r0
(2)  478/ 6000A3C : C113                		mov.w	r0,@(marsGbl_WaveTan,gbr)
(2)  479/ 6000A3E : 6903                		mov	r0,r9
(2)  480/ 6000A40 : C511                		mov.w	@(marsGbl_WaveMax,gbr),r0
(2)  481/ 6000A42 : 6503                		mov	r0,r5
(2)  482/ 6000A44 : C512                		mov.w	@(marsGbl_WaveDeform,gbr),r0
(2)  483/ 6000A46 : 6403                		mov	r0,r4
(2)  484/ 6000A48 :                     .ln_loop_w:
(2)  485/ 6000A48 : 9826                		mov	#$7FF,r8
(2)  486/ 6000A4A : 6093                		mov	r9,r0
(2)  487/ 6000A4C : 394C                		add	r4,r9		; wave distord
(2)  488/ 6000A4E : 2989                		and	r8,r9
(2)  489/ 6000A50 : 4008                		shll2	r0
(2)  490/ 6000A52 : D810                		mov	#sin_table,r8
(2)  491/ 6000A54 : 008E                		mov	@(r0,r8),r0
(2)  492/ 6000A56 : 305D                		dmuls	r5,r0
(2)  493/ 6000A58 : 001A                		sts	macl,r0
(2)  494/ 6000A5A : 4029                		shlr16	r0
(2)  495/ 6000A5C : 600F                		exts.w	r0,r0
(2)  496/ 6000A5E : 6873                		mov	r7,r8
(2)  497/ 6000A60 : 38C3                		cmp/ge	r12,r8
(2)  498/ 6000A62 : 8B00                		bf	.wxl_r
(2)  499/ 6000A64 : 38C8                		sub	r12,r8
(2)  500/ 6000A66 :                     .wxl_r:
(2)  501/ 6000A66 : 4811                		cmp/pz	r8
(2)  502/ 6000A68 : 8900                		bt	.wxl_l
(2)  503/ 6000A6A : 38CC                		add	r12,r8
(2)  504/ 6000A6C :                     .wxl_l:
(2)  505/ 6000A6C : 6783                		mov	r8,r7
(2)  506/ 6000A6E : 37AC                		add	r10,r7		; Add Y
(2)  507/ 6000A70 : 38DC                		add	r13,r8		; Add Framebuffer position
(2)  508/ 6000A72 : 380C                		add	r0,r8
(2)  509/ 6000A74 : 4801                		shlr	r8		; divide by 2 (shift reg does the missing bit 0)
(2)  510/ 6000A76 : 2E81                		mov.w	r8,@r14		; send to FB's table
(2)  511/ 6000A78 : 7E02                		add	#2,r14
(2)  512/ 6000A7A : 7B02                		add	#2,r11
(2)  513/ 6000A7C : 3630                		cmp/eq	r3,r6
(2)  514/ 6000A7E : 8FE3                		bf/s	.ln_loop_w
(2)  515/ 6000A80 : 7601                		add	#1,r6
(2)  516/ 6000A82 : 000B                		rts
(2)  517/ 6000A84 : 0009                		nop
(2)  518/ 6000A86 :                     		align 4
(2)  519/ 6000A88 :                     .no_lines:
(2)  520/ 6000A88 : 000B                		rts
(2)  521/ 6000A8A : 0009                		nop
(2)  522/ 6000A8C :                     		align 4
(2)  523/ 6000A8C : 2600 6090 2400 0000 		ltorg
                    0600 2864 07FF      
(2)  524/ 6000A9A :                     
(2)  525/ 6000A9A :                     ; --------------------------------------------------------
(2)  526/ 6000A9A :                     ; MarsVideo_Bg_UpdPos
(2)  527/ 6000A9A :                     ;
(2)  528/ 6000A9A :                     ; Moves the scrolling area using X/Y values from
(2)  529/ 6000A9A :                     ; the Genesis side.
(2)  530/ 6000A9A :                     ;
(2)  531/ 6000A9A :                     ; Input:
(2)  532/ 6000A9A :                     ; r14 | Genesis background buffer
(2)  533/ 6000A9A :                     ; r13 | Scrolling-area buffer
(2)  534/ 6000A9A :                     ;
(2)  535/ 6000A9A :                     ; Breaks:
(2)  536/ 6000A9A :                     ; ALL
(2)  537/ 6000A9A :                     ; --------------------------------------------------------
(2)  538/ 6000A9A :                     
(2)  539/ 6000A9A :                     		align 4
(2)  540/ 6000A9C :                     MarsVideo_Bg_UpdPos:
(2)  541/ 6000A9C : E100                		mov	#0,r1
(2)  542/ 6000A9E : E200                		mov	#0,r2
(2)  543/ 6000AA0 : 50DB                		mov	@(scrl_xpos,r13),r0		; 0000.0000
(2)  544/ 6000AA2 : 4029                		shlr16	r0				; **
(2)  545/ 6000AA4 : C10E                		mov.w	r0,@(marsGbl_XShift,gbr)	; ** Grab missing bit for xshift
(2)  546/ 6000AA6 : 600F                		exts.w	r0,r0
(2)  547/ 6000AA8 : 6303                		mov	r0,r3
(2)  548/ 6000AAA : 50D0                		mov	@(scrl_xpos_old,r13),r0
(2)  549/ 6000AAC : 3300                		cmp/eq	r0,r3
(2)  550/ 6000AAE : 8901                		bt	.xequ
(2)  551/ 6000AB0 : 6133                		mov	r3,r1
(2)  552/ 6000AB2 : 3108                		sub	r0,r1
(2)  553/ 6000AB4 :                     .xequ:
(2)  554/ 6000AB4 : 6033                		mov	r3,r0
(2)  555/ 6000AB6 : 1D00                		mov	r0,@(scrl_xpos_old,r13)
(2)  556/ 6000AB8 : 50DC                		mov	@(scrl_ypos,r13),r0	; 0000.0000
(2)  557/ 6000ABA : 4029                		shlr16	r0
(2)  558/ 6000ABC : 600F                		exts.w	r0,r0
(2)  559/ 6000ABE : 6303                		mov	r0,r3
(2)  560/ 6000AC0 : 50D1                		mov	@(scrl_ypos_old,r13),r0
(2)  561/ 6000AC2 : 3300                		cmp/eq	r0,r3
(2)  562/ 6000AC4 : 8901                		bt	.yequ
(2)  563/ 6000AC6 : 6233                		mov	r3,r2
(2)  564/ 6000AC8 : 3208                		sub	r0,r2
(2)  565/ 6000ACA :                     .yequ:
(2)  566/ 6000ACA : 6033                		mov	r3,r0
(2)  567/ 6000ACC : 1D01                		mov	r0,@(scrl_ypos_old,r13)
(2)  568/ 6000ACE : 611F                		exts.w	r1,r1			; r1 - X increment
(2)  569/ 6000AD0 : 622F                		exts.w	r2,r2			; r2 - Y increment
(2)  570/ 6000AD2 :                     
(2)  571/ 6000AD2 :                     	; ---------------------------------------
(2)  572/ 6000AD2 :                     	; Increment Y pos (REAL)
(2)  573/ 6000AD2 :                     	; ---------------------------------------
(2)  574/ 6000AD2 :                     
(2)  575/ 6000AD2 : 54D8                		mov	@(scrl_fbpos_y,r13),r4
(2)  576/ 6000AD4 : 342C                		add	r2,r4
(2)  577/ 6000AD6 : 53D7                		mov	@(scrl_intrl_h,r13),r3
(2)  578/ 6000AD8 : 4215                		cmp/pl	r2
(2)  579/ 6000ADA : 8B02                		bf	.ypu_negtv
(2)  580/ 6000ADC : 3433                		cmp/ge	r3,r4
(2)  581/ 6000ADE : 8B00                		bf	.ypu_negtv
(2)  582/ 6000AE0 : 3438                		sub	r3,r4
(2)  583/ 6000AE2 :                     .ypu_negtv:
(2)  584/ 6000AE2 : 4211                		cmp/pz	r2
(2)  585/ 6000AE4 : 8902                		bt	.ypu_postv
(2)  586/ 6000AE6 : 4411                		cmp/pz	r4
(2)  587/ 6000AE8 : 8900                		bt	.ypu_postv
(2)  588/ 6000AEA : 343C                		add	r3,r4
(2)  589/ 6000AEC :                     .ypu_postv:
(2)  590/ 6000AEC : 1D48                		mov	r4,@(scrl_fbpos_y,r13)
(2)  591/ 6000AEE :                     
(2)  592/ 6000AEE :                     	; ---------------------------------------
(2)  593/ 6000AEE :                     	; Update Framebuffer top-left position
(2)  594/ 6000AEE :                     	; ---------------------------------------
(2)  595/ 6000AEE :                     
(2)  596/ 6000AEE : 53D5                		mov	@(scrl_intrl_size,r13),r3
(2)  597/ 6000AF0 : 50D9                		mov	@(scrl_fbpos,r13),r0
(2)  598/ 6000AF2 : 301C                		add	r1,r0
(2)  599/ 6000AF4 : 4115                		cmp/pl	r1
(2)  600/ 6000AF6 : 8B02                		bf	.yx_negtv
(2)  601/ 6000AF8 : 3033                		cmp/ge	r3,r0
(2)  602/ 6000AFA : 8B00                		bf	.yx_negtv
(2)  603/ 6000AFC : 3038                		sub	r3,r0
(2)  604/ 6000AFE :                     .yx_negtv:
(2)  605/ 6000AFE : 4111                		cmp/pz	r1
(2)  606/ 6000B00 : 8902                		bt	.yx_postv
(2)  607/ 6000B02 : 4011                		cmp/pz	r0
(2)  608/ 6000B04 : 8900                		bt	.yx_postv
(2)  609/ 6000B06 : 303C                		add	r3,r0
(2)  610/ 6000B08 :                     .yx_postv:
(2)  611/ 6000B08 : 1D09                		mov	r0,@(scrl_fbpos,r13)
(2)  612/ 6000B0A : 000B                		rts
(2)  613/ 6000B0C : 0009                		nop
(2)  614/ 6000B0E :                     		align 4
(2)  615/ 6000B10 :                     
(2)  616/ 6000B10 :                     ; --------------------------------------------------------
(2)  617/ 6000B10 :                     ; MarsVideo_Bg_MdReq
(2)  618/ 6000B10 :                     ;
(2)  619/ 6000B10 :                     ; Input:
(2)  620/ 6000B10 :                     ;  r1 | X increment
(2)  621/ 6000B10 :                     ;  r2 | Y increment
(2)  622/ 6000B10 :                     ; r14 | Genesis background buffer
(2)  623/ 6000B10 :                     ; r13 | Scrolling-area buffer
(2)  624/ 6000B10 :                     ;
(2)  625/ 6000B10 :                     ; Breaks:
(2)  626/ 6000B10 :                     ; ALL
(2)  627/ 6000B10 :                     ; --------------------------------------------------------
(2)  628/ 6000B10 :                     
(2)  629/ 6000B10 :                     		align 4
(2)  630/ 6000B10 :                     MarsVideo_Bg_DrawReq:
(2)  631/ 6000B10 :                     ; 		sts	pr,@-r15
(2)  632/ 6000B10 :                     
(2)  633/ 6000B10 :                     ; 	; ---------------------------------------
(2)  634/ 6000B10 :                     ; 	; Set block update timers
(2)  635/ 6000B10 :                     ; 	; ---------------------------------------
(2)  636/ 6000B10 :                     ;
(2)  637/ 6000B10 :                     ; 	; X timers
(2)  638/ 6000B10 :                     ; 		mov	#2,r7
(2)  639/ 6000B10 :                     ; 		xor	r6,r6
(2)  640/ 6000B10 :                     ; 		mov	#Cach_DrawTimers,r8
(2)  641/ 6000B10 :                     ; 		mov.b	@(md_bg_flags,r14),r0
(2)  642/ 6000B10 :                     ; 		extu.b	r0,r0
(2)  643/ 6000B10 :                     ; 		and	#%1111,r0
(2)  644/ 6000B10 :                     ; 		tst	#%0001,r0		; bitDrwR
(2)  645/ 6000B10 :                     ; 		bf	.x_r
(2)  646/ 6000B10 :                     ; 		tst	#%0010,r0		; bitDrwL
(2)  647/ 6000B10 :                     ; 		bt	.x_k
(2)  648/ 6000B10 :                     ; 		mov	r6,@r8
(2)  649/ 6000B10 :                     ; 		mov	r7,@(4,r8)
(2)  650/ 6000B10 :                     ; 		bra	.x_k
(2)  651/ 6000B10 :                     ; 		nop
(2)  652/ 6000B10 :                     ; .x_r:
(2)  653/ 6000B10 :                     ; 		mov	r7,@r8
(2)  654/ 6000B10 :                     ; 		mov	r6,@(4,r8)
(2)  655/ 6000B10 :                     ; .x_k:
(2)  656/ 6000B10 :                     ; 		add	#8,r8
(2)  657/ 6000B10 :                     ;
(2)  658/ 6000B10 :                     ; 	; Y timers
(2)  659/ 6000B10 :                     ; 		tst	#%0100,r0		; bitDrwD
(2)  660/ 6000B10 :                     ; 		bf	.y_r
(2)  661/ 6000B10 :                     ; 		tst	#%1000,r0		; bitDrwU
(2)  662/ 6000B10 :                     ; 		bt	.y_k
(2)  663/ 6000B10 :                     ; 		mov	r6,@r8
(2)  664/ 6000B10 :                     ; 		mov	r7,@(4,r8)
(2)  665/ 6000B10 :                     ; 		bra	.y_k
(2)  666/ 6000B10 :                     ; 		nop
(2)  667/ 6000B10 :                     ; .y_r:
(2)  668/ 6000B10 :                     ; 		mov	r7,@r8
(2)  669/ 6000B10 :                     ; 		mov	r6,@(4,r8)
(2)  670/ 6000B10 :                     ; .y_k:
(2)  671/ 6000B10 :                     ; 		rts
(2)  672/ 6000B10 :                     ; 		nop
(2)  673/ 6000B10 :                     ; 		align 4
(2)  674/ 6000B10 :                     
(2)  675/ 6000B10 :                     ; 	; ---------------------------------------
(2)  676/ 6000B10 :                     ; 	; Set block update timers
(2)  677/ 6000B10 :                     ; 	; ---------------------------------------
(2)  678/ 6000B10 :                     ;
(2)  679/ 6000B10 :                     	; X timers
(2)  680/ 6000B10 : E702                		mov	#2,r7
(2)  681/ 6000B12 : D81D                		mov	#Cach_DrawTimers,r8
(2)  682/ 6000B14 : 6583                		mov	r8,r5
(2)  683/ 6000B16 : 56D4                		mov	@(scrl_blksize,r13),r6
(2)  684/ 6000B18 : 6463                		mov	r6,r4
(2)  685/ 6000B1A : 4410                		dt	r4
(2)  686/ 6000B1C : 666B                		neg	r6,r6
(2)  687/ 6000B1E : 53D2                		mov	@(scrl_xset,r13),r3
(2)  688/ 6000B20 : 331C                		add	r1,r3
(2)  689/ 6000B22 : 6033                		mov	r3,r0
(2)  690/ 6000B24 : 2069                		and	r6,r0
(2)  691/ 6000B26 : 2008                		tst	r0,r0
(2)  692/ 6000B28 : 8904                		bt	.x_k
(2)  693/ 6000B2A : 4111                		cmp/pz	r1
(2)  694/ 6000B2C : 8900                		bt	.x_r
(2)  695/ 6000B2E : 7504                		add	#4,r5
(2)  696/ 6000B30 :                     .x_r:
(2)  697/ 6000B30 : 2572                		mov	r7,@r5
(2)  698/ 6000B32 : 2349                		and	r4,r3
(2)  699/ 6000B34 :                     .x_k:
(2)  700/ 6000B34 : 1D32                		mov	r3,@(scrl_xset,r13)
(2)  701/ 6000B36 :                     
(2)  702/ 6000B36 :                     	; Y timers
(2)  703/ 6000B36 : 7808                		add	#8,r8
(2)  704/ 6000B38 : 53D3                		mov	@(scrl_yset,r13),r3
(2)  705/ 6000B3A : 332C                		add	r2,r3
(2)  706/ 6000B3C : 6033                		mov	r3,r0
(2)  707/ 6000B3E : 2069                		and	r6,r0
(2)  708/ 6000B40 : 2008                		tst	r0,r0
(2)  709/ 6000B42 : 8904                		bt	.y_k
(2)  710/ 6000B44 : 4211                		cmp/pz	r2
(2)  711/ 6000B46 : 8900                		bt	.y_r
(2)  712/ 6000B48 : 7804                		add	#4,r8
(2)  713/ 6000B4A :                     .y_r:
(2)  714/ 6000B4A : 2872                		mov	r7,@r8
(2)  715/ 6000B4C : 2349                		and	r4,r3
(2)  716/ 6000B4E :                     .y_k:
(2)  717/ 6000B4E : 1D33                		mov	r3,@(scrl_yset,r13)
(2)  718/ 6000B50 :                     
(2)  719/ 6000B50 : 000B                		rts
(2)  720/ 6000B52 : 0009                		nop
(2)  721/ 6000B54 :                     		align 4
(2)  722/ 6000B54 :                     
(2)  723/ 6000B54 :                     ; --------------------------------------------------------
(2)  724/ 6000B54 :                     ; MarsVideo_DmaDraw
(2)  725/ 6000B54 :                     ;
(2)  726/ 6000B54 :                     ; Input:
(2)  727/ 6000B54 :                     ; r1 - Source
(2)  728/ 6000B54 :                     ; r2 - Destination
(2)  729/ 6000B54 :                     ; r3 - Size / 4
(2)  730/ 6000B54 :                     ; --------------------------------------------------------
(2)  731/ 6000B54 :                     
(2)  732/ 6000B54 :                     		align 4
(2)  733/ 6000B54 :                     MarsVideo_DmaDraw:
(2)  734/ 6000B54 : E5B0                		mov	#_DMAOPERATION,r5
(2)  735/ 6000B56 : E490                		mov	#_DMASOURCE1,r4
(2)  736/ 6000B58 : E000                		mov	#0,r0
(2)  737/ 6000B5A : 2502                		mov	r0,@r5
(2)  738/ 6000B5C : 9016                		mov	#%0101101011100000,r0
(2)  739/ 6000B5E : 1403                		mov	r0,@($0C,r4)
(2)  740/ 6000B60 : 6013                		mov	r1,r0
(2)  741/ 6000B62 : 2402                		mov	r0,@r4
(2)  742/ 6000B64 : 6023                		mov	r2,r0			; <-- point fbdata here
(2)  743/ 6000B66 : 1401                		mov	r0,@($04,r4)
(2)  744/ 6000B68 : 6033                		mov	r3,r0
(2)  745/ 6000B6A : 1402                		mov	r0,@($08,r4)
(2)  746/ 6000B6C : 900F                		mov	#%0101101011100001,r0
(2)  747/ 6000B6E : 1403                		mov	r0,@($0C,r4)
(2)  748/ 6000B70 : E001                		mov	#1,r0
(2)  749/ 6000B72 : 2502                		mov	r0,@r5
(2)  750/ 6000B74 : 5043                .wait_dma:	mov	@($C,r4),r0		; Still on DMA?
(2)  751/ 6000B76 : C802                		tst	#%10,r0
(2)  752/ 6000B78 : 89FC                		bt	.wait_dma
(2)  753/ 6000B7A : E000                		mov	#0,r0
(2)  754/ 6000B7C : 2502                		mov	r0,@r5
(2)  755/ 6000B7E : 9005                		mov	#%0101101011100000,r0
(2)  756/ 6000B80 : 1403                		mov	r0,@($C,r4)
(2)  757/ 6000B82 : 000B                		rts
(2)  758/ 6000B84 : 0009                		nop
(2)  759/ 6000B86 :                     		align 4
(2)  760/ 6000B88 : 2600 6080 5AE0 5AE1 		ltorg
(2)  761/ 6000B90 :                     
(2)  762/ 6000B90 :                     ; --------------------------------------------------------
(2)  763/ 6000B90 :                     ; MarsVideo_Bg_DrawScrl
(2)  764/ 6000B90 :                     ;
(2)  765/ 6000B90 :                     ; Input:
(2)  766/ 6000B90 :                     ; r14 | Background buffer
(2)  767/ 6000B90 :                     ; r13 | Scrolling-area buffer
(2)  768/ 6000B90 :                     ; r12 | Draw timers
(2)  769/ 6000B90 :                     ;
(2)  770/ 6000B90 :                     ; Breaks:
(2)  771/ 6000B90 :                     ; ALL
(2)  772/ 6000B90 :                     ; --------------------------------------------------------
(2)  773/ 6000B90 :                     
(2)  774/ 6000B90 :                     		align 4
(2)  775/ 6000B90 :                     MarsVideo_Bg_DrawScrl:
(2)  776/ 6000B90 : 4F22                		sts	pr,@-r15
(2)  777/ 6000B92 :                     
(2)  778/ 6000B92 : D066                		mov	#_framebuffer,r0
(2)  779/ 6000B94 : 51DA                		mov	@(scrl_fbdata,r13),r1
(2)  780/ 6000B96 : 310C                		add	r0,r1
(2)  781/ 6000B98 : 5BD6                		mov	@(scrl_intrl_w,r13),r11		; r11 - FB width
(2)  782/ 6000B9A : 410A                		lds	r1,mach				; mach - FB base
(2)  783/ 6000B9C : 50D8                		mov	@(scrl_fbpos_y,r13),r0
(2)  784/ 6000B9E : E1F0                		mov	#-$10,r1			; <-- CUSTOM BLOCK SIZE
(2)  785/ 6000BA0 : 5AD9                		mov	@(scrl_fbpos,r13),r10		; r10 - FB x/y pos
(2)  786/ 6000BA2 : 2019                		and	r1,r0
(2)  787/ 6000BA4 : 59EA                		mov	@(md_bg_blk,r14),r9		; r9 - Block data
(2)  788/ 6000BA6 : 2B0E                		mulu	r0,r11
(2)  789/ 6000BA8 : 85E4                		mov.w	@(md_bg_w,r14),r0		; r7 - Layout increment
(2)  790/ 6000BAA : 670D                		extu.w	r0,r7
(2)  791/ 6000BAC : 5CD5                		mov	@(scrl_intrl_size,r13),r12	; r12 - FB full size
(2)  792/ 6000BAE : 001A                		sts	macl,r0
(2)  793/ 6000BB0 : 3A0C                		add	r0,r10
(2)  794/ 6000BB2 : 2A19                		and	r1,r10
(2)  795/ 6000BB4 : 58E8                		mov	@(md_bg_low,r14),r8		; r8 - Layout data
(2)  796/ 6000BB6 : DD5E                		mov	#RAM_Mars_ScrlData,r13
(2)  797/ 6000BB8 : 3AC3                		cmp/ge	r12,r10
(2)  798/ 6000BBA : 8B00                		bf	.fb_y
(2)  799/ 6000BBC : 3AC8                		sub	r12,r10
(2)  800/ 6000BBE :                     .fb_y:
(2)  801/ 6000BBE : D15D                		mov	#Cach_DrawTimers,r1
(2)  802/ 6000BC0 : 6012                		mov	@r1,r0
(2)  803/ 6000BC2 : 2008                		tst	r0,r0
(2)  804/ 6000BC4 : 8901                		bt	.no_r
(2)  805/ 6000BC6 : B015                		bsr	.draw_r
(2)  806/ 6000BC8 : 0009                		nop
(2)  807/ 6000BCA :                     .no_r:
(2)  808/ 6000BCA : D15B                		mov	#Cach_DrawTimers+4,r1
(2)  809/ 6000BCC : 6012                		mov	@r1,r0
(2)  810/ 6000BCE : 2008                		tst	r0,r0
(2)  811/ 6000BD0 : 8901                		bt	.no_l
(2)  812/ 6000BD2 : B016                		bsr	.draw_l
(2)  813/ 6000BD4 : 0009                		nop
(2)  814/ 6000BD6 :                     .no_l:
(2)  815/ 6000BD6 : D159                		mov	#Cach_DrawTimers+8,r1
(2)  816/ 6000BD8 : 6012                		mov	@r1,r0
(2)  817/ 6000BDA : 2008                		tst	r0,r0
(2)  818/ 6000BDC : 8901                		bt	.no_d
(2)  819/ 6000BDE : B053                		bsr	.draw_d
(2)  820/ 6000BE0 : 0009                		nop
(2)  821/ 6000BE2 :                     .no_d:
(2)  822/ 6000BE2 : D157                		mov	#Cach_DrawTimers+$C,r1
(2)  823/ 6000BE4 : 6012                		mov	@r1,r0
(2)  824/ 6000BE6 : 2008                		tst	r0,r0
(2)  825/ 6000BE8 : 8901                		bt	.no_u
(2)  826/ 6000BEA : B054                		bsr	.draw_u
(2)  827/ 6000BEC : 0009                		nop
(2)  828/ 6000BEE :                     .no_u:
(2)  829/ 6000BEE :                     
(2)  830/ 6000BEE : 4F26                		lds	@r15+,pr
(2)  831/ 6000BF0 : 000B                		rts
(2)  832/ 6000BF2 : 0009                		nop
(2)  833/ 6000BF4 :                     
(2)  834/ 6000BF4 :                     ; mach - FB base
(2)  835/ 6000BF4 :                     ; r13 - Background copy
(2)  836/ 6000BF4 :                     ; r12 - FB full size
(2)  837/ 6000BF4 :                     ; r11 - FB width
(2)  838/ 6000BF4 :                     ; r10 - FB x/y pos
(2)  839/ 6000BF4 :                     ; r9 - Block data
(2)  840/ 6000BF4 :                     ; r8 - Layout data
(2)  841/ 6000BF4 :                     ; r7 - Layout increment
(2)  842/ 6000BF4 :                     
(2)  843/ 6000BF4 :                     ; RIGHT/LEFT
(2)  844/ 6000BF4 :                     .draw_r:
(2)  845/ 6000BF4 : 4010                		dt	r0
(2)  846/ 6000BF6 : 2102                		mov	r0,@r1
(2)  847/ 6000BF8 : 85E9                		mov.w	@(md_bg_xinc_r,r14),r0		; r7 - Layout increment
(2)  848/ 6000BFA : 620F                		exts.w	r0,r2
(2)  849/ 6000BFC : 91A4                		mov	#320,r1
(2)  850/ 6000BFE : A005                		bra	.go_lr
(2)  851/ 6000C00 : 0009                		nop
(2)  852/ 6000C02 :                     .draw_l:
(2)  853/ 6000C02 : 4010                		dt	r0
(2)  854/ 6000C04 : 2102                		mov	r0,@r1
(2)  855/ 6000C06 : 85E8                		mov.w	@(md_bg_xinc_l,r14),r0		; r7 - Layout increment
(2)  856/ 6000C08 : 620F                		exts.w	r0,r2
(2)  857/ 6000C0A : E100                		mov	#0,r1
(2)  858/ 6000C0C :                     .go_lr:
(2)  859/ 6000C0C : 66A3                		mov	r10,r6
(2)  860/ 6000C0E : 361C                		add	r1,r6
(2)  861/ 6000C10 :                     ; 		mov	#-$10,r0
(2)  862/ 6000C10 :                     ; 		and	r0,r6		; r6 - curr out pos
(2)  863/ 6000C10 : 2F86                		mov	r8,@-r15
(2)  864/ 6000C12 : 85EA                		mov.w	@(md_bg_yinc_u,r14),r0		; r7 - Layout increment
(2)  865/ 6000C14 : 610F                		exts.w	r0,r1
(2)  866/ 6000C16 : E310                		mov	#16,r3		; <-- MANUAL BLOCK SIZE
(2)  867/ 6000C18 : 213E                		mulu	r3,r1
(2)  868/ 6000C1A : 001A                		sts	macl,r0
(2)  869/ 6000C1C : 4019                		shlr8	r0
(2)  870/ 6000C1E : 207E                		mulu	r7,r0
(2)  871/ 6000C20 : 001A                		sts	macl,r0
(2)  872/ 6000C22 : 380C                		add	r0,r8
(2)  873/ 6000C24 : 223E                		mulu	r3,r2
(2)  874/ 6000C26 : 001A                		sts	macl,r0
(2)  875/ 6000C28 : 4019                		shlr8	r0
(2)  876/ 6000C2A : 380C                		add	r0,r8
(2)  877/ 6000C2C : E10F                		mov	#((224+16)/16),r1
(2)  878/ 6000C2E :                     .y_blk:
(2)  879/ 6000C2E : 2F16                		mov	r1,@-r15
(2)  880/ 6000C30 : 6593                		mov	r9,r5
(2)  881/ 6000C32 : 6080                		mov.b	@r8,r0
(2)  882/ 6000C34 : 600C                		extu.b	r0,r0		; BYTE
(2)  883/ 6000C36 : 9388                		mov	#16*16,r3
(2)  884/ 6000C38 : 203E                		mulu	r3,r0
(2)  885/ 6000C3A : 001A                		sts	macl,r0
(2)  886/ 6000C3C : 6593                		mov	r9,r5
(2)  887/ 6000C3E : 350C                		add	r0,r5
(2)  888/ 6000C40 :                     
(2)  889/ 6000C40 : E310                		mov	#16,r3
(2)  890/ 6000C42 :                     .y_lne:
(2)  891/ 6000C42 : 36C3                		cmp/ge	r12,r6
(2)  892/ 6000C44 : 8B00                		bf	.y_res
(2)  893/ 6000C46 : 36C8                		sub	r12,r6
(2)  894/ 6000C48 :                     .y_res:
(2)  895/ 6000C48 : E404                		mov	#16/4,r4
(2)  896/ 6000C4A :                     .x_lne:
(2)  897/ 6000C4A : 6056                		mov	@r5+,r0
(2)  898/ 6000C4C : 401A                		lds	r0,macl
(2)  899/ 6000C4E : 010A                		sts	mach,r1
(2)  900/ 6000C50 : 316C                		add	r6,r1
(2)  901/ 6000C52 : 62D3                		mov	r13,r2
(2)  902/ 6000C54 : 326C                		add	r6,r2
(2)  903/ 6000C56 : 2102                		mov	r0,@r1
(2)  904/ 6000C58 : 7604                		add	#4,r6
(2)  905/ 6000C5A : 2202                		mov	r0,@r2
(2)  906/ 6000C5C : 9074                		mov	#320,r0
(2)  907/ 6000C5E : 3603                		cmp/ge	r0,r6
(2)  908/ 6000C60 : 8905                		bt	.x_ex
(2)  909/ 6000C62 : 001A                		sts	macl,r0
(2)  910/ 6000C64 : 31CC                		add	r12,r1
(2)  911/ 6000C66 : 2102                		mov	r0,@r1
(2)  912/ 6000C68 : 32CC                		add	r12,r2
(2)  913/ 6000C6A : 2202                		mov	r0,@r2
(2)  914/ 6000C6C : 0009                		nop
(2)  915/ 6000C6E :                     .x_ex:
(2)  916/ 6000C6E : 4410                		dt	r4
(2)  917/ 6000C70 : 8BEB                		bf	.x_lne
(2)  918/ 6000C72 : 76F0                		add	#-16,r6	; bring point back
(2)  919/ 6000C74 : 4310                		dt	r3
(2)  920/ 6000C76 : 8FE4                		bf/s	.y_lne
(2)  921/ 6000C78 : 36BC                		add	r11,r6
(2)  922/ 6000C7A : 61F6                		mov	@r15+,r1
(2)  923/ 6000C7C : 4110                		dt	r1
(2)  924/ 6000C7E : 8FD6                		bf/s	.y_blk
(2)  925/ 6000C80 : 387C                		add	r7,r8
(2)  926/ 6000C82 : 68F6                		mov	@r15+,r8
(2)  927/ 6000C84 : 000B                		rts
(2)  928/ 6000C86 : 0009                		nop
(2)  929/ 6000C88 :                     
(2)  930/ 6000C88 :                     ; DOWN/UP
(2)  931/ 6000C88 :                     .draw_d:
(2)  932/ 6000C88 : 4010                		dt	r0
(2)  933/ 6000C8A : 2102                		mov	r0,@r1
(2)  934/ 6000C8C : 85EB                		mov.w	@(md_bg_yinc_d,r14),r0		; r7 - Layout increment
(2)  935/ 6000C8E : 620F                		exts.w	r0,r2
(2)  936/ 6000C90 : 915C                		mov	#224,r1
(2)  937/ 6000C92 : A005                		bra	.go_du
(2)  938/ 6000C94 : 0009                		nop
(2)  939/ 6000C96 :                     .draw_u:
(2)  940/ 6000C96 : 4010                		dt	r0
(2)  941/ 6000C98 : 2102                		mov	r0,@r1
(2)  942/ 6000C9A : 85EA                		mov.w	@(md_bg_yinc_u,r14),r0		; r7 - Layout increment
(2)  943/ 6000C9C : 620F                		exts.w	r0,r2
(2)  944/ 6000C9E : E100                		mov	#0,r1
(2)  945/ 6000CA0 :                     .go_du:
(2)  946/ 6000CA0 : D328                		mov	#CS3|$40,r3
(2)  947/ 6000CA2 : 2322                		mov	r2,@r3
(2)  948/ 6000CA4 :                     
(2)  949/ 6000CA4 : 2B1E                		mulu	r1,r11
(2)  950/ 6000CA6 : 001A                		sts	macl,r0
(2)  951/ 6000CA8 : 66A3                		mov	r10,r6
(2)  952/ 6000CAA : 360C                		add	r0,r6
(2)  953/ 6000CAC :                     ; 		mov	#-$10,r0
(2)  954/ 6000CAC :                     ; 		and	r0,r6				; r6 - curr out pos
(2)  955/ 6000CAC : 2F86                		mov	r8,@-r15
(2)  956/ 6000CAE : 85E8                		mov.w	@(md_bg_xinc_l,r14),r0		; r7 - Layout increment
(2)  957/ 6000CB0 : 610F                		exts.w	r0,r1
(2)  958/ 6000CB2 : E310                		mov	#16,r3				; <-- MANUAL BLOCK SIZE
(2)  959/ 6000CB4 : 213E                		mulu	r3,r1
(2)  960/ 6000CB6 : 001A                		sts	macl,r0
(2)  961/ 6000CB8 : 4019                		shlr8	r0
(2)  962/ 6000CBA : 380C                		add	r0,r8
(2)  963/ 6000CBC : 223E                		mulu	r3,r2
(2)  964/ 6000CBE : 001A                		sts	macl,r0
(2)  965/ 6000CC0 : 4019                		shlr8	r0
(2)  966/ 6000CC2 : 207E                		mulu	r7,r0
(2)  967/ 6000CC4 : 001A                		sts	macl,r0
(2)  968/ 6000CC6 : 380C                		add	r0,r8
(2)  969/ 6000CC8 : E115                		mov	#((320+16)/16),r1
(2)  970/ 6000CCA :                     .yd_blk:
(2)  971/ 6000CCA : 2F66                		mov	r6,@-r15
(2)  972/ 6000CCC : 2F16                		mov	r1,@-r15
(2)  973/ 6000CCE : 6593                		mov	r9,r5
(2)  974/ 6000CD0 : 6080                		mov.b	@r8,r0
(2)  975/ 6000CD2 : 600C                		extu.b	r0,r0		; BYTE
(2)  976/ 6000CD4 : 9339                		mov	#16*16,r3
(2)  977/ 6000CD6 : 203E                		mulu	r3,r0
(2)  978/ 6000CD8 : 001A                		sts	macl,r0
(2)  979/ 6000CDA : 6593                		mov	r9,r5
(2)  980/ 6000CDC : 350C                		add	r0,r5
(2)  981/ 6000CDE :                     ;
(2)  982/ 6000CDE : E310                		mov	#16,r3
(2)  983/ 6000CE0 :                     .yd_lne:
(2)  984/ 6000CE0 : 36C3                		cmp/ge	r12,r6
(2)  985/ 6000CE2 : 8B00                		bf	.yd_res
(2)  986/ 6000CE4 : 36C8                		sub	r12,r6
(2)  987/ 6000CE6 :                     .yd_res:
(2)  988/ 6000CE6 : E404                		mov	#16/4,r4
(2)  989/ 6000CE8 :                     .xd_lne:
(2)  990/ 6000CE8 : 6056                		mov	@r5+,r0
(2)  991/ 6000CEA : 401A                		lds	r0,macl
(2)  992/ 6000CEC : 010A                		sts	mach,r1
(2)  993/ 6000CEE : 316C                		add	r6,r1
(2)  994/ 6000CF0 : 62D3                		mov	r13,r2
(2)  995/ 6000CF2 : 326C                		add	r6,r2
(2)  996/ 6000CF4 : 2102                		mov	r0,@r1
(2)  997/ 6000CF6 : 7604                		add	#4,r6
(2)  998/ 6000CF8 : 2202                		mov	r0,@r2
(2)  999/ 6000CFA : 9025                		mov	#320,r0
(2) 1000/ 6000CFC : 3603                		cmp/ge	r0,r6
(2) 1001/ 6000CFE : 8905                		bt	.xd_ex
(2) 1002/ 6000D00 : 001A                		sts	macl,r0
(2) 1003/ 6000D02 : 31CC                		add	r12,r1
(2) 1004/ 6000D04 : 2102                		mov	r0,@r1
(2) 1005/ 6000D06 : 32CC                		add	r12,r2
(2) 1006/ 6000D08 : 2202                		mov	r0,@r2
(2) 1007/ 6000D0A : 0009                		nop
(2) 1008/ 6000D0C :                     .xd_ex:
(2) 1009/ 6000D0C : 4410                		dt	r4
(2) 1010/ 6000D0E : 8BEB                		bf	.xd_lne
(2) 1011/ 6000D10 : 76F0                		add	#-16,r6	; bring point back
(2) 1012/ 6000D12 : 4310                		dt	r3
(2) 1013/ 6000D14 : 8FE4                		bf/s	.yd_lne
(2) 1014/ 6000D16 : 36BC                		add	r11,r6
(2) 1015/ 6000D18 :                     
(2) 1016/ 6000D18 : 61F6                		mov	@r15+,r1
(2) 1017/ 6000D1A : 66F6                		mov	@r15+,r6
(2) 1018/ 6000D1C : E010                		mov	#16,r0
(2) 1019/ 6000D1E : 360C                		add	r0,r6
(2) 1020/ 6000D20 : 4110                		dt	r1
(2) 1021/ 6000D22 : 8FD2                		bf/s	.yd_blk
(2) 1022/ 6000D24 : 7801                		add	#1,r8
(2) 1023/ 6000D26 : 68F6                		mov	@r15+,r8
(2) 1024/ 6000D28 : 000B                		rts
(2) 1025/ 6000D2A : 0009                		nop
(2) 1026/ 6000D2C :                     
(2) 1027/ 6000D2C :                     		align 4
(2) 1028/ 6000D2C : 2400 0000 2600 60F8 		ltorg
                    2600 6080 2600 6084 
                    2600 6088 2600 608C 
                    0600 0040 0140 0100 
                    00E0                
(2) 1029/ 6000D4E :                     
(2) 1030/ 6000D4E :                     ; ; --------------------------------------------------------
(2) 1031/ 6000D4E :                     ; ; MarsVideo_Bg_DrawScrl_UD
(2) 1032/ 6000D4E :                     ; ;
(2) 1033/ 6000D4E :                     ; ; Input:
(2) 1034/ 6000D4E :                     ; ; r14 | Background buffer
(2) 1035/ 6000D4E :                     ; ; r13 | Scrolling-area buffer
(2) 1036/ 6000D4E :                     ; ; r12 | Draw timers
(2) 1037/ 6000D4E :                     ; ;
(2) 1038/ 6000D4E :                     ; ; Breaks:
(2) 1039/ 6000D4E :                     ; ; ALL
(2) 1040/ 6000D4E :                     ; ; --------------------------------------------------------
(2) 1041/ 6000D4E :                     ;
(2) 1042/ 6000D4E :                     ; 		align 4
(2) 1043/ 6000D4E :                     ; MarsVideo_Bg_DrawScrl_UD:
(2) 1044/ 6000D4E :                     ; 		sts	pr,@-r15
(2) 1045/ 6000D4E :                     ;
(2) 1046/ 6000D4E :                     ; 		mov	#_framebuffer,r0
(2) 1047/ 6000D4E :                     ; 		mov	@(scrl_fbdata,r13),r1
(2) 1048/ 6000D4E :                     ; 		add	r0,r1
(2) 1049/ 6000D4E :                     ; 		mov	@(scrl_intrl_w,r13),r11		; r11 - FB width
(2) 1050/ 6000D4E :                     ; 		lds	r1,mach				; mach - FB base
(2) 1051/ 6000D4E :                     ; 		mov	@(scrl_fbpos_y,r13),r0
(2) 1052/ 6000D4E :                     ; 		mov	#-$10,r1			; <-- CUSTOM BLOCK SIZE
(2) 1053/ 6000D4E :                     ; 		mov	@(scrl_fbpos,r13),r10		; r10 - FB x/y pos
(2) 1054/ 6000D4E :                     ; 		and	r1,r0
(2) 1055/ 6000D4E :                     ; 		mov	@(md_bg_blk,r14),r9		; r9 - Block data
(2) 1056/ 6000D4E :                     ; 		mulu	r0,r11
(2) 1057/ 6000D4E :                     ; 		mov.w	@(md_bg_w,r14),r0		; r7 - Layout increment
(2) 1058/ 6000D4E :                     ; 		extu.w	r0,r7
(2) 1059/ 6000D4E :                     ; 		mov	@(scrl_intrl_size,r13),r12	; r12 - FB full size
(2) 1060/ 6000D4E :                     ; 		sts	macl,r0
(2) 1061/ 6000D4E :                     ; 		add	r0,r10
(2) 1062/ 6000D4E :                     ; 		and	r1,r10
(2) 1063/ 6000D4E :                     ; 		mov	@(md_bg_low,r14),r8		; r8 - Layout data
(2) 1064/ 6000D4E :                     ; 		mov	#RAM_Mars_ScrlData,r13
(2) 1065/ 6000D4E :                     ; 		cmp/ge	r12,r10
(2) 1066/ 6000D4E :                     ; 		bf	.fb_y
(2) 1067/ 6000D4E :                     ; 		sub	r12,r10
(2) 1068/ 6000D4E :                     ; .fb_y:
(2) 1069/ 6000D4E :                     ; 		mov	#Cach_DrawTimers+8,r1
(2) 1070/ 6000D4E :                     ; 		mov	@r1,r0
(2) 1071/ 6000D4E :                     ; 		tst	r0,r0
(2) 1072/ 6000D4E :                     ; 		bt	.no_d
(2) 1073/ 6000D4E :                     ; 		bsr	.draw_d
(2) 1074/ 6000D4E :                     ; 		nop
(2) 1075/ 6000D4E :                     ; .no_d:
(2) 1076/ 6000D4E :                     ; 		mov	#Cach_DrawTimers+$C,r1
(2) 1077/ 6000D4E :                     ; 		mov	@r1,r0
(2) 1078/ 6000D4E :                     ; 		tst	r0,r0
(2) 1079/ 6000D4E :                     ; 		bt	.no_u
(2) 1080/ 6000D4E :                     ; 		bsr	.draw_u
(2) 1081/ 6000D4E :                     ; 		nop
(2) 1082/ 6000D4E :                     ; .no_u:
(2) 1083/ 6000D4E :                     ; 		lds	@r15+,pr
(2) 1084/ 6000D4E :                     ; 		rts
(2) 1085/ 6000D4E :                     ; 		nop
(2) 1086/ 6000D4E :                     ; ; DOWN/UP
(2) 1087/ 6000D4E :                     ; .draw_d:
(2) 1088/ 6000D4E :                     ; 		dt	r0
(2) 1089/ 6000D4E :                     ; 		mov	r0,@r1
(2) 1090/ 6000D4E :                     ; 		mov.w	@(md_bg_yinc_d,r14),r0		; r7 - Layout increment
(2) 1091/ 6000D4E :                     ; 		exts.w	r0,r2
(2) 1092/ 6000D4E :                     ; 		mov	#224,r1
(2) 1093/ 6000D4E :                     ; 		bra	.go_du
(2) 1094/ 6000D4E :                     ; 		nop
(2) 1095/ 6000D4E :                     ; .draw_u:
(2) 1096/ 6000D4E :                     ; 		dt	r0
(2) 1097/ 6000D4E :                     ; 		mov	r0,@r1
(2) 1098/ 6000D4E :                     ; 		mov.w	@(md_bg_yinc_u,r14),r0		; r7 - Layout increment
(2) 1099/ 6000D4E :                     ; 		exts.w	r0,r2
(2) 1100/ 6000D4E :                     ; 		mov	#0,r1
(2) 1101/ 6000D4E :                     ; .go_du:
(2) 1102/ 6000D4E :                     ; 		mulu	r1,r11
(2) 1103/ 6000D4E :                     ; 		sts	macl,r0
(2) 1104/ 6000D4E :                     ; 		mov	r10,r6
(2) 1105/ 6000D4E :                     ; 		add	r0,r6
(2) 1106/ 6000D4E :                     ; ; 		mov	#-$10,r0
(2) 1107/ 6000D4E :                     ; ; 		and	r0,r6			; r6 - curr out pos
(2) 1108/ 6000D4E :                     ; 		mov	r8,@-r15
(2) 1109/ 6000D4E :                     ; 		mov.w	@(md_bg_xinc_l,r14),r0		; r7 - Layout increment
(2) 1110/ 6000D4E :                     ; 		exts.w	r0,r1
(2) 1111/ 6000D4E :                     ; 		mov	#16,r3		; <-- MANUAL BLOCK SIZE
(2) 1112/ 6000D4E :                     ; 		mulu	r3,r1
(2) 1113/ 6000D4E :                     ; 		sts	macl,r0
(2) 1114/ 6000D4E :                     ; 		shlr8	r0
(2) 1115/ 6000D4E :                     ; 		add	r0,r8
(2) 1116/ 6000D4E :                     ; 		mulu	r3,r2
(2) 1117/ 6000D4E :                     ; 		sts	macl,r0
(2) 1118/ 6000D4E :                     ; 		shlr8	r0
(2) 1119/ 6000D4E :                     ; 		mulu	r7,r0
(2) 1120/ 6000D4E :                     ; 		sts	macl,r0
(2) 1121/ 6000D4E :                     ; 		add	r0,r8
(2) 1122/ 6000D4E :                     ; 		mov	#((320+16)/16),r1
(2) 1123/ 6000D4E :                     ; .yd_blk:
(2) 1124/ 6000D4E :                     ; 		mov	r6,@-r15
(2) 1125/ 6000D4E :                     ; 		mov	r1,@-r15
(2) 1126/ 6000D4E :                     ; 		mov	r9,r5
(2) 1127/ 6000D4E :                     ; 		mov.b	@r8,r0
(2) 1128/ 6000D4E :                     ; 		extu.b	r0,r0		; BYTE
(2) 1129/ 6000D4E :                     ; 		mov	#16*16,r3
(2) 1130/ 6000D4E :                     ; 		mulu	r3,r0
(2) 1131/ 6000D4E :                     ; 		sts	macl,r0
(2) 1132/ 6000D4E :                     ; 		mov	r9,r5
(2) 1133/ 6000D4E :                     ; 		add	r0,r5
(2) 1134/ 6000D4E :                     ; ;
(2) 1135/ 6000D4E :                     ; 		mov	#16,r3
(2) 1136/ 6000D4E :                     ; .yd_lne:
(2) 1137/ 6000D4E :                     ; 		cmp/ge	r12,r6
(2) 1138/ 6000D4E :                     ; 		bf	.yd_res
(2) 1139/ 6000D4E :                     ; 		sub	r12,r6
(2) 1140/ 6000D4E :                     ; .yd_res:
(2) 1141/ 6000D4E :                     ; 		mov	#16/4,r4
(2) 1142/ 6000D4E :                     ; .xd_lne:
(2) 1143/ 6000D4E :                     ; 		mov	@r5+,r0
(2) 1144/ 6000D4E :                     ; 		lds	r0,macl
(2) 1145/ 6000D4E :                     ; 		sts	mach,r1
(2) 1146/ 6000D4E :                     ; 		add	r6,r1
(2) 1147/ 6000D4E :                     ; 		mov	r13,r2
(2) 1148/ 6000D4E :                     ; 		add	r6,r2
(2) 1149/ 6000D4E :                     ; 		mov	r0,@r1
(2) 1150/ 6000D4E :                     ; 		add	#4,r6
(2) 1151/ 6000D4E :                     ; 		mov	r0,@r2
(2) 1152/ 6000D4E :                     ; 		mov	#320,r0
(2) 1153/ 6000D4E :                     ; 		cmp/ge	r0,r6
(2) 1154/ 6000D4E :                     ; 		bt	.xd_ex
(2) 1155/ 6000D4E :                     ; 		sts	macl,r0
(2) 1156/ 6000D4E :                     ; 		add	r12,r1
(2) 1157/ 6000D4E :                     ; 		mov	r0,@r1
(2) 1158/ 6000D4E :                     ; 		add	r12,r2
(2) 1159/ 6000D4E :                     ; 		mov	r0,@r2
(2) 1160/ 6000D4E :                     ; 		nop
(2) 1161/ 6000D4E :                     ; .xd_ex:
(2) 1162/ 6000D4E :                     ; 		dt	r4
(2) 1163/ 6000D4E :                     ; 		bf	.xd_lne
(2) 1164/ 6000D4E :                     ; 		add	#-16,r6	; bring point back
(2) 1165/ 6000D4E :                     ; 		dt	r3
(2) 1166/ 6000D4E :                     ; 		bf/s	.yd_lne
(2) 1167/ 6000D4E :                     ; 		add	r11,r6
(2) 1168/ 6000D4E :                     ;
(2) 1169/ 6000D4E :                     ; 		mov	@r15+,r1
(2) 1170/ 6000D4E :                     ; 		mov	@r15+,r6
(2) 1171/ 6000D4E :                     ; 		mov	#16,r0
(2) 1172/ 6000D4E :                     ; 		add	r0,r6
(2) 1173/ 6000D4E :                     ; 		dt	r1
(2) 1174/ 6000D4E :                     ; 		bf/s	.yd_blk
(2) 1175/ 6000D4E :                     ; 		add	#1,r8
(2) 1176/ 6000D4E :                     ; 		mov	@r15+,r8
(2) 1177/ 6000D4E :                     ; 		rts
(2) 1178/ 6000D4E :                     ; 		nop
(2) 1179/ 6000D4E :                     ; 		align 4
(2) 1180/ 6000D4E :                     ; 		ltorg
(2) 1181/ 6000D4E :                     
(2) 1182/ 6000D4E :                     ; ----------------------------------------------------------------
(2) 1183/ 6000D4E :                     ; Super Sprites
(2) 1184/ 6000D4E :                     ; ----------------------------------------------------------------
(2) 1185/ 6000D4E :                     
(2) 1186/ 6000D4E :                     ; --------------------------------------------------------
(2) 1187/ 6000D4E :                     ; MarsVideo_MkSprCoords
(2) 1188/ 6000D4E :                     ;
(2) 1189/ 6000D4E :                     ; This creates a backup of the screen's position for
(2) 1190/ 6000D4E :                     ; the sprite-refill boxes
(2) 1191/ 6000D4E :                     ;
(2) 1192/ 6000D4E :                     ; Input:
(2) 1193/ 6000D4E :                     ; r1 - VRAM base
(2) 1194/ 6000D4E :                     ; r2 - X Top-Left position
(2) 1195/ 6000D4E :                     ; r3 - Y (real) position
(2) 1196/ 6000D4E :                     ; r4 - Scrolling area Width
(2) 1197/ 6000D4E :                     ; r5 - Scrolling area Height
(2) 1198/ 6000D4E :                     ; r6 - Scroll area size
(2) 1199/ 6000D4E :                     ; r7 - Output settings to this area
(2) 1200/ 6000D4E :                     ;
(2) 1201/ 6000D4E :                     ; Breaks:
(2) 1202/ 6000D4E :                     ; r7
(2) 1203/ 6000D4E :                     ; --------------------------------------------------------
(2) 1204/ 6000D4E :                     
(2) 1205/ 6000D4E :                     		align 4
(2) 1206/ 6000D50 :                     MarsVideo_MkSprCoords:
(2) 1207/ 6000D50 : 7704                		add	#4,r7
(2) 1208/ 6000D52 : 2766                		mov	r6,@-r7
(2) 1209/ 6000D54 : 2756                		mov	r5,@-r7
(2) 1210/ 6000D56 : 2746                		mov	r4,@-r7
(2) 1211/ 6000D58 : 2736                		mov	r3,@-r7
(2) 1212/ 6000D5A : 2726                		mov	r2,@-r7
(2) 1213/ 6000D5C : 2716                		mov	r1,@-r7
(2) 1214/ 6000D5E : 000B                		rts
(2) 1215/ 6000D60 : 0009                		nop
(2) 1216/ 6000D62 :                     		align 4
(2) 1217/ 6000D64 :                     
(2) 1218/ 6000D64 :                     ; --------------------------------------------------------
(2) 1219/ 6000D64 :                     ; MarsVideo_MkSprBoxes
(2) 1220/ 6000D64 :                     ; --------------------------------------------------------
(2) 1221/ 6000D64 :                     
(2) 1222/ 6000D64 :                     		align 4
(2) 1223/ 6000D64 :                     MarsVideo_MkSprBoxes:
(2) 1224/ 6000D64 : DE26                 		mov	#RAM_Mars_DreqRead+Dreq_SuperSpr,r14
(2) 1225/ 6000D66 : DD27                		mov	#Cach_SprBoxList,r13
(2) 1226/ 6000D68 :                     .next_save:
(2) 1227/ 6000D68 : 50E4                		mov	@(marsspr_data,r14),r0
(2) 1228/ 6000D6A : 2008                		tst	r0,r0
(2) 1229/ 6000D6C : 8946                		bt	.last
(2) 1230/ 6000D6E : E008                		mov	#MAX_SSPRSPD,r0		; expand box (max speed)
(2) 1231/ 6000D70 : 55E1                		mov	@(marsspr_x,r14),r5	; XXXX YYYY
(2) 1232/ 6000D72 : 665F                		exts.w	r5,r6
(2) 1233/ 6000D74 : 57E0                		mov	@(marsspr_xfrm,r14),r7	; ?? ?? XX YY
(2) 1234/ 6000D76 : 4529                		shlr16	r5
(2) 1235/ 6000D78 : 655F                		exts.w	r5,r5
(2) 1236/ 6000D7A : 687C                		extu.b	r7,r8
(2) 1237/ 6000D7C : 4719                		shlr8	r7
(2) 1238/ 6000D7E : 677C                		extu.b	r7,r7
(2) 1239/ 6000D80 : 375C                		add	r5,r7
(2) 1240/ 6000D82 : 386C                		add	r6,r8
(2) 1241/ 6000D84 :                     ; 		mov.w	@(marsspr_x,r14),r0
(2) 1242/ 6000D84 :                     ; 		exts.w	r0,r5
(2) 1243/ 6000D84 :                     ; 		mov.w	@(marsspr_y,r14),r0
(2) 1244/ 6000D84 :                     ; 		exts.w	r0,r6
(2) 1245/ 6000D84 :                     ; 		mov.b	@(marsspr_xs,r14),r0
(2) 1246/ 6000D84 :                     ; 		exts.b	r0,r7
(2) 1247/ 6000D84 :                     ; 		mov.b	@(marsspr_ys,r14),r0
(2) 1248/ 6000D84 :                     ; 		exts.b	r0,r8
(2) 1249/ 6000D84 :                     ; 		add	r5,r7
(2) 1250/ 6000D84 :                     ; 		add	r6,r8
(2) 1251/ 6000D84 :                     
(2) 1252/ 6000D84 : 3508                		sub	r0,r5	; expand box
(2) 1253/ 6000D86 : 3608                		sub	r0,r6
(2) 1254/ 6000D88 : 370C                		add	r0,r7
(2) 1255/ 6000D8A : 380C                		add	r0,r8
(2) 1256/ 6000D8C :                     ; 		shlr	r0
(2) 1257/ 6000D8C : 370C                		add	r0,r7
(2) 1258/ 6000D8E :                     ; 		add	r0,r8
(2) 1259/ 6000D8E : E0FC                		mov	#-4,r0	; align by 4
(2) 1260/ 6000D90 : 2509                		and	r0,r5
(2) 1261/ 6000D92 : 2709                		and	r0,r7
(2) 1262/ 6000D94 : 2609                		and	r0,r6
(2) 1263/ 6000D96 : 2809                		and	r0,r8
(2) 1264/ 6000D98 : 9136                		mov	#320+16,r1
(2) 1265/ 6000D9A : 9236                		mov	#224+16,r2
(2) 1266/ 6000D9C : 4715                		cmp/pl	r7
(2) 1267/ 6000D9E : 8B2B                		bf	.spr_out
(2) 1268/ 6000DA0 : 4815                		cmp/pl	r8
(2) 1269/ 6000DA2 : 8B29                		bf	.spr_out
(2) 1270/ 6000DA4 : 3513                		cmp/ge	r1,r5
(2) 1271/ 6000DA6 : 8927                		bt	.spr_out
(2) 1272/ 6000DA8 : 3623                		cmp/ge	r2,r6
(2) 1273/ 6000DAA : 8925                		bt	.spr_out
(2) 1274/ 6000DAC : 4511                		cmp/pz	r5
(2) 1275/ 6000DAE : 8900                		bt	.xl_l
(2) 1276/ 6000DB0 : 255A                		xor	r5,r5
(2) 1277/ 6000DB2 :                     .xl_l:
(2) 1278/ 6000DB2 : 4611                		cmp/pz	r6
(2) 1279/ 6000DB4 : 8900                		bt	.yl_l
(2) 1280/ 6000DB6 : 266A                		xor	r6,r6
(2) 1281/ 6000DB8 :                     .yl_l:
(2) 1282/ 6000DB8 : 3717                		cmp/gt	r1,r7
(2) 1283/ 6000DBA : 8B00                		bf	.xr_l
(2) 1284/ 6000DBC : 6713                		mov	r1,r7
(2) 1285/ 6000DBE :                     .xr_l:
(2) 1286/ 6000DBE : 3827                		cmp/gt	r2,r8
(2) 1287/ 6000DC0 : 8B00                		bf	.yr_l
(2) 1288/ 6000DC2 : 6823                		mov	r2,r8
(2) 1289/ 6000DC4 :                     .yr_l:
(2) 1290/ 6000DC4 : 26BE                		mulu	r11,r6
(2) 1291/ 6000DC6 : 001A                		sts	macl,r0
(2) 1292/ 6000DC8 : 340C                		add	r0,r4
(2) 1293/ 6000DCA :                     .y_lp:
(2) 1294/ 6000DCA : 34C7                		cmp/gt	r12,r4
(2) 1295/ 6000DCC : 8B00                		bf	.y_keep
(2) 1296/ 6000DCE : 34C8                		sub	r12,r4
(2) 1297/ 6000DD0 :                     .y_keep:
(2) 1298/ 6000DD0 :                     
(2) 1299/ 6000DD0 :                     	; r5 - X left
(2) 1300/ 6000DD0 :                     	; r6 - Y top
(2) 1301/ 6000DD0 :                     	; r7 - X right
(2) 1302/ 6000DD0 :                     	; r8 - Y bottom
(2) 1303/ 6000DD0 :                     	;
(2) 1304/ 6000DD0 :                     	; (Xend>>2)|$80,(Xstart>>2),Ybottom,Ytop
(2) 1305/ 6000DD0 : 6073                		mov	r7,r0
(2) 1306/ 6000DD2 : 4009                		shlr2	r0
(2) 1307/ 6000DD4 : 600C                		extu.b	r0,r0
(2) 1308/ 6000DD6 : CB80                		or	#$80,r0
(2) 1309/ 6000DD8 : 4028                		shll16	r0
(2) 1310/ 6000DDA : 4018                		shll8	r0
(2) 1311/ 6000DDC : 6253                		mov	r5,r2
(2) 1312/ 6000DDE : 4228                		shll16	r2
(2) 1313/ 6000DE0 : 4209                		shlr2	r2
(2) 1314/ 6000DE2 : 6303                		mov	r0,r3
(2) 1315/ 6000DE4 : 6063                		mov	r6,r0
(2) 1316/ 6000DE6 : 6183                		mov	r8,r1
(2) 1317/ 6000DE8 : 611C                		extu.b	r1,r1
(2) 1318/ 6000DEA : 4118                		shll8	r1
(2) 1319/ 6000DEC : C9FF                		and	#$FF,r0
(2) 1320/ 6000DEE : 203B                		or	r3,r0
(2) 1321/ 6000DF0 : 202B                		or	r2,r0
(2) 1322/ 6000DF2 : 201B                		or	r1,r0
(2) 1323/ 6000DF4 : 2D02                		mov	r0,@r13
(2) 1324/ 6000DF6 : 7D04                		add	#4,r13
(2) 1325/ 6000DF8 :                     .spr_out:
(2) 1326/ 6000DF8 : AFB6                		bra	.next_save
(2) 1327/ 6000DFA : 7E14                		add 	#sizeof_marsspr,r14
(2) 1328/ 6000DFC :                     .last:
(2) 1329/ 6000DFC : 000B                		rts
(2) 1330/ 6000DFE : 0009                		nop
(2) 1331/ 6000E00 :                     		align 4
(2) 1332/ 6000E00 : 2600 5A80 C000 0444 		ltorg
                    0150 00F0           
(2) 1333/ 6000E0C :                     
(2) 1334/ 6000E0C :                     ; ====================================================================
(2) 1335/ 6000E0C :                     ; ----------------------------------------------------------------
(2) 1336/ 6000E0C :                     ; 3D Section
(2) 1337/ 6000E0C :                     ;
(2) 1338/ 6000E0C :                     ; Nothing to see here (yet), all stuff is
(2) 1339/ 6000E0C :                     ; located at cache_m_3D.asm
(2) 1340/ 6000E0C :                     ; ----------------------------------------------------------------
(2) 1341/ 6000E0C :                     
(1) 1177/ 6000E0C :                     		include "system/mars/sound.asm"
(2)    1/ 6000E0C :                     ; ====================================================================
(2)    2/ 6000E0C :                     ; ----------------------------------------------------------------
(2)    3/ 6000E0C :                     ; 32X Sound
(2)    4/ 6000E0C :                     ;
(2)    5/ 6000E0C :                     ; Playback code (the PWM interrupt) is located at cache_slv.asm
(2)    6/ 6000E0C :                     ; ----------------------------------------------------------------
(2)    7/ 6000E0C :                     
(2)    8/ 6000E0C :                     ; --------------------------------------------------------
(2)    9/ 6000E0C :                     ; Settings
(2)   10/ 6000E0C :                     ; --------------------------------------------------------
(2)   11/ 6000E0C :                     
(2)   12/ 6000E0C : =$7                 MAX_PWMCHNL	equ 7		; MAXIMUM pseudo PWM channels
(2)   13/ 6000E0C : =$80                MAX_PWMBACKUP	equ $80		; 1-bit sizes only.
(2)   14/ 6000E0C : =$5622              SAMPLE_RATE	equ 22050
(2)   15/ 6000E0C :                     
(2)   16/ 6000E0C :                     ; --------------------------------------------------------
(2)   17/ 6000E0C :                     ; Structs
(2)   18/ 6000E0C :                     ; --------------------------------------------------------
(2)   19/ 6000E0C :                     
(2)   20/ 6000E0C :                     ; 32X sound channel
(2)   21/ 6000E0C : (MACRO)             		struct 0
(2)   21/ 6000E0C :                     
(2)   21/ 6000E0C :                     ;       if WPATCH=1
(2)   21/ 6000E0C :                     ; GLBL_LASTPC   set *
(2)   21/ 6000E0C :                     ; GLBL_LASTORG  set *
(2)   21/ 6000E0C :                     ;               dephase
(2)   21/ 6000E0C :                     ;               phase 0
(2)   21/ 6000E0C :                     ;       else
(2)   21/ 6000E0C : =$6000E0C           GLBL_LASTPC     set *
(2)   21/   5000C :                                     dephase
(2)   21/   5000C : =$5000C             GLBL_LASTORG    set *
(2)   21/       0 :                                     phase 0
(2)   21/       0 :                     ;       endif
(2)   22/       0 :                     mchnsnd_enbl	ds.l 1
(2)   23/       4 :                     mchnsnd_read	ds.l 1		; 0 - off
(2)   24/       8 :                     mchnsnd_cchread	ds.l 1
(2)   25/       C :                     mchnsnd_bank	ds.l 1		; CS0-3 OR value
(2)   26/      10 :                     mchnsnd_start	ds.l 1
(2)   27/      14 :                     mchnsnd_end	ds.l 1
(2)   28/      18 :                     mchnsnd_loop	ds.l 1
(2)   29/      1C :                     mchnsnd_pitch	ds.l 1
(2)   30/      20 :                     mchnsnd_flags	ds.l 1		; %SLR S-wave format mono/stereo | LR-wave output bits
(2)   31/      24 :                     mchnsnd_vol	ds.l 1
(2)   32/      28 :                     sizeof_sndchn	ds.l 0
(2)   33/      28 : (MACRO)             		finish
(2)   33/       0 :                                     !org GLBL_LASTORG
(2)   33/ 6000E0C :                                     phase GLBL_LASTPC
(2)   34/ 6000E0C :                     
(2)   35/ 6000E0C :                     ; ====================================================================
(2)   36/ 6000E0C :                     ; --------------------------------------------------------
(2)   37/ 6000E0C :                     ; Init Sound PWM
(2)   38/ 6000E0C :                     ;
(2)   39/ 6000E0C :                     ; Cycle register formulas:
(2)   40/ 6000E0C :                     ; NTSC ((((23011361<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   41/ 6000E0C :                     ; PAL  ((((22801467<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   42/ 6000E0C :                     ;
(2)   43/ 6000E0C :                     ; NOTE: The CLICK sound after calling this is normal.
(2)   44/ 6000E0C :                     ; --------------------------------------------------------
(2)   45/ 6000E0C :                     
(2)   46/ 6000E0C :                     		align 4
(2)   47/ 6000E0C :                     MarsSound_Init:
(2)   48/ 6000E0C : 4F13                		stc	gbr,@-r15
(2)   49/ 6000E0E : D03A                		mov	#_sysreg,r0
(2)   50/ 6000E10 : 401E                		ldc	r0,gbr
(2)   51/ 6000E12 : 9081                		mov	#$0105,r0					; Timing interval $01, output L/R
(2)   52/ 6000E14 : C118                		mov.w	r0,@(timerctl,gbr)
(2)   53/ 6000E16 : 9080                		mov	#((((23011361<<1)/SAMPLE_RATE+1)>>1)+1),r0	; Samplerate
(2)   54/ 6000E18 : C119                		mov.w	r0,@(cycle,gbr)
(2)   55/ 6000E1A : E001                		mov	#1,r0
(2)   56/ 6000E1C : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   57/ 6000E1E : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   58/ 6000E20 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   59/ 6000E22 : 4F17                		ldc	@r15+,gbr
(2)   60/ 6000E24 : 000B                		rts
(2)   61/ 6000E26 : 0009                		nop
(2)   62/ 6000E28 :                     		align 4
(2)   63/ 6000E28 :                     
(2)   64/ 6000E28 :                     ; ====================================================================
(2)   65/ 6000E28 :                     ; ----------------------------------------------------------------
(2)   66/ 6000E28 :                     ; Subroutines
(2)   67/ 6000E28 :                     ; ----------------------------------------------------------------
(2)   68/ 6000E28 :                     
(2)   69/ 6000E28 :                     ; --------------------------------------------------------
(2)   70/ 6000E28 :                     ; MarsSound_SetPwm
(2)   71/ 6000E28 :                     ;
(2)   72/ 6000E28 :                     ; Sets new sound data to a channel slot, automaticly
(2)   73/ 6000E28 :                     ; plays.
(2)   74/ 6000E28 :                     ;
(2)   75/ 6000E28 :                     ; Input:
(2)   76/ 6000E28 :                     ; r1 | Channel (0-6)
(2)   77/ 6000E28 :                     ; r2 | Start address (SH2 AREA)
(2)   78/ 6000E28 :                     ; r3 | End address (SH2 AREA)
(2)   79/ 6000E28 :                     ; r4 | Loop address (SH2 AREA, ignored if loop bit isn't set)
(2)   80/ 6000E28 :                     ; r5 | Starting pitch ($xxxxxx.xx, $100 default speed)
(2)   81/ 6000E28 :                     ; r6 | Volume (0-High)
(2)   82/ 6000E28 :                     ; r7 | Flags: %xxxxslLR
(2)   83/ 6000E28 :                     ;      LR - Enable output to these speakers
(2)   84/ 6000E28 :                     ;       l - LOOP flag
(2)   85/ 6000E28 :                     ;       s - Sample data is in Stereo (16-bit)
(2)   86/ 6000E28 :                     ;
(2)   87/ 6000E28 :                     ; Breaks:
(2)   88/ 6000E28 :                     ; r0,r8-r9,macl
(2)   89/ 6000E28 :                     ; --------------------------------------------------------
(2)   90/ 6000E28 :                     
(2)   91/ 6000E28 :                     MarsSound_SetPwm:
(2)   92/ 6000E28 : D834                		mov	#MarsSnd_PwmChnls,r8
(2)   93/ 6000E2A : E028                		mov 	#sizeof_sndchn,r0
(2)   94/ 6000E2C : 201E                		mulu	r1,r0
(2)   95/ 6000E2E : 001A                		sts	macl,r0
(2)   96/ 6000E30 : 380C                		add 	r0,r8
(2)   97/ 6000E32 : E000                		mov 	#0,r0
(2)   98/ 6000E34 : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)   99/ 6000E36 :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  100/ 6000E36 :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  101/ 6000E36 : 1857                		mov 	r5,@(mchnsnd_pitch,r8)
(2)  102/ 6000E38 : 1869                		mov 	r6,@(mchnsnd_vol,r8)
(2)  103/ 6000E3A : 1878                		mov 	r7,@(mchnsnd_flags,r8)
(2)  104/ 6000E3C : 6023                		mov 	r2,r0				; Set MSB
(2)  105/ 6000E3E : E9FF                		mov	#-1,r9				; r9 - FF000000
(2)  106/ 6000E40 : 4928                		shll16	r9
(2)  107/ 6000E42 : 4918                		shll8	r9
(2)  108/ 6000E44 : 2099                		and	r9,r0
(2)  109/ 6000E46 :                     ; 		mov 	#$FF000000,r9
(2)  110/ 6000E46 :                     ; 		and 	r9,r0
(2)  111/ 6000E46 : 1803                		mov 	r0,@(mchnsnd_bank,r8)
(2)  112/ 6000E48 : 6043                		mov 	r4,r0				; Set POINTS
(2)  113/ 6000E4A : 88FF                		cmp/eq	#-1,r0
(2)  114/ 6000E4C : 8900                		bt	.endmrk
(2)  115/ 6000E4E : 4018                		shll8	r0
(2)  116/ 6000E50 :                     .endmrk:
(2)  117/ 6000E50 : 1806                		mov	r0,@(mchnsnd_loop,r8)
(2)  118/ 6000E52 : 6033                		mov 	r3,r0
(2)  119/ 6000E54 : 4018                		shll8	r0
(2)  120/ 6000E56 : 1805                		mov	r0,@(mchnsnd_end,r8)
(2)  121/ 6000E58 : 6023                		mov 	r2,r0
(2)  122/ 6000E5A : 4018                		shll8	r0
(2)  123/ 6000E5C : 1804                		mov 	r0,@(mchnsnd_start,r8)
(2)  124/ 6000E5E : 1801                		mov 	r0,@(mchnsnd_read,r8)
(2)  125/ 6000E60 : E001                		mov 	#1,r0
(2)  126/ 6000E62 : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)  127/ 6000E64 : 000B                		rts
(2)  128/ 6000E66 : 0009                		nop
(2)  129/ 6000E68 :                     		align 4
(2)  130/ 6000E68 :                     
(2)  131/ 6000E68 :                     ; --------------------------------------------------------
(2)  132/ 6000E68 :                     ; MarsSound_SetPwmPitch
(2)  133/ 6000E68 :                     ;
(2)  134/ 6000E68 :                     ; Sets pitch data of a channel slot
(2)  135/ 6000E68 :                     ;
(2)  136/ 6000E68 :                     ; Input:
(2)  137/ 6000E68 :                     ; r1 | Channel (0-6)
(2)  138/ 6000E68 :                     ; r2 | Pitch ($xxxxxx.xx, $100 default speed)
(2)  139/ 6000E68 :                     ;
(2)  140/ 6000E68 :                     ; Breaks:
(2)  141/ 6000E68 :                     ; r8,macl
(2)  142/ 6000E68 :                     ; --------------------------------------------------------
(2)  143/ 6000E68 :                     
(2)  144/ 6000E68 :                     MarsSound_SetPwmPitch:
(2)  145/ 6000E68 : D825                		mov	#MarsSnd_PwmChnls,r8
(2)  146/ 6000E6A : E028                		mov 	#sizeof_sndchn,r0
(2)  147/ 6000E6C : 201E                		mulu	r1,r0
(2)  148/ 6000E6E : 001A                		sts	macl,r0
(2)  149/ 6000E70 : 380C                		add 	r0,r8
(2)  150/ 6000E72 : 5080                		mov	@(mchnsnd_enbl,r8),r0
(2)  151/ 6000E74 : 8801                		cmp/eq	#1,r0
(2)  152/ 6000E76 : 8B01                		bf	.off_1
(2)  153/ 6000E78 : 5081                		mov	@(mchnsnd_read,r8),r0
(2)  154/ 6000E7A : 1827                		mov	r2,@(mchnsnd_pitch,r8)
(2)  155/ 6000E7C :                     .off_1:
(2)  156/ 6000E7C : 000B                		rts
(2)  157/ 6000E7E : 0009                		nop
(2)  158/ 6000E80 :                     		align 4
(2)  159/ 6000E80 :                     
(2)  160/ 6000E80 :                     ; --------------------------------------------------------
(2)  161/ 6000E80 :                     ; MarsSound_SetVolume
(2)  162/ 6000E80 :                     ;
(2)  163/ 6000E80 :                     ; Changes the volume of a channel slot
(2)  164/ 6000E80 :                     ;
(2)  165/ 6000E80 :                     ; Input:
(2)  166/ 6000E80 :                     ; r1 | Channel (0-6)
(2)  167/ 6000E80 :                     ; r2 | Volume (in reverse: higher value is low)
(2)  168/ 6000E80 :                     ;
(2)  169/ 6000E80 :                     ; Breaks:
(2)  170/ 6000E80 :                     ; r8,macl
(2)  171/ 6000E80 :                     ; --------------------------------------------------------
(2)  172/ 6000E80 :                     
(2)  173/ 6000E80 :                     MarsSound_SetVolume:
(2)  174/ 6000E80 : D820                		mov	#MarsSnd_PwmChnls,r8
(2)  175/ 6000E82 : E028                		mov 	#sizeof_sndchn,r0
(2)  176/ 6000E84 : 201E                		mulu	r1,r0
(2)  177/ 6000E86 : 001A                		sts	macl,r0
(2)  178/ 6000E88 : 380C                		add 	r0,r8
(2)  179/ 6000E8A : 5080                		mov	@(mchnsnd_enbl,r8),r0
(2)  180/ 6000E8C : 8801                		cmp/eq	#1,r0
(2)  181/ 6000E8E : 8B01                		bf	.off_1
(2)  182/ 6000E90 : 6023                		mov	r2,r0
(2)  183/ 6000E92 : 1809                		mov	r0,@(mchnsnd_vol,r8)
(2)  184/ 6000E94 :                     .off_1:
(2)  185/ 6000E94 : 000B                		rts
(2)  186/ 6000E96 : 0009                		nop
(2)  187/ 6000E98 :                     		align 4
(2)  188/ 6000E98 :                     
(2)  189/ 6000E98 :                     ; --------------------------------------------------------
(2)  190/ 6000E98 :                     ; MarsSound_PwmEnable
(2)  191/ 6000E98 :                     ;
(2)  192/ 6000E98 :                     ; Turns ON or OFF Current PWM slot
(2)  193/ 6000E98 :                     ;
(2)  194/ 6000E98 :                     ; Input:
(2)  195/ 6000E98 :                     ; r1 | Channel (0-6)
(2)  196/ 6000E98 :                     ; r2 | Enable/Disable
(2)  197/ 6000E98 :                     ;
(2)  198/ 6000E98 :                     ; Breaks:
(2)  199/ 6000E98 :                     ; r8,macl
(2)  200/ 6000E98 :                     ; --------------------------------------------------------
(2)  201/ 6000E98 :                     
(2)  202/ 6000E98 :                     MarsSound_PwmEnable:
(2)  203/ 6000E98 : D81B                		mov	#MarsSnd_PwmChnls,r8
(2)  204/ 6000E9A : E028                		mov 	#sizeof_sndchn,r0
(2)  205/ 6000E9C : 201E                		mulu	r1,r0
(2)  206/ 6000E9E : 001A                		sts	macl,r0
(2)  207/ 6000EA0 : 380C                		add 	r0,r8
(2)  208/ 6000EA2 : 1820                		mov 	r2,@(mchnsnd_enbl,r8)
(2)  209/ 6000EA4 :                     ; 		mov 	#0,r0
(2)  210/ 6000EA4 :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  211/ 6000EA4 :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  212/ 6000EA4 : 000B                		rts
(2)  213/ 6000EA6 : 0009                		nop
(2)  214/ 6000EA8 :                     		align 4
(2)  215/ 6000EA8 :                     
(2)  216/ 6000EA8 :                     ; --------------------------------------------------------
(2)  217/ 6000EA8 :                     ; MarsSound_Refill
(2)  218/ 6000EA8 :                     ;
(2)  219/ 6000EA8 :                     ; Call this before the 68K side closes ROM access
(2)  220/ 6000EA8 :                     ; (before 68k side sets RV=1)
(2)  221/ 6000EA8 :                     ;
(2)  222/ 6000EA8 :                     ; Breaks:
(2)  223/ 6000EA8 :                     ; r1-r8
(2)  224/ 6000EA8 :                     ;
(2)  225/ 6000EA8 :                     ; NOTE:
(2)  226/ 6000EA8 :                     ; The trick here is to keep PWM interrupt enabled
(2)  227/ 6000EA8 :                     ; while filling the backup data
(2)  228/ 6000EA8 :                     ; --------------------------------------------------------
(2)  229/ 6000EA8 :                     
(2)  230/ 6000EA8 :                     MarsSnd_Refill:
(2)  231/ 6000EA8 : D818                		mov	#MarsSnd_PwmChnls,r8
(2)  232/ 6000EAA : E607                		mov	#MAX_PWMCHNL,r6
(2)  233/ 6000EAC : E728                		mov	#sizeof_sndchn,r7
(2)  234/ 6000EAE : D518                		mov	#MarsSnd_PwmCache,r5
(2)  235/ 6000EB0 :                     .next_one:
(2)  236/ 6000EB0 : 5080                		mov	@(mchnsnd_enbl,r8),r0	; This channel is active?
(2)  237/ 6000EB2 : 8801                		cmp/eq	#1,r0
(2)  238/ 6000EB4 : 8B19                		bf	.not_enbl
(2)  239/ 6000EB6 : 5083                		mov	@(mchnsnd_bank,r8),r0	; ROM area?
(2)  240/ 6000EB8 : D216                		mov	#CS1,r2
(2)  241/ 6000EBA : 3020                		cmp/eq	r2,r0
(2)  242/ 6000EBC : 8B15                		bf	.not_enbl
(2)  243/ 6000EBE : E100                		mov	#0,r1			; Reset backup LSB
(2)  244/ 6000EC0 : 1812                		mov	r1,@(mchnsnd_cchread,r8)
(2)  245/ 6000EC2 : 6153                		mov	r5,r1
(2)  246/ 6000EC4 : E220                		mov	#MAX_PWMBACKUP/4,r2	; Max bytes / 4
(2)  247/ 6000EC6 : 5481                		mov	@(mchnsnd_read,r8),r4	; r4 - OLD READ pos
(2)  248/ 6000EC8 : 6343                		mov	r4,r3
(2)  249/ 6000ECA : 4319                		shlr8	r3
(2)  250/ 6000ECC : 330C                		add	r0,r3
(2)  251/ 6000ECE :                     .copy_now:
(2)  252/ 6000ECE :                     	rept 4-1
(2)  253/ 6000ECE :                     		mov.b	@r3+,r0		; byte by byte...
(2)  254/ 6000ECE :                     		mov.b	r0,@r1
(2)  255/ 6000ECE :                     		add	#1,r1
(2)  256/ 6000ECE :                     	endm
(2)  253/ 6000ECE : 6034                		mov.b	@r3+,r0		; byte by byte...
(2)  254/ 6000ED0 : 2100                		mov.b	r0,@r1
(2)  255/ 6000ED2 : 7101                		add	#1,r1
(2)  253/ 6000ED4 : 6034                		mov.b	@r3+,r0		; byte by byte...
(2)  254/ 6000ED6 : 2100                		mov.b	r0,@r1
(2)  255/ 6000ED8 : 7101                		add	#1,r1
(2)  253/ 6000EDA : 6034                		mov.b	@r3+,r0		; byte by byte...
(2)  254/ 6000EDC : 2100                		mov.b	r0,@r1
(2)  255/ 6000EDE : 7101                		add	#1,r1
(2)  257/ 6000EE0 : 6034                		mov.b	@r3+,r0
(2)  258/ 6000EE2 : 2100                		mov.b	r0,@r1
(2)  259/ 6000EE4 : 4210                		dt	r2
(2)  260/ 6000EE6 : 8FF2                		bf/s	.copy_now
(2)  261/ 6000EE8 : 7101                		add	#1,r1
(2)  262/ 6000EEA :                     .not_enbl:
(2)  263/ 6000EEA : 9017                		mov	#MAX_PWMBACKUP,r0
(2)  264/ 6000EEC : 350C                		add	r0,r5
(2)  265/ 6000EEE : 4610                		dt	r6
(2)  266/ 6000EF0 : 8FDE                		bf/s	.next_one
(2)  267/ 6000EF2 : 387C                		add	r7,r8
(2)  268/ 6000EF4 : 000B                		rts
(2)  269/ 6000EF6 : 0009                		nop
(2)  270/ 6000EF8 :                     		align 4
(2)  271/ 6000EF8 :                     
(2)  272/ 6000EF8 :                     ; ====================================================================
(2)  273/ 6000EF8 :                     
(2)  274/ 6000EF8 : 2000 4000 C000 056C 		ltorg			; Save literals
                    C000 056C C000 056C 
                    C000 056C C000 056C 
                    2600 5D00 0200 0000 
                    0105 0415 0080      
(2)  275/ 6000F1E :                     
(1) 1178/ 6000F1E :                     		align 4
(1) 1179/ 6000F20 :                     
(1) 1180/ 6000F20 :                     ; ====================================================================
(1) 1181/ 6000F20 :                     ; ----------------------------------------------------------------
(1) 1182/ 6000F20 :                     ; Master entry
(1) 1183/ 6000F20 :                     ; ----------------------------------------------------------------
(1) 1184/ 6000F20 :                     
(1) 1185/ 6000F20 :                     		align 4
(1) 1186/ 6000F20 :                     SH2_M_Entry:
(1) 1187/ 6000F20 : DF20                		mov	#STACK_MSTR,r15			; Reset stack
(1) 1188/ 6000F22 : D021                		mov	#SH2_Master,r0			; Reset vbr
(1) 1189/ 6000F24 : 402E                		ldc	r0,vbr
(1) 1190/ 6000F26 : 9149                		mov.l	#_FRT,r1
(1) 1191/ 6000F28 : E000                		mov	#0,r0
(1) 1192/ 6000F2A : 8010                		mov.b	r0,@(0,r1)
(1) 1193/ 6000F2C : E0E2                		mov.b	#$E2,r0
(1) 1194/ 6000F2E : 8017                		mov.b	r0,@(7,r1)
(1) 1195/ 6000F30 : E000                		mov	#0,r0
(1) 1196/ 6000F32 : 8014                		mov.b	r0,@(4,r1)
(1) 1197/ 6000F34 : E001                		mov	#1,r0
(1) 1198/ 6000F36 : 8015                		mov.b	r0,@(5,r1)
(1) 1199/ 6000F38 : E000                		mov	#0,r0
(1) 1200/ 6000F3A : 8016                		mov.b	r0,@(6,r1)
(1) 1201/ 6000F3C : E001                		mov	#1,r0
(1) 1202/ 6000F3E : 8011                		mov.b	r0,@(1,r1)
(1) 1203/ 6000F40 : E000                		mov	#0,r0
(1) 1204/ 6000F42 : 8013                		mov.b	r0,@(3,r1)
(1) 1205/ 6000F44 : 8012                		mov.b	r0,@(2,r1)
(1) 1206/ 6000F46 :                     ; 		mov.b	#$F2,r0				; <-- not needed here
(1) 1207/ 6000F46 :                     ; 		mov.b	r0,@(7,r1)
(1) 1208/ 6000F46 :                     ; 		mov	#0,r0
(1) 1209/ 6000F46 :                     ; 		mov.b	r0,@(4,r1)
(1) 1210/ 6000F46 :                     ; 		mov	#1,r0
(1) 1211/ 6000F46 :                     ; 		mov.b	r0,@(5,r1)
(1) 1212/ 6000F46 :                     ; 		mov.b	#$E2,r0
(1) 1213/ 6000F46 :                     ; 		mov.b	r0,@(7,r1)
(1) 1214/ 6000F46 :                     
(1) 1215/ 6000F46 :                     	; Extra interrupt settings
(1) 1216/ 6000F46 : 903A                		mov.w   #$FEE2,r0			; Extra interrupt priority levels ($FFFFFEE2)
(1) 1217/ 6000F48 : 913A                		mov     #(3<<4)|(5<<8),r1		; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 1218/ 6000F4A : 2011                		mov.w   r1,@r0
(1) 1219/ 6000F4C : 9039                		mov.w   #$FEE4,r0			; Vector jump number for Watchdog ($FFFFFEE4)
(1) 1220/ 6000F4E : 9139                		mov     #($120/4)<<8,r1			; (vbr+POINTER)<<8
(1) 1221/ 6000F50 : 2011                		mov.w   r1,@r0
(1) 1222/ 6000F52 : E0A0                		mov	#-$60,r0			; Vector jump number for DMACHANNEL0 ($FFFFFFA0)
(1) 1223/ 6000F54 : E149                		mov     #($124/4),r1			; (vbr+POINTER)
(1) 1224/ 6000F56 : 2012                		mov	r1,@r0
(1) 1225/ 6000F58 : D014                		mov	#RAM_Mars_Global,r0		; Reset gbr
(1) 1226/ 6000F5A : 401E                		ldc	r0,gbr
(1) 1227/ 6000F5C : D014                		mov	#MarsVideo_Init,r0		; Init Video
(1) 1228/ 6000F5E : 400B                		jsr	@r0
(1) 1229/ 6000F60 : 0009                		nop
(1) 1230/ 6000F62 :                     
(1) 1231/ 6000F62 :                     ; ====================================================================
(1) 1232/ 6000F62 :                     ; ----------------------------------------------------------------
(1) 1233/ 6000F62 :                     ; Master main code
(1) 1234/ 6000F62 :                     ;
(1) 1235/ 6000F62 :                     ; This CPU is exclusively used for the visuals:
(1) 1236/ 6000F62 :                     ; software-rendered backgrounds, sprites and polygons.
(1) 1237/ 6000F62 :                     ; ----------------------------------------------------------------
(1) 1238/ 6000F62 :                     
(1) 1239/ 6000F62 :                     SH2_M_HotStart:
(1) 1240/ 6000F62 : 9130                		mov.w	#$FE80,r1
(1) 1241/ 6000F64 : 9030                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1242/ 6000F66 : 2101                		mov.w	r0,@r1
(1) 1243/ 6000F68 : 912F                		mov	#_CCR,r1		; Reset CACHE
(1) 1244/ 6000F6A : E010                		mov	#$10,r0
(1) 1245/ 6000F6C : 2100                		mov.b	r0,@r1
(1) 1246/ 6000F6E : 0009                		nop
(1) 1247/ 6000F70 : 0009                		nop
(1) 1248/ 6000F72 : 0009                		nop
(1) 1249/ 6000F74 : 0009                		nop
(1) 1250/ 6000F76 : 0009                		nop
(1) 1251/ 6000F78 : 0009                		nop
(1) 1252/ 6000F7A : 0009                		nop
(1) 1253/ 6000F7C : E009                		mov	#9,r0
(1) 1254/ 6000F7E : 2100                		mov.b	r0,@r1
(1) 1255/ 6000F80 : D10C                		mov	#_sysreg,r1
(1) 1256/ 6000F82 : 200A                    		xor	r0,r0
(1) 1257/ 6000F84 : 811A                		mov.w	r0,@(vresintclr,r1)
(1) 1258/ 6000F86 : 811B                		mov.w	r0,@(vintclr,r1)
(1) 1259/ 6000F88 : 811C                		mov.w	r0,@(hintclr,r1)
(1) 1260/ 6000F8A : 811D                		mov.w	r0,@(cmdintclr,r1)
(1) 1261/ 6000F8C : 811E                		mov.w	r0,@(pwmintclr,r1)
(1) 1262/ 6000F8E : 6011                		mov.w	@r1,r0
(1) 1263/ 6000F90 : CB02                		or	#CMDIRQ_ON,r0
(1) 1264/ 6000F92 : 2101                		mov.w	r0,@r1
(1) 1265/ 6000F94 :                     
(1) 1266/ 6000F94 : D108                		mov	#_sysreg+comm14,r1
(1) 1267/ 6000F96 : 6011                .wait_slv:	mov.w	@r1,r0
(1) 1268/ 6000F98 : 2008                		tst	r0,r0
(1) 1269/ 6000F9A : 8BFC                		bf	.wait_slv
(1) 1270/ 6000F9C : E020                		mov	#$20,r0				; Interrupts ON
(1) 1271/ 6000F9E : 400E                		ldc	r0,sr
(1) 1272/ 6000FA0 : A014                		bra	master_loop
(1) 1273/ 6000FA2 : 0009                		nop
(1) 1274/ 6000FA4 :                     		align 4
(1) 1275/ 6000FA4 : 0604 0000 0600 0000 		ltorg
                    2600 5C60 0600 084C 
                    2000 4000 2000 402E 
                    FE10 FEE2 0530 FEE4 
                    4800 FE80 A518 FE92 
(1) 1276/ 6000FCC :                     
(1) 1277/ 6000FCC :                     ; 		mov	#1,r0
(1) 1278/ 6000FCC :                     ; 		mov.w	r0,@(marsGbl_WaveEnable,gbr)	; *** TEMPORAL
(1) 1279/ 6000FCC :                     ; 		mov	#16,r0
(1) 1280/ 6000FCC :                     ; 		mov.w	r0,@(marsGbl_WaveSpd,gbr)	; ***
(1) 1281/ 6000FCC :                     ; 		mov	#8,r0
(1) 1282/ 6000FCC :                     ; 		mov.w	r0,@(marsGbl_WaveMax,gbr)	; ***
(1) 1283/ 6000FCC :                     ; 		mov	#16,r0
(1) 1284/ 6000FCC :                     ; 		mov.w	r0,@(marsGbl_WaveDeform,gbr)	; ***
(1) 1285/ 6000FCC :                     
(1) 1286/ 6000FCC :                     ; ----------------------------------------------------------------
(1) 1287/ 6000FCC :                     ; MASTER CPU loop
(1) 1288/ 6000FCC :                     ;
(1) 1289/ 6000FCC :                     ; comm12:
(1) 1290/ 6000FCC :                     ; bssscccc iir00lll
(1) 1291/ 6000FCC :                     ;
(1) 1292/ 6000FCC :                     ; b - Busy bit: This CPU can't be interrupted for CMD requests
(1) 1293/ 6000FCC :                     ; r - Clears when frame is ready.
(1) 1294/ 6000FCC :                     ; s - Status bits for some of the CMD interrupt tasks
(1) 1295/ 6000FCC :                     ; c - Command number for CMD interrupt
(1) 1296/ 6000FCC :                     ; i - Screen initialization bit(s)
(1) 1297/ 6000FCC :                     ; l - MAIN LOOP command/task, For any mode change fill the
(1) 1298/ 6000FCC :                     ;     ii bits: $C0+mode.
(1) 1299/ 6000FCC :                     ; ----------------------------------------------------------------
(1) 1300/ 6000FCC :                     
(1) 1301/ 6000FCC :                     		align 4
(1) 1302/ 6000FCC :                     master_loop:
(1) 1304/ 6000FCC : D125                		mov	#_sysreg+comm0,r1		; DEBUG counter
(1) 1305/ 6000FCE : 6010                		mov.b	@r1,r0
(1) 1306/ 6000FD0 : 7001                		add	#1,r0
(1) 1307/ 6000FD2 : 2100                		mov.b	r0,@r1
(1) 1309/ 6000FD4 :                     	; ---------------------------------------
(1) 1310/ 6000FD4 : D124                		mov	#_vdpreg,r1			; Check if we got late
(1) 1311/ 6000FD6 : 841A                .waitl:		mov.b	@(vdpsts,r1),r0			; on VBlank
(1) 1312/ 6000FD8 : C880                		tst	#VBLK,r0
(1) 1313/ 6000FDA : 8BFC                		bf	.waitl
(1) 1314/ 6000FDC : 4F03                		stc	sr,@-r15
(1) 1315/ 6000FDE : E0F0                		mov.b	#$F0,r0				; ** $F0
(1) 1316/ 6000FE0 : 600C                		extu.b	r0,r0
(1) 1317/ 6000FE2 : 400E                		ldc	r0,sr
(1) 1318/ 6000FE4 : D121                		mov	#RAM_Mars_DreqDma,r1		; Copy DREQ data into a safe
(1) 1319/ 6000FE6 : D222                		mov	#RAM_Mars_DreqRead,r2		; location for reading
(1) 1320/ 6000FE8 : 934E                		mov	#sizeof_dreq/4,r3
(1) 1321/ 6000FEA :                     .copy_safe:
(1) 1322/ 6000FEA : 6016                		mov	@r1+,r0
(1) 1323/ 6000FEC : 2202                		mov	r0,@r2
(1) 1324/ 6000FEE : 4310                		dt	r3
(1) 1325/ 6000FF0 : 8FFB                		bf/s	.copy_safe
(1) 1326/ 6000FF2 : 7204                		add	#4,r2
(1) 1327/ 6000FF4 : 4F07                		ldc	@r15+,sr
(1) 1328/ 6000FF6 :                     
(1) 1329/ 6000FF6 :                     	; ---------------------------------------
(1) 1330/ 6000FF6 : D11C                		mov	#_vdpreg,r1			; Now wait for VBlank.
(1) 1331/ 6000FF8 : 841A                .waitv:		mov.b	@(vdpsts,r1),r0
(1) 1332/ 6000FFA : C880                		tst	#VBLK,r0
(1) 1333/ 6000FFC : 89FC                		bt	.waitv
(1) 1334/ 6000FFE : C50E                 		mov.w	@(marsGbl_XShift,gbr),r0	; Set SHIFT bit first
(1) 1335/ 6001000 : D11C                		mov	#_vdpreg+shift,r1		; For the indexed-scrolling mode.
(1) 1336/ 6001002 : C901                		and	#1,r0
(1) 1337/ 6001004 : 2101                		mov.w	r0,@r1
(1) 1338/ 6001006 : D11C                		mov	#RAM_Mars_DreqRead+Dreq_Palette,r1
(1) 1339/ 6001008 : D21C                		mov	#_palette,r2
(1) 1340/ 600100A : E320                 		mov	#(256/8),r3
(1) 1341/ 600100C :                     .copy_pal:
(1) 1342/ 600100C :                     	rept 4
(1) 1343/ 600100C :                     		mov	@r1+,r0				; Copy colors as LONGs
(1) 1344/ 600100C :                     		mov	r0,@r2
(1) 1345/ 600100C :                     		add	#4,r2
(1) 1346/ 600100C :                     	endm
(1) 1343/ 600100C : 6016                		mov	@r1+,r0				; Copy colors as LONGs
(1) 1344/ 600100E : 2202                		mov	r0,@r2
(1) 1345/ 6001010 : 7204                		add	#4,r2
(1) 1343/ 6001012 : 6016                		mov	@r1+,r0				; Copy colors as LONGs
(1) 1344/ 6001014 : 2202                		mov	r0,@r2
(1) 1345/ 6001016 : 7204                		add	#4,r2
(1) 1343/ 6001018 : 6016                		mov	@r1+,r0				; Copy colors as LONGs
(1) 1344/ 600101A : 2202                		mov	r0,@r2
(1) 1345/ 600101C : 7204                		add	#4,r2
(1) 1343/ 600101E : 6016                		mov	@r1+,r0				; Copy colors as LONGs
(1) 1344/ 6001020 : 2202                		mov	r0,@r2
(1) 1345/ 6001022 : 7204                		add	#4,r2
(1) 1347/ 6001024 : 4310                		dt	r3
(1) 1348/ 6001026 : 8BF1                		bf	.copy_pal
(1) 1349/ 6001028 :                     .not_ready:
(1) 1350/ 6001028 : D115                		mov	#_sysreg+comm12+1,r1		; Clear comm R bit
(1) 1351/ 600102A : 6010                		mov.b	@r1,r0				; this tells to 68k that the frame is ready
(1) 1352/ 600102C : C9DF                		and	#%11011111,r0
(1) 1353/ 600102E : 2100                		mov.b	r0,@r1
(1) 1354/ 6001030 :                     
(1) 1355/ 6001030 :                     ; ---------------------------------------
(1) 1356/ 6001030 :                     ; Init/Loop the current mode
(1) 1357/ 6001030 :                     ;
(1) 1358/ 6001030 :                     ; Init uses 2 separate jumps because
(1) 1359/ 6001030 :                     ; some routines need to be called twice
(1) 1360/ 6001030 :                     ; to write to both framebuffers.
(1) 1361/ 6001030 :                     ;
(1) 1362/ 6001030 :                     ; NOTE:
(1) 1363/ 6001030 :                     ; The LOOP part starts very early at
(1) 1364/ 6001030 :                     ; VBlank, add some work to make sure it
(1) 1365/ 6001030 :                     ; exits on display
(1) 1366/ 6001030 :                     ; ---------------------------------------
(1) 1367/ 6001030 :                     
(1) 1368/ 6001030 : E503                		mov	#%00000011,r5		; <-- current modes limit (0-3)
(1) 1369/ 6001032 : D413                		mov	#_sysreg+(comm12+1),r4
(1) 1370/ 6001034 : 9329                		mov	#%11000000,r3
(1) 1371/ 6001036 : E100                		mov	#0,r1
(1) 1372/ 6001038 : 6040                		mov.b	@r4,r0			; r0 - bit check
(1) 1373/ 600103A : 600F                		exts.w	r0,r0
(1) 1374/ 600103C : 4011                		cmp/pz	r0
(1) 1375/ 600103E : 8909                		bt	.no_init
(1) 1376/ 6001040 : 610C                		extu.b	r0,r1
(1) 1377/ 6001042 : 6213                		mov	r1,r2
(1) 1378/ 6001044 : 4200                		shll	r2
(1) 1379/ 6001046 : 2239                		and	r3,r2
(1) 1380/ 6001048 : 2139                		and	r3,r1
(1) 1381/ 600104A : 2059                		and	r5,r0
(1) 1382/ 600104C : 302C                		add	r2,r0
(1) 1383/ 600104E : 2400                		mov.b	r0,@r4
(1) 1384/ 6001050 : 4109                		shlr2	r1
(1) 1385/ 6001052 : 4109                		shlr2	r1
(1) 1386/ 6001054 :                     .no_init:
(1) 1387/ 6001054 : 2059                		and	r5,r0
(1) 1388/ 6001056 : 4008                		shll2	r0
(1) 1389/ 6001058 : 4008                		shll2	r0
(1) 1390/ 600105A : 301C                		add	r1,r0
(1) 1391/ 600105C : D109                		mov	#mstr_gfxlist,r1
(1) 1392/ 600105E : 011E                		mov	@(r1,r0),r1
(1) 1393/ 6001060 : 412B                		jmp	@r1
(1) 1394/ 6001062 : 0009                		nop
(1) 1395/ 6001064 :                     		align 4
(1) 1396/ 6001064 : 2000 4020 2000 4100 		ltorg
                    2600 5070 2600 5668 
                    2000 4102 2600 5668 
                    2000 4200 2000 402D 
                    0600 108C 017E 00C0 
(1) 1397/ 600108C :                     
(1) 1398/ 600108C :                     ; ---------------------------------------
(1) 1399/ 600108C :                     ; jump lists
(1) 1400/ 600108C :                     ;
(1) 1401/ 600108C :                     ; NOTE: the LOOP parts starts at
(1) 1402/ 600108C :                     ; very top of VBlank.
(1) 1403/ 600108C :                     
(1) 1404/ 600108C :                     		align 4
(1) 1405/ 600108C : 0600 10D6           mstr_gfxlist:	dc.l mstr_gfx0_loop	; $00
(1) 1406/ 6001090 : 0600 10CC           		dc.l mstr_gfx0_hblk
(1) 1407/ 6001094 : 0600 10D0           		dc.l mstr_gfx0_init_2
(1) 1408/ 6001098 : 0600 10D6           		dc.l mstr_gfx0_init_1
(1) 1409/ 600109C : 0600 1104           		dc.l mstr_gfx1_loop	; $01
(1) 1410/ 60010A0 : 0600 10DC           		dc.l mstr_gfx1_hblk
(1) 1411/ 60010A4 : 0600 10EE           		dc.l mstr_gfx1_init_2
(1) 1412/ 60010A8 : 0600 10E0           		dc.l mstr_gfx1_init_1
(1) 1413/ 60010AC : 0600 119E           		dc.l mstr_gfx2_loop	; $02
(1) 1414/ 60010B0 : 0600 113C           		dc.l mstr_gfx2_hblk
(1) 1415/ 60010B4 : 0600 1186           		dc.l mstr_gfx2_init_2
(1) 1416/ 60010B8 : 0600 1140           		dc.l mstr_gfx2_init_1
(1) 1417/ 60010BC : 0600 12C8           		dc.l mstr_gfx3_loop	; $03
(1) 1418/ 60010C0 : 0600 1288           		dc.l mstr_gfx3_hblk
(1) 1419/ 60010C4 : 0600 12AC           		dc.l mstr_gfx3_init_2
(1) 1420/ 60010C8 : 0600 128C           		dc.l mstr_gfx3_init_1
(1) 1421/ 60010CC :                     
(1) 1422/ 60010CC :                     ; ============================================================
(1) 1423/ 60010CC :                     ; ---------------------------------------
(1) 1424/ 60010CC :                     ; Pseudo-screen mode $00: BLANK
(1) 1425/ 60010CC :                     ;
(1) 1426/ 60010CC :                     ; YOU must use set this mode if you are
(1) 1427/ 60010CC :                     ; doing using these VDP settings
(1) 1428/ 60010CC :                     ; on the Genesis side:
(1) 1429/ 60010CC :                     ;
(1) 1430/ 60010CC :                     ; - H32 mode
(1) 1431/ 60010CC :                     ; - Double interlace mode
(1) 1432/ 60010CC :                     ;   (both H32 and H40)
(1) 1433/ 60010CC :                     ; ---------------------------------------
(1) 1434/ 60010CC :                     
(1) 1435/ 60010CC :                     		align 4
(1) 1436/ 60010CC :                     
(1) 1437/ 60010CC :                     ; -------------------------------
(1) 1438/ 60010CC :                     ; HBlank
(1) 1439/ 60010CC :                     ; -------------------------------
(1) 1440/ 60010CC :                     
(1) 1441/ 60010CC :                     mstr_gfx0_hblk:
(1) 1442/ 60010CC : 000B                		rts
(1) 1443/ 60010CE : 0009                		nop
(1) 1444/ 60010D0 :                     		align 4
(1) 1445/ 60010D0 :                     
(1) 1446/ 60010D0 :                     ; -------------------------------
(1) 1447/ 60010D0 :                     ; Init
(1) 1448/ 60010D0 :                     ; -------------------------------
(1) 1449/ 60010D0 :                     
(1) 1450/ 60010D0 :                     mstr_gfx0_init_2:
(1) 1451/ 60010D0 : D112                		mov 	#_vdpreg,r1
(1) 1452/ 60010D2 : E000                		mov	#0,r0
(1) 1453/ 60010D4 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1454/ 60010D6 :                     mstr_gfx0_init_1:
(1) 1455/ 60010D6 :                     ; 		mov	#$200,r1
(1) 1456/ 60010D6 :                     ; 		mov	#511,r2
(1) 1457/ 60010D6 :                     ; 		mov	#240,r3
(1) 1458/ 60010D6 :                     ; 		mov	#0,r4
(1) 1459/ 60010D6 :                     ; 		mov	#MarsVideo_ClearScreen,r0
(1) 1460/ 60010D6 :                     ; 		jsr	@r0
(1) 1461/ 60010D6 :                     ; 		nop
(1) 1462/ 60010D6 :                     ; 		mov	#_vdpreg,r1		; In case we are still on VBlank...
(1) 1463/ 60010D6 :                     ; -		mov.b	@(vdpsts,r1),r0
(1) 1464/ 60010D6 :                     ; 		tst	#VBLK,r0
(1) 1465/ 60010D6 :                     ; 		bf	-
(1) 1466/ 60010D6 :                     ; 		mov	#_vdpreg,r1		; Framebuffer swap REQUEST
(1) 1467/ 60010D6 :                     ; 		mov.b	@(framectl,r1),r0
(1) 1468/ 60010D6 :                     ; 		xor	#1,r0
(1) 1469/ 60010D6 :                     ; 		mov.b	r0,@(framectl,r1)
(1) 1470/ 60010D6 :                     
(1) 1471/ 60010D6 :                     ; -------------------------------
(1) 1472/ 60010D6 :                     ; Loop
(1) 1473/ 60010D6 :                     ; -------------------------------
(1) 1474/ 60010D6 :                     
(1) 1475/ 60010D6 :                     mstr_gfx0_loop:
(1) 1476/ 60010D6 : A181                		bra	mstr_ready
(1) 1477/ 60010D8 : 0009                		nop
(1) 1478/ 60010DA :                     		align 4
(1) 1479/ 60010DC :                     
(1) 1480/ 60010DC :                     ; ============================================================
(1) 1481/ 60010DC :                     ; ---------------------------------------
(1) 1482/ 60010DC :                     ; Pseudo-screen mode $01:
(1) 1483/ 60010DC :                     ;
(1) 1484/ 60010DC :                     ; Super Sprites ONLY
(1) 1485/ 60010DC :                     ; ---------------------------------------
(1) 1486/ 60010DC :                     
(1) 1487/ 60010DC :                     		align 4
(1) 1488/ 60010DC :                     
(1) 1489/ 60010DC :                     ; -------------------------------
(1) 1490/ 60010DC :                     ; HBlank
(1) 1491/ 60010DC :                     ; -------------------------------
(1) 1492/ 60010DC :                     
(1) 1493/ 60010DC :                     mstr_gfx1_hblk:
(1) 1494/ 60010DC : 000B                		rts
(1) 1495/ 60010DE : 0009                		nop
(1) 1496/ 60010E0 :                     		align 4
(1) 1497/ 60010E0 :                     
(1) 1498/ 60010E0 :                     ; -------------------------------
(1) 1499/ 60010E0 :                     ; Init
(1) 1500/ 60010E0 :                     ; -------------------------------
(1) 1501/ 60010E0 :                     
(1) 1502/ 60010E0 :                     mstr_gfx1_init_1:
(1) 1503/ 60010E0 : D10F                		mov	#CACHE_MSTR_SCRL,r1		; Load CACHE code
(1) 1504/ 60010E2 : 9227                		mov	#(CACHE_MSTR_SCRL_E-CACHE_MSTR_SCRL)/4,r2
(1) 1505/ 60010E4 : D00F                		mov	#Mars_LoadCacheRam,r0
(1) 1506/ 60010E6 : 400B                		jsr	@r0
(1) 1507/ 60010E8 : 0009                		nop
(1) 1508/ 60010EA : A003                		bra	mstr_gfx1_cont
(1) 1509/ 60010EC : 0009                		nop
(1) 1510/ 60010EE :                     mstr_gfx1_init_2:
(1) 1511/ 60010EE :                     ; 		mov	#1,r0
(1) 1512/ 60010EE :                     ; 		mov.w	r0,@(marsGbl_WaveEnable,gbr)	; *** TEMPORAL
(1) 1513/ 60010EE :                     ; 		mov	#8,r0
(1) 1514/ 60010EE :                     ; 		mov.w	r0,@(marsGbl_WaveSpd,gbr)	; ***
(1) 1515/ 60010EE :                     ; 		mov	#8,r0
(1) 1516/ 60010EE :                     ; 		mov.w	r0,@(marsGbl_WaveMax,gbr)	; ***
(1) 1517/ 60010EE :                     ; 		mov	#16,r0
(1) 1518/ 60010EE :                     ; 		mov.w	r0,@(marsGbl_WaveDeform,gbr)	; ***
(1) 1519/ 60010EE :                     
(1) 1520/ 60010EE : D10B                		mov 	#_vdpreg,r1
(1) 1521/ 60010F0 : E001                		mov	#1,r0
(1) 1522/ 60010F2 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1523/ 60010F4 :                     mstr_gfx1_cont:
(1) 1524/ 60010F4 : D10C                		mov	#MarsGfx_TEMP,r1
(1) 1525/ 60010F6 : D20D                		mov	#_framebuffer+$200,r2
(1) 1526/ 60010F8 : 931D                		mov	#(320*224)/4,r3
(1) 1527/ 60010FA :                     .copyme:
(1) 1528/ 60010FA : 6016                		mov	@r1+,r0
(1) 1529/ 60010FC : 2202                		mov	r0,@r2
(1) 1530/ 60010FE : 4310                		dt	r3
(1) 1531/ 6001100 : 8FFB                		bf/s	.copyme
(1) 1532/ 6001102 : 7204                		add	#4,r2
(1) 1533/ 6001104 :                     
(1) 1534/ 6001104 :                     ; -------------------------------
(1) 1535/ 6001104 :                     ; Loop
(1) 1536/ 6001104 :                     ; -------------------------------
(1) 1537/ 6001104 :                     
(1) 1538/ 6001104 :                     mstr_gfx1_loop:
(1) 1539/ 6001104 : 9113                		mov	#$200,r1
(1) 1540/ 6001106 : 9217                		mov	#320,r2
(1) 1541/ 6001108 : 9317                		mov	#224,r3
(1) 1542/ 600110A : D009                		mov	#MarsVideo_MakeNametbl,r0
(1) 1543/ 600110C : 400B                		jsr	@r0
(1) 1544/ 600110E : E400                		mov	#0,r4
(1) 1545/ 6001110 :                     
(1) 1546/ 6001110 :                     ; 		mov	#$200,r1			; Clear framebuffer
(1) 1547/ 6001110 :                     ; 		mov	#(320+16)/2,r2
(1) 1548/ 6001110 :                     ; 		mov	#240,r3
(1) 1549/ 6001110 :                     ; 		mov	#MarsVideo_ClearScreen,r0
(1) 1550/ 6001110 :                     ; 		jsr	@r0
(1) 1551/ 6001110 :                     ; 		mov	#0,r4
(1) 1552/ 6001110 :                     ;
(1) 1553/ 6001110 :                     ; 		mov	#$200,r1
(1) 1554/ 6001110 :                     ; 		mov	#0,r2
(1) 1555/ 6001110 :                     ; 		mov	#0,r3
(1) 1556/ 6001110 :                     ; 		mov	#512,r4
(1) 1557/ 6001110 :                     ; 		mov	#240,r5
(1) 1558/ 6001110 :                     ; 		mov	#512*240,r6
(1) 1559/ 6001110 :                     ; 		mov	#Cach_Intrl_Size,r7
(1) 1560/ 6001110 :                     ; 		mov	#MarsVideo_MkSprCoords,r0	; Screen settings for SuperSpr boxes
(1) 1561/ 6001110 :                     ; 		jsr	@r0
(1) 1562/ 6001110 :                     ; 		nop
(1) 1563/ 6001110 :                     ; 		mov	#MarsVideo_DrawSuperSpr_M,r0
(1) 1564/ 6001110 :                     ; 		jsr	@r0
(1) 1565/ 6001110 :                     ; 		nop
(1) 1566/ 6001110 :                     
(1) 1567/ 6001110 : D102                		mov	#_vdpreg,r1			; Framebuffer swap REQUEST
(1) 1568/ 6001112 : 841B                		mov.b	@(framectl,r1),r0
(1) 1569/ 6001114 : CA01                		xor	#1,r0
(1) 1570/ 6001116 : 801B                		mov.b	r0,@(framectl,r1)
(1) 1571/ 6001118 : A160                		bra	mstr_ready
(1) 1572/ 600111A : 0009                		nop
(1) 1573/ 600111C :                     		align 4
(1) 1574/ 600111C : 2000 4100 0600 1584 		ltorg
                    0600 07DC 020A 78A0 
                    2400 0200 0600 08D8 
                    0129 4600 0140 00E0 
(1) 1575/ 600113C :                     
(1) 1576/ 600113C :                     ; ============================================================
(1) 1577/ 600113C :                     ; ---------------------------------------
(1) 1578/ 600113C :                     ; Pseudo-screen mode $02:
(1) 1579/ 600113C :                     ;
(1) 1580/ 600113C :                     ; 256-color smooth scrolling map
(1) 1581/ 600113C :                     ; ---------------------------------------
(1) 1582/ 600113C :                     
(1) 1583/ 600113C :                     		align 4
(1) 1584/ 600113C :                     
(1) 1585/ 600113C :                     ; -------------------------------
(1) 1586/ 600113C :                     ; HBlank
(1) 1587/ 600113C :                     ; -------------------------------
(1) 1588/ 600113C :                     
(1) 1589/ 600113C :                     mstr_gfx2_hblk:
(1) 1590/ 600113C : 000B                		rts
(1) 1591/ 600113E : 0009                		nop
(1) 1592/ 6001140 :                     		align 4
(1) 1593/ 6001140 :                     
(1) 1594/ 6001140 :                     ; -------------------------------
(1) 1595/ 6001140 :                     ; Init
(1) 1596/ 6001140 :                     ; -------------------------------
(1) 1597/ 6001140 :                     
(1) 1598/ 6001140 :                     mstr_gfx2_init_1:
(1) 1599/ 6001140 : D133                		mov	#_sysreg+comm14,r1
(1) 1600/ 6001142 : 6011                .slv_wait:	mov.w	@r1,r0
(1) 1601/ 6001144 : C90F                		and	#%00001111,r0
(1) 1602/ 6001146 : 2008                		tst	r0,r0
(1) 1603/ 6001148 : 8BFB                		bf	.slv_wait
(1) 1604/ 600114A : D132                		mov	#_vdpreg,r1
(1) 1605/ 600114C : 8515                .wait_fb:	mov.w	@(vdpsts,r1),r0
(1) 1606/ 600114E : C802                		tst	#2,r0
(1) 1607/ 6001150 : 8BFC                		bf	.wait_fb
(1) 1608/ 6001152 : 200A                		xor	r0,r0
(1) 1609/ 6001154 : D130                		mov	#RAM_Mars_ScrnBuff,r1
(1) 1610/ 6001156 : 928F                		mov	#(end_scrn02-RAM_Mars_ScrnBuff)/4,r2
(1) 1611/ 6001158 :                     .clr_scrn:
(1) 1612/ 6001158 : 2102                		mov	r0,@r1
(1) 1613/ 600115A : 4210                		dt	r2
(1) 1614/ 600115C : 8FFC                		bf/s	.clr_scrn
(1) 1615/ 600115E : 7104                		add	#4,r1
(1) 1616/ 6001160 : D12E                		mov	#CACHE_MSTR_SCRL,r1			; Load CACHE code
(1) 1617/ 6001162 : 928A                		mov	#(CACHE_MSTR_SCRL_E-CACHE_MSTR_SCRL)/4,r2
(1) 1618/ 6001164 : D02E                		mov	#Mars_LoadCacheRam,r0
(1) 1619/ 6001166 : 400B                		jsr	@r0
(1) 1620/ 6001168 : 0009                		nop
(1) 1621/ 600116A :                     	; *** Create scrolling Section 0
(1) 1622/ 600116A : E100                		mov	#0,r1					; Make a scrolling playfield
(1) 1623/ 600116C : 9286                		mov	#$200,r2
(1) 1624/ 600116E : 9386                		mov	#320,r3
(1) 1625/ 6001170 : 9486                		mov	#224,r4
(1) 1626/ 6001172 : BC21                		bsr	MarsVideo_MkScrlField
(1) 1627/ 6001174 : E510                		mov	#16,r5					; <-- block size
(1) 1628/ 6001176 : DE2B                		mov	#RAM_Mars_DreqRead+Dreq_BgExBuff,r14	; Background control MD
(1) 1629/ 6001178 : DD2B                		mov	#RAM_Mars_ScrlBuff,r13			; Scroll buffer
(1) 1630/ 600117A : DC2C                		mov	#RAM_Mars_ScrlData,r12			; Draw output to this area
(1) 1631/ 600117C : D02C                		mov	#MarsVideo_DrwMapData,r0
(1) 1632/ 600117E : 400B                		jsr	@r0
(1) 1633/ 6001180 : 0009                		nop
(1) 1634/ 6001182 : A003                		bra	mstr_gfx2_init_cont
(1) 1635/ 6001184 : 0009                		nop
(1) 1636/ 6001186 :                     
(1) 1637/ 6001186 :                     mstr_gfx2_init_2:
(1) 1638/ 6001186 : D123                		mov 	#_vdpreg,r1
(1) 1639/ 6001188 : E001                		mov	#1,r0
(1) 1640/ 600118A : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1641/ 600118C :                     mstr_gfx2_init_cont:
(1) 1642/ 600118C :                     
(1) 1643/ 600118C :                     	; Copy-paste the entire pixel data
(1) 1644/ 600118C :                     	; into the framebuffer(s)
(1) 1645/ 600118C : DE29                		mov	#RAM_Mars_ScrlBuff,r14
(1) 1646/ 600118E : D12A                		mov	#RAM_Mars_ScrlData,r1		; Input
(1) 1647/ 6001190 : D22A                		mov	#_framebuffer,r2
(1) 1648/ 6001192 : 50EA                		mov	@(scrl_fbdata,r14),r0
(1) 1649/ 6001194 : 320C                		add	r0,r2				; Output
(1) 1650/ 6001196 : 9374                		mov	#(((320+16)*(224+16))+320)/4,r3	; Size
(1) 1651/ 6001198 : D029                		mov	#MarsVideo_DmaDraw,r0
(1) 1652/ 600119A : 400B                		jsr	@r0
(1) 1653/ 600119C : 0009                		nop
(1) 1654/ 600119E :                     
(1) 1655/ 600119E :                     ; -------------------------------
(1) 1656/ 600119E :                     ; Loop
(1) 1657/ 600119E :                     ; -------------------------------
(1) 1658/ 600119E :                     
(1) 1659/ 600119E :                     mstr_gfx2_loop:
(1) 1660/ 600119E : DE29                		mov	#RAM_Mars_DreqRead+Dreq_BgExBuff,r14	; Control this scrolling area from MD to 32X
(1) 1661/ 60011A0 : DD29                		mov	#RAM_Mars_ScrlBuff,r13
(1) 1662/ 60011A2 : 50EC                		mov	@(md_bg_x,r14),r0			; Copypaste X/Y from MD's BG to scrolls' buffer
(1) 1663/ 60011A4 : 1D0B                		mov	r0,@(scrl_xpos,r13)
(1) 1664/ 60011A6 : 50ED                		mov	@(md_bg_y,r14),r0
(1) 1665/ 60011A8 : 1D0C                		mov	r0,@(scrl_ypos,r13)
(1) 1666/ 60011AA : BC77                		bsr	MarsVideo_Bg_UpdPos			; Update X/Y
(1) 1667/ 60011AC : 0009                		nop
(1) 1668/ 60011AE : BCAF                		bsr	MarsVideo_Bg_DrawReq
(1) 1669/ 60011B0 : 0009                		nop
(1) 1670/ 60011B2 : D026                 		mov	#MarsVideo_RefillBgSpr,r0		; Refill BG sections overwritten by sprites
(1) 1671/ 60011B4 : 400B                		jsr	@r0					; using OLD values
(1) 1672/ 60011B6 : 0009                		nop
(1) 1673/ 60011B8 :                     
(1) 1674/ 60011B8 :                     ; 		mov	#RAM_Mars_DreqRead+Dreq_BgExBuff,r14	; Draw L/R here, Slave does U/D
(1) 1675/ 60011B8 :                     ; 		mov	#RAM_Mars_ScrlBuff,r13
(1) 1676/ 60011B8 :                     ; 		bsr	MarsVideo_Bg_DrawScrl
(1) 1677/ 60011B8 :                     ; 		nop
(1) 1678/ 60011B8 : D125                		mov	#_sysreg+comm14+1,r1			; Start Slave task $01
(1) 1679/ 60011BA : E001                		mov	#1,r0
(1) 1680/ 60011BC : 2100                		mov.b	r0,@r1
(1) 1681/ 60011BE :                     
(1) 1682/ 60011BE :                     	; Now the SuperSprites:
(1) 1683/ 60011BE : DE25                		mov	#RAM_Mars_ScrlBuff,r14			; Make new SuperSprite settings
(1) 1684/ 60011C0 : 51EA                		mov	@(scrl_fbdata,r14),r1
(1) 1685/ 60011C2 : 52E9                		mov	@(scrl_fbpos,r14),r2
(1) 1686/ 60011C4 : 53E8                		mov	@(scrl_fbpos_y,r14),r3
(1) 1687/ 60011C6 : 54E6                		mov	@(scrl_intrl_w,r14),r4
(1) 1688/ 60011C8 : 55E7                		mov	@(scrl_intrl_h,r14),r5
(1) 1689/ 60011CA : 56E5                		mov	@(scrl_intrl_size,r14),r6
(1) 1690/ 60011CC : D722                		mov	#Cach_Intrl_Size,r7
(1) 1691/ 60011CE : D023                		mov	#MarsVideo_MkSprCoords,r0
(1) 1692/ 60011D0 : 400B                		jsr	@r0
(1) 1693/ 60011D2 : 0009                		nop
(1) 1694/ 60011D4 : D022                		mov	#MarsVideo_MkSprBoxes,r0	; Make refill boxes for the next frame
(1) 1695/ 60011D6 : 400B                		jsr	@r0
(1) 1696/ 60011D8 : 0009                		nop
(1) 1697/ 60011DA : D022                		mov	#MarsVideo_DrawSuperSpr_M,r0	; Draw SuperSprites now.
(1) 1698/ 60011DC : 400B                		jsr	@r0
(1) 1699/ 60011DE : 0009                		nop
(1) 1700/ 60011E0 : D121                		mov	#RAM_Mars_ScrlBuff,r1
(1) 1701/ 60011E2 : E200                		mov	#0,r2
(1) 1702/ 60011E4 : 934E                		mov	#240,r3				; Make a visible section of the scrolling data
(1) 1703/ 60011E6 : D021                		mov	#MarsVideo_ShowScrlBg,r0	; From Line 0 to 240
(1) 1704/ 60011E8 : 400B                		jsr	@r0
(1) 1705/ 60011EA : 0009                		nop
(1) 1706/ 60011EC :                     	; -------------------------------
(1) 1707/ 60011EC : E100                		mov	#0,r1
(1) 1708/ 60011EE : 9247                		mov	#224,r2
(1) 1709/ 60011F0 : D31F                		mov	#FBVRAM_PATCH,r3
(1) 1710/ 60011F2 : D020                		mov	#MarsVideo_FixTblShift,r0	; HW only: Fix those broken lines that
(1) 1711/ 60011F4 : 400B                		jsr	@r0				; the Xshift register can't move.
(1) 1712/ 60011F6 : 0009                		nop
(1) 1713/ 60011F8 : D105                		mov	#_sysreg+comm14,r1		; Wait for Slave
(1) 1714/ 60011FA :                     .wait_slv:
(1) 1715/ 60011FA : 6011                		mov.w	@r1,r0
(1) 1716/ 60011FC : C90F                		and	#%00001111,r0
(1) 1717/ 60011FE : 2008                		tst	r0,r0
(1) 1718/ 6001200 : 8BFB                		bf	.wait_slv
(1) 1719/ 6001202 : D104                		mov	#_vdpreg,r1
(1) 1720/ 6001204 :                     ; .waitv:
(1) 1721/ 6001204 :                     ; 		mov.b	@(vdpsts,r1),r0			; If we got late to VBlank wait until
(1) 1722/ 6001204 :                     ; 		tst	#VBLK,r0			; DISPLAY is active again.
(1) 1723/ 6001204 :                     ; 		bf	.waitv
(1) 1724/ 6001204 : 841B                		mov.b	@(framectl,r1),r0		; REQUEST Framebuffer swap
(1) 1725/ 6001206 : CA01                		xor	#1,r0
(1) 1726/ 6001208 : 801B                		mov.b	r0,@(framectl,r1)
(1) 1727/ 600120A :                     
(1) 1728/ 600120A : A0E7                		bra	mstr_ready
(1) 1729/ 600120C : 0009                		nop
(1) 1730/ 600120E :                     		align 4
(1) 1731/ 6001210 : 2000 402E 2000 4100 		ltorg
                    2600 6080 0600 1584 
                    0600 07DC 2600 5868 
                    2600 6090 2600 60F8 
                    C000 0014 2600 6090 
                    2600 60F8 2400 0000 
                    0600 0B54 2600 5868 
                    2600 6090 C000 0294 
                    2000 402F 2600 6090 
                    C000 0440 0600 0D50 
                    0600 0D64 C000 0148 
                    2600 6090 0600 09E8 
                    0001 D000 0600 0948 
                    4F2E 0129 0200 0140 
                    00E0 4F10 00F0      
(1) 1732/ 6001286 :                     
(1) 1733/ 6001286 :                     ; ============================================================
(1) 1734/ 6001286 :                     ; ---------------------------------------
(1) 1735/ 6001286 :                     ; Mode 4: 3D MODE Polygons-only
(1) 1736/ 6001286 :                     ; ---------------------------------------
(1) 1737/ 6001286 :                     
(1) 1738/ 6001286 :                     		align 4
(1) 1739/ 6001288 :                     
(1) 1740/ 6001288 :                     ; -------------------------------
(1) 1741/ 6001288 :                     ; HBlank
(1) 1742/ 6001288 :                     ; -------------------------------
(1) 1743/ 6001288 :                     
(1) 1744/ 6001288 :                     mstr_gfx3_hblk:
(1) 1745/ 6001288 : 000B                		rts
(1) 1746/ 600128A : 0009                		nop
(1) 1747/ 600128C :                     		align 4
(1) 1748/ 600128C :                     
(1) 1749/ 600128C :                     ; -------------------------------
(1) 1750/ 600128C :                     ; Init
(1) 1751/ 600128C :                     ; -------------------------------
(1) 1752/ 600128C :                     
(1) 1753/ 600128C :                     mstr_gfx3_init_1:
(1) 1754/ 600128C : 200A                		xor	r0,r0
(1) 1755/ 600128E : D154                		mov	#RAM_Mars_ScrnBuff,r1
(1) 1756/ 6001290 : 92D2                		mov	#(end_scrn02-RAM_Mars_ScrnBuff)/4,r2
(1) 1757/ 6001292 :                     .clr_scrn:
(1) 1758/ 6001292 : 2102                		mov	r0,@r1
(1) 1759/ 6001294 : 4210                		dt	r2
(1) 1760/ 6001296 : 8FFC                		bf/s	.clr_scrn
(1) 1761/ 6001298 : 7104                		add	#4,r1
(1) 1762/ 600129A : D152                		mov	#CACHE_MSTR_PLGN,r1
(1) 1763/ 600129C : 92CD                		mov	#(CACHE_MSTR_PLGN_E-CACHE_MSTR_PLGN)/4,r2
(1) 1764/ 600129E : D052                		mov	#Mars_LoadCacheRam,r0
(1) 1765/ 60012A0 : 400B                		jsr	@r0
(1) 1766/ 60012A2 : 0009                		nop
(1) 1767/ 60012A4 : E000                		mov	#0,r0
(1) 1768/ 60012A6 : C10E                		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1769/ 60012A8 : A003                		bra	mstr_gfx3_init_cont
(1) 1770/ 60012AA : 0009                		nop
(1) 1771/ 60012AC :                     
(1) 1772/ 60012AC :                     mstr_gfx3_init_2:
(1) 1773/ 60012AC : D14F                		mov 	#_vdpreg,r1
(1) 1774/ 60012AE : E001                		mov	#1,r0
(1) 1775/ 60012B0 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1776/ 60012B2 :                     mstr_gfx3_init_cont:
(1) 1777/ 60012B2 : D14E                		mov	#_vdpreg,r1
(1) 1778/ 60012B4 : 8515                .wait_fb:	mov.w	@(vdpsts,r1),r0			; Wait until framebuffer is unlocked
(1) 1779/ 60012B6 : C802                		tst	#2,r0
(1) 1780/ 60012B8 : 8BFC                		bf	.wait_fb
(1) 1781/ 60012BA : 0009                		nop
(1) 1782/ 60012BC : 91BE                		mov	#$200,r1
(1) 1783/ 60012BE : 92BD                		mov	#512,r2				; Make linetable
(1) 1784/ 60012C0 : 93BD                		mov	#240,r3
(1) 1785/ 60012C2 : D04B                		mov	#MarsVideo_MakeNametbl,r0
(1) 1786/ 60012C4 : 400B                		jsr	@r0
(1) 1787/ 60012C6 : E400                		mov	#0,r4
(1) 1788/ 60012C8 :                     
(1) 1789/ 60012C8 :                     ; -------------------------------
(1) 1790/ 60012C8 :                     ; Loop
(1) 1791/ 60012C8 :                     ; -------------------------------
(1) 1792/ 60012C8 :                     
(1) 1793/ 60012C8 :                     mstr_gfx3_loop:
(1) 1794/ 60012C8 : D34A                		mov	#_sysreg+comm12,r3
(1) 1795/ 60012CA : D44B                		mov	#_sysreg+comm14,r4
(1) 1796/ 60012CC :                     .wait_me:
(1) 1797/ 60012CC : 6031                		mov.w	@r3,r0
(1) 1798/ 60012CE : C90F                		and	#%1111,r0
(1) 1799/ 60012D0 : 8803                		cmp/eq	#3,r0
(1) 1800/ 60012D2 : 8901                		bt	.mk_me
(1) 1801/ 60012D4 : A082                		bra	mstr_ready				; <-- Stop processing on mode mid-change
(1) 1802/ 60012D6 : 0009                		nop
(1) 1803/ 60012D8 :                     		align 4
(1) 1804/ 60012D8 :                     .mk_me:
(1) 1805/ 60012D8 : 6041                		mov.w	@r4,r0
(1) 1806/ 60012DA : C90F                		and	#%00001111,r0				; Slave busy?
(1) 1807/ 60012DC : 2008                		tst	r0,r0
(1) 1808/ 60012DE : 8BF5                		bf	.wait_me
(1) 1809/ 60012E0 : 4F03                		stc	sr,@-r15
(1) 1810/ 60012E2 : E0F0                		mov.b	#$F0,r0					; ** $F0
(1) 1811/ 60012E4 : 600C                		extu.b	r0,r0
(1) 1812/ 60012E6 : 400E                		ldc	r0,sr					; Disable interrupts
(1) 1813/ 60012E8 : D144                		mov	#RAM_Mars_DreqRead+Dreq_Objects,r1	; Copy CAMERA and OBJECTS for Slave
(1) 1814/ 60012EA : D245                		mov	#RAM_Mars_Objects,r2
(1) 1815/ 60012EC : E360                		mov	#(sizeof_mdlobj*MAX_MODELS)/4,r3
(1) 1816/ 60012EE :                     .copy_obj:
(1) 1817/ 60012EE : 6016                		mov	@r1+,r0
(1) 1818/ 60012F0 : 2202                		mov	r0,@r2
(1) 1819/ 60012F2 : 4310                		dt	r3
(1) 1820/ 60012F4 : 8FFB                		bf/s	.copy_obj
(1) 1821/ 60012F6 : 7204                		add	#4,r2
(1) 1822/ 60012F8 : D142                		mov	#RAM_Mars_DreqRead+Dreq_ObjCam,r1
(1) 1823/ 60012FA : D243                		mov	#RAM_Mars_ObjCamera,r2
(1) 1824/ 60012FC : E306                		mov	#sizeof_camera/4,r3
(1) 1825/ 60012FE :                     .copy_cam:
(1) 1826/ 60012FE : 6016                		mov	@r1+,r0
(1) 1827/ 6001300 : 2202                		mov	r0,@r2
(1) 1828/ 6001302 : 4310                		dt	r3
(1) 1829/ 6001304 : 8FFB                		bf/s	.copy_cam
(1) 1830/ 6001306 : 7204                		add	#4,r2
(1) 1831/ 6001308 : C50C                		mov.w	@(marsGbl_PolyBuffNum,gbr),r0	; Swap Read/Write sections FIRST
(1) 1832/ 600130A : CA01                		xor	#1,r0
(1) 1833/ 600130C : C10C                		mov.w	r0,@(marsGbl_PolyBuffNum,gbr)
(1) 1834/ 600130E : D43F                		mov	#_sysreg+comm14+1,r4		; Request Slave task $02: Build the models
(1) 1835/ 6001310 : E002                		mov	#2,r0
(1) 1836/ 6001312 : 2400                		mov.b	r0,@r4
(1) 1838/ 6001314 : D13E                		mov	#_sysreg+comm0,r1		; DEBUG counter
(1) 1839/ 6001316 : 200A                		xor	r0,r0
(1) 1840/ 6001318 : 2100                		mov.b	r0,@r1
(1) 1842/ 600131A : 4F07                		ldc	@r15+,sr
(1) 1843/ 600131C :                     
(1) 1844/ 600131C :                     	; -------------------------------
(1) 1845/ 600131C :                     	; Start drawing the polygons
(1) 1846/ 600131C : D133                		mov	#_vdpreg,r1
(1) 1847/ 600131E : 8515                .wait_fb:	mov.w	@(vdpsts,r1),r0			; Wait until framebuffer is unlocked
(1) 1848/ 6001320 : C802                		tst	#2,r0
(1) 1849/ 6001322 : 8BFC                		bf	.wait_fb
(1) 1850/ 6001324 : 908C                		mov	#$A5,r0				; VDPFILL LEN: Pre-start at $A5
(1) 1851/ 6001326 : 8113                		mov.w	r0,@(6,r1)
(1) 1852/ 6001328 : D03A                		mov	#RAM_Mars_SVdpDrwList,r0	; Reset DDA Start/End/Read/Write points
(1) 1853/ 600132A : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)	; and counters
(1) 1854/ 600132C : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(1) 1855/ 600132E : C202                		mov	r0,@(marsGbl_PlyPzList_Start,gbr)
(1) 1856/ 6001330 : D039                		mov	#RAM_Mars_SVdpDrwList_E,r0
(1) 1857/ 6001332 : C203                		mov	r0,@(marsGbl_PlyPzList_End,gbr)
(1) 1858/ 6001334 : E000                		mov	#0,r0
(1) 1859/ 6001336 : C10D                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(1) 1860/ 6001338 : C10A                		mov.w	r0,@(marsGbl_WdgReady,gbr)
(1) 1861/ 600133A : E007                		mov	#7,r0				; Start on last mode
(1) 1862/ 600133C : C108                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(1) 1863/ 600133E : 9080                		mov	#224,r0				; Lines to clear for WdgMode $07
(1) 1864/ 6001340 : D136                		mov	#Cach_ClrLines,r1
(1) 1865/ 6001342 : 2102                		mov	r0,@r1
(1) 1866/ 6001344 : E100                		mov	#0,r1
(1) 1867/ 6001346 : E210                		mov	#$10,r2
(1) 1868/ 6001348 : D035                		mov	#Mars_SetWatchdog,r0
(1) 1869/ 600134A : 400B                		jsr	@r0
(1) 1870/ 600134C : 0009                		nop
(1) 1871/ 600134E :                     	; *** Watchdog is now active,
(1) 1872/ 600134E :                     	; check cache_m_3D.asm ***
(1) 1873/ 600134E :                     
(1) 1874/ 600134E :                     	; -------------------------------
(1) 1875/ 600134E :                     	; Start SORTING polygons
(1) 1876/ 600134E :                     	; r14 - Polygon LIST
(1) 1877/ 600134E :                     	; r13 - Number of faces (MAIN)
(1) 1878/ 600134E : C50C                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0	; Check for which buffer to use
(1) 1879/ 6001350 : C801                		tst     #1,r0				; on this frame
(1) 1880/ 6001352 : 8902                		bt	.page_2
(1) 1881/ 6001354 : DE33                		mov 	#RAM_Mars_PlgnList_0,r14
(1) 1882/ 6001356 : A004                		bra	.cont_plgn
(1) 1883/ 6001358 : DD31                		mov	#RAM_Mars_PlgnNum_0,r13
(1) 1884/ 600135A :                     .page_2:
(1) 1885/ 600135A : DE34                		mov 	#RAM_Mars_PlgnList_1,r14
(1) 1886/ 600135C : A001                		bra	.cont_plgn
(1) 1887/ 600135E : DD33                		mov	#RAM_Mars_PlgnNum_1,r13
(1) 1888/ 6001360 : 0009                		nop
(1) 1889/ 6001362 :                     .cont_plgn:
(1) 1890/ 6001362 : 6DD2                		mov	@r13,r13	; Grab number of polygons
(1) 1891/ 6001364 : 4D15                		cmp/pl	r13		; If < 0: leave
(1) 1892/ 6001366 : 8B27                		bf	.skip
(1) 1893/ 6001368 : 6CE3                		mov	r14,r12		; r12 - PlgnList copy
(1) 1894/ 600136A : 6BD3                		mov	r13,r11		; r11 - PlgnNum copy
(1) 1895/ 600136C :                     .roll:
(1) 1896/ 600136C : 6AC3                		mov	r12,r10
(1) 1897/ 600136E : 67A2                		mov	@r10,r7		; r1 - Start value
(1) 1898/ 6001370 : 68A3                		mov	r10,r8		; Set Lower pointer
(1) 1899/ 6001372 : 69B3                		mov	r11,r9
(1) 1900/ 6001374 : 0009                		nop
(1) 1901/ 6001376 :                     .srch:
(1) 1902/ 6001376 : 60A2                		mov	@r10,r0
(1) 1903/ 6001378 : 3077                		cmp/gt	r7,r0
(1) 1904/ 600137A : 8901                		bt	.higher
(1) 1905/ 600137C : 6703                		mov	r0,r7		; Update LOW r1 value
(1) 1906/ 600137E : 68A3                		mov	r10,r8		; Save NEW Lower pointer
(1) 1907/ 6001380 :                     .higher:
(1) 1908/ 6001380 : 4910                		dt	r9
(1) 1909/ 6001382 : 8FF8                		bf/s	.srch
(1) 1910/ 6001384 : 7A08                		add	#8,r10
(1) 1911/ 6001386 : 6186                		mov	@r8+,r1		; Swap Z and pointers
(1) 1912/ 6001388 : 6286                		mov	@r8+,r2
(1) 1913/ 600138A : 63C6                		mov	@r12+,r3
(1) 1914/ 600138C : 64C6                		mov	@r12+,r4
(1) 1915/ 600138E : 2C26                		mov	r2,@-r12
(1) 1916/ 6001390 : 2C16                		mov	r1,@-r12
(1) 1917/ 6001392 : 2846                		mov	r4,@-r8
(1) 1918/ 6001394 : 2836                		mov	r3,@-r8
(1) 1919/ 6001396 : 4B10                		dt	r11
(1) 1920/ 6001398 : 8FE8                		bf/s	.roll
(1) 1921/ 600139A : 7C08                		add	#8,r12
(1) 1922/ 600139C :                     .exit:
(1) 1923/ 600139C : 7E04                		add	#4,r14				; Redirect +4 r14 to polygon pointers
(1) 1924/ 600139E :                     .loop:
(1) 1925/ 600139E : 60E2                		mov	@r14,r0				; Grab current pointer
(1) 1926/ 60013A0 : 4015                		cmp/pl	r0				; Zero?
(1) 1927/ 60013A2 : 8B06                		bf	.invalid
(1) 1928/ 60013A4 : 2FE6                		mov	r14,@-r15
(1) 1929/ 60013A6 : 6E03                		mov	r0,r14
(1) 1930/ 60013A8 : D022                		mov 	#MarsVideo_SlicePlgn,r0		; Slice the polygon
(1) 1931/ 60013AA : 400B                		jsr	@r0
(1) 1932/ 60013AC : 2FD6                		mov	r13,@-r15
(1) 1933/ 60013AE : 6DF6                		mov	@r15+,r13
(1) 1934/ 60013B0 : 6EF6                		mov	@r15+,r14
(1) 1935/ 60013B2 :                     .invalid:
(1) 1936/ 60013B2 : 4D10                		dt	r13				; Decrement numof_polygons
(1) 1937/ 60013B4 : 8FF3                		bf/s	.loop
(1) 1938/ 60013B6 : 7E08                		add	#8,r14				; Move to next entry
(1) 1939/ 60013B8 :                     .skip:
(1) 1940/ 60013B8 : E001                		mov	#1,r0				; Report to Watchdog that we
(1) 1941/ 60013BA : C10A                		mov.w	r0,@(marsGbl_WdgReady,gbr)	; finished slicing.
(1) 1942/ 60013BC :                     ; 		mov	#MarsMdl_MdlLoop,r0
(1) 1943/ 60013BC :                     ; 		jsr	@r0
(1) 1944/ 60013BC :                     ; 		nop
(1) 1945/ 60013BC :                     
(1) 1946/ 60013BC : C50D                .wait_pz: 	mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Any pieces remaining?
(1) 1947/ 60013BE : 2008                		tst	r0,r0
(1) 1948/ 60013C0 : 8BFC                		bf	.wait_pz
(1) 1949/ 60013C2 : C508                .wait_wdg:	mov.w	@(marsGbl_WdgMode,gbr),r0	; Watchdog finished?
(1) 1950/ 60013C4 : 2008                		tst	r0,r0
(1) 1951/ 60013C6 : 8BFC                		bf	.wait_wdg
(1) 1952/ 60013C8 : 913C                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1953/ 60013CA : 903C                		mov.w   #$A518,r0
(1) 1954/ 60013CC : 2101                		mov.w   r0,@r1
(1) 1955/ 60013CE : D107                		mov	#_vdpreg,r1
(1) 1956/ 60013D0 : 8515                .wait_sv:	mov.w	@($A,r1),r0			; Check if Framebuffer is locked
(1) 1957/ 60013D2 : C802                		tst	#%10,r0
(1) 1958/ 60013D4 : 8BFC                		bf	.wait_sv
(1) 1959/ 60013D6 : 841B                		mov.b	@(framectl,r1),r0		; Frameswap request
(1) 1960/ 60013D8 : CA01                		xor	#1,r0
(1) 1961/ 60013DA : 801B                		mov.b	r0,@(framectl,r1)
(1) 1962/ 60013DC :                     
(1) 1963/ 60013DC :                     ; ============================================================
(1) 1964/ 60013DC :                     
(1) 1965/ 60013DC :                     mstr_ready:
(1) 1966/ 60013DC : ADF6                		bra	master_loop
(1) 1967/ 60013DE : 0009                		nop
(1) 1968/ 60013E0 :                     		align 4
(1) 1969/ 60013E0 : 2600 6080 0600 1A28 		ltorg
                    0600 07DC 2000 4100 
                    0600 08D8 2000 402C 
                    2000 402E 2600 5900 
                    2603 1448 2600 58E8 
                    2603 15C8 2000 402F 
                    2000 4020 2600 6080 
                    2601 2A40 C000 06D4 
                    0600 081C 2602 D700 
                    2603 1440 2602 F5A0 
                    2603 1444 C000 03E4 
                    4F2E 01EE 0200 00F0 
                    00A5 00E0 FE80 A518 
(1) 1970/ 6001448 :                     
(1) 1971/ 6001448 :                     ; ====================================================================
(1) 1972/ 6001448 :                     ; ----------------------------------------------------------------
(1) 1973/ 6001448 :                     ; Slave entry
(1) 1974/ 6001448 :                     ; ----------------------------------------------------------------
(1) 1975/ 6001448 :                     
(1) 1976/ 6001448 :                     		align 4
(1) 1977/ 6001448 :                     SH2_S_Entry:
(1) 1978/ 6001448 : DF27                		mov	#STACK_SLV,r15		; Reset stack
(1) 1979/ 600144A : D028                		mov	#SH2_Slave,r0		; Reset vbr
(1) 1980/ 600144C : 402E                		ldc	r0,vbr
(1) 1981/ 600144E : 915B                		mov.l	#_FRT,r1		; Free-run timer settings
(1) 1982/ 6001450 : E000                		mov	#0,r0			; ** REQUIRED FOR REAL HARDWARE **
(1) 1983/ 6001452 : 8010                		mov.b	r0,@(0,r1)
(1) 1984/ 6001454 : E0E2                		mov.b	#$E2,r0
(1) 1985/ 6001456 : 8017                		mov.b	r0,@(7,r1)
(1) 1986/ 6001458 : E000                		mov	#0,r0
(1) 1987/ 600145A : 8014                		mov.b	r0,@(4,r1)
(1) 1988/ 600145C : E001                		mov	#1,r0
(1) 1989/ 600145E : 8015                		mov.b	r0,@(5,r1)
(1) 1990/ 6001460 : E000                		mov	#0,r0
(1) 1991/ 6001462 : 8016                		mov.b	r0,@(6,r1)
(1) 1992/ 6001464 : E001                		mov	#1,r0
(1) 1993/ 6001466 : 8011                		mov.b	r0,@(1,r1)
(1) 1994/ 6001468 : E000                		mov	#0,r0
(1) 1995/ 600146A : 8013                		mov.b	r0,@(3,r1)
(1) 1996/ 600146C : 8012                		mov.b	r0,@(2,r1)
(1) 1997/ 600146E : E0F2                		mov.b	#$F2,r0			; <-- PWM interrupt needs this
(1) 1998/ 6001470 : 8017                		mov.b	r0,@(7,r1)
(1) 1999/ 6001472 : E000                		mov	#0,r0
(1) 2000/ 6001474 : 8014                		mov.b	r0,@(4,r1)
(1) 2001/ 6001476 : E001                		mov	#1,r0
(1) 2002/ 6001478 : 8015                		mov.b	r0,@(5,r1)
(1) 2003/ 600147A : E0E2                		mov.b	#$E2,r0
(1) 2004/ 600147C : 8017                		mov.b	r0,@(7,r1)		; <-- ***
(1) 2005/ 600147E :                     
(1) 2006/ 600147E :                     	; Extra interrupt settings
(1) 2007/ 600147E : 9044                		mov.w   #$FEE2,r0		; Extra interrupt priority levels ($FFFFFEE2)
(1) 2008/ 6001480 : 9144                		mov     #(3<<4)|(5<<8),r1	; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 2009/ 6001482 : 2011                		mov.w   r1,@r0
(1) 2010/ 6001484 : 9043                		mov.w   #$FEE4,r0		; Vector jump number for Watchdog ($FFFFFEE4)
(1) 2011/ 6001486 : 9143                		mov     #($120/4)<<8,r1		; (vbr+POINTER)<<8
(1) 2012/ 6001488 : 2011                		mov.w   r1,@r0
(1) 2013/ 600148A : E0A0                		mov.b	#$A0,r0			; Vector jump number for DMACHANNEL0 ($FFFFFFA0)
(1) 2014/ 600148C : E149                		mov     #($124/4),r1		; (vbr+POINTER)
(1) 2015/ 600148E : 2012                		mov	r1,@r0
(1) 2016/ 6001490 :                     
(1) 2017/ 6001490 : D017                		mov	#RAM_Mars_Global,r0	; Reset gbr
(1) 2018/ 6001492 : 401E                		ldc	r0,gbr
(1) 2019/ 6001494 : BCBA                		bsr	MarsSound_Init		; Init sound
(1) 2020/ 6001496 : 0009                		nop
(1) 2021/ 6001498 :                     
(1) 2022/ 6001498 :                     ; ====================================================================
(1) 2023/ 6001498 :                     ; ----------------------------------------------------------------
(1) 2024/ 6001498 :                     ; Slave main code
(1) 2025/ 6001498 :                     ; ----------------------------------------------------------------
(1) 2026/ 6001498 :                     
(1) 2027/ 6001498 :                     SH2_S_HotStart:
(1) 2028/ 6001498 : 913B                		mov.w	#$FE80,r1
(1) 2029/ 600149A : 903B                		mov.w	#$A518,r0		; Disable Watchdog
(1) 2030/ 600149C : 2101                		mov.w	r0,@r1
(1) 2031/ 600149E : 913A                		mov	#_CCR,r1		; Reset CACHE
(1) 2032/ 60014A0 : E010                		mov	#$10,r0
(1) 2033/ 60014A2 : 2100                		mov.b	r0,@r1
(1) 2034/ 60014A4 : 0009                		nop
(1) 2035/ 60014A6 : 0009                		nop
(1) 2036/ 60014A8 : 0009                		nop
(1) 2037/ 60014AA : 0009                		nop
(1) 2038/ 60014AC : 0009                		nop
(1) 2039/ 60014AE : 0009                		nop
(1) 2040/ 60014B0 : 0009                		nop
(1) 2041/ 60014B2 : E009                		mov	#9,r0
(1) 2042/ 60014B4 : 2100                		mov.b	r0,@r1
(1) 2043/ 60014B6 : D10F                		mov	#CACHE_SLAVE,r1
(1) 2044/ 60014B8 : 922E                		mov	#(CACHE_SLAVE_E-CACHE_SLAVE)/4,r2
(1) 2045/ 60014BA : D00F                		mov	#Mars_LoadCacheRam,r0
(1) 2046/ 60014BC : 400B                		jsr	@r0
(1) 2047/ 60014BE : 0009                		nop
(1) 2048/ 60014C0 : D10E                		mov	#_sysreg,r1
(1) 2049/ 60014C2 : 200A                    		xor	r0,r0
(1) 2050/ 60014C4 : 811A                		mov.w	r0,@(vresintclr,r1)
(1) 2051/ 60014C6 : 811B                		mov.w	r0,@(vintclr,r1)
(1) 2052/ 60014C8 : 811C                		mov.w	r0,@(hintclr,r1)
(1) 2053/ 60014CA : 811D                		mov.w	r0,@(cmdintclr,r1)
(1) 2054/ 60014CC : 811E                		mov.w	r0,@(pwmintclr,r1)
(1) 2055/ 60014CE : 6011                		mov.w	@r1,r0
(1) 2056/ 60014D0 : CB03                		or	#CMDIRQ_ON|PWMIRQ_ON,r0
(1) 2057/ 60014D2 :                     ; 		or	#CMDIRQ_ON,r0
(1) 2058/ 60014D2 : 2101                		mov.w	r0,@r1
(1) 2059/ 60014D4 : D10A                		mov	#_sysreg+comm12,r1
(1) 2060/ 60014D6 : 6011                .wait_mst:	mov.w	@r1,r0
(1) 2061/ 60014D8 : 2008                		tst	r0,r0
(1) 2062/ 60014DA : 8BFC                		bf	.wait_mst
(1) 2063/ 60014DC : E020                		mov	#$20,r0				; Interrupts ON
(1) 2064/ 60014DE : 400E                		ldc	r0,sr
(1) 2065/ 60014E0 : D008                		mov	#slave_loop,r0
(1) 2066/ 60014E2 : 402B                		jmp	@r0
(1) 2067/ 60014E4 : 0009                		nop
(1) 2068/ 60014E6 :                     		align 4
(1) 2069/ 60014E8 : 0603 F000 0600 0128 		ltorg
                    2600 5C60 0600 21E0 
                    0600 07DC 2000 4000 
                    2000 402C 0600 151C 
                    FE10 FEE2 0530 FEE4 
                    4800 FE80 A518 FE92 
                    01A1                
(1) 2070/ 600151A :                     
(1) 2071/ 600151A :                     ; ----------------------------------------------------------------
(1) 2072/ 600151A :                     ; SLAVE CPU loop
(1) 2073/ 600151A :                     ;
(1) 2074/ 600151A :                     ; comm14:
(1) 2075/ 600151A :                     ; bssscccc llllllll
(1) 2076/ 600151A :                     ;
(1) 2077/ 600151A :                     ; b - busy bit on the CMD interrupt
(1) 2078/ 600151A :                     ;     (so 68k knows that the interrupt is active)
(1) 2079/ 600151A :                     ; s - status bits for some CMD interrupt tasks
(1) 2080/ 600151A :                     ; c - command number for CMD interrupt
(1) 2081/ 600151A :                     ; l - MAIN LOOP command/task, clears on finish
(1) 2082/ 600151A :                     ; ----------------------------------------------------------------
(1) 2083/ 600151A :                     
(1) 2084/ 600151A :                     		align 4
(1) 2085/ 600151C :                     slave_loop:
(1) 2087/ 600151C : D112                		mov	#_sysreg+comm1,r1	; DEBUG counter
(1) 2088/ 600151E : 6010                		mov.b	@r1,r0
(1) 2089/ 6001520 : 7001                		add	#1,r0
(1) 2090/ 6001522 : 2100                		mov.b	r0,@r1
(1) 2092/ 6001524 : D311                		mov	#.list,r3		; Default LOOP points
(1) 2093/ 6001526 : D212                		mov	#_sysreg+comm14,r2
(1) 2094/ 6001528 : 6021                		mov.w	@r2,r0			; r0 - INIT bit
(1) 2095/ 600152A : C90F                		and	#%00001111,r0
(1) 2096/ 600152C : 4008                		shll2	r0
(1) 2097/ 600152E : 043E                		mov	@(r3,r0),r4
(1) 2098/ 6001530 : 442B                		jmp	@r4
(1) 2099/ 6001532 : 0009                		nop
(1) 2100/ 6001534 :                     		align 4
(1) 2101/ 6001534 :                     .list:
(1) 2102/ 6001534 : 0600 151C           		dc.l slave_loop		; $00
(1) 2103/ 6001538 : 0600 1544           		dc.l slv_task_1		; $01 - Build 3D models for the next frame
(1) 2104/ 600153C : 0600 1550           		dc.l slv_task_2		; $02
(1) 2105/ 6001540 : 0600 151C           		dc.l slave_loop		; $03
(1) 2106/ 6001544 :                     
(1) 2107/ 6001544 :                     ; ============================================================
(1) 2108/ 6001544 :                     ; ---------------------------------------
(1) 2109/ 6001544 :                     ; Slave task $01
(1) 2110/ 6001544 :                     ;
(1) 2111/ 6001544 :                     ; Update the scroll map
(1) 2112/ 6001544 :                     ; ---------------------------------------
(1) 2113/ 6001544 :                     
(1) 2114/ 6001544 :                     		align 4
(1) 2115/ 6001544 :                     slv_task_1:
(1) 2116/ 6001544 : DE0B                		mov	#RAM_Mars_DreqRead+Dreq_BgExBuff,r14	; Draw L/R here, Slave does U/D
(1) 2117/ 6001546 : DD0C                		mov	#RAM_Mars_ScrlBuff,r13
(1) 2118/ 6001548 : BB22                		bsr	MarsVideo_Bg_DrawScrl
(1) 2119/ 600154A : 0009                		nop
(1) 2120/ 600154C :                     
(1) 2121/ 600154C : A006                		bra	slv_exit
(1) 2122/ 600154E : 0009                		nop
(1) 2123/ 6001550 :                     		align 4
(1) 2124/ 6001550 :                     
(1) 2125/ 6001550 :                     ; ============================================================
(1) 2126/ 6001550 :                     ; ---------------------------------------
(1) 2127/ 6001550 :                     ; Slave task $02
(1) 2128/ 6001550 :                     ;
(1) 2129/ 6001550 :                     ; Build the 3D models
(1) 2130/ 6001550 :                     ; ---------------------------------------
(1) 2131/ 6001550 :                     
(1) 2132/ 6001550 :                     		align 4
(1) 2133/ 6001550 :                     slv_task_2:
(1) 2134/ 6001550 : D00A                		mov	#MarsMdl_MdlLoop,r0
(1) 2135/ 6001552 : 400B                		jsr	@r0
(1) 2136/ 6001554 : 0009                		nop
(1) 2137/ 6001556 :                     
(1) 2138/ 6001556 : A001                		bra	slv_exit
(1) 2139/ 6001558 : 0009                		nop
(1) 2140/ 600155A :                     		align 4
(1) 2141/ 600155C :                     
(1) 2142/ 600155C :                     ; ============================================================
(1) 2143/ 600155C :                     
(1) 2144/ 600155C :                     ; JMP only
(1) 2145/ 600155C :                     slv_exit:
(1) 2146/ 600155C : D408                		mov	#_sysreg+comm14+1,r4	; Finish task
(1) 2147/ 600155E : 200A                		xor	r0,r0
(1) 2148/ 6001560 : 2400                		mov.b	r0,@r4
(1) 2149/ 6001562 : AFDB                		bra	slave_loop
(1) 2150/ 6001564 : 0009                		nop
(1) 2151/ 6001566 :                     		align 4
(1) 2152/ 6001568 : 2000 4021 0600 1534 		ltorg
                    2000 402E 2600 5868 
                    2600 6090 C000 0180 
                    2000 402F           
(1) 2153/ 6001584 :                     
(1) 2154/ 6001584 :                     ; ------------------------------------------------
(1) 2155/ 6001584 :                     ; Includes
(1) 2156/ 6001584 :                     ; ------------------------------------------------
(1) 2157/ 6001584 :                     
(1) 2158/ 6001584 :                     		include "system/mars/cache/cache_m_2D.asm"
(2)    1/ 6001584 :                     ; ====================================================================
(2)    2/ 6001584 :                     ; ----------------------------------------------------------------
(2)    3/ 6001584 :                     ; CACHE code
(2)    4/ 6001584 :                     ;
(2)    5/ 6001584 :                     ; LIMIT: $800 bytes
(2)    6/ 6001584 :                     ; ----------------------------------------------------------------
(2)    7/ 6001584 :                     
(2)    8/ 6001584 :                     		align 4
(2)    9/ 6001584 :                     CACHE_MSTR_SCRL:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     
(2)   12/FFFFFFFFC0000000 :                     ; ====================================================================
(2)   13/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   14/FFFFFFFFC0000000 :                     ; Watchdog interrupt
(2)   15/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   16/FFFFFFFFC0000000 :                     
(2)   17/FFFFFFFFC0000000 : 919C                		mov	#_FRT,r1
(2)   18/FFFFFFFFC0000002 : 8417                		mov.b	@(7,r1),r0
(2)   19/FFFFFFFFC0000004 : CA02                		xor	#2,r0
(2)   20/FFFFFFFFC0000006 : 8017                		mov.b	r0,@(7,r1)
(2)   21/FFFFFFFFC0000008 : 9199                		mov	#$FFFFFE80,r1	; Stop watchdog
(2)   22/FFFFFFFFC000000A : 9099                		mov.w   #$A518,r0
(2)   23/FFFFFFFFC000000C : 2101                		mov.w   r0,@r1
(2)   24/FFFFFFFFC000000E : 000B                		rts
(2)   25/FFFFFFFFC0000010 : 0009                		nop
(2)   26/FFFFFFFFC0000012 :                     		align 4
(2)   27/FFFFFFFFC0000014 :                     
(2)   28/FFFFFFFFC0000014 :                     ; ====================================================================
(2)   29/FFFFFFFFC0000014 :                     ; ----------------------------------------------------------------
(2)   30/FFFFFFFFC0000014 :                     ; Drawing routines for the smooth-scrolling background
(2)   31/FFFFFFFFC0000014 :                     ;
(2)   32/FFFFFFFFC0000014 :                     ; NOTE: NO RV-ROM PROTECTION
(2)   33/FFFFFFFFC0000014 :                     ; ----------------------------------------------------------------
(2)   34/FFFFFFFFC0000014 :                     
(2)   35/FFFFFFFFC0000014 :                     ; --------------------------------------------------------
(2)   36/FFFFFFFFC0000014 :                     ; MarsVideo_DrwMapData
(2)   37/FFFFFFFFC0000014 :                     ;
(2)   38/FFFFFFFFC0000014 :                     ; Input:
(2)   39/FFFFFFFFC0000014 :                     ; r14 | Background control buffer
(2)   40/FFFFFFFFC0000014 :                     ; r13 | Scrolling section buffer
(2)   41/FFFFFFFFC0000014 :                     ; r12 | Pixel storage (Frambuffer or RAM)
(2)   42/FFFFFFFFC0000014 :                     ;
(2)   43/FFFFFFFFC0000014 :                     ; Breaks:
(2)   44/FFFFFFFFC0000014 :                     ; ALL
(2)   45/FFFFFFFFC0000014 :                     ; --------------------------------------------------------
(2)   46/FFFFFFFFC0000014 :                     
(2)   47/FFFFFFFFC0000014 :                     		align 4
(2)   48/FFFFFFFFC0000014 :                     MarsVideo_DrwMapData:
(2)   49/FFFFFFFFC0000014 : 4F22                		sts	pr,@-r15
(2)   50/FFFFFFFFC0000016 : 2FE6                		mov	r14,@-r15
(2)   51/FFFFFFFFC0000018 : 2FD6                		mov	r13,@-r15
(2)   52/FFFFFFFFC000001A : 4C0A                		lds	r12,mach
(2)   53/FFFFFFFFC000001C :                     
(2)   54/FFFFFFFFC000001C : 51EC                		mov	@(md_bg_x,r14),r1
(2)   55/FFFFFFFFC000001E : 4129                		shlr16	r1
(2)   56/FFFFFFFFC0000020 : 52ED                		mov	@(md_bg_y,r14),r2
(2)   57/FFFFFFFFC0000022 : 4229                		shlr16	r2
(2)   58/FFFFFFFFC0000024 : 59EA                		mov	@(md_bg_blk,r14),r9
(2)   59/FFFFFFFFC0000026 : 611F                		exts.w	r1,r1
(2)   60/FFFFFFFFC0000028 : 58E8                		mov	@(md_bg_low,r14),r8
(2)   61/FFFFFFFFC000002A : 622F                		exts.w	r2,r2
(2)   62/FFFFFFFFC000002C : 84E0                		mov.b	@(md_bg_bw,r14),r0
(2)   63/FFFFFFFFC000002E : 630C                		extu.b	r0,r3
(2)   64/FFFFFFFFC0000030 : 84E1                		mov.b	@(md_bg_bh,r14),r0
(2)   65/FFFFFFFFC0000032 : 640C                		extu.b	r0,r4
(2)   66/FFFFFFFFC0000034 : 85E4                		mov.w	@(md_bg_w,r14),r0
(2)   67/FFFFFFFFC0000036 : 670D                		extu.w	r0,r7
(2)   68/FFFFFFFFC0000038 : 85E5                		mov.w	@(md_bg_h,r14),r0
(2)   69/FFFFFFFFC000003A : 660D                		extu.w	r0,r6
(2)   70/FFFFFFFFC000003C : 5BD6                		mov	@(scrl_intrl_w,r13),r11
(2)   71/FFFFFFFFC000003E : E0F0                		mov	#-16,r0			; <- manual size
(2)   72/FFFFFFFFC0000040 : 5AD7                		mov	@(scrl_intrl_h,r13),r10
(2)   73/FFFFFFFFC0000042 : 2109                		and	r0,r1
(2)   74/FFFFFFFFC0000044 : 5CD5                		mov	@(scrl_intrl_size,r13),r12
(2)   75/FFFFFFFFC0000046 : 2209                		and	r0,r2
(2)   76/FFFFFFFFC0000048 :                     
(2)   77/FFFFFFFFC0000048 :                     	; TODO: X/Y map wrap check
(2)   78/FFFFFFFFC0000048 : 213E                		mulu	r3,r1
(2)   79/FFFFFFFFC000004A : 001A                		sts	macl,r0
(2)   80/FFFFFFFFC000004C : 4019                		shlr8	r0
(2)   81/FFFFFFFFC000004E : 380C                		add	r0,r8
(2)   82/FFFFFFFFC0000050 : 224E                		mulu	r4,r2
(2)   83/FFFFFFFFC0000052 : 001A                		sts	macl,r0
(2)   84/FFFFFFFFC0000054 : 4019                		shlr8	r0
(2)   85/FFFFFFFFC0000056 : 207E                		mulu	r7,r0
(2)   86/FFFFFFFFC0000058 : 001A                		sts	macl,r0
(2)   87/FFFFFFFFC000005A : 380C                		add	r0,r8
(2)   88/FFFFFFFFC000005C :                     
(2)   89/FFFFFFFFC000005C :                     .x_in:
(2)   90/FFFFFFFFC000005C : 4115                		cmp/pl	r1		; X set
(2)   91/FFFFFFFFC000005E : 8901                		bt	.x_pl
(2)   92/FFFFFFFFC0000060 : AFFC                		bra	.x_in
(2)   93/FFFFFFFFC0000062 : 31CC                		add	r12,r1		; <-- full size
(2)   94/FFFFFFFFC0000064 :                     .x_pl:
(2)   95/FFFFFFFFC0000064 : 31C3                		cmp/ge	r12,r1
(2)   96/FFFFFFFFC0000066 : 8B01                		bf	.x_fl
(2)   97/FFFFFFFFC0000068 : AFFC                		bra	.x_pl
(2)   98/FFFFFFFFC000006A : 31C8                		sub	r12,r1
(2)   99/FFFFFFFFC000006C :                     .x_fl:
(2)  100/FFFFFFFFC000006C : 4215                		cmp/pl	r2		; Y set
(2)  101/FFFFFFFFC000006E : 8901                		bt	.y_pl
(2)  102/FFFFFFFFC0000070 : AFFC                		bra	.x_fl
(2)  103/FFFFFFFFC0000072 : 32AC                		add	r10,r2
(2)  104/FFFFFFFFC0000074 :                     .y_pl:
(2)  105/FFFFFFFFC0000074 : 32A3                		cmp/ge	r10,r2
(2)  106/FFFFFFFFC0000076 : 8B01                		bf	.y_fl
(2)  107/FFFFFFFFC0000078 : AFFC                		bra	.y_pl
(2)  108/FFFFFFFFC000007A : 32A8                		sub	r10,r2
(2)  109/FFFFFFFFC000007C :                     .y_fl:
(2)  110/FFFFFFFFC000007C : 22BE                		mulu	r11,r2
(2)  111/FFFFFFFFC000007E : 021A                		sts	macl,r2
(2)  112/FFFFFFFFC0000080 : 6523                		mov	r2,r5
(2)  113/FFFFFFFFC0000082 : 351C                		add	r1,r5
(2)  114/FFFFFFFFC0000084 :                     
(2)  115/FFFFFFFFC0000084 :                     	; mach - _framebuffer area
(2)  116/FFFFFFFFC0000084 :                     	;  r12 - FULL Scroll area size
(2)  117/FFFFFFFFC0000084 :                     	;  r11 - Scroll area width
(2)  118/FFFFFFFFC0000084 :                     	;  r10 - Scroll area height
(2)  119/FFFFFFFFC0000084 :                     	;   r9 - Block graphics data
(2)  120/FFFFFFFFC0000084 :                     	;   r8 - Map data
(2)  121/FFFFFFFFC0000084 :                     	;   r7 - Map width
(2)  122/FFFFFFFFC0000084 :                     	;   r6 - Map height
(2)  123/FFFFFFFFC0000084 :                     	;   r5 - Current FB top
(2)  124/FFFFFFFFC0000084 :                     
(2)  125/FFFFFFFFC0000084 : E010                		mov	#16,r0			; <- manual size
(2)  126/FFFFFFFFC0000086 : 20AE                		mulu	r10,r0
(2)  127/FFFFFFFFC0000088 : 021A                		sts	macl,r2
(2)  128/FFFFFFFFC000008A : 4219                		shlr8	r2
(2)  129/FFFFFFFFC000008C :                     .y_loop:
(2)  130/FFFFFFFFC000008C : D027                		mov	#Cach_InRead_S,r0
(2)  131/FFFFFFFFC000008E : 2056                		mov	r5,@-r0
(2)  132/FFFFFFFFC0000090 : 2086                		mov	r8,@-r0
(2)  133/FFFFFFFFC0000092 : 35C3                		cmp/ge	r12,r5
(2)  134/FFFFFFFFC0000094 : 8B00                		bf	.xy_g
(2)  135/FFFFFFFFC0000096 : 35C8                		sub	r12,r5
(2)  136/FFFFFFFFC0000098 :                     .xy_g:
(2)  137/FFFFFFFFC0000098 : E010                		mov	#16,r0
(2)  138/FFFFFFFFC000009A : 20BE                		mulu	r11,r0
(2)  139/FFFFFFFFC000009C : 031A                		sts	macl,r3
(2)  140/FFFFFFFFC000009E : 4319                		shlr8	r3
(2)  141/FFFFFFFFC00000A0 :                     .x_loop:
(2)  142/FFFFFFFFC00000A0 : B014                		bsr	.this_blk
(2)  143/FFFFFFFFC00000A2 : 6084                		mov.b	@r8+,r0
(2)  144/FFFFFFFFC00000A4 : E010                		mov	#16,r0			; <- manual size
(2)  145/FFFFFFFFC00000A6 : 4310                		dt	r3
(2)  146/FFFFFFFFC00000A8 : 8FFA                		bf/s	.x_loop
(2)  147/FFFFFFFFC00000AA : 350C                		add	r0,r5
(2)  148/FFFFFFFFC00000AC : D020                		mov	#Cach_InRead_L,r0
(2)  149/FFFFFFFFC00000AE : 6806                		mov	@r0+,r8
(2)  150/FFFFFFFFC00000B0 : 6506                		mov	@r0+,r5
(2)  151/FFFFFFFFC00000B2 :                     
(2)  152/FFFFFFFFC00000B2 : E010                		mov	#16,r0			; <- manual size
(2)  153/FFFFFFFFC00000B4 : 20BE                		mulu	r11,r0
(2)  154/FFFFFFFFC00000B6 : 001A                		sts	macl,r0
(2)  155/FFFFFFFFC00000B8 : 350C                		add	r0,r5
(2)  156/FFFFFFFFC00000BA : 387C                		add	r7,r8
(2)  157/FFFFFFFFC00000BC : 4210                		dt	r2
(2)  158/FFFFFFFFC00000BE : 8BE5                		bf	.y_loop
(2)  159/FFFFFFFFC00000C0 :                     
(2)  160/FFFFFFFFC00000C0 : 6DF6                		mov	@r15+,r13
(2)  161/FFFFFFFFC00000C2 : 6EF6                		mov	@r15+,r14
(2)  162/FFFFFFFFC00000C4 : 4F26                		lds	@r15+,pr
(2)  163/FFFFFFFFC00000C6 : 000B                		rts
(2)  164/FFFFFFFFC00000C8 : 0009                		nop
(2)  165/FFFFFFFFC00000CA :                     		align 4
(2)  166/FFFFFFFFC00000CC :                     .this_blk:
(2)  167/FFFFFFFFC00000CC : 600C                		extu.b	r0,r0
(2)  168/FFFFFFFFC00000CE : 9138                		mov	#16*16,r1		; <- manual size
(2)  169/FFFFFFFFC00000D0 : 201E                		mulu	r1,r0
(2)  170/FFFFFFFFC00000D2 : D018                		mov	#Cach_BlkBackup_S,r0
(2)  171/FFFFFFFFC00000D4 : 2026                		mov	r2,@-r0
(2)  172/FFFFFFFFC00000D6 : 2036                		mov	r3,@-r0
(2)  173/FFFFFFFFC00000D8 : 2046                		mov	r4,@-r0
(2)  174/FFFFFFFFC00000DA : 2056                		mov	r5,@-r0
(2)  175/FFFFFFFFC00000DC : 2066                		mov	r6,@-r0
(2)  176/FFFFFFFFC00000DE : 2096                		mov	r9,@-r0
(2)  177/FFFFFFFFC00000E0 : 001A                		sts	macl,r0
(2)  178/FFFFFFFFC00000E2 : 390C                		add	r0,r9
(2)  179/FFFFFFFFC00000E4 : E410                		mov	#16,r4			; <- manual size
(2)  180/FFFFFFFFC00000E6 :                     .yb_line:
(2)  181/FFFFFFFFC00000E6 : 35C3                		cmp/ge	r12,r5
(2)  182/FFFFFFFFC00000E8 : 8B00                		bf	.xy_g2
(2)  183/FFFFFFFFC00000EA : 35C8                		sub	r12,r5
(2)  184/FFFFFFFFC00000EC :                     .xy_g2:
(2)  185/FFFFFFFFC00000EC : 6253                		mov	r5,r2
(2)  186/FFFFFFFFC00000EE : E310                		mov	#16,r3			; <- manual size
(2)  187/FFFFFFFFC00000F0 : 4309                		shlr2	r3
(2)  188/FFFFFFFFC00000F2 :                     .xb_line:
(2)  189/FFFFFFFFC00000F2 : 010A                		sts	mach,r1
(2)  190/FFFFFFFFC00000F4 : 312C                		add	r2,r1
(2)  191/FFFFFFFFC00000F6 : 6092                		mov	@r9,r0
(2)  192/FFFFFFFFC00000F8 : 2102                		mov	r0,@r1
(2)  193/FFFFFFFFC00000FA : 9023                		mov	#320,r0
(2)  194/FFFFFFFFC00000FC : 3203                		cmp/ge	r0,r2
(2)  195/FFFFFFFFC00000FE : 8904                		bt	.x_ex
(2)  196/FFFFFFFFC0000100 : 010A                		sts	mach,r1
(2)  197/FFFFFFFFC0000102 : 312C                		add	r2,r1
(2)  198/FFFFFFFFC0000104 : 31CC                		add	r12,r1
(2)  199/FFFFFFFFC0000106 : 6092                		mov	@r9,r0
(2)  200/FFFFFFFFC0000108 : 2102                		mov	r0,@r1
(2)  201/FFFFFFFFC000010A :                     .x_ex:
(2)  202/FFFFFFFFC000010A : 7904                		add	#4,r9
(2)  203/FFFFFFFFC000010C : 4310                		dt	r3
(2)  204/FFFFFFFFC000010E : 8FF0                		bf/s	.xb_line
(2)  205/FFFFFFFFC0000110 : 7204                		add	#4,r2
(2)  206/FFFFFFFFC0000112 : 4410                		dt	r4
(2)  207/FFFFFFFFC0000114 : 8FE7                		bf/s	.yb_line
(2)  208/FFFFFFFFC0000116 : 35BC                		add	r11,r5
(2)  209/FFFFFFFFC0000118 :                     
(2)  210/FFFFFFFFC0000118 : D007                		mov	#Cach_BlkBackup_L,r0
(2)  211/FFFFFFFFC000011A : 6906                		mov	@r0+,r9
(2)  212/FFFFFFFFC000011C : 6606                		mov	@r0+,r6
(2)  213/FFFFFFFFC000011E : 6506                		mov	@r0+,r5
(2)  214/FFFFFFFFC0000120 : 6406                		mov	@r0+,r4
(2)  215/FFFFFFFFC0000122 : 6306                		mov	@r0+,r3
(2)  216/FFFFFFFFC0000124 : 6206                		mov	@r0+,r2
(2)  217/FFFFFFFFC0000126 : 000B                		rts
(2)  218/FFFFFFFFC0000128 : 0009                		nop
(2)  219/FFFFFFFFC000012A :                     		align 4
(2)  220/FFFFFFFFC000012C : C000 03B4 C000 03AC 		ltorg
                    C000 03CC C000 03B4 
                    FE10 FE80 A518 0100 
                    0140                
(2)  221/FFFFFFFFC0000146 :                     
(2)  222/FFFFFFFFC0000146 :                     ; ====================================================================
(2)  223/FFFFFFFFC0000146 :                     ; ----------------------------------------------------------------
(2)  224/FFFFFFFFC0000146 :                     ; Drawing routines for the Super-sprites
(2)  225/FFFFFFFFC0000146 :                     ;
(2)  226/FFFFFFFFC0000146 :                     ; Note: hardcoded
(2)  227/FFFFFFFFC0000146 :                     ; ----------------------------------------------------------------
(2)  228/FFFFFFFFC0000146 :                     
(2)  229/FFFFFFFFC0000146 :                     ; --------------------------------------------------------
(2)  230/FFFFFFFFC0000146 :                     ; MarsVideo_DrawSuperSpr_M
(2)  231/FFFFFFFFC0000146 :                     ;
(2)  232/FFFFFFFFC0000146 :                     ; Draws the Super-sprites directly recieved on DREQ
(2)  233/FFFFFFFFC0000146 :                     ;
(2)  234/FFFFFFFFC0000146 :                     ; Call MarsVideo_SetSuperSpr FIRST to setup the
(2)  235/FFFFFFFFC0000146 :                     ; main screen coordinates
(2)  236/FFFFFFFFC0000146 :                     ;
(2)  237/FFFFFFFFC0000146 :                     ; Input:
(2)  238/FFFFFFFFC0000146 :                     ; r14 - Super sprites data
(2)  239/FFFFFFFFC0000146 :                     ;
(2)  240/FFFFFFFFC0000146 :                     ; Breaks:
(2)  241/FFFFFFFFC0000146 :                     ; ALL
(2)  242/FFFFFFFFC0000146 :                     ;
(2)  243/FFFFFFFFC0000146 :                     ; Note:
(2)  244/FFFFFFFFC0000146 :                     ; Make sure the pixel data is set to Cache-thru (|TH)
(2)  245/FFFFFFFFC0000146 :                     ; --------------------------------------------------------
(2)  246/FFFFFFFFC0000146 :                     
(2)  247/FFFFFFFFC0000146 :                     		align 4
(2)  248/FFFFFFFFC0000148 :                     MarsVideo_DrawSuperSpr_M:
(2)  249/FFFFFFFFC0000148 : DE49                		mov	#RAM_Mars_DreqRead+Dreq_SuperSpr,r14
(2)  250/FFFFFFFFC000014A : DB4A                		mov	#Cach_Intrl_W,r11
(2)  251/FFFFFFFFC000014C : 6BB2                		mov	@r11,r11
(2)  252/FFFFFFFFC000014E : DA4A                		mov	#Cach_Intrl_Size,r10
(2)  253/FFFFFFFFC0000150 : 6AA2                		mov	@r10,r10
(2)  254/FFFFFFFFC0000152 : 0009                		nop
(2)  255/FFFFFFFFC0000154 :                     MarsVideo_NxtSuprSpr:
(2)  256/FFFFFFFFC0000154 : 50E4                		mov	@(marsspr_data,r14),r0
(2)  257/FFFFFFFFC0000156 : 2008                		tst	r0,r0
(2)  258/FFFFFFFFC0000158 : 8B02                		bf	.valid
(2)  259/FFFFFFFFC000015A : 000B                		rts
(2)  260/FFFFFFFFC000015C : 0009                		nop
(2)  261/FFFFFFFFC000015E :                     		align 4
(2)  262/FFFFFFFFC0000160 :                     .valid:
(2)  263/FFFFFFFFC0000160 : 85E5                		mov.w	@(marsspr_indx,r14),r0
(2)  264/FFFFFFFFC0000162 : 6C03                		mov	r0,r12
(2)  265/FFFFFFFFC0000164 : 55E1                		mov	@(marsspr_x,r14),r5	; XXXX YYYY
(2)  266/FFFFFFFFC0000166 : 665F                		exts.w	r5,r6
(2)  267/FFFFFFFFC0000168 : 57E0                		mov	@(marsspr_xfrm,r14),r7	; ?? ?? XX YY
(2)  268/FFFFFFFFC000016A : 4529                		shlr16	r5
(2)  269/FFFFFFFFC000016C : 655F                		exts.w	r5,r5
(2)  270/FFFFFFFFC000016E : 687C                		extu.b	r7,r8
(2)  271/FFFFFFFFC0000170 : 4719                		shlr8	r7
(2)  272/FFFFFFFFC0000172 : 677C                		extu.b	r7,r7
(2)  273/FFFFFFFFC0000174 :                     ; 		mov.w	@(marsspr_x,r14),r0
(2)  274/FFFFFFFFC0000174 :                     ; 		exts.w	r0,r5
(2)  275/FFFFFFFFC0000174 :                     ; 		mov.w	@(marsspr_y,r14),r0
(2)  276/FFFFFFFFC0000174 :                     ; 		exts.w	r0,r6
(2)  277/FFFFFFFFC0000174 :                     ; 		mov.b	@(marsspr_xs,r14),r0
(2)  278/FFFFFFFFC0000174 :                     ; 		exts.b	r0,r7
(2)  279/FFFFFFFFC0000174 :                     ; 		mov.b	@(marsspr_ys,r14),r0
(2)  280/FFFFFFFFC0000174 :                     ; 		exts.b	r0,r8
(2)  281/FFFFFFFFC0000174 : 6373                		mov	r7,r3			; Copy old XS / YS
(2)  282/FFFFFFFFC0000176 : 6483                		mov	r8,r4
(2)  283/FFFFFFFFC0000178 : 375C                		add	r5,r7
(2)  284/FFFFFFFFC000017A : 386C                		add	r6,r8
(2)  285/FFFFFFFFC000017C :                     
(2)  286/FFFFFFFFC000017C : D03F                		mov	#Cach_Intrl_H,r0
(2)  287/FFFFFFFFC000017E : 6002                		mov	@r0,r0
(2)  288/FFFFFFFFC0000180 : 4815                		cmp/pl	r8
(2)  289/FFFFFFFFC0000182 : 8B72                		bf	.spr_out
(2)  290/FFFFFFFFC0000184 : 4715                		cmp/pl	r7
(2)  291/FFFFFFFFC0000186 : 8B70                		bf	.spr_out
(2)  292/FFFFFFFFC0000188 : 35B3                		cmp/ge	r11,r5
(2)  293/FFFFFFFFC000018A : 896E                		bt	.spr_out
(2)  294/FFFFFFFFC000018C : 3603                		cmp/ge	r0,r6
(2)  295/FFFFFFFFC000018E : 896C                		bt	.spr_out
(2)  296/FFFFFFFFC0000190 :                     	; XR / YB
(2)  297/FFFFFFFFC0000190 : 907E                		mov	#224,r0
(2)  298/FFFFFFFFC0000192 : 3803                		cmp/ge	r0,r8
(2)  299/FFFFFFFFC0000194 : 8B00                		bf	.yb_e
(2)  300/FFFFFFFFC0000196 : 6803                		mov	r0,r8
(2)  301/FFFFFFFFC0000198 :                     .yb_e:
(2)  302/FFFFFFFFC0000198 : 907B                		mov	#320,r0
(2)  303/FFFFFFFFC000019A : 3707                		cmp/gt	r0,r7
(2)  304/FFFFFFFFC000019C : 8B00                		bf	.xb_e
(2)  305/FFFFFFFFC000019E : 6703                		mov	r0,r7
(2)  306/FFFFFFFFC00001A0 :                     .xb_e:
(2)  307/FFFFFFFFC00001A0 :                     
(2)  308/FFFFFFFFC00001A0 : 85E4                		mov.w	@(marsspr_dwidth,r14),r0
(2)  309/FFFFFFFFC00001A2 : 6103                		mov	r0,r1
(2)  310/FFFFFFFFC00001A4 : 85E0                		mov.w	@(marsspr_xfrm,r14),r0	; X frame
(2)  311/FFFFFFFFC00001A6 : 6203                		mov	r0,r2
(2)  312/FFFFFFFFC00001A8 : 5DE4                		mov	@(marsspr_data,r14),r13
(2)  313/FFFFFFFFC00001AA : 241E                		mulu	r1,r4
(2)  314/FFFFFFFFC00001AC : 041A                		sts	macl,r4
(2)  315/FFFFFFFFC00001AE : 600C                		extu.b	r0,r0
(2)  316/FFFFFFFFC00001B0 : 204E                		mulu	r4,r0
(2)  317/FFFFFFFFC00001B2 : 001A                		sts	macl,r0
(2)  318/FFFFFFFFC00001B4 : 3D0C                		add	r0,r13
(2)  319/FFFFFFFFC00001B6 : 6023                		mov	r2,r0
(2)  320/FFFFFFFFC00001B8 : 4019                		shlr8	r0
(2)  321/FFFFFFFFC00001BA : 600C                		extu.b	r0,r0
(2)  322/FFFFFFFFC00001BC : 203E                		mulu	r3,r0
(2)  323/FFFFFFFFC00001BE : 001A                		sts	macl,r0
(2)  324/FFFFFFFFC00001C0 : 3D0C                		add	r0,r13
(2)  325/FFFFFFFFC00001C2 :                     
(2)  326/FFFFFFFFC00001C2 : D22F                		mov	#Cach_FbData,r2
(2)  327/FFFFFFFFC00001C4 : 6222                		mov	@r2,r2
(2)  328/FFFFFFFFC00001C6 : D02F                		mov	#_framebuffer,r0
(2)  329/FFFFFFFFC00001C8 : 302C                		add	r2,r0
(2)  330/FFFFFFFFC00001CA : 400A                		lds	r0,mach
(2)  331/FFFFFFFFC00001CC : 85E4                		mov.w	@(marsspr_dwidth,r14),r0
(2)  332/FFFFFFFFC00001CE : 620D                		extu.w	r0,r2
(2)  333/FFFFFFFFC00001D0 : 85E6                		mov.w	@(marsspr_flags,r14),r0
(2)  334/FFFFFFFFC00001D2 : C802                		tst	#%10,r0		; Y flip?
(2)  335/FFFFFFFFC00001D4 : 8902                		bt	.flp_v
(2)  336/FFFFFFFFC00001D6 : 3D4C                		add	r4,r13
(2)  337/FFFFFFFFC00001D8 : 3D28                		sub	r2,r13
(2)  338/FFFFFFFFC00001DA : 622B                		neg	r2,r2
(2)  339/FFFFFFFFC00001DC :                     .flp_v:
(2)  340/FFFFFFFFC00001DC : E401                		mov	#1,r4
(2)  341/FFFFFFFFC00001DE : C801                		tst	#%01,r0		; X flip?
(2)  342/FFFFFFFFC00001E0 : 8902                		bt	.flp_h
(2)  343/FFFFFFFFC00001E2 : 3D3C                		add	r3,r13		; move beam
(2)  344/FFFFFFFFC00001E4 : 4D10                		dt	r13
(2)  345/FFFFFFFFC00001E6 : E4FF                		mov	#-1,r4		; decrement line
(2)  346/FFFFFFFFC00001E8 :                     .flp_h:
(2)  347/FFFFFFFFC00001E8 : 4611                		cmp/pz	r6
(2)  348/FFFFFFFFC00001EA : 8907                		bt	.yt_e
(2)  349/FFFFFFFFC00001EC : 606B                		neg	r6,r0
(2)  350/FFFFFFFFC00001EE : 266A                		xor	r6,r6
(2)  351/FFFFFFFFC00001F0 : 210F                		muls	r0,r1
(2)  352/FFFFFFFFC00001F2 : 001A                		sts	macl,r0
(2)  353/FFFFFFFFC00001F4 : 4211                		cmp/pz	r2
(2)  354/FFFFFFFFC00001F6 : 8900                		bt	.yfinc
(2)  355/FFFFFFFFC00001F8 : 600B                		neg	r0,r0
(2)  356/FFFFFFFFC00001FA :                     .yfinc:
(2)  357/FFFFFFFFC00001FA : 3D0C                		add	r0,r13
(2)  358/FFFFFFFFC00001FC :                     .yt_e:
(2)  359/FFFFFFFFC00001FC : 4511                		cmp/pz	r5
(2)  360/FFFFFFFFC00001FE : 8905                		bt	.xt_e
(2)  361/FFFFFFFFC0000200 : 6953                		mov	r5,r9
(2)  362/FFFFFFFFC0000202 : 4411                		cmp/pz	r4
(2)  363/FFFFFFFFC0000204 : 8900                		bt	.xfinc
(2)  364/FFFFFFFFC0000206 : 699B                		neg	r9,r9
(2)  365/FFFFFFFFC0000208 :                     .xfinc:
(2)  366/FFFFFFFFC0000208 : 3D98                		sub	r9,r13
(2)  367/FFFFFFFFC000020A : 255A                		xor	r5,r5
(2)  368/FFFFFFFFC000020C :                     .xt_e:
(2)  369/FFFFFFFFC000020C : 694D                		extu.w	r4,r9
(2)  370/FFFFFFFFC000020E : 4228                		shll16	r2
(2)  371/FFFFFFFFC0000210 : 292B                		or	r2,r9
(2)  372/FFFFFFFFC0000212 : D41D                		mov	#Cach_FbPos_Y,r4
(2)  373/FFFFFFFFC0000214 : D21D                		mov	#Cach_FbPos,r2
(2)  374/FFFFFFFFC0000216 : 6442                		mov	@r4,r4
(2)  375/FFFFFFFFC0000218 : 346C                		add	r6,r4
(2)  376/FFFFFFFFC000021A :                     ; 		cmp/ge	r10,r4
(2)  377/FFFFFFFFC000021A :                     ; 		bf	.y_snap
(2)  378/FFFFFFFFC000021A :                     ; 		sub	r10,r4
(2)  379/FFFFFFFFC000021A :                     ; .y_snap:
(2)  380/FFFFFFFFC000021A : 24BE                		mulu	r11,r4
(2)  381/FFFFFFFFC000021C : 6222                		mov	@r2,r2
(2)  382/FFFFFFFFC000021E : 041A                		sts	macl,r4
(2)  383/FFFFFFFFC0000220 : 342C                		add	r2,r4
(2)  384/FFFFFFFFC0000222 :                     
(2)  385/FFFFFFFFC0000222 :                     	; mach - _framebuffer + base
(2)  386/FFFFFFFFC0000222 :                     	;  r14 - Sprite data
(2)  387/FFFFFFFFC0000222 :                     	;  r13 - Texture data
(2)  388/FFFFFFFFC0000222 :                     	;  r12 - Texture index
(2)  389/FFFFFFFFC0000222 :                     	;  r11 - Internal WIDTH
(2)  390/FFFFFFFFC0000222 :                     	;  r10 - Internal WIDTH+HEIGHT
(2)  391/FFFFFFFFC0000222 :                     	;   r9 - Spritesheet Ydraw direction | Xdraw direction
(2)  392/FFFFFFFFC0000222 :                     	;   r8 - Y End
(2)  393/FFFFFFFFC0000222 :                     	;   r7 - X End
(2)  394/FFFFFFFFC0000222 :                     	;   r6 - Y Start
(2)  395/FFFFFFFFC0000222 :                     	;   r5 - X Start
(2)  396/FFFFFFFFC0000222 :                     	;   r4 - FB output position
(2)  397/FFFFFFFFC0000222 :                     	;
(2)  398/FFFFFFFFC0000222 :                     	; *** start ***
(2)  399/FFFFFFFFC0000222 :                     .y_loop:
(2)  400/FFFFFFFFC0000222 : 34A3                		cmp/ge	r10,r4			; Wrap FB output
(2)  401/FFFFFFFFC0000224 : 8B00                		bf	.y_max
(2)  402/FFFFFFFFC0000226 : 34A8                		sub	r10,r4
(2)  403/FFFFFFFFC0000228 :                     .y_max:
(2)  404/FFFFFFFFC0000228 : 61D3                		mov	r13,r1			; r1 - Texture IN
(2)  405/FFFFFFFFC000022A : 6253                		mov	r5,r2			; r2 - X counter
(2)  406/FFFFFFFFC000022C :                     .x_loop:
(2)  407/FFFFFFFFC000022C : 030A                		sts	mach,r3			; r3 - Framebuffer + FbData
(2)  408/FFFFFFFFC000022E : 334C                		add	r4,r3			; add top-left position
(2)  409/FFFFFFFFC0000230 : 332C                		add	r2,r3			; add X position
(2)  410/FFFFFFFFC0000232 :                     
(2)  411/FFFFFFFFC0000232 : 6010                		mov.b	@r1,r0			; r0 - pixel
(2)  412/FFFFFFFFC0000234 : 2008                		tst	r0,r0			; blank pixel 0?
(2)  413/FFFFFFFFC0000236 : 8900                		bt	.blnk
(2)  414/FFFFFFFFC0000238 : 30CC                		add	r12,r0			; add pixel increment
(2)  415/FFFFFFFFC000023A :                     .blnk:
(2)  416/FFFFFFFFC000023A : 2300                		mov.b	r0,@r3			; Write pixel
(2)  417/FFFFFFFFC000023C : 9029                		mov	#320,r0			; Check for hidden line (X < 320)
(2)  418/FFFFFFFFC000023E : 3023                		cmp/ge	r2,r0
(2)  419/FFFFFFFFC0000240 : 8905                		bt	.ex_line
(2)  420/FFFFFFFFC0000242 : 6010                		mov.b	@r1,r0			; Repeat same thing but
(2)  421/FFFFFFFFC0000244 : 2008                		tst	r0,r0			; but add r12 to the
(2)  422/FFFFFFFFC0000246 : 8900                		bt	.blnk2			; destination
(2)  423/FFFFFFFFC0000248 : 30CC                		add	r12,r0
(2)  424/FFFFFFFFC000024A :                     .blnk2:
(2)  425/FFFFFFFFC000024A : 33AC                		add	r10,r3
(2)  426/FFFFFFFFC000024C : 2300                		mov.b	r0,@r3
(2)  427/FFFFFFFFC000024E :                     .ex_line:
(2)  428/FFFFFFFFC000024E : 7201                		add	#1,r2			; Increment X pos
(2)  429/FFFFFFFFC0000250 :                     
(2)  430/FFFFFFFFC0000250 : 6093                		mov	r9,r0
(2)  431/FFFFFFFFC0000252 : 600F                		exts.w	r0,r0
(2)  432/FFFFFFFFC0000254 : 3273                		cmp/ge	r7,r2
(2)  433/FFFFFFFFC0000256 : 8FE9                		bf/s	.x_loop
(2)  434/FFFFFFFFC0000258 : 310C                		add	r0,r1			; Increment texture pos
(2)  435/FFFFFFFFC000025A :                     
(2)  436/FFFFFFFFC000025A : 6093                		mov	r9,r0
(2)  437/FFFFFFFFC000025C : 4029                		shlr16	r0
(2)  438/FFFFFFFFC000025E : 600F                		exts.w	r0,r0
(2)  439/FFFFFFFFC0000260 : 3D0C                		add	r0,r13			; Next texture line
(2)  440/FFFFFFFFC0000262 : 7601                		add	#1,r6			; Increment loop Y
(2)  441/FFFFFFFFC0000264 : 3683                		cmp/ge	r8,r6			; Y start > Y end?
(2)  442/FFFFFFFFC0000266 : 8FDC                		bf/s	.y_loop
(2)  443/FFFFFFFFC0000268 : 34BC                		add	r11,r4			; Next FB top-left line
(2)  444/FFFFFFFFC000026A :                     .spr_out:
(2)  445/FFFFFFFFC000026A : AF73                		bra	MarsVideo_NxtSuprSpr
(2)  446/FFFFFFFFC000026C : 7E14                		add 	#sizeof_marsspr,r14
(2)  447/FFFFFFFFC000026E :                     		align 4
(2)  448/FFFFFFFFC0000270 : 2600 5A80 C000 0438 		ltorg
                    C000 0440 C000 043C 
                    C000 042C 2400 0000 
                    C000 0434 C000 0430 
                    00E0 0140           
(2)  449/FFFFFFFFC0000294 :                     
(2)  450/FFFFFFFFC0000294 :                     
(2)  451/FFFFFFFFC0000294 :                     ; --------------------------------------------------------
(2)  452/FFFFFFFFC0000294 :                     ; MarsVideo_RefillBgSpr
(2)  453/FFFFFFFFC0000294 :                     ;
(2)  454/FFFFFFFFC0000294 :                     ; Call this BEFORE updating Sprite info
(2)  455/FFFFFFFFC0000294 :                     ; --------------------------------------------------------
(2)  456/FFFFFFFFC0000294 :                     
(2)  457/FFFFFFFFC0000294 :                     		align 4
(2)  458/FFFFFFFFC0000294 :                     MarsVideo_RefillBgSpr:
(2)  459/FFFFFFFFC0000294 : DE28                		mov	#Cach_SprBoxList,r14
(2)  460/FFFFFFFFC0000296 :                     
(2)  461/FFFFFFFFC0000296 : DC29                		mov	#Cach_Intrl_Size,r12
(2)  462/FFFFFFFFC0000298 : DA29                		mov	#Cach_FbPos,r10
(2)  463/FFFFFFFFC000029A : DB2A                		mov	#Cach_Intrl_W,r11
(2)  464/FFFFFFFFC000029C : D02A                		mov	#Cach_FbPos_Y,r0
(2)  465/FFFFFFFFC000029E : 6002                		mov	@r0,r0
(2)  466/FFFFFFFFC00002A0 : D92A                		mov	#Cach_FbData,r9
(2)  467/FFFFFFFFC00002A2 : 6992                		mov	@r9,r9
(2)  468/FFFFFFFFC00002A4 : D12A                		mov	#_framebuffer,r1
(2)  469/FFFFFFFFC00002A6 : 6BB2                		mov	@r11,r11
(2)  470/FFFFFFFFC00002A8 : E2FC                		mov	#-4,r2
(2)  471/FFFFFFFFC00002AA : 6AA2                		mov	@r10,r10
(2)  472/FFFFFFFFC00002AC : 391C                		add	r1,r9
(2)  473/FFFFFFFFC00002AE : 6CC2                		mov	@r12,r12
(2)  474/FFFFFFFFC00002B0 :                     
(2)  475/FFFFFFFFC00002B0 :                     ; 		mov	#RAM_Mars_ScrlBuff,r13
(2)  476/FFFFFFFFC00002B0 :                     ; 		mov	@(scrl_fbpos_y,r13),r0
(2)  477/FFFFFFFFC00002B0 :                     ; 		mov	#_framebuffer,r1
(2)  478/FFFFFFFFC00002B0 :                     ; 		mov	@(scrl_fbdata,r13),r9
(2)  479/FFFFFFFFC00002B0 :                     ; 		add	r1,r9
(2)  480/FFFFFFFFC00002B0 :                     ; 		mov	@(scrl_intrl_w,r13),r11
(2)  481/FFFFFFFFC00002B0 :                     ; 		mov	#-4,r2
(2)  482/FFFFFFFFC00002B0 :                     ; 		mov	@(scrl_fbpos,r13),r10
(2)  483/FFFFFFFFC00002B0 :                     ; 		and	r2,r0
(2)  484/FFFFFFFFC00002B0 :                     ; 		mov	@(scrl_intrl_size,r13),r12
(2)  485/FFFFFFFFC00002B0 :                     
(2)  486/FFFFFFFFC00002B0 : 2B0E                		mulu	r0,r11
(2)  487/FFFFFFFFC00002B2 : 011A                		sts	macl,r1
(2)  488/FFFFFFFFC00002B4 : D027                		mov	#RAM_Mars_ScrlData,r0		; <-- use this area
(2)  489/FFFFFFFFC00002B6 : 3A1C                		add	r1,r10
(2)  490/FFFFFFFFC00002B8 : 3AC3                		cmp/ge	r12,r10
(2)  491/FFFFFFFFC00002BA : 8B00                		bf	.ygood
(2)  492/FFFFFFFFC00002BC : 3AC8                		sub	r12,r10
(2)  493/FFFFFFFFC00002BE :                     .ygood:
(2)  494/FFFFFFFFC00002BE : 2A29                		and	r2,r10
(2)  495/FFFFFFFFC00002C0 : 400A                		lds	r0,mach
(2)  496/FFFFFFFFC00002C2 :                     
(2)  497/FFFFFFFFC00002C2 :                     .next_save:
(2)  498/FFFFFFFFC00002C2 : 60E2                		mov	@r14,r0
(2)  499/FFFFFFFFC00002C4 : 4011                		cmp/pz	r0
(2)  500/FFFFFFFFC00002C6 : 8934                		bt	.last
(2)  501/FFFFFFFFC00002C8 : 64A3                		mov	r10,r4
(2)  502/FFFFFFFFC00002CA : 6503                		mov	r0,r5
(2)  503/FFFFFFFFC00002CC : 6603                		mov	r0,r6
(2)  504/FFFFFFFFC00002CE : 6703                		mov	r0,r7
(2)  505/FFFFFFFFC00002D0 : 6803                		mov	r0,r8
(2)  506/FFFFFFFFC00002D2 : 200A                		xor	r0,r0
(2)  507/FFFFFFFFC00002D4 : 2E02                		mov	r0,@r14
(2)  508/FFFFFFFFC00002D6 : E07F                		mov	#$7F,r0
(2)  509/FFFFFFFFC00002D8 : 4529                		shlr16	r5
(2)  510/FFFFFFFFC00002DA : 4729                		shlr16	r7
(2)  511/FFFFFFFFC00002DC : 4719                		shlr8	r7
(2)  512/FFFFFFFFC00002DE : 2509                		and	r0,r5
(2)  513/FFFFFFFFC00002E0 : 2709                		and	r0,r7
(2)  514/FFFFFFFFC00002E2 : 4508                		shll2	r5
(2)  515/FFFFFFFFC00002E4 : 4708                		shll2	r7
(2)  516/FFFFFFFFC00002E6 : 4819                		shlr8	r8
(2)  517/FFFFFFFFC00002E8 : 9036                		mov	#$FF,r0
(2)  518/FFFFFFFFC00002EA : 2609                		and	r0,r6
(2)  519/FFFFFFFFC00002EC : 2809                		and	r0,r8
(2)  520/FFFFFFFFC00002EE : 3868                		sub	r6,r8
(2)  521/FFFFFFFFC00002F0 : 4815                		cmp/pl	r8
(2)  522/FFFFFFFFC00002F2 : 8B1C                		bf	.spr_out
(2)  523/FFFFFFFFC00002F4 : 26BE                		mulu	r11,r6
(2)  524/FFFFFFFFC00002F6 : 001A                		sts	macl,r0
(2)  525/FFFFFFFFC00002F8 : 340C                		add	r0,r4
(2)  526/FFFFFFFFC00002FA :                     
(2)  527/FFFFFFFFC00002FA : 962E                		mov	#320,r6
(2)  528/FFFFFFFFC00002FC :                     .y_lp:
(2)  529/FFFFFFFFC00002FC : 6153                		mov	r5,r1
(2)  530/FFFFFFFFC00002FE : 6243                		mov	r4,r2
(2)  531/FFFFFFFFC0000300 : 325C                		add	r5,r2
(2)  532/FFFFFFFFC0000302 :                     .x_lp:
(2)  533/FFFFFFFFC0000302 : 32C3                		cmp/ge	r12,r2
(2)  534/FFFFFFFFC0000304 : 8B00                		bf	.x_keep
(2)  535/FFFFFFFFC0000306 : 32C8                		sub	r12,r2
(2)  536/FFFFFFFFC0000308 :                     .x_keep:
(2)  537/FFFFFFFFC0000308 : 0D0A                		sts	mach,r13
(2)  538/FFFFFFFFC000030A : 3D2C                		add	r2,r13
(2)  539/FFFFFFFFC000030C : 60D6                		mov	@r13+,r0
(2)  540/FFFFFFFFC000030E :                     ; 		or	r13,r0
(2)  541/FFFFFFFFC000030E :                     
(2)  542/FFFFFFFFC000030E : 6393                		mov	r9,r3
(2)  543/FFFFFFFFC0000310 : 332C                		add	r2,r3
(2)  544/FFFFFFFFC0000312 : 2302                		mov	r0,@r3
(2)  545/FFFFFFFFC0000314 : 3263                		cmp/ge	r6,r2
(2)  546/FFFFFFFFC0000316 : 8903                		bt	.x_lrg
(2)  547/FFFFFFFFC0000318 : 33CC                		add	r12,r3
(2)  548/FFFFFFFFC000031A : 3DCC                		add	r12,r13
(2)  549/FFFFFFFFC000031C : 2302                		mov	r0,@r3
(2)  550/FFFFFFFFC000031E : 2D02                		mov	r0,@r13
(2)  551/FFFFFFFFC0000320 :                     .x_lrg:
(2)  552/FFFFFFFFC0000320 : 7104                		add	#4,r1
(2)  553/FFFFFFFFC0000322 : 3173                		cmp/ge	r7,r1
(2)  554/FFFFFFFFC0000324 : 8FED                		bf/s	.x_lp
(2)  555/FFFFFFFFC0000326 : 7204                		add	#4,r2
(2)  556/FFFFFFFFC0000328 : 4810                		dt	r8
(2)  557/FFFFFFFFC000032A : 8FE7                		bf/s	.y_lp
(2)  558/FFFFFFFFC000032C : 34BC                		add	r11,r4
(2)  559/FFFFFFFFC000032E :                     .spr_out:
(2)  560/FFFFFFFFC000032E : AFC8                		bra	.next_save
(2)  561/FFFFFFFFC0000330 : 7E04                		add 	#4,r14
(2)  562/FFFFFFFFC0000332 :                     .last:
(2)  563/FFFFFFFFC0000332 : 000B                		rts
(2)  564/FFFFFFFFC0000334 : 0009                		nop
(2)  565/FFFFFFFFC0000336 :                     		align 4
(2)  566/FFFFFFFFC0000338 : C000 0444 C000 0440 		ltorg
                    C000 0430 C000 0438 
                    C000 0434 C000 042C 
                    2400 0000 2600 60F8 
                    00FF 0140           
(2)  567/FFFFFFFFC000035C :                     
(2)  568/FFFFFFFFC000035C :                     ; --------------------------------------------------------
(2)  569/FFFFFFFFC000035C :                     ; Quick RAM
(2)  570/FFFFFFFFC000035C :                     ; --------------------------------------------------------
(2)  571/FFFFFFFFC000035C :                     
(2)  572/FFFFFFFFC000035C :                     ; Cach_WdgDrawBuff:
(2)  573/FFFFFFFFC000035C :                     ; $00 - Layout data (read)
(2)  574/FFFFFFFFC000035C :                     ; $04 - FB pos (read)
(2)  575/FFFFFFFFC000035C :                     ; $08 - Layout width (next block)
(2)  576/FFFFFFFFC000035C :                     ; $0C - FB width (next line)
(2)  577/FFFFFFFFC000035C :                     ; $10 - FB FULL size
(2)  578/FFFFFFFFC000035C :                     ; $14 - FB base
(2)  579/FFFFFFFFC000035C :                     ; $18 - Block data
(2)  580/FFFFFFFFC000035C :                     ; $1C - Block counter
(2)  581/FFFFFFFFC000035C :                     ; $20 - ** Reserved **
(2)  582/FFFFFFFFC000035C :                     
(2)  583/FFFFFFFFC000035C :                     			align 4
(2)  584/FFFFFFFFC000035C :                     
(2)  585/FFFFFFFFC000035C :                     Cach_WdgBuffRd		ds.l 8
(2)  586/FFFFFFFFC000037C :                     Cach_WdgBuffWr		ds.l 0		; <-- read backwards
(2)  587/FFFFFFFFC000037C :                     Cach_WdgBuffRd_UD	ds.l 8
(2)  588/FFFFFFFFC000039C :                     Cach_WdgBuffWr_UD	ds.l 0		; <-- read backwards
(2)  589/FFFFFFFFC000039C :                     Cach_InSprRdrw		ds.l 4
(2)  590/FFFFFFFFC00003AC :                     Cach_InRead_L		ds.l 2
(2)  591/FFFFFFFFC00003B4 :                     Cach_InRead_S		ds.l 0		; <-- read backwards
(2)  592/FFFFFFFFC00003B4 :                     Cach_BlkBackup_L	ds.l 6
(2)  593/FFFFFFFFC00003CC :                     Cach_BlkBackup_S	ds.l 0		; <-- read backwards
(2)  594/FFFFFFFFC00003CC :                     Cach_WdBackup_L		ds.l 14
(2)  595/FFFFFFFFC0000404 :                     Cach_WdBackup_S		ds.l 0		; <-- read backwards
(2)  596/FFFFFFFFC0000404 :                     Cach_BlkRefill		ds.l 10
(2)  597/FFFFFFFFC000042C :                     Cach_BlkRefill_S	ds.l 0		; <-- read backwards
(2)  598/FFFFFFFFC000042C :                     ; Cach_DrawTimers		ds.l 4		; Screen draw-request timers, write $02 to these
(2)  599/FFFFFFFFC000042C :                     Cach_FbData		ds.l 1		; *** KEEP THIS ORDER
(2)  600/FFFFFFFFC0000430 :                     Cach_FbPos		ds.l 1
(2)  601/FFFFFFFFC0000434 :                     Cach_FbPos_Y		ds.l 1
(2)  602/FFFFFFFFC0000438 :                     Cach_Intrl_W		ds.l 1
(2)  603/FFFFFFFFC000043C :                     Cach_Intrl_H		ds.l 1
(2)  604/FFFFFFFFC0000440 :                     Cach_Intrl_Size		ds.l 1		; ***
(2)  605/FFFFFFFFC0000444 :                     Cach_SprBoxList		ds.l MAX_SUPERSPR
(2)  606/FFFFFFFFC00004A4 :                     ; RAM_Mars_ScrlBuff	ds.b sizeof_mscrl*2			; Scrolling buffers
(2)  607/FFFFFFFFC00004A4 :                     
(2)  608/FFFFFFFFC00004A4 :                     ; --------------------------------------------------------
(2)  609/ 6001A28 :                     .end:		phase CACHE_MSTR_SCRL+.end&$1FFF
(2)  610/ 6001A28 :                     		align 4
(2)  611/ 6001A28 :                     CACHE_MSTR_SCRL_E:
(2)  615/ 6001A28 :                     
(1) 2159/ 6001A28 :                     		include "system/mars/cache/cache_m_3D.asm"
(2)    1/ 6001A28 :                     ; ====================================================================
(2)    2/ 6001A28 :                     ; ----------------------------------------------------------------
(2)    3/ 6001A28 :                     ; CACHE code
(2)    4/ 6001A28 :                     ;
(2)    5/ 6001A28 :                     ; LIMIT: $800 bytes
(2)    6/ 6001A28 :                     ; ----------------------------------------------------------------
(2)    7/ 6001A28 :                     
(2)    8/ 6001A28 :                     		align 4
(2)    9/ 6001A28 :                     CACHE_MSTR_PLGN:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     
(2)   12/FFFFFFFFC0000000 :                     ; ====================================================================
(2)   13/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   14/FFFFFFFFC0000000 :                     ; Watchdog interrupt
(2)   15/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   16/FFFFFFFFC0000000 :                     
(2)   17/FFFFFFFFC0000000 : 9128                		mov	#_FRT,r1
(2)   18/FFFFFFFFC0000002 : 8417                		mov.b	@(7,r1),r0
(2)   19/FFFFFFFFC0000004 : CA02                		xor	#2,r0
(2)   20/FFFFFFFFC0000006 : 8017                		mov.b	r0,@(7,r1)
(2)   21/FFFFFFFFC0000008 : C509                		mov.w	@(marsGbl_WdgHold,gbr),r0
(2)   22/FFFFFFFFC000000A : 8801                		cmp/eq	#1,r0
(2)   23/FFFFFFFFC000000C : 8916                		bt	.exit_wdg
(2)   24/FFFFFFFFC000000E : C508                		mov.w	@(marsGbl_WdgMode,gbr),r0	; Framebuffer clear request ($07)?
(2)   25/FFFFFFFFC0000010 : 8807                		cmp/eq	#7,r0
(2)   26/FFFFFFFFC0000012 : 8B25                		bf	maindrw_tasks
(2)   27/FFFFFFFFC0000014 :                     
(2)   28/FFFFFFFFC0000014 :                     ; ------------------------------------------------
(2)   29/FFFFFFFFC0000014 :                     ; Clear Framebuffer
(2)   30/FFFFFFFFC0000014 :                     ; ------------------------------------------------
(2)   31/FFFFFFFFC0000014 :                     
(2)   32/FFFFFFFFC0000014 : D10D                		mov	#_vdpreg,r1
(2)   33/FFFFFFFFC0000016 : 8515                .wait_fb:	mov.w   @($A,r1),r0			; Framebuffer free?
(2)   34/FFFFFFFFC0000018 : C802                		tst     #2,r0
(2)   35/FFFFFFFFC000001A : 8BFC                		bf      .wait_fb
(2)   36/FFFFFFFFC000001C : 8513                		mov.w   @(6,r1),r0			; SVDP-fill address
(2)   37/FFFFFFFFC000001E : 705B                		add     #$5B,r0				; <-- Pre-increment
(2)   38/FFFFFFFFC0000020 : 8113                		mov.w   r0,@(6,r1)
(2)   39/FFFFFFFFC0000022 : 9018                		mov.w   #328/2,r0			; SVDP-fill size (320+ pixels)
(2)   40/FFFFFFFFC0000024 : 8112                		mov.w   r0,@(4,r1)
(2)   41/FFFFFFFFC0000026 : E000                		mov.w	#$0000,r0			; SVDP-fill pixel data
(2)   42/FFFFFFFFC0000028 : 8114                		mov.w   r0,@(8,r1)			; now SVDP-fill is working.
(2)   43/FFFFFFFFC000002A : D109                		mov	#Cach_ClrLines,r1		; Decrement a line to progress
(2)   44/FFFFFFFFC000002C : 6012                		mov	@r1,r0
(2)   45/FFFFFFFFC000002E : 4010                		dt	r0
(2)   46/FFFFFFFFC0000030 : 8F04                		bf/s	.exit_wdg
(2)   47/FFFFFFFFC0000032 : 2102                		mov	r0,@r1				; Write new value before branch
(2)   48/FFFFFFFFC0000034 : E001                		mov	#1,r0				; Finished: Set task $01
(2)   49/FFFFFFFFC0000036 : C108                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)   50/FFFFFFFFC0000038 :                     .on_clr:
(2)   51/FFFFFFFFC0000038 : 000B                		rts
(2)   52/FFFFFFFFC000003A : 0009                		nop
(2)   53/FFFFFFFFC000003C :                     		align 4
(2)   54/FFFFFFFFC000003C :                     .exit_wdg:
(2)   55/FFFFFFFFC000003C : 910C                		mov.w   #$FE80,r1
(2)   56/FFFFFFFFC000003E : 900C                		mov.w   #$A518,r0		; OFF
(2)   57/FFFFFFFFC0000040 : 2101                		mov.w   r0,@r1
(2)   58/FFFFFFFFC0000042 : CB20                		or      #$20,r0			; ON
(2)   59/FFFFFFFFC0000044 : 2101                		mov.w   r0,@r1
(2)   60/FFFFFFFFC0000046 : 9009                		mov.w   #$5A10,r0		; Timer: $10
(2)   61/FFFFFFFFC0000048 : 000B                		rts
(2)   62/FFFFFFFFC000004A : 2101                		mov.w   r0,@r1
(2)   63/FFFFFFFFC000004C :                     		align 4
(2)   64/FFFFFFFFC000004C : 2000 4100 C000 06D4 		ltorg
                    FE10 00A4 FE80 A518 
                    5A10                
(2)   65/FFFFFFFFC000005E :                     
(2)   66/FFFFFFFFC000005E :                     ; ------------------------------------------------
(2)   67/FFFFFFFFC000005E :                     ; Main drawing routines
(2)   68/FFFFFFFFC000005E :                     ; ------------------------------------------------
(2)   69/FFFFFFFFC000005E :                     
(2)   70/FFFFFFFFC000005E :                     		align 4
(2)   71/FFFFFFFFC0000060 :                     maindrw_tasks:
(2)   72/FFFFFFFFC0000060 : 4008                		shll2	r0
(2)   73/FFFFFFFFC0000062 : D136                		mov	#.list,r1
(2)   74/FFFFFFFFC0000064 : 001E                		mov	@(r1,r0),r0
(2)   75/FFFFFFFFC0000066 : 402B                		jmp	@r0
(2)   76/FFFFFFFFC0000068 : 0009                		nop
(2)   77/FFFFFFFFC000006A :                     		align 4
(2)   78/FFFFFFFFC000006C :                     .list:
(2)   79/FFFFFFFFC000006C : C000 0388           		dc.l slvplgn_00		; NULL task, exit.
(2)   80/FFFFFFFFC0000070 : C000 00C0           		dc.l slvplgn_01		; Main drawing routine
(2)   81/FFFFFFFFC0000074 : C000 0078           		dc.l slvplgn_02		; Resume from solid color
(2)   82/FFFFFFFFC0000078 :                     
(2)   83/FFFFFFFFC0000078 :                     ; --------------------------------
(2)   84/FFFFFFFFC0000078 :                     ; Task $02
(2)   85/FFFFFFFFC0000078 :                     ; --------------------------------
(2)   86/FFFFFFFFC0000078 :                     
(2)   87/FFFFFFFFC0000078 :                     ; NOTE: Only resumes from solid_color
(2)   88/FFFFFFFFC0000078 :                     
(2)   89/FFFFFFFFC0000078 :                     slvplgn_02:
(2)   90/FFFFFFFFC0000078 : 2F26                		mov	r2,@-r15
(2)   91/FFFFFFFFC000007A : 2F36                		mov	r3,@-r15
(2)   92/FFFFFFFFC000007C : 2F46                		mov	r4,@-r15
(2)   93/FFFFFFFFC000007E : 2F56                		mov	r5,@-r15
(2)   94/FFFFFFFFC0000080 : 2F66                		mov	r6,@-r15
(2)   95/FFFFFFFFC0000082 : 2F76                		mov	r7,@-r15
(2)   96/FFFFFFFFC0000084 : 2F86                		mov	r8,@-r15
(2)   97/FFFFFFFFC0000086 : 2F96                		mov	r9,@-r15
(2)   98/FFFFFFFFC0000088 : 2FA6                		mov	r10,@-r15
(2)   99/FFFFFFFFC000008A : 2FB6                		mov	r11,@-r15
(2)  100/FFFFFFFFC000008C : 2FC6                		mov	r12,@-r15
(2)  101/FFFFFFFFC000008E : 2FD6                		mov	r13,@-r15
(2)  102/FFFFFFFFC0000090 : 2FE6                		mov	r14,@-r15
(2)  103/FFFFFFFFC0000092 : 4F12                		sts	macl,@-r15
(2)  104/FFFFFFFFC0000094 : 4F02                		sts	mach,@-r15
(2)  105/FFFFFFFFC0000096 : D02A                		mov	#Cach_LnDrw_L,r0
(2)  106/FFFFFFFFC0000098 : 6E06                		mov	@r0+,r14
(2)  107/FFFFFFFFC000009A : 6D06                		mov	@r0+,r13
(2)  108/FFFFFFFFC000009C : 6C06                		mov	@r0+,r12
(2)  109/FFFFFFFFC000009E : 6B06                		mov	@r0+,r11
(2)  110/FFFFFFFFC00000A0 : 6A06                		mov	@r0+,r10
(2)  111/FFFFFFFFC00000A2 : 6906                		mov	@r0+,r9
(2)  112/FFFFFFFFC00000A4 : 6806                		mov	@r0+,r8
(2)  113/FFFFFFFFC00000A6 : 6706                		mov	@r0+,r7
(2)  114/FFFFFFFFC00000A8 : 6606                		mov	@r0+,r6
(2)  115/FFFFFFFFC00000AA : 6506                		mov	@r0+,r5
(2)  116/FFFFFFFFC00000AC : 6406                		mov	@r0+,r4
(2)  117/FFFFFFFFC00000AE : 6306                		mov	@r0+,r3
(2)  118/FFFFFFFFC00000B0 : 6206                		mov	@r0+,r2
(2)  119/FFFFFFFFC00000B2 : 6106                		mov	@r0+,r1
(2)  120/FFFFFFFFC00000B4 : E001                		mov	#1,r0
(2)  121/FFFFFFFFC00000B6 : C108                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)  122/FFFFFFFFC00000B8 : A152                		bra	drwsld_updline
(2)  123/FFFFFFFFC00000BA : 0009                		nop
(2)  124/FFFFFFFFC00000BC : A177                .exit:		bra	drwtask_exit
(2)  125/FFFFFFFFC00000BE : E210                		mov	#$10,r2
(2)  126/FFFFFFFFC00000C0 :                     		align 4
(2)  127/FFFFFFFFC00000C0 :                     
(2)  128/FFFFFFFFC00000C0 :                     ; --------------------------------
(2)  129/FFFFFFFFC00000C0 :                     ; Task $01
(2)  130/FFFFFFFFC00000C0 :                     ; --------------------------------
(2)  131/FFFFFFFFC00000C0 :                     
(2)  132/FFFFFFFFC00000C0 :                     slvplgn_01:
(2)  133/FFFFFFFFC00000C0 : 2F26                		mov	r2,@-r15
(2)  134/FFFFFFFFC00000C2 : C50D                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Any pieces to draw?
(2)  135/FFFFFFFFC00000C4 : 4015                		cmp/pl	r0
(2)  136/FFFFFFFFC00000C6 : 8907                		bt	.has_pz
(2)  137/FFFFFFFFC00000C8 : C50A                		mov.w	@(marsGbl_WdgReady,gbr),r0	; Finished with the pieces?
(2)  138/FFFFFFFFC00000CA : 2008                		tst	r0,r0
(2)  139/FFFFFFFFC00000CC : 8901                		bt	.exit
(2)  140/FFFFFFFFC00000CE : E000                		mov	#0,r0				; Watchdog out.
(2)  141/FFFFFFFFC00000D0 : C108                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)  142/FFFFFFFFC00000D2 : A16C                .exit:		bra	drwtask_exit
(2)  143/FFFFFFFFC00000D4 : E210                		mov	#$10,r2
(2)  144/FFFFFFFFC00000D6 :                     		align 4
(2)  145/FFFFFFFFC00000D8 :                     .has_pz:
(2)  146/FFFFFFFFC00000D8 : 2F36                		mov	r3,@-r15			; Save all these regs
(2)  147/FFFFFFFFC00000DA : 2F46                		mov	r4,@-r15
(2)  148/FFFFFFFFC00000DC : 2F56                		mov	r5,@-r15
(2)  149/FFFFFFFFC00000DE : 2F66                		mov	r6,@-r15
(2)  150/FFFFFFFFC00000E0 : 2F76                		mov	r7,@-r15
(2)  151/FFFFFFFFC00000E2 : 2F86                		mov	r8,@-r15
(2)  152/FFFFFFFFC00000E4 : 2F96                		mov	r9,@-r15
(2)  153/FFFFFFFFC00000E6 : 2FA6                		mov	r10,@-r15
(2)  154/FFFFFFFFC00000E8 : 2FB6                		mov	r11,@-r15
(2)  155/FFFFFFFFC00000EA : 2FC6                		mov	r12,@-r15
(2)  156/FFFFFFFFC00000EC : 2FD6                		mov	r13,@-r15
(2)  157/FFFFFFFFC00000EE : 2FE6                		mov	r14,@-r15
(2)  158/FFFFFFFFC00000F0 : 4F12                		sts	macl,@-r15
(2)  159/FFFFFFFFC00000F2 : 4F02                		sts	mach,@-r15
(2)  160/FFFFFFFFC00000F4 :                     drwtsk1_newpz:
(2)  161/FFFFFFFFC00000F4 : C600                		mov	@(marsGbl_PlyPzList_R,gbr),r0
(2)  162/FFFFFFFFC00000F6 : 6E03                		mov	r0,r14
(2)  163/FFFFFFFFC00000F8 :                     ; 		mov	@(marsGbl_PlyPzList_W,gbr),r0
(2)  164/FFFFFFFFC00000F8 :                     ; 		cmp/eq	r0,r14
(2)  165/FFFFFFFFC00000F8 :                     ; 		bt	g_return
(2)  166/FFFFFFFFC00000F8 : 59E2                		mov	@(plypz_ytb,r14),r9	; Start grabbing StartY/EndY positions
(2)  167/FFFFFFFFC00000FA : 6A9F                		exts.w	r9,r10			; r10 - Bottom
(2)  168/FFFFFFFFC00000FC : 4929                		shlr16	r9
(2)  169/FFFFFFFFC00000FE : 699F                		exts.w	r9,r9			;  r9 - Top
(2)  170/FFFFFFFFC0000100 : 3A90                		cmp/eq	r9,r10			; if Top==Bottom, exit
(2)  171/FFFFFFFFC0000102 : 8908                		bt	.invld_y
(2)  172/FFFFFFFFC0000104 : 901E                		mov	#SCREEN_HEIGHT,r0	; if Top > 224, skip
(2)  173/FFFFFFFFC0000106 : 3903                		cmp/ge	r0,r9
(2)  174/FFFFFFFFC0000108 : 8905                		bt	.invld_y		; if Bottom > 224, add max limit
(2)  175/FFFFFFFFC000010A : 3A07                		cmp/gt	r0,r10
(2)  176/FFFFFFFFC000010C : 8B00                		bf	.len_max
(2)  177/FFFFFFFFC000010E : 6A03                		mov	r0,r10
(2)  178/FFFFFFFFC0000110 :                     .len_max:
(2)  179/FFFFFFFFC0000110 : 3A98                		sub	r9,r10			; Turn r10 into line lenght (Bottom - Top)
(2)  180/FFFFFFFFC0000112 : 4A15                		cmp/pl	r10
(2)  181/FFFFFFFFC0000114 : 8904                		bt	.valid_y
(2)  182/FFFFFFFFC0000116 :                     .invld_y:
(2)  183/FFFFFFFFC0000116 : A128                		bra	drwsld_nextpz		; if LEN < 0 then check next one instead.
(2)  184/FFFFFFFFC0000118 : 0009                		nop
(2)  185/FFFFFFFFC000011A :                     		align 4
(2)  186/FFFFFFFFC000011C :                     .no_pz:
(2)  187/FFFFFFFFC000011C : A147                		bra	drwtask_exit
(2)  188/FFFFFFFFC000011E : E210                		mov	#$10,r2
(2)  189/FFFFFFFFC0000120 :                     		align 4
(2)  190/FFFFFFFFC0000120 :                     .valid_y:
(2)  191/FFFFFFFFC0000120 : 51E3                		mov	@(plypz_xl,r14),r1
(2)  192/FFFFFFFFC0000122 : 6313                		mov	r1,r3
(2)  193/FFFFFFFFC0000124 : 52E6                		mov	@(plypz_xl_dx,r14),r2		; r2 - DX left
(2)  194/FFFFFFFFC0000126 : 4129                		shlr16	r1
(2)  195/FFFFFFFFC0000128 : 54E7                		mov	@(plypz_xr_dx,r14),r4		; r4 - DX right
(2)  196/FFFFFFFFC000012A : 4128                		shll16	r1
(2)  197/FFFFFFFFC000012C : 50E0                		mov	@(plypz_type,r14),r0		; Check material options
(2)  198/FFFFFFFFC000012E : 4328                		shll16	r3
(2)  199/FFFFFFFFC0000130 : 4029                		shlr16	r0
(2)  200/FFFFFFFFC0000132 : 4019                		shlr8	r0
(2)  201/FFFFFFFFC0000134 : C880                 		tst	#PLGN_TEXURE,r0			; Texture mode?
(2)  202/FFFFFFFFC0000136 : 8B0D                 		bf	drwtsk_texmode
(2)  203/FFFFFFFFC0000138 : A0BC                		bra	drwtsk_solidmode
(2)  204/FFFFFFFFC000013A : 0009                		nop
(2)  205/FFFFFFFFC000013C :                     		align 4
(2)  206/FFFFFFFFC000013C : C000 006C C000 0738 		ltorg
                    00E0                
(2)  207/FFFFFFFFC0000146 :                     g_return:
(2)  208/FFFFFFFFC0000146 : A124                		bra	drwtask_return
(2)  209/FFFFFFFFC0000148 : 0009                		nop
(2)  210/FFFFFFFFC000014A :                     		align 4
(2)  211/FFFFFFFFC000014C :                     
(2)  212/FFFFFFFFC000014C :                     ; ------------------------------------
(2)  213/FFFFFFFFC000014C :                     ; Texture mode
(2)  214/FFFFFFFFC000014C :                     ;
(2)  215/FFFFFFFFC000014C :                     ; r1  - XL
(2)  216/FFFFFFFFC000014C :                     ; r2  - XL DX
(2)  217/FFFFFFFFC000014C :                     ; r3  - XR
(2)  218/FFFFFFFFC000014C :                     ; r4  - XR DX
(2)  219/FFFFFFFFC000014C :                     ; r5  - SRC XL
(2)  220/FFFFFFFFC000014C :                     ; r6  - SRC XR
(2)  221/FFFFFFFFC000014C :                     ; r7  - SRC YL
(2)  222/FFFFFFFFC000014C :                     ; r8  - SRC YR
(2)  223/FFFFFFFFC000014C :                     ; r9  - Y current
(2)  224/FFFFFFFFC000014C :                     ; r10  - Number of lines
(2)  225/FFFFFFFFC000014C :                     ; ------------------------------------
(2)  226/FFFFFFFFC000014C :                     
(2)  227/FFFFFFFFC000014C :                     		align 4
(2)  228/FFFFFFFFC000014C :                     go_drwsld_updline_tex:
(2)  229/FFFFFFFFC000014C : A09C                		bra	drwsld_updline_tex
(2)  230/FFFFFFFFC000014E : 0009                		nop
(2)  231/FFFFFFFFC0000150 :                     go_drwtex_gonxtpz:
(2)  232/FFFFFFFFC0000150 : A10B                		bra	drwsld_nextpz
(2)  233/FFFFFFFFC0000152 : 0009                		nop
(2)  234/FFFFFFFFC0000154 :                     		align 4
(2)  235/FFFFFFFFC0000154 :                     drwtsk_texmode:
(2)  236/FFFFFFFFC0000154 : C50B                		mov.w	@(marsGbl_WdgDivLock,gbr),r0	; Waste interrupt if MarsVideo_MakePolygon is in the
(2)  237/FFFFFFFFC0000156 : 8801                		cmp/eq	#1,r0				; middle of HW-division
(2)  238/FFFFFFFFC0000158 : 8B02                		bf	.texvalid
(2)  239/FFFFFFFFC000015A : A11A                		bra	drwtask_return
(2)  240/FFFFFFFFC000015C : 0009                		nop
(2)  241/FFFFFFFFC000015E :                     		align 4
(2)  242/FFFFFFFFC0000160 :                     .texvalid:
(2)  243/FFFFFFFFC0000160 : 55E4                		mov	@(plypz_src_xl,r14),r5		; Texture X left/right
(2)  244/FFFFFFFFC0000162 : 6653                		mov	r5,r6
(2)  245/FFFFFFFFC0000164 : 57E5                		mov	@(plypz_src_yl,r14),r7		; Texture Y up/down
(2)  246/FFFFFFFFC0000166 : 4529                		shlr16	r5
(2)  247/FFFFFFFFC0000168 : 6873                		mov	r7,r8
(2)  248/FFFFFFFFC000016A : 4729                		shlr16	r7
(2)  249/FFFFFFFFC000016C :                     
(2)  250/FFFFFFFFC000016C : 4528                		shll16	r5
(2)  251/FFFFFFFFC000016E : 4628                		shll16	r6
(2)  252/FFFFFFFFC0000170 : 4728                		shll16	r7
(2)  253/FFFFFFFFC0000172 : 4828                		shll16	r8
(2)  254/FFFFFFFFC0000174 :                     drwsld_nxtline_tex:
(2)  255/FFFFFFFFC0000174 : 4911                		cmp/pz	r9				; Y Start below 0?
(2)  256/FFFFFFFFC0000176 : 8BE9                		bf	go_drwsld_updline_tex
(2)  257/FFFFFFFFC0000178 : D04D                		mov	tag_yhght,r0			; Y Start after 224?
(2)  258/FFFFFFFFC000017A : 3903                		cmp/ge	r0,r9
(2)  259/FFFFFFFFC000017C : 89E8                		bt	go_drwtex_gonxtpz
(2)  260/FFFFFFFFC000017E :                     
(2)  261/FFFFFFFFC000017E : D091                		mov	#Cach_Bkup_S,r0
(2)  262/FFFFFFFFC0000180 : 2016                		mov	r1,@-r0
(2)  263/FFFFFFFFC0000182 : 2026                		mov	r2,@-r0
(2)  264/FFFFFFFFC0000184 : 2036                		mov	r3,@-r0
(2)  265/FFFFFFFFC0000186 : 2046                		mov	r4,@-r0
(2)  266/FFFFFFFFC0000188 : 2056                		mov	r5,@-r0
(2)  267/FFFFFFFFC000018A : 2066                		mov	r6,@-r0
(2)  268/FFFFFFFFC000018C : 2076                		mov	r7,@-r0
(2)  269/FFFFFFFFC000018E : 2086                		mov	r8,@-r0
(2)  270/FFFFFFFFC0000190 : 2096                		mov	r9,@-r0
(2)  271/FFFFFFFFC0000192 : 20A6                		mov	r10,@-r0
(2)  272/FFFFFFFFC0000194 : 20B6                		mov	r11,@-r0
(2)  273/FFFFFFFFC0000196 :                     
(2)  274/FFFFFFFFC0000196 :                     	; NOTE: r11-r12 are free
(2)  275/FFFFFFFFC0000196 : 4129                		shlr16	r1
(2)  276/FFFFFFFFC0000198 : 4329                		shlr16	r3
(2)  277/FFFFFFFFC000019A : 611F                		exts	r1,r1
(2)  278/FFFFFFFFC000019C : 633F                		exts	r3,r3
(2)  279/FFFFFFFFC000019E : 6033                		mov	r3,r0			; r0: X Right - X Left
(2)  280/FFFFFFFFC00001A0 : 3018                		sub	r1,r0
(2)  281/FFFFFFFFC00001A2 : 4015                		cmp/pl	r0			; Line reversed?
(2)  282/FFFFFFFFC00001A4 : 8908                		bt	.txrevers
(2)  283/FFFFFFFFC00001A6 : 6033                		mov	r3,r0			; Swap XL and XR values
(2)  284/FFFFFFFFC00001A8 : 6313                		mov	r1,r3
(2)  285/FFFFFFFFC00001AA : 6103                		mov	r0,r1
(2)  286/FFFFFFFFC00001AC : 6053                		mov	r5,r0
(2)  287/FFFFFFFFC00001AE : 6563                		mov	r6,r5
(2)  288/FFFFFFFFC00001B0 : 6603                		mov	r0,r6
(2)  289/FFFFFFFFC00001B2 : 6073                		mov	r7,r0
(2)  290/FFFFFFFFC00001B4 : 6783                		mov	r8,r7
(2)  291/FFFFFFFFC00001B6 : 6803                		mov	r0,r8
(2)  292/FFFFFFFFC00001B8 :                     .txrevers:
(2)  293/FFFFFFFFC00001B8 : 3310                		cmp/eq	r1,r3				; Same X position?
(2)  294/FFFFFFFFC00001BA : 8958                		bt	.tex_skip_line
(2)  295/FFFFFFFFC00001BC : D03B                		mov	tag_width,r0			; X right < 0?
(2)  296/FFFFFFFFC00001BE : 4311                		cmp/pz	r3
(2)  297/FFFFFFFFC00001C0 : 8B55                		bf	.tex_skip_line
(2)  298/FFFFFFFFC00001C2 : 3107                		cmp/gt	r0,r1				; X left > 320?
(2)  299/FFFFFFFFC00001C4 : 8953                		bt	.tex_skip_line
(2)  300/FFFFFFFFC00001C6 : 6233                		mov	r3,r2
(2)  301/FFFFFFFFC00001C8 : 6013                		mov 	r1,r0
(2)  302/FFFFFFFFC00001CA : 3208                		sub 	r0,r2
(2)  303/FFFFFFFFC00001CC : 3658                		sub	r5,r6
(2)  304/FFFFFFFFC00001CE : 3878                		sub	r7,r8
(2)  305/FFFFFFFFC00001D0 :                     
(2)  306/FFFFFFFFC00001D0 :                     	; Calculate new DX values
(2)  307/FFFFFFFFC00001D0 :                     	; make sure DIV is not in use
(2)  308/FFFFFFFFC00001D0 :                     	; before getting here.
(2)  309/FFFFFFFFC00001D0 :                     	; (set marsGbl_WdgDivLock to 1)
(2)  310/FFFFFFFFC00001D0 : D035                		mov	tag_JR,r0			; r6 / r2
(2)  311/FFFFFFFFC00001D2 : 2022                		mov	r2,@r0
(2)  312/FFFFFFFFC00001D4 : 1061                		mov	r6,@(4,r0)
(2)  313/FFFFFFFFC00001D6 : 0009                		nop
(2)  314/FFFFFFFFC00001D8 : 5601                		mov	@(4,r0),r6			; r8 / r2
(2)  315/FFFFFFFFC00001DA : 2022                		mov	r2,@r0
(2)  316/FFFFFFFFC00001DC : 1081                		mov	r8,@(4,r0)
(2)  317/FFFFFFFFC00001DE : 0009                		nop
(2)  318/FFFFFFFFC00001E0 : 5801                		mov	@(4,r0),r8
(2)  319/FFFFFFFFC00001E2 :                     
(2)  320/FFFFFFFFC00001E2 :                     	; Limit X destination points
(2)  321/FFFFFFFFC00001E2 :                     	; and correct the texture's X positions
(2)  322/FFFFFFFFC00001E2 :                     
(2)  323/FFFFFFFFC00001E2 :                     ; 		mov	#1,r0
(2)  324/FFFFFFFFC00001E2 :                     ; 		or	r0,r3
(2)  325/FFFFFFFFC00001E2 :                     
(2)  326/FFFFFFFFC00001E2 : D032                		mov	tag_width,r0		; XR point > 320?
(2)  327/FFFFFFFFC00001E4 : 3307                		cmp/gt	r0,r3
(2)  328/FFFFFFFFC00001E6 : 8B00                		bf	.tr_fix
(2)  329/FFFFFFFFC00001E8 : 6303                		mov	r0,r3			; Force XR to 320
(2)  330/FFFFFFFFC00001EA :                     .tr_fix:
(2)  331/FFFFFFFFC00001EA : 4111                		cmp/pz	r1			; XL point < 0?
(2)  332/FFFFFFFFC00001EC : 8907                		bt	.tl_fix
(2)  333/FFFFFFFFC00001EE : 621B                		neg	r1,r2			; Fix texture positions
(2)  334/FFFFFFFFC00001F0 : 0267                		mul	r6,r2
(2)  335/FFFFFFFFC00001F2 : 001A                		sts	macl,r0
(2)  336/FFFFFFFFC00001F4 : 350C                		add	r0,r5
(2)  337/FFFFFFFFC00001F6 : 0287                		mul	r8,r2
(2)  338/FFFFFFFFC00001F8 : 001A                		sts	macl,r0
(2)  339/FFFFFFFFC00001FA : 370C                		add	r0,r7
(2)  340/FFFFFFFFC00001FC : 211A                		xor	r1,r1			; And reset XL to 0
(2)  341/FFFFFFFFC00001FE :                     .tl_fix:
(2)  342/FFFFFFFFC00001FE :                     
(2)  343/FFFFFFFFC00001FE :                     	; start
(2)  344/FFFFFFFFC00001FE : E0FE                		mov	#-2,r0
(2)  345/FFFFFFFFC0000200 : 2109                		and	r0,r1
(2)  346/FFFFFFFFC0000202 : 2309                		and	r0,r3
(2)  347/FFFFFFFFC0000204 : 3318                		sub 	r1,r3
(2)  348/FFFFFFFFC0000206 : 4321                		shar	r3
(2)  349/FFFFFFFFC0000208 : 4315                		cmp/pl	r3
(2)  350/FFFFFFFFC000020A : 8B30                		bf	.tex_skip_line
(2)  351/FFFFFFFFC000020C : DA6E                		mov	#_overwrite+$200,r10
(2)  352/FFFFFFFFC000020E : 54E0                		mov	@(plypz_type,r14),r4	;  r4 - texture width|palinc
(2)  353/FFFFFFFFC0000210 : 6D43                		mov	r4,r13
(2)  354/FFFFFFFFC0000212 : 4429                		shlr16	r4
(2)  355/FFFFFFFFC0000214 : 6DDC                		extu.b	r13,r13
(2)  356/FFFFFFFFC0000216 :                     ; 		mov	#$FF,r0
(2)  357/FFFFFFFFC0000216 : 92DF                		mov	#$3FFF,r2
(2)  358/FFFFFFFFC0000218 : 2429                		and	r2,r4
(2)  359/FFFFFFFFC000021A :                     ; 		and	r0,r13
(2)  360/FFFFFFFFC000021A : 6093                		mov 	r9,r0			; Y position * $200
(2)  361/FFFFFFFFC000021C : 4018                		shll8	r0
(2)  362/FFFFFFFFC000021E : 4000                		shll	r0
(2)  363/FFFFFFFFC0000220 : 3A0C                		add 	r0,r10			; Add Y
(2)  364/FFFFFFFFC0000222 : 3A1C                		add 	r1,r10			; Add X
(2)  365/FFFFFFFFC0000224 : 51E1                		mov	@(plypz_mtrl,r14),r1
(2)  366/FFFFFFFFC0000226 : D269                		mov	#_vdpreg,r2		; Any pending SVDP fill?
(2)  367/FFFFFFFFC0000228 :                     .w_fb:
(2)  368/FFFFFFFFC0000228 : 8525                		mov.w	@($A,r2),r0
(2)  369/FFFFFFFFC000022A : C802                		tst	#2,r0
(2)  370/FFFFFFFFC000022C : 8BFC                		bf	.w_fb
(2)  371/FFFFFFFFC000022E :                     .tex_xloop:
(2)  372/FFFFFFFFC000022E : 6273                		mov	r7,r2
(2)  373/FFFFFFFFC0000230 : 4229                		shlr16	r2
(2)  374/FFFFFFFFC0000232 : 242E                		mulu	r2,r4
(2)  375/FFFFFFFFC0000234 : 6253                		mov	r5,r2	   		; Build column index
(2)  376/FFFFFFFFC0000236 : 001A                		sts	macl,r0
(2)  377/FFFFFFFFC0000238 : 4229                		shlr16	r2
(2)  378/FFFFFFFFC000023A : 302C                		add	r2,r0
(2)  379/FFFFFFFFC000023C : 001C                		mov.b	@(r0,r1),r0		; Read left pixel
(2)  380/FFFFFFFFC000023E : 30DC                		add	r13,r0			; color-index increment
(2)  381/FFFFFFFFC0000240 : 600C                		extu.b	r0,r0
(2)  382/FFFFFFFFC0000242 :                     ; 		and	#$FF,r0
(2)  383/FFFFFFFFC0000242 : 4018                		shll8	r0
(2)  384/FFFFFFFFC0000244 : 400A                		lds	r0,mach			; Save left pixel
(2)  385/FFFFFFFFC0000246 :                     
(2)  386/FFFFFFFFC0000246 : 356C                		add	r6,r5			; Update X
(2)  387/FFFFFFFFC0000248 : 378C                		add	r8,r7			; Update Y
(2)  388/FFFFFFFFC000024A : 6273                		mov	r7,r2
(2)  389/FFFFFFFFC000024C : 4229                		shlr16	r2
(2)  390/FFFFFFFFC000024E : 242E                		mulu	r2,r4
(2)  391/FFFFFFFFC0000250 : 6253                		mov	r5,r2	   		; Build column index
(2)  392/FFFFFFFFC0000252 : 001A                		sts	macl,r0
(2)  393/FFFFFFFFC0000254 : 4229                		shlr16	r2
(2)  394/FFFFFFFFC0000256 : 302C                		add	r2,r0
(2)  395/FFFFFFFFC0000258 : 001C                		mov.b	@(r0,r1),r0		; Read right pixel
(2)  396/FFFFFFFFC000025A : 30DC                		add	r13,r0			; color-index increment
(2)  397/FFFFFFFFC000025C : 600C                		extu.b	r0,r0
(2)  398/FFFFFFFFC000025E :                     ; 		and	#$FF,r0
(2)  399/FFFFFFFFC000025E :                     
(2)  400/FFFFFFFFC000025E : 020A                		sts	mach,r2
(2)  401/FFFFFFFFC0000260 : 202B                		or	r2,r0
(2)  402/FFFFFFFFC0000262 : 2A01                		mov.w	r0,@r10
(2)  403/FFFFFFFFC0000264 : 7A02                		add	#2,r10
(2)  404/FFFFFFFFC0000266 : 356C                		add	r6,r5			; Update X
(2)  405/FFFFFFFFC0000268 : 4310                		dt	r3
(2)  406/FFFFFFFFC000026A : 8FE0                		bf/s	.tex_xloop
(2)  407/FFFFFFFFC000026C : 378C                		add	r8,r7			; Update Y
(2)  408/FFFFFFFFC000026E :                     .tex_skip_line:
(2)  409/FFFFFFFFC000026E : D058                		mov	#Cach_Bkup_LB,r0
(2)  410/FFFFFFFFC0000270 : 6B06                		mov	@r0+,r11
(2)  411/FFFFFFFFC0000272 : 6A06                		mov	@r0+,r10
(2)  412/FFFFFFFFC0000274 : 6906                		mov	@r0+,r9
(2)  413/FFFFFFFFC0000276 : 6806                		mov	@r0+,r8
(2)  414/FFFFFFFFC0000278 : 6706                		mov	@r0+,r7
(2)  415/FFFFFFFFC000027A : 6606                		mov	@r0+,r6
(2)  416/FFFFFFFFC000027C : 6506                		mov	@r0+,r5
(2)  417/FFFFFFFFC000027E : 6406                		mov	@r0+,r4
(2)  418/FFFFFFFFC0000280 : 6306                		mov	@r0+,r3
(2)  419/FFFFFFFFC0000282 : 6206                		mov	@r0+,r2
(2)  420/FFFFFFFFC0000284 : 6106                		mov	@r0+,r1
(2)  421/FFFFFFFFC0000286 : 0009                		nop
(2)  422/FFFFFFFFC0000288 :                     drwsld_updline_tex:
(2)  423/FFFFFFFFC0000288 : 50E8                		mov	@(plypz_src_xl_dx,r14),r0	; Update DX postions
(2)  424/FFFFFFFFC000028A : 350C                		add	r0,r5
(2)  425/FFFFFFFFC000028C : 50E9                		mov	@(plypz_src_xr_dx,r14),r0
(2)  426/FFFFFFFFC000028E : 360C                		add	r0,r6
(2)  427/FFFFFFFFC0000290 : 50EA                		mov	@(plypz_src_yl_dx,r14),r0
(2)  428/FFFFFFFFC0000292 : 370C                		add	r0,r7
(2)  429/FFFFFFFFC0000294 : 50EB                		mov	@(plypz_src_yr_dx,r14),r0
(2)  430/FFFFFFFFC0000296 : 380C                		add	r0,r8
(2)  431/FFFFFFFFC0000298 : 312C                		add	r2,r1				; Update X postions
(2)  432/FFFFFFFFC000029A : 4A10                		dt	r10
(2)  433/FFFFFFFFC000029C : 8D02                		bt/s	drwtex_nextpz
(2)  434/FFFFFFFFC000029E : 334C                		add	r4,r3
(2)  435/FFFFFFFFC00002A0 : AF68                		bra	drwsld_nxtline_tex
(2)  436/FFFFFFFFC00002A2 : 7901                		add	#1,r9
(2)  437/FFFFFFFFC00002A4 :                     drwtex_nextpz:
(2)  438/FFFFFFFFC00002A4 : A061                		bra	drwsld_nextpz
(2)  439/FFFFFFFFC00002A6 : 0009                		nop
(2)  440/FFFFFFFFC00002A8 :                     		align 4
(2)  441/FFFFFFFFC00002A8 : FFFF FF00           tag_JR:		dc.l _JR
(2)  442/FFFFFFFFC00002AC : 0000 0140           tag_width:	dc.l	SCREEN_WIDTH
(2)  443/FFFFFFFFC00002B0 : 0000 00E0           tag_yhght:	dc.l	SCREEN_HEIGHT
(2)  444/FFFFFFFFC00002B4 :                     
(2)  445/FFFFFFFFC00002B4 :                     ; ------------------------------------
(2)  446/FFFFFFFFC00002B4 :                     ; Solid Color
(2)  447/FFFFFFFFC00002B4 :                     ;
(2)  448/FFFFFFFFC00002B4 :                     ; r1  - XL
(2)  449/FFFFFFFFC00002B4 :                     ; r2  - XL DX
(2)  450/FFFFFFFFC00002B4 :                     ; r3  - XR
(2)  451/FFFFFFFFC00002B4 :                     ; r4  - XR DX
(2)  452/FFFFFFFFC00002B4 :                     ; r9  - Y current
(2)  453/FFFFFFFFC00002B4 :                     ; r10  - Number of lines
(2)  454/FFFFFFFFC00002B4 :                     ; ------------------------------------
(2)  455/FFFFFFFFC00002B4 :                     
(2)  456/FFFFFFFFC00002B4 :                     drwtsk_solidmode:
(2)  457/FFFFFFFFC00002B4 :                     ; 		mov	#$FF,r0
(2)  458/FFFFFFFFC00002B4 : 56E1                		mov	@(plypz_mtrl,r14),r6
(2)  459/FFFFFFFFC00002B6 : 55E0                		mov	@(plypz_type,r14),r5
(2)  460/FFFFFFFFC00002B8 : 655C                		extu.b	r5,r5
(2)  461/FFFFFFFFC00002BA : 666C                		extu.b	r6,r6
(2)  462/FFFFFFFFC00002BC :                     ; 		and	r0,r5
(2)  463/FFFFFFFFC00002BC :                     ; 		and	r0,r6
(2)  464/FFFFFFFFC00002BC : 365C                		add	r5,r6
(2)  465/FFFFFFFFC00002BE : DD43                		mov	#_vdpreg,r13
(2)  466/FFFFFFFFC00002C0 : 85D5                .wait:		mov.w	@(10,r13),r0
(2)  467/FFFFFFFFC00002C2 : C802                		tst	#2,r0
(2)  468/FFFFFFFFC00002C4 : 8BFC                		bf	.wait
(2)  469/FFFFFFFFC00002C6 :                     drwsld_nxtline:
(2)  470/FFFFFFFFC00002C6 : 4911                		cmp/pz	r9			; Y pos < 0?
(2)  471/FFFFFFFFC00002C8 : 8B4A                		bf	drwsld_updline
(2)  472/FFFFFFFFC00002CA : 9086                		mov	#SCREEN_HEIGHT,r0	; Y pos > 224?
(2)  473/FFFFFFFFC00002CC : 3907                		cmp/gt	r0,r9
(2)  474/FFFFFFFFC00002CE : 894C                		bt	drwsld_nextpz
(2)  475/FFFFFFFFC00002D0 : 6093                		mov	r9,r0			; r10-r9 < 0?
(2)  476/FFFFFFFFC00002D2 : 30AC                		add	r10,r0
(2)  477/FFFFFFFFC00002D4 : 4015                		cmp/pl	r0
(2)  478/FFFFFFFFC00002D6 : 8B48                		bf	drwsld_nextpz
(2)  479/FFFFFFFFC00002D8 :                     
(2)  480/FFFFFFFFC00002D8 : 6B13                		mov	r1,r11
(2)  481/FFFFFFFFC00002DA : 6C33                		mov	r3,r12
(2)  482/FFFFFFFFC00002DC : 4B29                		shlr16	r11
(2)  483/FFFFFFFFC00002DE : 4C29                		shlr16	r12
(2)  484/FFFFFFFFC00002E0 : 6BBF                		exts.w	r11,r11
(2)  485/FFFFFFFFC00002E2 : 6CCF                		exts.w	r12,r12
(2)  486/FFFFFFFFC00002E4 : E0FE                		mov	#-2,r0		; Make WORD aligned now.
(2)  487/FFFFFFFFC00002E6 : 2B09                		and	r0,r11
(2)  488/FFFFFFFFC00002E8 : 2C09                		and	r0,r12
(2)  489/FFFFFFFFC00002EA : 60C3                		mov	r12,r0
(2)  490/FFFFFFFFC00002EC : 30B8                		sub	r11,r0
(2)  491/FFFFFFFFC00002EE : 4011                		cmp/pz	r0
(2)  492/FFFFFFFFC00002F0 : 8902                		bt	.revers
(2)  493/FFFFFFFFC00002F2 : 60C3                		mov	r12,r0
(2)  494/FFFFFFFFC00002F4 : 6CB3                		mov	r11,r12
(2)  495/FFFFFFFFC00002F6 : 6B03                		mov	r0,r11
(2)  496/FFFFFFFFC00002F8 :                     .revers:
(2)  497/FFFFFFFFC00002F8 : 9070                		mov	#SCREEN_WIDTH,r0
(2)  498/FFFFFFFFC00002FA : 4C15                		cmp/pl	r12		; XR < 0?
(2)  499/FFFFFFFFC00002FC : 8B30                		bf	drwsld_updline
(2)  500/FFFFFFFFC00002FE : 3B03                		cmp/ge	r0,r11		; XL > 320?
(2)  501/FFFFFFFFC0000300 : 892E                		bt	drwsld_updline
(2)  502/FFFFFFFFC0000302 : 3C03                		cmp/ge	r0,r12		; XR > 320?
(2)  503/FFFFFFFFC0000304 : 8B00                		bf	.r_fix
(2)  504/FFFFFFFFC0000306 : 6C03                		mov	r0,r12		; MAX XR
(2)  505/FFFFFFFFC0000308 :                     .r_fix:
(2)  506/FFFFFFFFC0000308 : 4B15                		cmp/pl	r11		; XL < 0?
(2)  507/FFFFFFFFC000030A : 8900                		bt	.l_fix
(2)  508/FFFFFFFFC000030C : 2BBA                		xor	r11,r11		; MIN XL
(2)  509/FFFFFFFFC000030E :                     .l_fix:
(2)  510/FFFFFFFFC000030E : 85D5                		mov.w	@(10,r13),r0	; Pending SVDP fill?
(2)  511/FFFFFFFFC0000310 : C802                		tst	#2,r0
(2)  512/FFFFFFFFC0000312 : 8BFC                		bf	.l_fix
(2)  513/FFFFFFFFC0000314 : 60C3                		mov	r12,r0
(2)  514/FFFFFFFFC0000316 : 30B8                		sub	r11,r0
(2)  515/FFFFFFFFC0000318 : 6C03                		mov	r0,r12
(2)  516/FFFFFFFFC000031A : 4001                		shlr	r0		; Len: (XR-XL)/2
(2)  517/FFFFFFFFC000031C : 81D2                		mov.w	r0,@(4,r13)	; Set SVDP-FILL len
(2)  518/FFFFFFFFC000031E : 60B3                		mov	r11,r0
(2)  519/FFFFFFFFC0000320 : 4001                		shlr	r0
(2)  520/FFFFFFFFC0000322 : 6593                		mov	r9,r5
(2)  521/FFFFFFFFC0000324 : 7501                		add	#1,r5
(2)  522/FFFFFFFFC0000326 : 4518                		shll8	r5
(2)  523/FFFFFFFFC0000328 : 305C                		add	r5,r0		; Address: (XL/2)*((Y+1)*$200)/2
(2)  524/FFFFFFFFC000032A : 81D3                		mov.w	r0,@(6,r13)	; Set SVDP-FILL address
(2)  525/FFFFFFFFC000032C : 6063                		mov	r6,r0
(2)  526/FFFFFFFFC000032E : 4018                		shll8	r0
(2)  527/FFFFFFFFC0000330 : 206B                		or	r6,r0		; Data: xxxx
(2)  528/FFFFFFFFC0000332 : 81D4                		mov.w	r0,@(8,r13)	; Set pixels, SVDP-Fill begins
(2)  529/FFFFFFFFC0000334 :                     ; .wait:	mov.w	@(10,r13),r0
(2)  530/FFFFFFFFC0000334 :                     ; 		tst	#2,r0
(2)  531/FFFFFFFFC0000334 :                     ; 		bf	.wait
(2)  532/FFFFFFFFC0000334 :                     
(2)  533/FFFFFFFFC0000334 :                     ; 	If the line is too large, leave it to VDP
(2)  534/FFFFFFFFC0000334 :                     ; 	and exit watchdog, we will come back on
(2)  535/FFFFFFFFC0000334 :                     ; 	next trigger.
(2)  536/FFFFFFFFC0000334 : E028                		mov	#$28,r0				; If line > $28, leave the SVDP filling
(2)  537/FFFFFFFFC0000336 : 3C07                		cmp/gt	r0,r12				; and wait for the next watchdog
(2)  538/FFFFFFFFC0000338 : 8B12                		bf	drwsld_updline
(2)  539/FFFFFFFFC000033A : E002                		mov	#2,r0				; Set next mode on Resume
(2)  540/FFFFFFFFC000033C : C108                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)  541/FFFFFFFFC000033E : D025                		mov	#Cach_LnDrw_S,r0		; Save ALL these regs for comeback
(2)  542/FFFFFFFFC0000340 : 2016                		mov	r1,@-r0
(2)  543/FFFFFFFFC0000342 : 2026                		mov	r2,@-r0
(2)  544/FFFFFFFFC0000344 : 2036                		mov	r3,@-r0
(2)  545/FFFFFFFFC0000346 : 2046                		mov	r4,@-r0
(2)  546/FFFFFFFFC0000348 : 2056                		mov	r5,@-r0
(2)  547/FFFFFFFFC000034A : 2066                		mov	r6,@-r0
(2)  548/FFFFFFFFC000034C : 2076                		mov	r7,@-r0
(2)  549/FFFFFFFFC000034E : 2086                		mov	r8,@-r0
(2)  550/FFFFFFFFC0000350 : 2096                		mov	r9,@-r0
(2)  551/FFFFFFFFC0000352 : 20A6                		mov	r10,@-r0
(2)  552/FFFFFFFFC0000354 : 20B6                		mov	r11,@-r0
(2)  553/FFFFFFFFC0000356 : 20C6                		mov	r12,@-r0
(2)  554/FFFFFFFFC0000358 : 20D6                		mov	r13,@-r0
(2)  555/FFFFFFFFC000035A : 20E6                		mov	r14,@-r0
(2)  556/FFFFFFFFC000035C : A019                		bra	drwtask_return
(2)  557/FFFFFFFFC000035E : E210                		mov	#$10,r2			; Exit for now
(2)  558/FFFFFFFFC0000360 :                     ; otherwise...
(2)  559/FFFFFFFFC0000360 :                     drwsld_updline:
(2)  560/FFFFFFFFC0000360 : 312C                		add	r2,r1			; Next X dst
(2)  561/FFFFFFFFC0000362 : 334C                		add	r4,r3			; Next Y dst
(2)  562/FFFFFFFFC0000364 : 4A10                		dt	r10
(2)  563/FFFFFFFFC0000366 : 8FAE                		bf/s	drwsld_nxtline
(2)  564/FFFFFFFFC0000368 : 7901                		add	#1,r9
(2)  565/FFFFFFFFC000036A :                     
(2)  566/FFFFFFFFC000036A :                     ; ------------------------------------
(2)  567/FFFFFFFFC000036A :                     
(2)  568/FFFFFFFFC000036A :                     drwsld_nextpz:
(2)  569/FFFFFFFFC000036A : 200A                		xor	r0,r0
(2)  570/FFFFFFFFC000036C : 1E00                		mov	r0,@(plypz_type,r14)
(2)  571/FFFFFFFFC000036E : 0009                		nop
(2)  572/FFFFFFFFC0000370 : C603                		mov	@(marsGbl_PlyPzList_End,gbr),r0
(2)  573/FFFFFFFFC0000372 : 7E30                		add	#sizeof_plypz,r14		; Do next piece
(2)  574/FFFFFFFFC0000374 : 3E03                		cmp/ge	r0,r14				; If EOL, go back to the beginning.
(2)  575/FFFFFFFFC0000376 : 8F01                		bf/s	.reset_rd
(2)  576/FFFFFFFFC0000378 : 60E3                		mov	r14,r0				; ** pre-jump copy r14 to r0
(2)  577/FFFFFFFFC000037A : C602                		mov	@(marsGbl_PlyPzList_Start,gbr),r0
(2)  578/FFFFFFFFC000037C :                     .reset_rd:
(2)  579/FFFFFFFFC000037C : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(2)  580/FFFFFFFFC000037E : C50D                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Decrement piece counter
(2)  581/FFFFFFFFC0000380 : 70FF                		add	#-1,r0
(2)  582/FFFFFFFFC0000382 : C10D                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2)  583/FFFFFFFFC0000384 : A005                		bra	drwtask_return
(2)  584/FFFFFFFFC0000386 : E210                		mov	#$10,r2				; Timer for next watchdog
(2)  585/FFFFFFFFC0000388 :                     
(2)  586/FFFFFFFFC0000388 :                     ; --------------------------------
(2)  587/FFFFFFFFC0000388 :                     ; Task $00
(2)  588/FFFFFFFFC0000388 :                     ; --------------------------------
(2)  589/FFFFFFFFC0000388 :                     
(2)  590/FFFFFFFFC0000388 :                     slvplgn_00:
(2)  591/FFFFFFFFC0000388 : 2F26                		mov	r2,@-r15
(2)  592/FFFFFFFFC000038A : E000                		mov	#0,r0
(2)  593/FFFFFFFFC000038C : C108                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)  594/FFFFFFFFC000038E : A00E                		bra	drwtask_exit
(2)  595/FFFFFFFFC0000390 : E210                		mov	#$10,r2
(2)  596/FFFFFFFFC0000392 :                     
(2)  597/FFFFFFFFC0000392 :                     drwtask_return:
(2)  598/FFFFFFFFC0000392 : 4F06                		lds	@r15+,mach
(2)  599/FFFFFFFFC0000394 : 4F16                		lds	@r15+,macl
(2)  600/FFFFFFFFC0000396 : 6EF6                		mov	@r15+,r14
(2)  601/FFFFFFFFC0000398 : 6DF6                		mov	@r15+,r13
(2)  602/FFFFFFFFC000039A : 6CF6                		mov	@r15+,r12
(2)  603/FFFFFFFFC000039C : 6BF6                		mov	@r15+,r11
(2)  604/FFFFFFFFC000039E : 6AF6                		mov	@r15+,r10
(2)  605/FFFFFFFFC00003A0 : 69F6                		mov	@r15+,r9
(2)  606/FFFFFFFFC00003A2 : 68F6                		mov	@r15+,r8
(2)  607/FFFFFFFFC00003A4 : 67F6                		mov	@r15+,r7
(2)  608/FFFFFFFFC00003A6 : 66F6                		mov	@r15+,r6
(2)  609/FFFFFFFFC00003A8 : 65F6                		mov	@r15+,r5
(2)  610/FFFFFFFFC00003AA : 64F6                		mov	@r15+,r4
(2)  611/FFFFFFFFC00003AC : 63F6                		mov	@r15+,r3
(2)  612/FFFFFFFFC00003AE :                     drwtask_exit:
(2)  613/FFFFFFFFC00003AE : 9116                		mov.w   #$FE80,r1
(2)  614/FFFFFFFFC00003B0 : 9016                		mov.w   #$A518,r0	; OFF
(2)  615/FFFFFFFFC00003B2 : 2101                		mov.w   r0,@r1
(2)  616/FFFFFFFFC00003B4 : CB20                		or      #$20,r0		; ON
(2)  617/FFFFFFFFC00003B6 : 2101                		mov.w   r0,@r1
(2)  618/FFFFFFFFC00003B8 : 9013                		mov.w   #$5A00,r0	; r2 - Timer
(2)  619/FFFFFFFFC00003BA : 202B                		or	r2,r0
(2)  620/FFFFFFFFC00003BC : 2101                		mov.w   r0,@r1
(2)  621/FFFFFFFFC00003BE : 62F6                		mov	@r15+,r2
(2)  622/FFFFFFFFC00003C0 : 000B                		rts
(2)  623/FFFFFFFFC00003C2 : 0009                		nop
(2)  624/FFFFFFFFC00003C4 :                     		align 4
(2)  625/FFFFFFFFC00003C4 : C000 079C 2402 0200 		ltorg
                    2000 4100 C000 0770 
                    C000 0770 3FFF 00E0 
                    0140 FE80 A518 5A00 
(2)  626/FFFFFFFFC00003E4 :                     
(2)  627/FFFFFFFFC00003E4 :                     ; ====================================================================
(2)  628/FFFFFFFFC00003E4 :                     ; ----------------------------------------------------------------
(2)  629/FFFFFFFFC00003E4 :                     ; 3D Rendering routines
(2)  630/FFFFFFFFC00003E4 :                     ; ----------------------------------------------------------------
(2)  631/FFFFFFFFC00003E4 :                     
(2)  632/FFFFFFFFC00003E4 :                     ; ------------------------------------------------
(2)  633/FFFFFFFFC00003E4 :                     ; MarsVideo_SlicePlgn
(2)  634/FFFFFFFFC00003E4 :                     ;
(2)  635/FFFFFFFFC00003E4 :                     ; This slices polygons into pieces.
(2)  636/FFFFFFFFC00003E4 :                     ;
(2)  637/FFFFFFFFC00003E4 :                     ; Input:
(2)  638/FFFFFFFFC00003E4 :                     ; r14 | Polygon data
(2)  639/FFFFFFFFC00003E4 :                     ; ------------------------------------------------
(2)  640/FFFFFFFFC00003E4 :                     
(2)  641/FFFFFFFFC00003E4 :                     		align 4
(2)  642/FFFFFFFFC00003E4 :                     MarsVideo_SlicePlgn:
(2)  643/FFFFFFFFC00003E4 : 4F22                		sts	pr,@-r15
(2)  644/FFFFFFFFC00003E6 : DD38                		mov	#Cach_DDA_Last,r13		; r13 - DDA last point
(2)  645/FFFFFFFFC00003E8 : DC38                		mov	#Cach_DDA_Top,r12		; r12 - DDA first point
(2)  646/FFFFFFFFC00003EA : 50E0                		mov	@(polygn_type,r14),r0		; Read type settings
(2)  647/FFFFFFFFC00003EC : 4029                		shlr16	r0
(2)  648/FFFFFFFFC00003EE : 4019                		shlr8	r0
(2)  649/FFFFFFFFC00003F0 : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2)  650/FFFFFFFFC00003F2 : 8B00                		bf	.tringl
(2)  651/FFFFFFFFC00003F4 : 7D08                		add	#8,r13				; If quad: add 8
(2)  652/FFFFFFFFC00003F6 :                     .tringl:
(2)  653/FFFFFFFFC00003F6 : 61E3                		mov	r14,r1
(2)  654/FFFFFFFFC00003F8 : 62C3                		mov	r12,r2
(2)  655/FFFFFFFFC00003FA : D335                		mov	#Cach_DDA_Src,r3
(2)  656/FFFFFFFFC00003FC : 7108                		add	#polygn_points,r1
(2)  657/FFFFFFFFC00003FE :                     
(2)  658/FFFFFFFFC00003FE :                     	; ----------------------------------------
(2)  659/FFFFFFFFC00003FE :                     	; Polygon points
(2)  660/FFFFFFFFC00003FE :                     	; ----------------------------------------
(2)  661/FFFFFFFFC00003FE :                     
(2)  662/FFFFFFFFC00003FE :                     	; TODO: make these w/h halfs customizable
(2)  663/FFFFFFFFC00003FE : E804                		mov	#4,r8			; Copy polygon points Cache's DDA
(2)  664/FFFFFFFFC0000400 : 966E                		mov	#SCREEN_WIDTH/2,r6
(2)  665/FFFFFFFFC0000402 : E770                		mov	#SCREEN_HEIGHT/2,r7
(2)  666/FFFFFFFFC0000404 :                     .setpnts:
(2)  667/FFFFFFFFC0000404 : 6416                		mov	@r1+,r4			; Get X
(2)  668/FFFFFFFFC0000406 : 6516                		mov	@r1+,r5			; Get Y
(2)  669/FFFFFFFFC0000408 : 346C                		add	r6,r4			; X + width
(2)  670/FFFFFFFFC000040A : 357C                		add	r7,r5			; Y + height
(2)  671/FFFFFFFFC000040C : 2242                		mov	r4,@r2
(2)  672/FFFFFFFFC000040E : 1251                		mov	r5,@(4,r2)
(2)  673/FFFFFFFFC0000410 : 4810                		dt	r8
(2)  674/FFFFFFFFC0000412 : 8FF7                		bf/s	.setpnts
(2)  675/FFFFFFFFC0000414 : 7208                		add	#8,r2
(2)  676/FFFFFFFFC0000416 : E804                		mov	#4,r8			; Copy texture source points to Cache
(2)  677/FFFFFFFFC0000418 :                     .src_pnts:
(2)  678/FFFFFFFFC0000418 : 6415                		mov.w	@r1+,r4
(2)  679/FFFFFFFFC000041A : 6515                		mov.w	@r1+,r5
(2)  680/FFFFFFFFC000041C : 2342                		mov	r4,@r3
(2)  681/FFFFFFFFC000041E : 1351                		mov	r5,@(4,r3)
(2)  682/FFFFFFFFC0000420 : 4810                		dt	r8
(2)  683/FFFFFFFFC0000422 : 8FF9                		bf/s	.src_pnts
(2)  684/FFFFFFFFC0000424 : 7308                		add	#8,r3
(2)  685/FFFFFFFFC0000426 :                     
(2)  686/FFFFFFFFC0000426 :                     	; Search for the lowest Y and highest Y
(2)  687/FFFFFFFFC0000426 :                     	; r10 - Top Y
(2)  688/FFFFFFFFC0000426 :                     	; r11 - Bottom Y
(2)  689/FFFFFFFFC0000426 :                     .start_math:
(2)  690/FFFFFFFFC0000426 : E903                		mov	#3,r9
(2)  691/FFFFFFFFC0000428 : C840                		tst	#PLGN_TRI,r0		; PLGN_TRI set?
(2)  692/FFFFFFFFC000042A : 8B00                		bf	.ytringl
(2)  693/FFFFFFFFC000042C : 7901                		add	#1,r9
(2)  694/FFFFFFFFC000042E :                     .ytringl:
(2)  695/FFFFFFFFC000042E : DA29                		mov	#$7FFFFFFF,r10
(2)  696/FFFFFFFFC0000430 : EBFF                		mov	#-1,r11			; $FFFFFFFF
(2)  697/FFFFFFFFC0000432 : 67C3                		mov 	r12,r7
(2)  698/FFFFFFFFC0000434 : 68C3                		mov	r12,r8
(2)  699/FFFFFFFFC0000436 :                     .find_top:
(2)  700/FFFFFFFFC0000436 : 5071                		mov	@(4,r7),r0
(2)  701/FFFFFFFFC0000438 : 30B7                		cmp/gt	r11,r0
(2)  702/FFFFFFFFC000043A : 8B00                		bf	.is_low
(2)  703/FFFFFFFFC000043C : 6B03                		mov 	r0,r11
(2)  704/FFFFFFFFC000043E :                     .is_low:
(2)  705/FFFFFFFFC000043E : 5081                		mov	@(4,r8),r0
(2)  706/FFFFFFFFC0000440 : 30A7                		cmp/gt	r10,r0
(2)  707/FFFFFFFFC0000442 : 8901                		bt	.is_high
(2)  708/FFFFFFFFC0000444 : 6A03                		mov 	r0,r10
(2)  709/FFFFFFFFC0000446 : 6183                		mov	r8,r1
(2)  710/FFFFFFFFC0000448 :                     .is_high:
(2)  711/FFFFFFFFC0000448 : 7708                		add 	#8,r7
(2)  712/FFFFFFFFC000044A : 4910                		dt	r9
(2)  713/FFFFFFFFC000044C : 8FF3                		bf/s	.find_top
(2)  714/FFFFFFFFC000044E : 7808                		add	#8,r8
(2)  715/FFFFFFFFC0000450 : 3AB3                		cmp/ge	r11,r10			; Top larger than Bottom?
(2)  716/FFFFFFFFC0000452 : 8935                		bt	.exit
(2)  717/FFFFFFFFC0000454 : 4B15                		cmp/pl	r11			; Bottom < 0?
(2)  718/FFFFFFFFC0000456 : 8B33                		bf	.exit
(2)  719/FFFFFFFFC0000458 : 9043                		mov	#SCREEN_HEIGHT,r0	; Top > 224?
(2)  720/FFFFFFFFC000045A : 3A03                		cmp/ge	r0,r10
(2)  721/FFFFFFFFC000045C : 8930                		bt	.exit
(2)  722/FFFFFFFFC000045E :                     
(2)  723/FFFFFFFFC000045E :                     	; r2 - Left DDA READ pointer
(2)  724/FFFFFFFFC000045E :                     	; r3 - Right DDA READ pointer
(2)  725/FFFFFFFFC000045E :                     	; r4 - Left X
(2)  726/FFFFFFFFC000045E :                     	; r5 - Left DX
(2)  727/FFFFFFFFC000045E :                     	; r6 - Right X
(2)  728/FFFFFFFFC000045E :                     	; r7 - Right DX
(2)  729/FFFFFFFFC000045E :                     	; r8 - Left width
(2)  730/FFFFFFFFC000045E :                     	; r9 - Right width
(2)  731/FFFFFFFFC000045E :                     	; r10 - Top Y, gets updated after calling put_piece
(2)  732/FFFFFFFFC000045E :                     	; r11 - Bottom Y
(2)  733/FFFFFFFFC000045E :                     	; r12 - First DST point
(2)  734/FFFFFFFFC000045E :                     	; r13 - Last DST point
(2)  735/FFFFFFFFC000045E : 6213                		mov	r1,r2				; r2 - X left to process
(2)  736/FFFFFFFFC0000460 : 6313                		mov	r1,r3				; r3 - X right to process
(2)  737/FFFFFFFFC0000462 : B03F                		bsr	set_left
(2)  738/FFFFFFFFC0000464 : 0009                		nop
(2)  739/FFFFFFFFC0000466 : B081                		bsr	set_right
(2)  740/FFFFFFFFC0000468 : 0009                		nop
(2)  741/FFFFFFFFC000046A :                     .next_pz:
(2)  742/FFFFFFFFC000046A : 903A                		mov	#SCREEN_HEIGHT,r0		; Current Y > 224?
(2)  743/FFFFFFFFC000046C : 3A07                		cmp/gt	r0,r10
(2)  744/FFFFFFFFC000046E : 8927                		bt	.exit
(2)  745/FFFFFFFFC0000470 : 3AB3                		cmp/ge	r11,r10				; Y top => Y bottom?
(2)  746/FFFFFFFFC0000472 : 8925                		bt	.exit
(2)  747/FFFFFFFFC0000474 :                     
(2)  748/FFFFFFFFC0000474 : C601                		mov	@(marsGbl_PlyPzList_W,gbr),r0	; r1 - Current piece to WRITE
(2)  749/FFFFFFFFC0000476 : 6103                		mov	r0,r1
(2)  750/FFFFFFFFC0000478 : 5821                		mov	@(4,r2),r8
(2)  751/FFFFFFFFC000047A : 5931                		mov	@(4,r3),r9
(2)  752/FFFFFFFFC000047C : 38A8                		sub	r10,r8
(2)  753/FFFFFFFFC000047E : 39A8                		sub	r10,r9
(2)  754/FFFFFFFFC0000480 : 6083                		mov	r8,r0
(2)  755/FFFFFFFFC0000482 : 3987                		cmp/gt	r8,r9
(2)  756/FFFFFFFFC0000484 : 8900                		bt	.lefth
(2)  757/FFFFFFFFC0000486 : 6093                		mov	r9,r0
(2)  758/FFFFFFFFC0000488 :                     .lefth:
(2)  759/FFFFFFFFC0000488 : D013                		mov	#Cach_Bkup_SPZ,r0
(2)  760/FFFFFFFFC000048A : 2026                		mov	r2,@-r0
(2)  761/FFFFFFFFC000048C : 2036                		mov	r3,@-r0
(2)  762/FFFFFFFFC000048E : 2056                		mov	r5,@-r0
(2)  763/FFFFFFFFC0000490 : 2076                		mov	r7,@-r0
(2)  764/FFFFFFFFC0000492 : 2086                		mov	r8,@-r0
(2)  765/FFFFFFFFC0000494 : 2096                		mov	r9,@-r0
(2)  766/FFFFFFFFC0000496 : 20B6                		mov	r11,@-r0
(2)  767/FFFFFFFFC0000498 : B0AC                		bsr	put_piece
(2)  768/FFFFFFFFC000049A : 0009                		nop
(2)  769/FFFFFFFFC000049C : D00F                		mov	#Cach_Bkup_LPZ,r0
(2)  770/FFFFFFFFC000049E : 6B06                		mov	@r0+,r11
(2)  771/FFFFFFFFC00004A0 : 6906                		mov	@r0+,r9
(2)  772/FFFFFFFFC00004A2 : 6806                		mov	@r0+,r8
(2)  773/FFFFFFFFC00004A4 : 6706                		mov	@r0+,r7
(2)  774/FFFFFFFFC00004A6 : 6506                		mov	@r0+,r5
(2)  775/FFFFFFFFC00004A8 : 6306                		mov	@r0+,r3
(2)  776/FFFFFFFFC00004AA : 6206                		mov	@r0+,r2
(2)  777/FFFFFFFFC00004AC :                     	; X direction update
(2)  778/FFFFFFFFC00004AC : 3897                		cmp/gt	r9,r8				; Left width > Right width?
(2)  779/FFFFFFFFC00004AE : 8B03                		bf	.lefth2
(2)  780/FFFFFFFFC00004B0 : B05C                		bsr	set_right
(2)  781/FFFFFFFFC00004B2 : 0009                		nop
(2)  782/FFFFFFFFC00004B4 : AFD9                		bra	.next_pz
(2)  783/FFFFFFFFC00004B6 : 0009                		nop
(2)  784/FFFFFFFFC00004B8 :                     .lefth2:
(2)  785/FFFFFFFFC00004B8 : B014                		bsr	set_left
(2)  786/FFFFFFFFC00004BA : 0009                		nop
(2)  787/FFFFFFFFC00004BC : AFD5                		bra	.next_pz
(2)  788/FFFFFFFFC00004BE : 0009                		nop
(2)  789/FFFFFFFFC00004C0 :                     .exit:
(2)  790/FFFFFFFFC00004C0 : 4F26                		lds	@r15+,pr
(2)  791/FFFFFFFFC00004C2 : 000B                		rts
(2)  792/FFFFFFFFC00004C4 : 0009                		nop
(2)  793/FFFFFFFFC00004C6 :                     		align 4
(2)  794/FFFFFFFFC00004C8 : C000 06E8 C000 06D8 		ltorg
                    C000 06F8 7FFF FFFF 
                    C000 07B8 C000 079C 
                    00A0 00E0           
(2)  795/FFFFFFFFC00004E4 :                     
(2)  796/FFFFFFFFC00004E4 :                     		align 4
(2)  797/FFFFFFFFC00004E4 :                     set_left:
(2)  798/FFFFFFFFC00004E4 : 6823                		mov	r2,r8				; Get a copy of Xleft pointer
(2)  799/FFFFFFFFC00004E6 : 7820                		add	#$20,r8				; To read Texture SRC points
(2)  800/FFFFFFFFC00004E8 : 6482                		mov	@r8,r4
(2)  801/FFFFFFFFC00004EA : 5581                		mov	@(4,r8),r5
(2)  802/FFFFFFFFC00004EC : D870                		mov	#Cach_DDA_Src_L,r8
(2)  803/FFFFFFFFC00004EE : 6043                		mov	r4,r0
(2)  804/FFFFFFFFC00004F0 : 4028                		shll16	r0
(2)  805/FFFFFFFFC00004F2 : 2802                		mov	r0,@r8
(2)  806/FFFFFFFFC00004F4 : 6053                		mov	r5,r0
(2)  807/FFFFFFFFC00004F6 : 4028                		shll16	r0
(2)  808/FFFFFFFFC00004F8 : 1802                		mov	r0,@(8,r8)
(2)  809/FFFFFFFFC00004FA : 6122                		mov	@r2,r1
(2)  810/FFFFFFFFC00004FC : 5821                		mov	@(4,r2),r8
(2)  811/FFFFFFFFC00004FE : 7208                		add	#8,r2
(2)  812/FFFFFFFFC0000500 : 32D7                		cmp/gt	r13,r2
(2)  813/FFFFFFFFC0000502 : 8B00                		bf	.lft_ok
(2)  814/FFFFFFFFC0000504 : 62C3                		mov 	r12,r2
(2)  815/FFFFFFFFC0000506 :                     .lft_ok:
(2)  816/FFFFFFFFC0000506 : 5021                		mov	@(4,r2),r0
(2)  817/FFFFFFFFC0000508 : 3088                		sub	r8,r0
(2)  818/FFFFFFFFC000050A : 8800                		cmp/eq	#0,r0
(2)  819/FFFFFFFFC000050C : 89EA                		bt	set_left
(2)  820/FFFFFFFFC000050E : 4011                		cmp/pz	r0
(2)  821/FFFFFFFFC0000510 : 8B29                		bf	.lft_skip
(2)  822/FFFFFFFFC0000512 :                     
(2)  823/FFFFFFFFC0000512 : 400A                		lds	r0,mach
(2)  824/FFFFFFFFC0000514 : 6823                		mov	r2,r8
(2)  825/FFFFFFFFC0000516 : 7820                		add	#$20,r8
(2)  826/FFFFFFFFC0000518 : 6082                		mov 	@r8,r0
(2)  827/FFFFFFFFC000051A : 3048                		sub 	r4,r0
(2)  828/FFFFFFFFC000051C : 5481                		mov 	@(4,r8),r4
(2)  829/FFFFFFFFC000051E : 3458                		sub 	r5,r4
(2)  830/FFFFFFFFC0000520 : 6503                		mov	r0,r5
(2)  831/FFFFFFFFC0000522 : 4418                		shll8	r4
(2)  832/FFFFFFFFC0000524 : 4518                		shll8	r5
(2)  833/FFFFFFFFC0000526 :                     
(2)  834/FFFFFFFFC0000526 : E001                		mov	#1,r0
(2)  835/FFFFFFFFC0000528 : C10B                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2)  836/FFFFFFFFC000052A : 080A                		sts	mach,r8
(2)  837/FFFFFFFFC000052C : 90D0                		mov	#_JR,r0
(2)  838/FFFFFFFFC000052E : 2082                		mov	r8,@r0
(2)  839/FFFFFFFFC0000530 : 1051                		mov	r5,@(4,r0)
(2)  840/FFFFFFFFC0000532 : 0009                		nop
(2)  841/FFFFFFFFC0000534 : 5501                		mov	@(4,r0),r5
(2)  842/FFFFFFFFC0000536 : 90CB                		mov	#_JR,r0
(2)  843/FFFFFFFFC0000538 : 2082                		mov	r8,@r0
(2)  844/FFFFFFFFC000053A : 1041                		mov	r4,@(4,r0)
(2)  845/FFFFFFFFC000053C : 0009                		nop
(2)  846/FFFFFFFFC000053E : 5401                		mov	@(4,r0),r4
(2)  847/FFFFFFFFC0000540 : 4418                		shll8	r4
(2)  848/FFFFFFFFC0000542 : 4518                		shll8	r5
(2)  849/FFFFFFFFC0000544 : D05B                		mov	#Cach_DDA_Src_L+$C,r0
(2)  850/FFFFFFFFC0000546 : 2042                		mov	r4,@r0
(2)  851/FFFFFFFFC0000548 : D05B                		mov	#Cach_DDA_Src_L+4,r0
(2)  852/FFFFFFFFC000054A : 2052                		mov	r5,@r0
(2)  853/FFFFFFFFC000054C : 6522                		mov	@r2,r5
(2)  854/FFFFFFFFC000054E : 3518                		sub 	r1,r5
(2)  855/FFFFFFFFC0000550 : 6413                		mov 	r1,r4
(2)  856/FFFFFFFFC0000552 : 4518                		shll8	r5
(2)  857/FFFFFFFFC0000554 : 4428                		shll16	r4
(2)  858/FFFFFFFFC0000556 : 90BB                		mov	#_JR,r0
(2)  859/FFFFFFFFC0000558 : 2082                		mov	r8,@r0
(2)  860/FFFFFFFFC000055A : 1051                		mov	r5,@(4,r0)
(2)  861/FFFFFFFFC000055C : 0009                		nop
(2)  862/FFFFFFFFC000055E : 5501                		mov	@(4,r0),r5
(2)  863/FFFFFFFFC0000560 : 4518                		shll8	r5
(2)  864/FFFFFFFFC0000562 : E000                		mov	#0,r0
(2)  865/FFFFFFFFC0000564 : C10B                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2)  866/FFFFFFFFC0000566 :                     .lft_skip:
(2)  867/FFFFFFFFC0000566 : 000B                		rts
(2)  868/FFFFFFFFC0000568 : 0009                		nop
(2)  869/FFFFFFFFC000056A :                     		align 4
(2)  870/FFFFFFFFC000056C :                     
(2)  871/FFFFFFFFC000056C :                     ; --------------------------------------------------------
(2)  872/FFFFFFFFC000056C :                     
(2)  873/FFFFFFFFC000056C :                     set_right:
(2)  874/FFFFFFFFC000056C : 6933                		mov	r3,r9
(2)  875/FFFFFFFFC000056E : 7920                		add	#$20,r9
(2)  876/FFFFFFFFC0000570 : 6692                		mov	@r9,r6
(2)  877/FFFFFFFFC0000572 : 5791                		mov	@(4,r9),r7
(2)  878/FFFFFFFFC0000574 : D951                		mov	#Cach_DDA_Src_R,r9
(2)  879/FFFFFFFFC0000576 : 6063                		mov	r6,r0
(2)  880/FFFFFFFFC0000578 : 4028                		shll16	r0
(2)  881/FFFFFFFFC000057A : 2902                		mov	r0,@r9
(2)  882/FFFFFFFFC000057C : 6073                		mov	r7,r0
(2)  883/FFFFFFFFC000057E : 4028                		shll16	r0
(2)  884/FFFFFFFFC0000580 : 1902                		mov	r0,@(8,r9)
(2)  885/FFFFFFFFC0000582 :                     
(2)  886/FFFFFFFFC0000582 : 6132                		mov	@r3,r1
(2)  887/FFFFFFFFC0000584 : 5931                		mov	@(4,r3),r9
(2)  888/FFFFFFFFC0000586 : 73F8                		add	#-8,r3
(2)  889/FFFFFFFFC0000588 : 33C3                		cmp/ge	r12,r3
(2)  890/FFFFFFFFC000058A : 8900                		bt	.rgt_ok
(2)  891/FFFFFFFFC000058C : 63D3                		mov 	r13,r3
(2)  892/FFFFFFFFC000058E :                     .rgt_ok:
(2)  893/FFFFFFFFC000058E : 5031                		mov	@(4,r3),r0
(2)  894/FFFFFFFFC0000590 : 3098                		sub	r9,r0
(2)  895/FFFFFFFFC0000592 : 8800                		cmp/eq	#0,r0
(2)  896/FFFFFFFFC0000594 : 89EA                		bt	set_right
(2)  897/FFFFFFFFC0000596 : 4011                		cmp/pz	r0
(2)  898/FFFFFFFFC0000598 : 8B29                		bf	.rgt_skip
(2)  899/FFFFFFFFC000059A : 400A                		lds	r0,mach
(2)  900/FFFFFFFFC000059C : 6933                		mov	r3,r9
(2)  901/FFFFFFFFC000059E : 7920                		add	#$20,r9
(2)  902/FFFFFFFFC00005A0 : 6092                		mov 	@r9,r0
(2)  903/FFFFFFFFC00005A2 : 3068                		sub 	r6,r0
(2)  904/FFFFFFFFC00005A4 : 5691                		mov 	@(4,r9),r6
(2)  905/FFFFFFFFC00005A6 : 3678                		sub 	r7,r6
(2)  906/FFFFFFFFC00005A8 : 6703                		mov	r0,r7
(2)  907/FFFFFFFFC00005AA : 4618                		shll8	r6
(2)  908/FFFFFFFFC00005AC : 4718                		shll8	r7
(2)  909/FFFFFFFFC00005AE :                     
(2)  910/FFFFFFFFC00005AE : E001                		mov	#1,r0
(2)  911/FFFFFFFFC00005B0 : C10B                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2)  912/FFFFFFFFC00005B2 : 090A                		sts	mach,r9
(2)  913/FFFFFFFFC00005B4 : 908C                		mov	#_JR,r0
(2)  914/FFFFFFFFC00005B6 : 2092                		mov	r9,@r0
(2)  915/FFFFFFFFC00005B8 : 1071                		mov	r7,@(4,r0)
(2)  916/FFFFFFFFC00005BA : 0009                		nop
(2)  917/FFFFFFFFC00005BC : 5701                		mov	@(4,r0),r7
(2)  918/FFFFFFFFC00005BE : 9087                		mov	#_JR,r0
(2)  919/FFFFFFFFC00005C0 : 2092                		mov	r9,@r0
(2)  920/FFFFFFFFC00005C2 : 1061                		mov	r6,@(4,r0)
(2)  921/FFFFFFFFC00005C4 : 0009                		nop
(2)  922/FFFFFFFFC00005C6 : 5601                		mov	@(4,r0),r6
(2)  923/FFFFFFFFC00005C8 : 4618                		shll8	r6
(2)  924/FFFFFFFFC00005CA : 4718                		shll8	r7
(2)  925/FFFFFFFFC00005CC : D03C                		mov	#Cach_DDA_Src_R+4,r0
(2)  926/FFFFFFFFC00005CE : 2072                		mov	r7,@r0
(2)  927/FFFFFFFFC00005D0 : D03C                		mov	#Cach_DDA_Src_R+$C,r0
(2)  928/FFFFFFFFC00005D2 : 2062                		mov	r6,@r0
(2)  929/FFFFFFFFC00005D4 : 6732                		mov	@r3,r7
(2)  930/FFFFFFFFC00005D6 : 3718                		sub 	r1,r7
(2)  931/FFFFFFFFC00005D8 : 6613                		mov 	r1,r6
(2)  932/FFFFFFFFC00005DA : 4628                		shll16	r6
(2)  933/FFFFFFFFC00005DC : 4718                		shll8	r7
(2)  934/FFFFFFFFC00005DE : 9077                		mov	#_JR,r0
(2)  935/FFFFFFFFC00005E0 : 2092                		mov	r9,@r0
(2)  936/FFFFFFFFC00005E2 : 1071                		mov	r7,@(4,r0)
(2)  937/FFFFFFFFC00005E4 : 0009                		nop
(2)  938/FFFFFFFFC00005E6 : 5701                		mov	@(4,r0),r7
(2)  939/FFFFFFFFC00005E8 : 4718                		shll8	r7
(2)  940/FFFFFFFFC00005EA : E000                		mov	#0,r0
(2)  941/FFFFFFFFC00005EC : C10B                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2)  942/FFFFFFFFC00005EE :                     .rgt_skip:
(2)  943/FFFFFFFFC00005EE : 000B                		rts
(2)  944/FFFFFFFFC00005F0 : 0009                		nop
(2)  945/FFFFFFFFC00005F2 :                     		align 4
(2)  946/FFFFFFFFC00005F4 :                     
(2)  947/FFFFFFFFC00005F4 :                     ; --------------------------------------------------------
(2)  948/FFFFFFFFC00005F4 :                     
(2)  949/FFFFFFFFC00005F4 :                     	; r2
(2)  950/FFFFFFFFC00005F4 :                     	; r3
(2)  951/FFFFFFFFC00005F4 :                     	; r4 - Left X
(2)  952/FFFFFFFFC00005F4 :                     	; r5
(2)  953/FFFFFFFFC00005F4 :                     	; r6 - Right X
(2)  954/FFFFFFFFC00005F4 :                     	; r7
(2)  955/FFFFFFFFC00005F4 :                     	; r8
(2)  956/FFFFFFFFC00005F4 :                     	; r9
(2)  957/FFFFFFFFC00005F4 :                     	; r10 - Top Y, gets updated after calling put_piece
(2)  958/FFFFFFFFC00005F4 :                     
(2)  959/FFFFFFFFC00005F4 :                     put_piece:
(2)  960/FFFFFFFFC00005F4 : E001                		mov	#1,r0
(2)  961/FFFFFFFFC00005F6 : C109                		mov.w	r0,@(marsGbl_WdgHold,gbr)	; Tell watchdog we are mid-write
(2)  962/FFFFFFFFC00005F8 : 5821                		mov	@(4,r2),r8	; Left DDA's Y
(2)  963/FFFFFFFFC00005FA : 5931                		mov	@(4,r3),r9	; Right DDA's Y
(2)  964/FFFFFFFFC00005FC : 38A8                		sub	r10,r8
(2)  965/FFFFFFFFC00005FE : 39A8                		sub	r10,r9
(2)  966/FFFFFFFFC0000600 : 3897                		cmp/gt	r9,r8
(2)  967/FFFFFFFFC0000602 : 8900                		bt	.lefth
(2)  968/FFFFFFFFC0000604 : 6983                		mov	r8,r9
(2)  969/FFFFFFFFC0000606 :                     .lefth:
(2)  970/FFFFFFFFC0000606 : 6843                		mov	r4,r8
(2)  971/FFFFFFFFC0000608 : 6063                		mov	r6,r0
(2)  972/FFFFFFFFC000060A : 4829                		shlr16	r8
(2)  973/FFFFFFFFC000060C : 208D                		xtrct	r8,r0
(2)  974/FFFFFFFFC000060E : 1103                		mov	r0,@(plypz_xl,r1)
(2)  975/FFFFFFFFC0000610 : 1156                		mov 	r5,@(plypz_xl_dx,r1)
(2)  976/FFFFFFFFC0000612 : 0597                		mul	r9,r5
(2)  977/FFFFFFFFC0000614 : 1177                		mov 	r7,@(plypz_xr_dx,r1)
(2)  978/FFFFFFFFC0000616 : 021A                		sts	macl,r2
(2)  979/FFFFFFFFC0000618 : 0797                		mul	r9,r7
(2)  980/FFFFFFFFC000061A : 031A                		sts	macl,r3
(2)  981/FFFFFFFFC000061C : 342C                		add 	r2,r4
(2)  982/FFFFFFFFC000061E : 363C                		add	r3,r6
(2)  983/FFFFFFFFC0000620 : 62A3                		mov	r10,r2
(2)  984/FFFFFFFFC0000622 : 3A9C                		add	r9,r10
(2)  985/FFFFFFFFC0000624 : 6BA3                		mov	r10,r11
(2)  986/FFFFFFFFC0000626 : 4228                		shll16	r2
(2)  987/FFFFFFFFC0000628 : 2B2B                		or	r2,r11
(2)  988/FFFFFFFFC000062A : 11B2                		mov	r11,@(plypz_ytb,r1)
(2)  989/FFFFFFFFC000062C :                     
(2)  990/FFFFFFFFC000062C :                     	; r9 - Y multiply
(2)  991/FFFFFFFFC000062C :                     	;
(2)  992/FFFFFFFFC000062C :                     	; free:
(2)  993/FFFFFFFFC000062C :                     	; r2,r3,r5,r7,r8,r11
(2)  994/FFFFFFFFC000062C : D826                		mov	#Cach_DDA_Src_L,r8
(2)  995/FFFFFFFFC000062E : D727                		mov	#Cach_DDA_Src_R,r7
(2)  996/FFFFFFFFC0000630 : 6282                		mov	@r8,r2
(2)  997/FFFFFFFFC0000632 : 6372                		mov	@r7,r3
(2)  998/FFFFFFFFC0000634 : 6523                		mov	r2,r5
(2)  999/FFFFFFFFC0000636 : 6033                		mov	r3,r0
(2) 1000/FFFFFFFFC0000638 : 4529                		shlr16	r5
(2) 1001/FFFFFFFFC000063A : 205D                		xtrct	r5,r0
(2) 1002/FFFFFFFFC000063C : 1104                		mov	r0,@(plypz_src_xl,r1)
(2) 1003/FFFFFFFFC000063E :                     ; 		mov	r2,@(plypz_src_xl,r1)
(2) 1004/FFFFFFFFC000063E :                     ; 		mov	r3,@(plypz_src_xr,r1)
(2) 1005/FFFFFFFFC000063E :                     
(2) 1006/FFFFFFFFC000063E : 5081                		mov	@(4,r8),r0
(2) 1007/FFFFFFFFC0000640 : 5571                		mov	@(4,r7),r5
(2) 1008/FFFFFFFFC0000642 : 1108                		mov	r0,@(plypz_src_xl_dx,r1)
(2) 1009/FFFFFFFFC0000644 : 1159                		mov	r5,@(plypz_src_xr_dx,r1)
(2) 1010/FFFFFFFFC0000646 : 0097                		mul	r9,r0
(2) 1011/FFFFFFFFC0000648 : 001A                		sts	macl,r0
(2) 1012/FFFFFFFFC000064A : 0597                		mul	r9,r5
(2) 1013/FFFFFFFFC000064C : 051A                		sts	macl,r5
(2) 1014/FFFFFFFFC000064E : 320C                		add 	r0,r2
(2) 1015/FFFFFFFFC0000650 : 335C                		add	r5,r3
(2) 1016/FFFFFFFFC0000652 : 2822                		mov	r2,@r8
(2) 1017/FFFFFFFFC0000654 : 2732                		mov	r3,@r7
(2) 1018/FFFFFFFFC0000656 :                     
(2) 1019/FFFFFFFFC0000656 : 7808                		add	#8,r8	; Go to Y/DY
(2) 1020/FFFFFFFFC0000658 : 7708                		add	#8,r7
(2) 1021/FFFFFFFFC000065A : 6282                		mov	@r8,r2
(2) 1022/FFFFFFFFC000065C : 6372                		mov	@r7,r3
(2) 1023/FFFFFFFFC000065E : 6523                		mov	r2,r5
(2) 1024/FFFFFFFFC0000660 : 6033                		mov	r3,r0
(2) 1025/FFFFFFFFC0000662 : 4529                		shlr16	r5
(2) 1026/FFFFFFFFC0000664 : 205D                		xtrct	r5,r0
(2) 1027/FFFFFFFFC0000666 : 1105                		mov	r0,@(plypz_src_yl,r1)
(2) 1028/FFFFFFFFC0000668 :                     ; 		mov	r2,@(plypz_src_yl,r1)
(2) 1029/FFFFFFFFC0000668 :                     ; 		mov	r3,@(plypz_src_yr,r1)
(2) 1030/FFFFFFFFC0000668 :                     
(2) 1031/FFFFFFFFC0000668 : 5081                		mov	@(4,r8),r0
(2) 1032/FFFFFFFFC000066A : 5571                		mov	@(4,r7),r5
(2) 1033/FFFFFFFFC000066C : 110A                		mov	r0,@(plypz_src_yl_dx,r1)
(2) 1034/FFFFFFFFC000066E : 115B                		mov	r5,@(plypz_src_yr_dx,r1)
(2) 1035/FFFFFFFFC0000670 : 0097                		mul	r9,r0
(2) 1036/FFFFFFFFC0000672 : 001A                		sts	macl,r0
(2) 1037/FFFFFFFFC0000674 : 0597                		mul	r9,r5
(2) 1038/FFFFFFFFC0000676 : 051A                		sts	macl,r5
(2) 1039/FFFFFFFFC0000678 : 320C                		add 	r0,r2
(2) 1040/FFFFFFFFC000067A : 335C                		add	r5,r3
(2) 1041/FFFFFFFFC000067C : 2822                		mov	r2,@r8
(2) 1042/FFFFFFFFC000067E : 2732                		mov	r3,@r7
(2) 1043/FFFFFFFFC0000680 :                     
(2) 1044/FFFFFFFFC0000680 : 4B15                		cmp/pl	r11			; TOP check, 2 steps
(2) 1045/FFFFFFFFC0000682 : 8902                		bt	.top_neg
(2) 1046/FFFFFFFFC0000684 : 4B28                		shll16	r11
(2) 1047/FFFFFFFFC0000686 : 4B15                		cmp/pl	r11
(2) 1048/FFFFFFFFC0000688 : 8B0E                		bf	.bad_piece
(2) 1049/FFFFFFFFC000068A :                     .top_neg:
(2) 1050/FFFFFFFFC000068A : 50E1                		mov	@(polygn_mtrl,r14),r0
(2) 1051/FFFFFFFFC000068C : 1101                		mov 	r0,@(plypz_mtrl,r1)
(2) 1052/FFFFFFFFC000068E : 50E0                		mov	@(polygn_type,r14),r0
(2) 1053/FFFFFFFFC0000690 : 1100                		mov 	r0,@(plypz_type,r1)
(2) 1054/FFFFFFFFC0000692 :                     
(2) 1055/FFFFFFFFC0000692 :                     	; next piece
(2) 1056/FFFFFFFFC0000692 : 7130                		add	#sizeof_plypz,r1
(2) 1057/FFFFFFFFC0000694 : C603                		mov	@(marsGbl_PlyPzList_End,gbr),r0
(2) 1058/FFFFFFFFC0000696 : 3103                		cmp/ge	r0,r1
(2) 1059/FFFFFFFFC0000698 : 8B01                		bf	.dontres
(2) 1060/FFFFFFFFC000069A : C602                		mov	@(marsGbl_PlyPzList_Start,gbr),r0
(2) 1061/FFFFFFFFC000069C : 6103                		mov	r0,r1
(2) 1062/FFFFFFFFC000069E :                     .dontres:
(2) 1063/FFFFFFFFC000069E : 6013                		mov	r1,r0
(2) 1064/FFFFFFFFC00006A0 : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2) 1065/FFFFFFFFC00006A2 : C50D                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0
(2) 1066/FFFFFFFFC00006A4 : 7001                		add	#1,r0
(2) 1067/FFFFFFFFC00006A6 : C10D                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2) 1068/FFFFFFFFC00006A8 :                     .bad_piece:
(2) 1069/FFFFFFFFC00006A8 : E000                		mov	#0,r0
(2) 1070/FFFFFFFFC00006AA : C109                		mov.w	r0,@(marsGbl_WdgHold,gbr)	; Unlock.
(2) 1071/FFFFFFFFC00006AC : 000B                		rts
(2) 1072/FFFFFFFFC00006AE : 0009                		nop
(2) 1073/FFFFFFFFC00006B0 :                     		align 4
(2) 1074/FFFFFFFFC00006B0 : C000 0718 C000 0724 		ltorg
                    C000 071C C000 0728 
                    C000 072C C000 0734 
                    C000 0718 C000 0728 
                    FF00                
(2) 1075/FFFFFFFFC00006D2 :                     
(2) 1076/FFFFFFFFC00006D2 :                     ; ------------------------------------------------
(2) 1077/FFFFFFFFC00006D2 :                     
(2) 1078/FFFFFFFFC00006D2 :                     		align 4
(2) 1079/FFFFFFFFC00006D4 :                     Cach_ClrLines	ds.l 1		; Linecounter for the WDG task $07
(2) 1080/FFFFFFFFC00006D8 :                     Cach_DDA_Top	ds.l 2*2	; First 2 points
(2) 1081/FFFFFFFFC00006E8 :                     Cach_DDA_Last	ds.l 2*2	; Triangle or Quad (+8)
(2) 1082/FFFFFFFFC00006F8 :                     Cach_DDA_Src	ds.l 4*2
(2) 1083/FFFFFFFFC0000718 :                     Cach_DDA_Src_L	ds.l 4		; X/DX/Y/DX result for textures
(2) 1084/FFFFFFFFC0000728 :                     Cach_DDA_Src_R	ds.l 4
(2) 1085/FFFFFFFFC0000738 :                     Cach_LnDrw_L	ds.l 14		;
(2) 1086/FFFFFFFFC0000770 :                     Cach_LnDrw_S	ds.l 0		; <-- Reads backwards
(2) 1087/FFFFFFFFC0000770 :                     Cach_Bkup_LB	ds.l 11
(2) 1088/FFFFFFFFC000079C :                     Cach_Bkup_S	ds.l 0		; <-- Reads backwards
(2) 1089/FFFFFFFFC000079C :                     Cach_Bkup_LPZ	ds.l 7
(2) 1090/FFFFFFFFC00007B8 :                     Cach_Bkup_SPZ	ds.l 0		; <-- Reads backwards
(2) 1091/FFFFFFFFC00007B8 :                     
(2) 1092/FFFFFFFFC00007B8 :                     ; ------------------------------------------------
(2) 1093/ 60021E0 :                     .end:		phase CACHE_MSTR_PLGN+.end&$1FFF
(2) 1094/ 60021E0 :                     		align 4
(2) 1095/ 60021E0 :                     CACHE_MSTR_PLGN_E:
(2) 1099/ 60021E0 :                     
(1) 2160/ 60021E0 :                     		include "system/mars/cache/cache_slv.asm"
(2)    1/ 60021E0 :                     ; ====================================================================
(2)    2/ 60021E0 :                     ; ----------------------------------------------------------------
(2)    3/ 60021E0 :                     ; CACHE code
(2)    4/ 60021E0 :                     ;
(2)    5/ 60021E0 :                     ; LIMIT: $800 bytes
(2)    6/ 60021E0 :                     ; ----------------------------------------------------------------
(2)    7/ 60021E0 :                     
(2)    8/ 60021E0 :                     		align 4
(2)    9/ 60021E0 :                     CACHE_SLAVE:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     
(2)   12/FFFFFFFFC0000000 :                     ; ====================================================================
(2)   13/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   14/FFFFFFFFC0000000 :                     ; Watchdog interrupt
(2)   15/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   16/FFFFFFFFC0000000 :                     
(2)   17/FFFFFFFFC0000000 : 91B8                		mov	#_FRT,r1
(2)   18/FFFFFFFFC0000002 : 8417                		mov.b	@(7,r1),r0
(2)   19/FFFFFFFFC0000004 : CA02                		xor	#2,r0
(2)   20/FFFFFFFFC0000006 : 8017                		mov.b	r0,@(7,r1)
(2)   21/FFFFFFFFC0000008 : 91B5                		mov	#$FFFFFE80,r1	; Stop watchdog
(2)   22/FFFFFFFFC000000A : 90B5                		mov.w   #$A518,r0
(2)   23/FFFFFFFFC000000C : 2101                		mov.w   r0,@r1
(2)   24/FFFFFFFFC000000E : 000B                		rts
(2)   25/FFFFFFFFC0000010 : 0009                		nop
(2)   26/FFFFFFFFC0000012 :                     		align 4
(2)   27/FFFFFFFFC0000014 :                     
(2)   28/FFFFFFFFC0000014 :                     ; ====================================================================
(2)   29/FFFFFFFFC0000014 :                     ; --------------------------------------------------------
(2)   30/FFFFFFFFC0000014 :                     ; PWM Interrupt for playback
(2)   31/FFFFFFFFC0000014 :                     ;
(2)   32/FFFFFFFFC0000014 :                     ; **** MUST BE FAST ***
(2)   33/FFFFFFFFC0000014 :                     ; --------------------------------------------------------
(2)   34/FFFFFFFFC0000014 :                     
(2)   35/FFFFFFFFC0000014 :                     s_irq_pwm:
(2)   36/FFFFFFFFC0000014 : 91AE                		mov	#_FRT,r1
(2)   37/FFFFFFFFC0000016 : 8417                		mov.b	@(7,r1),r0
(2)   38/FFFFFFFFC0000018 : CA02                		xor	#2,r0
(2)   39/FFFFFFFFC000001A : 8017                		mov.b	r0,@(7,r1)
(2)   40/FFFFFFFFC000001C : D14B                		mov	#_sysreg+pwmintclr,r1
(2)   41/FFFFFFFFC000001E : 2101                		mov.w	r0,@r1
(2)   42/FFFFFFFFC0000020 : 6011                		mov.w	@r1,r0
(2)   43/FFFFFFFFC0000022 :                     
(2)   44/FFFFFFFFC0000022 :                     ; ------------------------------------------------
(2)   45/FFFFFFFFC0000022 :                     
(2)   46/FFFFFFFFC0000022 : D04B                		mov	#Cach_SlvStack_S,r0
(2)   47/FFFFFFFFC0000024 : 2026                		mov	r2,@-r0
(2)   48/FFFFFFFFC0000026 : 2036                		mov	r3,@-r0
(2)   49/FFFFFFFFC0000028 : 2046                		mov	r4,@-r0
(2)   50/FFFFFFFFC000002A : 2056                		mov	r5,@-r0
(2)   51/FFFFFFFFC000002C : 2066                		mov	r6,@-r0
(2)   52/FFFFFFFFC000002E : 2076                		mov	r7,@-r0
(2)   53/FFFFFFFFC0000030 : 2086                		mov	r8,@-r0
(2)   54/FFFFFFFFC0000032 : 2096                		mov	r9,@-r0
(2)   55/FFFFFFFFC0000034 : 20A6                		mov	r10,@-r0
(2)   56/FFFFFFFFC0000036 : 4012                		sts	macl,@-r0
(2)   57/FFFFFFFFC0000038 :                     
(2)   58/FFFFFFFFC0000038 : DA46                		mov	#MarsSnd_PwmCache,r10
(2)   59/FFFFFFFFC000003A : D947                		mov	#MarsSnd_PwmChnls,r9	; r9 - Channel list
(2)   60/FFFFFFFFC000003C : E807                		mov 	#MAX_PWMCHNL,r8		; r8 - Number of channels
(2)   61/FFFFFFFFC000003E : E700                		mov 	#0,r7			; r7 - RIGHT BASE wave
(2)   62/FFFFFFFFC0000040 : E600                		mov 	#0,r6			; r6 - LEFT BASE wave
(2)   63/FFFFFFFFC0000042 :                     .loop:
(2)   64/FFFFFFFFC0000042 : 5090                		mov	@(mchnsnd_enbl,r9),r0	; Channel enabled? (non-Zero)
(2)   65/FFFFFFFFC0000044 : 8800                		cmp/eq	#0,r0
(2)   66/FFFFFFFFC0000046 : 8B03                		bf	.on
(2)   67/FFFFFFFFC0000048 :                     .silent:
(2)   68/FFFFFFFFC0000048 : E07F                		mov	#$7F,r0			; Silence...
(2)   69/FFFFFFFFC000004A : 6203                		mov	r0,r2
(2)   70/FFFFFFFFC000004C : A05E                		bra	.skip
(2)   71/FFFFFFFFC000004E : 6103                		mov	r0,r1
(2)   72/FFFFFFFFC0000050 :                     .on:
(2)   73/FFFFFFFFC0000050 : 5491                		mov 	@(mchnsnd_read,r9),r4
(2)   74/FFFFFFFFC0000052 : 6343                		mov	r4,r3
(2)   75/FFFFFFFFC0000054 : 5095                		mov 	@(mchnsnd_end,r9),r0
(2)   76/FFFFFFFFC0000056 : D141                		mov	#$00FFFFFF,r1
(2)   77/FFFFFFFFC0000058 : 4319                		shlr8	r3
(2)   78/FFFFFFFFC000005A : 4019                		shlr8	r0
(2)   79/FFFFFFFFC000005C : 2319                		and	r1,r3
(2)   80/FFFFFFFFC000005E : 2019                		and	r1,r0
(2)   81/FFFFFFFFC0000060 : 3302                		cmp/hs	r0,r3
(2)   82/FFFFFFFFC0000062 : 8B0D                		bf	.read
(2)   83/FFFFFFFFC0000064 : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)   84/FFFFFFFFC0000066 : C804                		tst	#%00000100,r0
(2)   85/FFFFFFFFC0000068 : 8B03                		bf	.loop_me
(2)   86/FFFFFFFFC000006A : E000                		mov 	#0,r0
(2)   87/FFFFFFFFC000006C : 1900                		mov 	r0,@(mchnsnd_enbl,r9)
(2)   88/FFFFFFFFC000006E : AFEB                		bra	.silent
(2)   89/FFFFFFFFC0000070 : 0009                		nop
(2)   90/FFFFFFFFC0000072 :                     .loop_me:
(2)   91/FFFFFFFFC0000072 : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)   92/FFFFFFFFC0000074 : 5196                		mov	@(mchnsnd_loop,r9),r1
(2)   93/FFFFFFFFC0000076 : 5494                		mov 	@(mchnsnd_start,r9),r4
(2)   94/FFFFFFFFC0000078 : C808                		tst	#%00001000,r0
(2)   95/FFFFFFFFC000007A : 8900                		bt	.mono_l
(2)   96/FFFFFFFFC000007C : 4100                		shll	r1
(2)   97/FFFFFFFFC000007E :                     .mono_l:
(2)   98/FFFFFFFFC000007E : 341C                		add	r1,r4
(2)   99/FFFFFFFFC0000080 :                     
(2)  100/FFFFFFFFC0000080 :                     ; read wave
(2)  101/FFFFFFFFC0000080 :                     ; r4 - WAVE READ pointer
(2)  102/FFFFFFFFC0000080 :                     .read:
(2)  103/FFFFFFFFC0000080 : 5597                		mov 	@(mchnsnd_pitch,r9),r5	; Check if sample is on ROM
(2)  104/FFFFFFFFC0000082 : 5293                		mov 	@(mchnsnd_bank,r9),r2
(2)  105/FFFFFFFFC0000084 : D036                		mov	#CS1,r0
(2)  106/FFFFFFFFC0000086 : 3200                		cmp/eq	r0,r2
(2)  107/FFFFFFFFC0000088 : 8B11                		bf	.not_rom
(2)  108/FFFFFFFFC000008A : D136                		mov	#MarsSnd_RvMode,r1
(2)  109/FFFFFFFFC000008C : 6012                		mov	@r1,r0
(2)  110/FFFFFFFFC000008E : 8801                		cmp/eq	#1,r0
(2)  111/FFFFFFFFC0000090 : 8B0D                		bf	.not_rom
(2)  112/FFFFFFFFC0000092 :                     
(2)  113/FFFFFFFFC0000092 :                     	; r1 - left WAV
(2)  114/FFFFFFFFC0000092 :                     	; r3 - right WAV
(2)  115/FFFFFFFFC0000092 :                     	; r4 - original READ point
(2)  116/FFFFFFFFC0000092 :                     	; r5 - Pitch
(2)  117/FFFFFFFFC0000092 : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)  118/FFFFFFFFC0000094 : 6153                		mov	r5,r1
(2)  119/FFFFFFFFC0000096 : C808                		tst	#%00001000,r0
(2)  120/FFFFFFFFC0000098 : 8900                		bt	.mono_c
(2)  121/FFFFFFFFC000009A : 4100                		shll	r1
(2)  122/FFFFFFFFC000009C :                     .mono_c:
(2)  123/FFFFFFFFC000009C : 5292                		mov	@(mchnsnd_cchread,r9),r2
(2)  124/FFFFFFFFC000009E : 4219                		shlr8	r2
(2)  125/FFFFFFFFC00000A0 : E17F                		mov	#MAX_PWMBACKUP-1,r1	; backup size limit
(2)  126/FFFFFFFFC00000A2 : 2219                		and	r1,r2
(2)  127/FFFFFFFFC00000A4 : 32AC                		add	r10,r2
(2)  128/FFFFFFFFC00000A6 : 6124                		mov.b	@r2+,r1
(2)  129/FFFFFFFFC00000A8 : 6324                		mov.b	@r2+,r3			; null in MONO samples
(2)  130/FFFFFFFFC00000AA : A00B                		bra	.from_rv
(2)  131/FFFFFFFFC00000AC : 0009                		nop
(2)  132/FFFFFFFFC00000AE :                     
(2)  133/FFFFFFFFC00000AE :                     ; Play as normal
(2)  134/FFFFFFFFC00000AE :                     ; r0 - flags
(2)  135/FFFFFFFFC00000AE :                     ; r4 - READ pointer
(2)  136/FFFFFFFFC00000AE :                     .not_rom:
(2)  137/FFFFFFFFC00000AE : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)  138/FFFFFFFFC00000B0 : 6343                		mov 	r4,r3
(2)  139/FFFFFFFFC00000B2 : 4319                		shlr8	r3
(2)  140/FFFFFFFFC00000B4 : D129                		mov	#$00FFFFFF,r1
(2)  141/FFFFFFFFC00000B6 : C808                		tst	#%00001000,r0
(2)  142/FFFFFFFFC00000B8 : 8900                		bt	.mono_a
(2)  143/FFFFFFFFC00000BA : 71FF                		add	#-1,r1
(2)  144/FFFFFFFFC00000BC :                     .mono_a:
(2)  145/FFFFFFFFC00000BC : 2319                		and	r1,r3
(2)  146/FFFFFFFFC00000BE : 232B                		or	r2,r3
(2)  147/FFFFFFFFC00000C0 : 6134                		mov.b	@r3+,r1
(2)  148/FFFFFFFFC00000C2 : 6334                		mov.b	@r3+,r3
(2)  149/FFFFFFFFC00000C4 :                     .from_rv:
(2)  150/FFFFFFFFC00000C4 : 6213                		mov	r1,r2
(2)  151/FFFFFFFFC00000C6 : C808                		tst	#%00001000,r0
(2)  152/FFFFFFFFC00000C8 : 8901                		bt	.mono
(2)  153/FFFFFFFFC00000CA : 6233                		mov	r3,r2
(2)  154/FFFFFFFFC00000CC : 4500                		shll	r5
(2)  155/FFFFFFFFC00000CE :                     .mono:
(2)  156/FFFFFFFFC00000CE : 345C                		add	r5,r4
(2)  157/FFFFFFFFC00000D0 : 1941                		mov	r4,@(mchnsnd_read,r9)
(2)  158/FFFFFFFFC00000D2 : 5392                		mov	@(mchnsnd_cchread,r9),r3
(2)  159/FFFFFFFFC00000D4 : 335C                		add	r5,r3
(2)  160/FFFFFFFFC00000D6 : 1932                		mov	r3,@(mchnsnd_cchread,r9)
(2)  161/FFFFFFFFC00000D8 : 611C                		extu.b	r1,r1
(2)  162/FFFFFFFFC00000DA : 622C                		extu.b	r2,r2
(2)  163/FFFFFFFFC00000DC : C802                		tst	#%00000010,r0	; LEFT enabled?
(2)  164/FFFFFFFFC00000DE : 8B00                		bf	.no_l
(2)  165/FFFFFFFFC00000E0 : E17F                		mov	#$7F,r1		; Force LEFT off
(2)  166/FFFFFFFFC00000E2 :                     .no_l:
(2)  167/FFFFFFFFC00000E2 : C801                		tst	#%00000001,r0	; RIGHT enabled?
(2)  168/FFFFFFFFC00000E4 : 8B00                		bf	.no_r
(2)  169/FFFFFFFFC00000E6 : E27F                		mov	#$7F,r2		; Force RIGHT off
(2)  170/FFFFFFFFC00000E8 :                     .no_r:
(2)  171/FFFFFFFFC00000E8 :                     
(2)  172/FFFFFFFFC00000E8 :                     	; Clearly rushed...
(2)  173/FFFFFFFFC00000E8 : 5099                		mov	@(mchnsnd_vol,r9),r0
(2)  174/FFFFFFFFC00000EA : 4015                		cmp/pl	r0
(2)  175/FFFFFFFFC00000EC : 8B0E                		bf	.skip
(2)  176/FFFFFFFFC00000EE : 7001                		add	#1,r0
(2)  177/FFFFFFFFC00000F0 : 210E                		mulu	r0,r1
(2)  178/FFFFFFFFC00000F2 : 041A                		sts	macl,r4
(2)  179/FFFFFFFFC00000F4 : 4419                		shlr8	r4
(2)  180/FFFFFFFFC00000F6 : 3148                		sub	r4,r1
(2)  181/FFFFFFFFC00000F8 : 220E                		mulu	r0,r2
(2)  182/FFFFFFFFC00000FA : 041A                		sts	macl,r4
(2)  183/FFFFFFFFC00000FC : 4419                		shlr8	r4
(2)  184/FFFFFFFFC00000FE : 3248                		sub	r4,r2
(2)  185/FFFFFFFFC0000100 : E47F                		mov	#$7F,r4
(2)  186/FFFFFFFFC0000102 : 240E                		mulu	r0,r4
(2)  187/FFFFFFFFC0000104 : 001A                		sts	macl,r0
(2)  188/FFFFFFFFC0000106 : 4019                		shlr8	r0
(2)  189/FFFFFFFFC0000108 : 310C                		add	r0,r1
(2)  190/FFFFFFFFC000010A : 320C                		add	r0,r2
(2)  191/FFFFFFFFC000010C :                     .skip:
(2)  192/FFFFFFFFC000010C : 7101                		add	#1,r1
(2)  193/FFFFFFFFC000010E : 7201                		add	#1,r2
(2)  194/FFFFFFFFC0000110 : 361C                		add	r1,r6
(2)  195/FFFFFFFFC0000112 : 372C                		add	r2,r7
(2)  196/FFFFFFFFC0000114 : 9031                		mov	#MAX_PWMBACKUP,r0
(2)  197/FFFFFFFFC0000116 : 3A0C                		add	r0,r10
(2)  198/FFFFFFFFC0000118 : 4810                		dt	r8
(2)  199/FFFFFFFFC000011A : 8F92                		bf/s	.loop
(2)  200/FFFFFFFFC000011C : 7928                		add	#sizeof_sndchn,r9
(2)  201/FFFFFFFFC000011E : 902D                		mov	#$3FF,r0		; Overflow protection
(2)  202/FFFFFFFFC0000120 : 3607                		cmp/gt	r0,r6
(2)  203/FFFFFFFFC0000122 : 8B00                		bf	.lmuch
(2)  204/FFFFFFFFC0000124 : 6603                		mov	r0,r6
(2)  205/FFFFFFFFC0000126 :                     .lmuch:
(2)  206/FFFFFFFFC0000126 : 3707                		cmp/gt	r0,r7
(2)  207/FFFFFFFFC0000128 : 8B00                		bf	.rmuch
(2)  208/FFFFFFFFC000012A : 6703                		mov	r0,r7
(2)  209/FFFFFFFFC000012C :                     .rmuch:
(2)  210/FFFFFFFFC000012C : D10E                		mov	#_sysreg+lchwidth,r1	; Write WAVE result
(2)  211/FFFFFFFFC000012E : D20F                		mov	#_sysreg+rchwidth,r2
(2)  212/FFFFFFFFC0000130 : 2161                 		mov.w	r6,@r1
(2)  213/FFFFFFFFC0000132 : 2271                 		mov.w	r7,@r2
(2)  214/FFFFFFFFC0000134 :                     
(2)  215/FFFFFFFFC0000134 : D00E                		mov	#Cach_SlvStack_L,r0
(2)  216/FFFFFFFFC0000136 : 4016                		lds	@r0+,macl
(2)  217/FFFFFFFFC0000138 : 6A06                		mov	@r0+,r10
(2)  218/FFFFFFFFC000013A : 6906                		mov	@r0+,r9
(2)  219/FFFFFFFFC000013C : 6806                		mov	@r0+,r8
(2)  220/FFFFFFFFC000013E : 6706                		mov	@r0+,r7
(2)  221/FFFFFFFFC0000140 : 6606                		mov	@r0+,r6
(2)  222/FFFFFFFFC0000142 : 6506                		mov	@r0+,r5
(2)  223/FFFFFFFFC0000144 : 6406                		mov	@r0+,r4
(2)  224/FFFFFFFFC0000146 : 6306                		mov	@r0+,r3
(2)  225/FFFFFFFFC0000148 : 000B                		rts
(2)  226/FFFFFFFFC000014A : 6206                		mov	@r0+,r2
(2)  227/FFFFFFFFC000014C :                     		align 4
(2)  228/FFFFFFFFC000014C : 2000 401C C000 0530 		ltorg
                    2600 5D00 C000 056C 
                    00FF FFFF 0200 0000 
                    C000 0530 2000 4034 
                    2000 4036 C000 0508 
                    FE10 FE80 A518 0080 
                    03FF                
(2)  229/FFFFFFFFC000017E :                     
(2)  230/FFFFFFFFC000017E :                     ; ====================================================================
(2)  231/FFFFFFFFC000017E :                     ; ----------------------------------------------------------------
(2)  232/FFFFFFFFC000017E :                     ; 3D Section
(2)  233/FFFFFFFFC000017E :                     ; ----------------------------------------------------------------
(2)  234/FFFFFFFFC000017E :                     
(2)  235/FFFFFFFFC000017E :                     ; --------------------------------------------------------
(2)  236/FFFFFFFFC000017E :                     ; MarsMdl_MdlLoop
(2)  237/FFFFFFFFC000017E :                     ;
(2)  238/FFFFFFFFC000017E :                     ; Call this to start building the 3D objects
(2)  239/FFFFFFFFC000017E :                     ; --------------------------------------------------------
(2)  240/FFFFFFFFC000017E :                     
(2)  241/FFFFFFFFC000017E :                     		align 4
(2)  242/FFFFFFFFC0000180 :                     MarsMdl_MdlLoop:
(2)  243/FFFFFFFFC0000180 : 4F22                		sts	pr,@-r15
(2)  244/FFFFFFFFC0000182 : EB00                		mov	#0,r11
(2)  245/FFFFFFFFC0000184 : DD11                		mov 	#RAM_Mars_Polygons_0,r13
(2)  246/FFFFFFFFC0000186 : DC12                		mov	#RAM_Mars_PlgnList_0,r12
(2)  247/FFFFFFFFC0000188 : C50C                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(2)  248/FFFFFFFFC000018A : C801                		tst     #1,r0
(2)  249/FFFFFFFFC000018C : 8901                		bt	.go_mdl
(2)  250/FFFFFFFFC000018E : DD11                		mov 	#RAM_Mars_Polygons_1,r13
(2)  251/FFFFFFFFC0000190 : DC11                		mov	#RAM_Mars_PlgnList_1,r12
(2)  252/FFFFFFFFC0000192 :                     .go_mdl:
(2)  253/FFFFFFFFC0000192 : DE12                		mov	#RAM_Mars_Objects,r14
(2)  254/FFFFFFFFC0000194 : EA10                		mov	#MAX_MODELS,r10
(2)  255/FFFFFFFFC0000196 :                     .loop:
(2)  256/FFFFFFFFC0000196 : 50E0                		mov	@(mdl_data,r14),r0		; Object model data == 0 or -1?
(2)  257/FFFFFFFFC0000198 : 4015                		cmp/pl	r0
(2)  258/FFFFFFFFC000019A : 8B06                		bf	.invlid
(2)  259/FFFFFFFFC000019C : 902E                		mov	#MAX_FACES,r0
(2)  260/FFFFFFFFC000019E : 3B07                		cmp/gt	r0,r11
(2)  261/FFFFFFFFC00001A0 : 8903                		bt	.invlid
(2)  262/FFFFFFFFC00001A2 : D00F                		mov	#MarsMdl_ReadModel,r0
(2)  263/FFFFFFFFC00001A4 : 400B                		jsr	@r0
(2)  264/FFFFFFFFC00001A6 : 2FA6                		mov	r10,@-r15
(2)  265/FFFFFFFFC00001A8 : 6AF6                		mov	@r15+,r10
(2)  266/FFFFFFFFC00001AA :                     .invlid:
(2)  267/FFFFFFFFC00001AA : 4A10                		dt	r10
(2)  268/FFFFFFFFC00001AC : 8FF3                		bf/s	.loop
(2)  269/FFFFFFFFC00001AE : 7E18                		add	#sizeof_mdlobj,r14
(2)  270/FFFFFFFFC00001B0 :                     .skip:
(2)  271/FFFFFFFFC00001B0 : DE0C                		mov	#RAM_Mars_Polygons_0,r14
(2)  272/FFFFFFFFC00001B2 : DD0D                		mov	#RAM_Mars_PlgnList_0,r13
(2)  273/FFFFFFFFC00001B4 : DC0D                		mov 	#RAM_Mars_PlgnNum_0,r12
(2)  274/FFFFFFFFC00001B6 : C50C                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(2)  275/FFFFFFFFC00001B8 : C801                		tst     #1,r0
(2)  276/FFFFFFFFC00001BA : 8902                		bt	.page_2
(2)  277/FFFFFFFFC00001BC : DE0C                		mov	#RAM_Mars_Polygons_1,r14
(2)  278/FFFFFFFFC00001BE : DD0D                		mov	#RAM_Mars_PlgnList_1,r13
(2)  279/FFFFFFFFC00001C0 : DC0D                		mov 	#RAM_Mars_PlgnNum_1,r12
(2)  280/FFFFFFFFC00001C2 :                     .page_2:
(2)  281/FFFFFFFFC00001C2 : 2CB2                		mov	r11,@r12	; Save faces counter
(2)  282/FFFFFFFFC00001C4 :                     
(2)  283/FFFFFFFFC00001C4 :                     	; FACE SORTING is done on the
(2)  284/FFFFFFFFC00001C4 :                     	; Master CPU now
(2)  285/FFFFFFFFC00001C4 :                     
(2)  286/FFFFFFFFC00001C4 : 4F26                		lds	@r15+,pr
(2)  287/FFFFFFFFC00001C6 : 000B                		rts
(2)  288/FFFFFFFFC00001C8 : 0009                		nop
(2)  289/FFFFFFFFC00001CA :                     		align 4
(2)  290/FFFFFFFFC00001CC : 2601 2A40 2602 D700 		ltorg
                    2602 00A0 2602 F5A0 
                    2603 1448 C000 0200 
                    2601 2A40 2602 D700 
                    2603 1440 2602 00A0 
                    2602 F5A0 2603 1444 
                    03D4                
(2)  291/FFFFFFFFC00001FE :                     
(2)  292/FFFFFFFFC00001FE :                     ; ------------------------------------------------
(2)  293/FFFFFFFFC00001FE :                     ; Read model
(2)  294/FFFFFFFFC00001FE :                     ;
(2)  295/FFFFFFFFC00001FE :                     ; r14 - Current model data
(2)  296/FFFFFFFFC00001FE :                     ; r13 - Current polygon
(2)  297/FFFFFFFFC00001FE :                     ; r12 - Z storage
(2)  298/FFFFFFFFC00001FE :                     ; r11 - Used faces counter
(2)  299/FFFFFFFFC00001FE :                     ; ------------------------------------------------
(2)  300/FFFFFFFFC00001FE :                     
(2)  301/FFFFFFFFC00001FE :                     ; Mdl_Object:
(2)  302/FFFFFFFFC00001FE :                     ; 		dc.w num_faces,num_vertex_old
(2)  303/FFFFFFFFC00001FE :                     ; 		dc.l .vert,.face,.vrtx,.mtrl
(2)  304/FFFFFFFFC00001FE :                     ; .vert:	binclude "data/mars/objects/mdl/test/vert.bin"
(2)  305/FFFFFFFFC00001FE :                     ; .face:	binclude "data/mars/objects/mdl/test/face.bin"
(2)  306/FFFFFFFFC00001FE :                     ; .vrtx:	binclude "data/mars/objects/mdl/test/vrtx.bin"
(2)  307/FFFFFFFFC00001FE :                     ; .mtrl:	include "data/mars/objects/mdl/test/mtrl.asm"
(2)  308/FFFFFFFFC00001FE :                     ;
(2)  309/FFFFFFFFC00001FE :                     		align 4
(2)  310/FFFFFFFFC0000200 :                     MarsMdl_ReadModel:
(2)  311/FFFFFFFFC0000200 : 4F22                		sts	pr,@-r15
(2)  312/FFFFFFFFC0000202 : 5AE0                		mov	@(mdl_data,r14),r10	; r10 - Model header
(2)  313/FFFFFFFFC0000204 : 0009                		nop
(2)  314/FFFFFFFFC0000206 : 69A1                		mov.w	@r10,r9			;  r9 - Number of polygons of this model
(2)  315/FFFFFFFFC0000208 : 699D                		extu.w	r9,r9
(2)  316/FFFFFFFFC000020A : 58A2                		mov 	@(8,r10),r8		;  r8 - face data
(2)  317/FFFFFFFFC000020C : 57A1                		mov	@(4,r10),r7		;  r7 - Vertex data
(2)  318/FFFFFFFFC000020E : 0009                		nop
(2)  319/FFFFFFFFC0000210 :                     .next_face:
(2)  320/FFFFFFFFC0000210 : 90D0                		mov	#MAX_FACES,r0
(2)  321/FFFFFFFFC0000212 : 3B03                		cmp/ge	r0,r11
(2)  322/FFFFFFFFC0000214 : 8B01                		bf	.valid
(2)  323/FFFFFFFFC0000216 : A0C9                		bra	.exit
(2)  324/FFFFFFFFC0000218 : 6B03                		mov	r0,r11
(2)  325/FFFFFFFFC000021A :                     .valid:
(2)  326/FFFFFFFFC000021A : 6085                		mov.w	@r8+,r0
(2)  327/FFFFFFFFC000021C : 6503                		mov	r0,r5			; r5 - Face type
(2)  328/FFFFFFFFC000021E : E604                		mov	#4,r6			; r6 - number of vertex (quad or tri)
(2)  329/FFFFFFFFC0000220 : 4019                		shlr8	r0			;
(2)  330/FFFFFFFFC0000222 : C840                		tst	#PLGN_TRI,r0
(2)  331/FFFFFFFFC0000224 : 8900                		bt	.quad			; bit 0 = quad
(2)  332/FFFFFFFFC0000226 : 4610                		dt	r6
(2)  333/FFFFFFFFC0000228 :                     .quad:
(2)  334/FFFFFFFFC0000228 : 64D3                		mov	r13,r4
(2)  335/FFFFFFFFC000022A : 4515                		cmp/pl	r5			; Solid or texture? ($8xxx)
(2)  336/FFFFFFFFC000022C : 8B0A                		bf	.has_uv
(2)  337/FFFFFFFFC000022E :                     
(2)  338/FFFFFFFFC000022E :                     ; --------------------------------
(2)  339/FFFFFFFFC000022E :                     ; Face is solid color
(2)  340/FFFFFFFFC000022E : 6053                		mov	r5,r0
(2)  341/FFFFFFFFC0000230 : C9FF                		and	#$FF,r0
(2)  342/FFFFFFFFC0000232 : E360                		mov	#%01100000,r3
(2)  343/FFFFFFFFC0000234 : 4300                		shll	r3
(2)  344/FFFFFFFFC0000236 : 4318                		shll8	r3			; r1 - AND $C0 value
(2)  345/FFFFFFFFC0000238 : 2539                		and	r3,r5			; r0 - Grab settings, move to long MSB
(2)  346/FFFFFFFFC000023A : 4528                		shll16	r5
(2)  347/FFFFFFFFC000023C : 1401                		mov	r0,@(polygn_mtrl,r4)
(2)  348/FFFFFFFFC000023E : 1450                		mov	r5,@(polygn_type,r4)
(2)  349/FFFFFFFFC0000240 : A032                		bra	.mk_face
(2)  350/FFFFFFFFC0000242 : 0009                		nop
(2)  351/FFFFFFFFC0000244 :                     		align 4
(2)  352/FFFFFFFFC0000244 :                     
(2)  353/FFFFFFFFC0000244 :                     ; --------------------------------
(2)  354/FFFFFFFFC0000244 :                     ; Face has UV settings
(2)  355/FFFFFFFFC0000244 :                     
(2)  356/FFFFFFFFC0000244 :                     .has_uv:
(2)  357/FFFFFFFFC0000244 : 51A3                		mov	@($C,r10),r1		; r1 - Grab UV points
(2)  358/FFFFFFFFC0000246 : 6063                		mov	r6,r0
(2)  359/FFFFFFFFC0000248 : 62D3                		mov	r13,r2			; r2 - Output to polygon
(2)  360/FFFFFFFFC000024A : 7228                		add	#polygn_srcpnts,r2
(2)  361/FFFFFFFFC000024C : 8803                		cmp/eq	#3,r0			; Polygon is tri?
(2)  362/FFFFFFFFC000024E : 8905                		bt	.uv_tri
(2)  363/FFFFFFFFC0000250 : 6085                		mov.w	@r8+,r0			; Do quad point
(2)  364/FFFFFFFFC0000252 : 600D                		extu.w	r0,r0
(2)  365/FFFFFFFFC0000254 : 4008                		shll2	r0
(2)  366/FFFFFFFFC0000256 : 001E                		mov	@(r1,r0),r0
(2)  367/FFFFFFFFC0000258 : 2202                		mov	r0,@r2
(2)  368/FFFFFFFFC000025A : 7204                		add	#4,r2
(2)  369/FFFFFFFFC000025C :                     .uv_tri:
(2)  370/FFFFFFFFC000025C :                     	rept 3					; Grab UV points 3 times
(2)  371/FFFFFFFFC000025C :                     		mov.w	@r8+,r0
(2)  372/FFFFFFFFC000025C :                     		extu.w	r0,r0
(2)  373/FFFFFFFFC000025C :                     		shll2	r0
(2)  374/FFFFFFFFC000025C :                     		mov	@(r1,r0),r0
(2)  375/FFFFFFFFC000025C :                     		mov	r0,@r2
(2)  376/FFFFFFFFC000025C :                     		add	#4,r2
(2)  377/FFFFFFFFC000025C :                     	endm
(2)  371/FFFFFFFFC000025C : 6085                		mov.w	@r8+,r0
(2)  372/FFFFFFFFC000025E : 600D                		extu.w	r0,r0
(2)  373/FFFFFFFFC0000260 : 4008                		shll2	r0
(2)  374/FFFFFFFFC0000262 : 001E                		mov	@(r1,r0),r0
(2)  375/FFFFFFFFC0000264 : 2202                		mov	r0,@r2
(2)  376/FFFFFFFFC0000266 : 7204                		add	#4,r2
(2)  371/FFFFFFFFC0000268 : 6085                		mov.w	@r8+,r0
(2)  372/FFFFFFFFC000026A : 600D                		extu.w	r0,r0
(2)  373/FFFFFFFFC000026C : 4008                		shll2	r0
(2)  374/FFFFFFFFC000026E : 001E                		mov	@(r1,r0),r0
(2)  375/FFFFFFFFC0000270 : 2202                		mov	r0,@r2
(2)  376/FFFFFFFFC0000272 : 7204                		add	#4,r2
(2)  371/FFFFFFFFC0000274 : 6085                		mov.w	@r8+,r0
(2)  372/FFFFFFFFC0000276 : 600D                		extu.w	r0,r0
(2)  373/FFFFFFFFC0000278 : 4008                		shll2	r0
(2)  374/FFFFFFFFC000027A : 001E                		mov	@(r1,r0),r0
(2)  375/FFFFFFFFC000027C : 2202                		mov	r0,@r2
(2)  376/FFFFFFFFC000027E : 7204                		add	#4,r2
(2)  378/FFFFFFFFC0000280 : 51A4                		mov	@($10,r10),r1		; r1 - Read material list
(2)  379/FFFFFFFFC0000282 : 6053                		mov	r5,r0			; r0 - Material slot
(2)  380/FFFFFFFFC0000284 : C9FF                		and	#$FF,r0
(2)  381/FFFFFFFFC0000286 : 4008                		shll2	r0			; *8
(2)  382/FFFFFFFFC0000288 : 4000                		shll	r0
(2)  383/FFFFFFFFC000028A : 310C                		add	r0,r1			; Increment r1 into mtrl slot
(2)  384/FFFFFFFFC000028C : E360                		mov	#%01100000,r3
(2)  385/FFFFFFFFC000028E : 4300                		shll	r3
(2)  386/FFFFFFFFC0000290 : 4318                		shll8	r3			; r3 - $C0
(2)  387/FFFFFFFFC0000292 : 2539                		and	r3,r5			; Filter settings bits
(2)  388/FFFFFFFFC0000294 : 8512                		mov.w	@(4,r1),r0		; r0 - Texture
(2)  389/FFFFFFFFC0000296 : 250B                		or	r0,r5
(2)  390/FFFFFFFFC0000298 : 6312                		mov	@r1,r3			; r3 - Texture ROM pointer
(2)  391/FFFFFFFFC000029A : 4528                		shll16	r5
(2)  392/FFFFFFFFC000029C : 50E1                		mov	@(mdl_option,r14),r0
(2)  393/FFFFFFFFC000029E : 600C                		extu.b	r0,r0
(2)  394/FFFFFFFFC00002A0 : 1431                		mov	r3,@(polygn_mtrl,r4)
(2)  395/FFFFFFFFC00002A2 : 250B                		or	r0,r5
(2)  396/FFFFFFFFC00002A4 : 1450                		mov	r5,@(polygn_type,r4)
(2)  397/FFFFFFFFC00002A6 : 0009                		nop
(2)  398/FFFFFFFFC00002A8 :                     .mk_face:
(2)  399/FFFFFFFFC00002A8 : 200A                		xor	r0,r0			; Clear Zslot for this face.
(2)  400/FFFFFFFFC00002AA : 2C02                		mov	r0,@r12
(2)  401/FFFFFFFFC00002AC : 1C01                		mov	r0,@(4,r12)
(2)  402/FFFFFFFFC00002AE : 6143                		mov	r4,r1			; r1 - OUTPUT face (X/Y) points
(2)  403/FFFFFFFFC00002B0 : 7108                		add 	#polygn_points,r1
(2)  404/FFFFFFFFC00002B2 : 6063                		mov	r6,r0
(2)  405/FFFFFFFFC00002B4 : 8803                		cmp/eq	#3,r0			; Polygon is tri?
(2)  406/FFFFFFFFC00002B6 : 8910                		bt	.fc_tri
(2)  407/FFFFFFFFC00002B8 : 6085                		mov.w 	@r8+,r0			; Do quad point
(2)  408/FFFFFFFFC00002BA : 600D                		extu.w	r0,r0
(2)  409/FFFFFFFFC00002BC :                     ; 		mov	#$C,r4
(2)  410/FFFFFFFFC00002BC :                     ; 		mulu	r4,r0
(2)  411/FFFFFFFFC00002BC :                     ; 		sts	macl,r0
(2)  412/FFFFFFFFC00002BC : 6473                		mov	r7,r4
(2)  413/FFFFFFFFC00002BE : 340C                		add 	r0,r4
(2)  414/FFFFFFFFC00002C0 : 6242                		mov	@r4,r2
(2)  415/FFFFFFFFC00002C2 : 0009                		nop
(2)  416/FFFFFFFFC00002C4 : 5341                		mov	@(4,r4),r3
(2)  417/FFFFFFFFC00002C6 : 5442                		mov	@(8,r4),r4
(2)  418/FFFFFFFFC00002C8 : B076                		bsr	mdlrd_setpoint
(2)  419/FFFFFFFFC00002CA : 0009                		nop
(2)  420/FFFFFFFFC00002CC : 2122                		mov	r2,@r1
(2)  421/FFFFFFFFC00002CE : 1131                		mov	r3,@(4,r1)
(2)  422/FFFFFFFFC00002D0 : 7108                		add	#8,r1
(2)  423/FFFFFFFFC00002D2 : 60C2                		mov	@r12,r0
(2)  424/FFFFFFFFC00002D4 : 3403                		cmp/ge	r0,r4
(2)  425/FFFFFFFFC00002D6 : 8900                		bt	.fc_tri	; ** bt .higher
(2)  426/FFFFFFFFC00002D8 : 2C42                		mov	r4,@r12
(2)  427/FFFFFFFFC00002DA :                     .fc_tri:
(2)  428/FFFFFFFFC00002DA :                     	rept 3
(2)  429/FFFFFFFFC00002DA :                     		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  430/FFFFFFFFC00002DA :                     		extu.w	r0,r0
(2)  431/FFFFFFFFC00002DA :                     ; 		mov	#$C,r4			; *** TODO: muliply on script later
(2)  432/FFFFFFFFC00002DA :                     ; 		mulu	r4,r0
(2)  433/FFFFFFFFC00002DA :                     ; 		sts	macl,r0
(2)  434/FFFFFFFFC00002DA :                     		mov	r7,r4			; r2 - vertex data + index
(2)  435/FFFFFFFFC00002DA :                     		add 	r0,r4
(2)  436/FFFFFFFFC00002DA :                     		mov	@r4,r2
(2)  437/FFFFFFFFC00002DA :                     		mov	@(4,r4),r3
(2)  438/FFFFFFFFC00002DA :                     		mov	@(8,r4),r4
(2)  439/FFFFFFFFC00002DA :                     		bsr	mdlrd_setpoint
(2)  440/FFFFFFFFC00002DA :                     		nop
(2)  441/FFFFFFFFC00002DA :                     		mov	r2,@r1			; Save X/Y into polygon
(2)  442/FFFFFFFFC00002DA :                     		mov	r3,@(4,r1)
(2)  443/FFFFFFFFC00002DA :                     		add	#8,r1
(2)  444/FFFFFFFFC00002DA :                     		mov	@r12,r0
(2)  445/FFFFFFFFC00002DA :                     		cmp/ge	r0,r4
(2)  446/FFFFFFFFC00002DA :                     		dc.w $8900	; ** bt .higher
(2)  447/FFFFFFFFC00002DA :                     		mov	r4,@r12
(2)  448/FFFFFFFFC00002DA :                     ;.higher:
(2)  449/FFFFFFFFC00002DA :                     	endm
(2)  429/FFFFFFFFC00002DA : 6085                		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  430/FFFFFFFFC00002DC : 600D                		extu.w	r0,r0
(2)  431/FFFFFFFFC00002DE :                     ; 		mov	#$C,r4			; *** TODO: muliply on script later
(2)  432/FFFFFFFFC00002DE :                     ; 		mulu	r4,r0
(2)  433/FFFFFFFFC00002DE :                     ; 		sts	macl,r0
(2)  434/FFFFFFFFC00002DE : 6473                		mov	r7,r4			; r2 - vertex data + index
(2)  435/FFFFFFFFC00002E0 : 340C                		add 	r0,r4
(2)  436/FFFFFFFFC00002E2 : 6242                		mov	@r4,r2
(2)  437/FFFFFFFFC00002E4 : 5341                		mov	@(4,r4),r3
(2)  438/FFFFFFFFC00002E6 : 5442                		mov	@(8,r4),r4
(2)  439/FFFFFFFFC00002E8 : B066                		bsr	mdlrd_setpoint
(2)  440/FFFFFFFFC00002EA : 0009                		nop
(2)  441/FFFFFFFFC00002EC : 2122                		mov	r2,@r1			; Save X/Y into polygon
(2)  442/FFFFFFFFC00002EE : 1131                		mov	r3,@(4,r1)
(2)  443/FFFFFFFFC00002F0 : 7108                		add	#8,r1
(2)  444/FFFFFFFFC00002F2 : 60C2                		mov	@r12,r0
(2)  445/FFFFFFFFC00002F4 : 3403                		cmp/ge	r0,r4
(2)  446/FFFFFFFFC00002F6 : 8900                		dc.w $8900	; ** bt .higher
(2)  447/FFFFFFFFC00002F8 : 2C42                		mov	r4,@r12
(2)  448/FFFFFFFFC00002FA :                     ;.higher:
(2)  429/FFFFFFFFC00002FA : 6085                		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  430/FFFFFFFFC00002FC : 600D                		extu.w	r0,r0
(2)  431/FFFFFFFFC00002FE :                     ; 		mov	#$C,r4			; *** TODO: muliply on script later
(2)  432/FFFFFFFFC00002FE :                     ; 		mulu	r4,r0
(2)  433/FFFFFFFFC00002FE :                     ; 		sts	macl,r0
(2)  434/FFFFFFFFC00002FE : 6473                		mov	r7,r4			; r2 - vertex data + index
(2)  435/FFFFFFFFC0000300 : 340C                		add 	r0,r4
(2)  436/FFFFFFFFC0000302 : 6242                		mov	@r4,r2
(2)  437/FFFFFFFFC0000304 : 5341                		mov	@(4,r4),r3
(2)  438/FFFFFFFFC0000306 : 5442                		mov	@(8,r4),r4
(2)  439/FFFFFFFFC0000308 : B056                		bsr	mdlrd_setpoint
(2)  440/FFFFFFFFC000030A : 0009                		nop
(2)  441/FFFFFFFFC000030C : 2122                		mov	r2,@r1			; Save X/Y into polygon
(2)  442/FFFFFFFFC000030E : 1131                		mov	r3,@(4,r1)
(2)  443/FFFFFFFFC0000310 : 7108                		add	#8,r1
(2)  444/FFFFFFFFC0000312 : 60C2                		mov	@r12,r0
(2)  445/FFFFFFFFC0000314 : 3403                		cmp/ge	r0,r4
(2)  446/FFFFFFFFC0000316 : 8900                		dc.w $8900	; ** bt .higher
(2)  447/FFFFFFFFC0000318 : 2C42                		mov	r4,@r12
(2)  448/FFFFFFFFC000031A :                     ;.higher:
(2)  429/FFFFFFFFC000031A : 6085                		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  430/FFFFFFFFC000031C : 600D                		extu.w	r0,r0
(2)  431/FFFFFFFFC000031E :                     ; 		mov	#$C,r4			; *** TODO: muliply on script later
(2)  432/FFFFFFFFC000031E :                     ; 		mulu	r4,r0
(2)  433/FFFFFFFFC000031E :                     ; 		sts	macl,r0
(2)  434/FFFFFFFFC000031E : 6473                		mov	r7,r4			; r2 - vertex data + index
(2)  435/FFFFFFFFC0000320 : 340C                		add 	r0,r4
(2)  436/FFFFFFFFC0000322 : 6242                		mov	@r4,r2
(2)  437/FFFFFFFFC0000324 : 5341                		mov	@(4,r4),r3
(2)  438/FFFFFFFFC0000326 : 5442                		mov	@(8,r4),r4
(2)  439/FFFFFFFFC0000328 : B046                		bsr	mdlrd_setpoint
(2)  440/FFFFFFFFC000032A : 0009                		nop
(2)  441/FFFFFFFFC000032C : 2122                		mov	r2,@r1			; Save X/Y into polygon
(2)  442/FFFFFFFFC000032E : 1131                		mov	r3,@(4,r1)
(2)  443/FFFFFFFFC0000330 : 7108                		add	#8,r1
(2)  444/FFFFFFFFC0000332 : 60C2                		mov	@r12,r0
(2)  445/FFFFFFFFC0000334 : 3403                		cmp/ge	r0,r4
(2)  446/FFFFFFFFC0000336 : 8900                		dc.w $8900	; ** bt .higher
(2)  447/FFFFFFFFC0000338 : 2C42                		mov	r4,@r12
(2)  448/FFFFFFFFC000033A :                     ;.higher:
(2)  450/FFFFFFFFC000033A :                     
(2)  451/FFFFFFFFC000033A :                     	; *** Z-offscreen check***
(2)  452/FFFFFFFFC000033A : E1E7                		mov	#MAX_ZDIST>>8,r1
(2)  453/FFFFFFFFC000033C : 4118                		shll8	r1
(2)  454/FFFFFFFFC000033E : 4011                		cmp/pz	r0
(2)  455/FFFFFFFFC0000340 : 8930                		bt	.bad_face
(2)  456/FFFFFFFFC0000342 : 3013                		cmp/ge	r1,r0
(2)  457/FFFFFFFFC0000344 : 8B2E                		bf	.bad_face
(2)  458/FFFFFFFFC0000346 : 1CD1                		mov	r13,@(4,r12)
(2)  459/FFFFFFFFC0000348 :                     
(2)  460/FFFFFFFFC0000348 :                     ; 	; *** X/Y-offscreen check***
(2)  461/FFFFFFFFC0000348 : 460A                		lds	r6,mach
(2)  462/FFFFFFFFC000034A : 61D3                		mov	r13,r1
(2)  463/FFFFFFFFC000034C : 7108                		add	#polygn_points,r1
(2)  464/FFFFFFFFC000034E : 6212                		mov	@r1,r2
(2)  465/FFFFFFFFC0000350 : 6323                		mov	r2,r3
(2)  466/FFFFFFFFC0000352 : 9430                		mov	#-(320/2),r4
(2)  467/FFFFFFFFC0000354 : 654B                		neg	r4,r5
(2)  468/FFFFFFFFC0000356 :                     .nxt_x:
(2)  469/FFFFFFFFC0000356 : 6012                		mov	@r1,r0
(2)  470/FFFFFFFFC0000358 : 3043                		cmp/ge	r4,r0
(2)  471/FFFFFFFFC000035A : 8B00                		bf	.x_l
(2)  472/FFFFFFFFC000035C : 6203                		mov	r0,r2
(2)  473/FFFFFFFFC000035E :                     .x_l:
(2)  474/FFFFFFFFC000035E : 3053                		cmp/ge	r5,r0
(2)  475/FFFFFFFFC0000360 : 8900                		bt	.x_r
(2)  476/FFFFFFFFC0000362 : 6303                		mov	r0,r3
(2)  477/FFFFFFFFC0000364 :                     .x_r:
(2)  478/FFFFFFFFC0000364 : 4610                		dt	r6
(2)  479/FFFFFFFFC0000366 : 8FF6                		bf/s	.nxt_x
(2)  480/FFFFFFFFC0000368 : 7108                		add	#8,r1
(2)  481/FFFFFFFFC000036A : 060A                		sts	mach,r6
(2)  482/FFFFFFFFC000036C : 3243                		cmp/ge	r4,r2
(2)  483/FFFFFFFFC000036E : 8B19                		bf	.bad_face
(2)  484/FFFFFFFFC0000370 : 3353                		cmp/ge	r5,r3
(2)  485/FFFFFFFFC0000372 : 8917                		bt	.bad_face
(2)  486/FFFFFFFFC0000374 :                     
(2)  487/FFFFFFFFC0000374 :                     
(2)  488/FFFFFFFFC0000374 : 61D3                		mov	r13,r1
(2)  489/FFFFFFFFC0000376 : 710C                		add	#polygn_points+4,r1
(2)  490/FFFFFFFFC0000378 : 6212                		mov	@r1,r2
(2)  491/FFFFFFFFC000037A : 6323                		mov	r2,r3
(2)  492/FFFFFFFFC000037C : E490                		mov	#-(224/2),r4
(2)  493/FFFFFFFFC000037E : 654B                		neg	r4,r5
(2)  494/FFFFFFFFC0000380 :                     .nxt_y:
(2)  495/FFFFFFFFC0000380 : 6012                		mov	@r1,r0
(2)  496/FFFFFFFFC0000382 : 3043                		cmp/ge	r4,r0
(2)  497/FFFFFFFFC0000384 : 8B00                		bf	.y_l
(2)  498/FFFFFFFFC0000386 : 6203                		mov	r0,r2
(2)  499/FFFFFFFFC0000388 :                     .y_l:
(2)  500/FFFFFFFFC0000388 : 3053                		cmp/ge	r5,r0
(2)  501/FFFFFFFFC000038A : 8900                		bt	.y_r
(2)  502/FFFFFFFFC000038C : 6303                		mov	r0,r3
(2)  503/FFFFFFFFC000038E :                     .y_r:
(2)  504/FFFFFFFFC000038E : 4610                		dt	r6
(2)  505/FFFFFFFFC0000390 : 8FF6                		bf/s	.nxt_y
(2)  506/FFFFFFFFC0000392 : 7108                		add	#8,r1
(2)  507/FFFFFFFFC0000394 : 3243                		cmp/ge	r4,r2
(2)  508/FFFFFFFFC0000396 : 8B05                		bf	.bad_face
(2)  509/FFFFFFFFC0000398 : 3353                		cmp/ge	r5,r3
(2)  510/FFFFFFFFC000039A : 8903                		bt	.bad_face
(2)  511/FFFFFFFFC000039C :                     
(2)  512/FFFFFFFFC000039C :                     	; *** Validate face
(2)  513/FFFFFFFFC000039C : 7D38                		add	#sizeof_polygn,r13	; Next X/Y polygon
(2)  514/FFFFFFFFC000039E : 7C08                		add	#8,r12			; Next Z storage
(2)  515/FFFFFFFFC00003A0 : 7B01                		add	#1,r11			; Mark as a valid face
(2)  516/FFFFFFFFC00003A2 : 0009                		nop
(2)  517/FFFFFFFFC00003A4 :                     .bad_face:
(2)  518/FFFFFFFFC00003A4 : 4910                		dt	r9
(2)  519/FFFFFFFFC00003A6 : 8901                		bt	.exit
(2)  520/FFFFFFFFC00003A8 : AF32                		bra	.next_face
(2)  521/FFFFFFFFC00003AA : 0009                		nop
(2)  522/FFFFFFFFC00003AC :                     .exit:
(2)  523/FFFFFFFFC00003AC :                     ; 		mov.w	@r10,r9			;  r9 - Number of polygons of this model
(2)  524/FFFFFFFFC00003AC :                     ; 		extu.w	r9,r9
(2)  525/FFFFFFFFC00003AC :                     ;
(2)  526/FFFFFFFFC00003AC :                     ; 		dt	r9
(2)  527/FFFFFFFFC00003AC :                     ; 		cmp/pl	r9
(2)  528/FFFFFFFFC00003AC :                     ; 		bf	.exitn
(2)  529/FFFFFFFFC00003AC :                     ; .roll:
(2)  530/FFFFFFFFC00003AC :                     ; 		xor	r8,r8
(2)  531/FFFFFFFFC00003AC :                     ; 		mov	r12,r7
(2)  532/FFFFFFFFC00003AC :                     ; 		mov	r9,r10
(2)  533/FFFFFFFFC00003AC :                     ; .next:
(2)  534/FFFFFFFFC00003AC :                     ; 		mov	r7,r0
(2)  535/FFFFFFFFC00003AC :                     ; 		mov	@r0+,r1		; Z top
(2)  536/FFFFFFFFC00003AC :                     ; 		mov	@r0+,r2
(2)  537/FFFFFFFFC00003AC :                     ; 		mov	@r0+,r3		; Z bottom
(2)  538/FFFFFFFFC00003AC :                     ; 		mov	@r0+,r4
(2)  539/FFFFFFFFC00003AC :                     ; 		cmp/gt	r3,r1
(2)  540/FFFFFFFFC00003AC :                     ; 		bf	.higher
(2)  541/FFFFFFFFC00003AC :                     ; 		mov	r2,@-r0
(2)  542/FFFFFFFFC00003AC :                     ; 		mov	r1,@-r0
(2)  543/FFFFFFFFC00003AC :                     ; 		mov	r4,@-r0
(2)  544/FFFFFFFFC00003AC :                     ; 		mov	r3,@-r0
(2)  545/FFFFFFFFC00003AC :                     ; 		add	#1,r8
(2)  546/FFFFFFFFC00003AC :                     ; .higher:
(2)  547/FFFFFFFFC00003AC :                     ; 		dt	r10
(2)  548/FFFFFFFFC00003AC :                     ; 		bf/s	.next
(2)  549/FFFFFFFFC00003AC :                     ; 		add	#8,r7
(2)  550/FFFFFFFFC00003AC :                     ; 		tst	r8,r8
(2)  551/FFFFFFFFC00003AC :                     ; 		bf	.roll
(2)  552/FFFFFFFFC00003AC :                     ; .exitn:
(2)  553/FFFFFFFFC00003AC : 4F26                		lds	@r15+,pr
(2)  554/FFFFFFFFC00003AE : 000B                		rts
(2)  555/FFFFFFFFC00003B0 : 0009                		nop
(2)  556/FFFFFFFFC00003B2 :                     		align 4
(2)  557/FFFFFFFFC00003B4 : 03D4 FF60           		ltorg
(2)  558/FFFFFFFFC00003B8 :                     
(2)  559/FFFFFFFFC00003B8 :                     ; ----------------------------------------
(2)  560/FFFFFFFFC00003B8 :                     ; Modify position to current point
(2)  561/FFFFFFFFC00003B8 :                     ; ----------------------------------------
(2)  562/FFFFFFFFC00003B8 :                     
(2)  563/FFFFFFFFC00003B8 :                     ; r2 - X
(2)  564/FFFFFFFFC00003B8 :                     ; r3 - Y
(2)  565/FFFFFFFFC00003B8 :                     ; r4 - Z
(2)  566/FFFFFFFFC00003B8 :                     mdlrd_setpoint:
(2)  567/FFFFFFFFC00003B8 : D03F                		mov	#Cach_BkupPnt_S,r0
(2)  568/FFFFFFFFC00003BA : 4022                		sts	pr,@-r0
(2)  569/FFFFFFFFC00003BC : 2056                		mov 	r5,@-r0
(2)  570/FFFFFFFFC00003BE : 2066                		mov 	r6,@-r0
(2)  571/FFFFFFFFC00003C0 : 2076                		mov 	r7,@-r0
(2)  572/FFFFFFFFC00003C2 : 2086                		mov 	r8,@-r0
(2)  573/FFFFFFFFC00003C4 : 2096                		mov 	r9,@-r0
(2)  574/FFFFFFFFC00003C6 : 20A6                		mov 	r10,@-r0
(2)  575/FFFFFFFFC00003C8 : 20B6                		mov 	r11,@-r0
(2)  576/FFFFFFFFC00003CA :                     
(2)  577/FFFFFFFFC00003CA :                     	; Object rotation
(2)  578/FFFFFFFFC00003CA : 6523                		mov	r2,r5			; r5 - X
(2)  579/FFFFFFFFC00003CC : 6643                		mov	r4,r6			; r6 - Z
(2)  580/FFFFFFFFC00003CE : 85E7                  		mov.w 	@(mdl_x_rot,r14),r0
(2)  581/FFFFFFFFC00003D0 : B056                  		bsr	mdlrd_rotate
(2)  582/FFFFFFFFC00003D2 : 4009                  		shlr2	r0
(2)  583/FFFFFFFFC00003D4 : 6273                   		mov	r7,r2
(2)  584/FFFFFFFFC00003D6 : 6533                   		mov	r3,r5
(2)  585/FFFFFFFFC00003D8 : 6683                  		mov	r8,r6
(2)  586/FFFFFFFFC00003DA : 85E9                  		mov.w	@(mdl_z_rot,r14),r0
(2)  587/FFFFFFFFC00003DC : 4001                  		shlr	r0
(2)  588/FFFFFFFFC00003DE : B04F                  		bsr	mdlrd_rotate
(2)  589/FFFFFFFFC00003E0 : 4009                  		shlr2	r0
(2)  590/FFFFFFFFC00003E2 : 6483                   		mov	r8,r4
(2)  591/FFFFFFFFC00003E4 : 6523                   		mov	r2,r5
(2)  592/FFFFFFFFC00003E6 : 6673                   		mov	r7,r6
(2)  593/FFFFFFFFC00003E8 : 85E8                   		mov.w	@(mdl_y_rot,r14),r0
(2)  594/FFFFFFFFC00003EA : 4001                  		shlr	r0
(2)  595/FFFFFFFFC00003EC : B048                  		bsr	mdlrd_rotate
(2)  596/FFFFFFFFC00003EE : 4009                  		shlr2	r0
(2)  597/FFFFFFFFC00003F0 : 6273                   		mov	r7,r2
(2)  598/FFFFFFFFC00003F2 : 6383                   		mov	r8,r3
(2)  599/FFFFFFFFC00003F4 : 85E4                		mov.w	@(mdl_x_pos,r14),r0
(2)  600/FFFFFFFFC00003F6 : 650F                		exts.w	r0,r5
(2)  601/FFFFFFFFC00003F8 : 85E5                		mov.w	@(mdl_y_pos,r14),r0
(2)  602/FFFFFFFFC00003FA : 660F                		exts.w	r0,r6
(2)  603/FFFFFFFFC00003FC : 85E6                		mov.w	@(mdl_z_pos,r14),r0
(2)  604/FFFFFFFFC00003FE : 670F                		exts.w	r0,r7
(2)  605/FFFFFFFFC0000400 :                     ;  		shar	r5
(2)  606/FFFFFFFFC0000400 :                     ;  		shar	r6
(2)  607/FFFFFFFFC0000400 :                     ;  		shar	r7
(2)  608/FFFFFFFFC0000400 : 325C                		add 	r5,r2
(2)  609/FFFFFFFFC0000402 : 336C                		add 	r6,r3
(2)  610/FFFFFFFFC0000404 : 347C                		add 	r7,r4
(2)  611/FFFFFFFFC0000406 :                     
(2)  612/FFFFFFFFC0000406 :                     	; Include camera changes
(2)  613/FFFFFFFFC0000406 :                     ; 		mov 	#RAM_Mars_DreqRead+Dreq_ObjCam,r11
(2)  614/FFFFFFFFC0000406 : DB2D                		mov	#RAM_Mars_ObjCamera,r11
(2)  615/FFFFFFFFC0000408 : 55B0                		mov	@(cam_x_pos,r11),r5
(2)  616/FFFFFFFFC000040A : 56B1                		mov	@(cam_y_pos,r11),r6
(2)  617/FFFFFFFFC000040C : 57B2                		mov	@(cam_z_pos,r11),r7
(2)  618/FFFFFFFFC000040E :                     ; 		shlr	r5
(2)  619/FFFFFFFFC000040E :                     ; 		shlr	r6
(2)  620/FFFFFFFFC000040E :                     ; 		shlr	r7
(2)  621/FFFFFFFFC000040E : 655F                		exts	r5,r5
(2)  622/FFFFFFFFC0000410 : 666F                		exts	r6,r6
(2)  623/FFFFFFFFC0000412 : 677F                		exts	r7,r7
(2)  624/FFFFFFFFC0000414 : 3258                		sub 	r5,r2
(2)  625/FFFFFFFFC0000416 : 3368                		sub 	r6,r3
(2)  626/FFFFFFFFC0000418 : 347C                		add 	r7,r4
(2)  627/FFFFFFFFC000041A :                     
(2)  628/FFFFFFFFC000041A : 6523                		mov	r2,r5
(2)  629/FFFFFFFFC000041C : 6643                		mov	r4,r6
(2)  630/FFFFFFFFC000041E : 50B3                  		mov 	@(cam_x_rot,r11),r0
(2)  631/FFFFFFFFC0000420 : B02E                  		bsr	mdlrd_rotate
(2)  632/FFFFFFFFC0000422 : 4009                		shlr2	r0
(2)  633/FFFFFFFFC0000424 : 6273                   		mov	r7,r2
(2)  634/FFFFFFFFC0000426 : 6483                   		mov	r8,r4
(2)  635/FFFFFFFFC0000428 : 6533                   		mov	r3,r5
(2)  636/FFFFFFFFC000042A : 6683                  		mov	r8,r6
(2)  637/FFFFFFFFC000042C : 50B4                  		mov 	@(cam_y_rot,r11),r0
(2)  638/FFFFFFFFC000042E : B027                  		bsr	mdlrd_rotate
(2)  639/FFFFFFFFC0000430 : 4009                		shlr2	r0
(2)  640/FFFFFFFFC0000432 : 6483                   		mov	r8,r4
(2)  641/FFFFFFFFC0000434 : 6523                   		mov	r2,r5
(2)  642/FFFFFFFFC0000436 : 6673                   		mov	r7,r6
(2)  643/FFFFFFFFC0000438 : 50B5                   		mov 	@(cam_z_rot,r11),r0
(2)  644/FFFFFFFFC000043A : B021                  		bsr	mdlrd_rotate
(2)  645/FFFFFFFFC000043C : 4009                		shlr2	r0
(2)  646/FFFFFFFFC000043E : 6273                   		mov	r7,r2
(2)  647/FFFFFFFFC0000440 : 6383                   		mov	r8,r3
(2)  648/FFFFFFFFC0000442 :                     
(2)  649/FFFFFFFFC0000442 :                     	; Weak perspective projection
(2)  650/FFFFFFFFC0000442 :                     	; this is the best I got,
(2)  651/FFFFFFFFC0000442 :                     	; It breaks on large faces
(2)  652/FFFFFFFFC0000442 : D71F                		mov	#320<<16,r7
(2)  653/FFFFFFFFC0000444 : 684B                		neg	r4,r8		; reverse Z
(2)  654/FFFFFFFFC0000446 : 4815                		cmp/pl	r8
(2)  655/FFFFFFFFC0000448 : 8902                		bt	.inside
(2)  656/FFFFFFFFC000044A : 4709                		shlr2	r7
(2)  657/FFFFFFFFC000044C : A005                		bra	.zmulti
(2)  658/FFFFFFFFC000044E : 4709                		shlr2	r7
(2)  659/FFFFFFFFC0000450 :                     .inside:
(2)  660/FFFFFFFFC0000450 :                     ; 		mov	#1,r0
(2)  661/FFFFFFFFC0000450 :                     ; 		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2)  662/FFFFFFFFC0000450 : 993E                		mov 	#_JR,r9
(2)  663/FFFFFFFFC0000452 : 2982                		mov 	r8,@r9
(2)  664/FFFFFFFFC0000454 : 1971                		mov 	r7,@(4,r9)
(2)  665/FFFFFFFFC0000456 : 0009                		nop
(2)  666/FFFFFFFFC0000458 : 5791                		mov 	@(4,r9),r7
(2)  667/FFFFFFFFC000045A :                     ; 		xor	r0,r0
(2)  668/FFFFFFFFC000045A :                     ; 		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2)  669/FFFFFFFFC000045A :                     .zmulti:
(2)  670/FFFFFFFFC000045A : 327D                		dmuls	r7,r2
(2)  671/FFFFFFFFC000045C : 000A                		sts	mach,r0
(2)  672/FFFFFFFFC000045E : 021A                		sts	macl,r2
(2)  673/FFFFFFFFC0000460 : 220D                		xtrct	r0,r2
(2)  674/FFFFFFFFC0000462 : 337D                		dmuls	r7,r3
(2)  675/FFFFFFFFC0000464 : 000A                		sts	mach,r0
(2)  676/FFFFFFFFC0000466 : 031A                		sts	macl,r3
(2)  677/FFFFFFFFC0000468 : 230D                		xtrct	r0,r3
(2)  678/FFFFFFFFC000046A :                     
(2)  679/FFFFFFFFC000046A : D016                		mov	#Cach_BkupPnt_L,r0
(2)  680/FFFFFFFFC000046C : 6B06                		mov	@r0+,r11
(2)  681/FFFFFFFFC000046E : 6A06                		mov	@r0+,r10
(2)  682/FFFFFFFFC0000470 : 6906                		mov	@r0+,r9
(2)  683/FFFFFFFFC0000472 : 6806                		mov	@r0+,r8
(2)  684/FFFFFFFFC0000474 : 6706                		mov	@r0+,r7
(2)  685/FFFFFFFFC0000476 : 6606                		mov	@r0+,r6
(2)  686/FFFFFFFFC0000478 : 6506                		mov	@r0+,r5
(2)  687/FFFFFFFFC000047A : 4026                		lds	@r0+,pr
(2)  688/FFFFFFFFC000047C :                     
(2)  689/FFFFFFFFC000047C :                     ; 	; Set the most far points
(2)  690/FFFFFFFFC000047C :                     ; 	; for each direction (X,Y,Z)
(2)  691/FFFFFFFFC000047C :                     ; 		cmp/gt	r13,r4
(2)  692/FFFFFFFFC000047C :                     ; 		bf	.save_z2
(2)  693/FFFFFFFFC000047C :                     ; 		mov	r4,r13
(2)  694/FFFFFFFFC000047C :                     ; .save_z2:
(2)  695/FFFFFFFFC000047C :                     ; 		cmp/gt	r5,r4
(2)  696/FFFFFFFFC000047C :                     ; 		bt	.save_z
(2)  697/FFFFFFFFC000047C :                     ; 		mov	r4,r5
(2)  698/FFFFFFFFC000047C :                     ; .save_z:
(2)  699/FFFFFFFFC000047C :                     ; 		cmp/gt	r8,r2
(2)  700/FFFFFFFFC000047C :                     ; 		bf	.x_lw
(2)  701/FFFFFFFFC000047C :                     ; 		mov	r2,r8
(2)  702/FFFFFFFFC000047C :                     ; .x_lw:
(2)  703/FFFFFFFFC000047C :                     ; 		cmp/gt	r9,r2
(2)  704/FFFFFFFFC000047C :                     ; 		bt	.x_rw
(2)  705/FFFFFFFFC000047C :                     ; 		mov	r2,r9
(2)  706/FFFFFFFFC000047C :                     ; .x_rw:
(2)  707/FFFFFFFFC000047C :                     ; 		cmp/gt	r11,r3
(2)  708/FFFFFFFFC000047C :                     ; 		bf	.y_lw
(2)  709/FFFFFFFFC000047C :                     ; 		mov	r3,r11
(2)  710/FFFFFFFFC000047C :                     ; .y_lw:
(2)  711/FFFFFFFFC000047C :                     ; 		cmp/gt	r12,r3
(2)  712/FFFFFFFFC000047C :                     ; 		bt	.y_rw
(2)  713/FFFFFFFFC000047C :                     ; 		mov	r3,r12
(2)  714/FFFFFFFFC000047C :                     ; .y_rw:
(2)  715/FFFFFFFFC000047C : 000B                		rts
(2)  716/FFFFFFFFC000047E : 0009                		nop
(2)  717/FFFFFFFFC0000480 :                     		align 4
(2)  718/FFFFFFFFC0000480 :                     
(2)  719/FFFFFFFFC0000480 :                     ; ------------------------------
(2)  720/FFFFFFFFC0000480 :                     ; Rotate point
(2)  721/FFFFFFFFC0000480 :                     ;
(2)  722/FFFFFFFFC0000480 :                     ; Entry:
(2)  723/FFFFFFFFC0000480 :                     ; r5: x
(2)  724/FFFFFFFFC0000480 :                     ; r6: y
(2)  725/FFFFFFFFC0000480 :                     ; r0: theta
(2)  726/FFFFFFFFC0000480 :                     ;
(2)  727/FFFFFFFFC0000480 :                     ; Returns:
(2)  728/FFFFFFFFC0000480 :                     ; r7: (x  cos @) + (y sin @)
(2)  729/FFFFFFFFC0000480 :                     ; r8: (x -sin @) + (y cos @)
(2)  730/FFFFFFFFC0000480 :                     ; ------------------------------
(2)  731/FFFFFFFFC0000480 :                     
(2)  732/FFFFFFFFC0000480 :                     		align 4
(2)  733/FFFFFFFFC0000480 :                     mdlrd_rotate:
(2)  734/FFFFFFFFC0000480 : 9727                    		mov	#$7FF,r7
(2)  735/FFFFFFFFC0000482 : 2079                    		and	r7,r0
(2)  736/FFFFFFFFC0000484 : 4008                   		shll2	r0
(2)  737/FFFFFFFFC0000486 : D710                		mov	#sin_table,r7
(2)  738/FFFFFFFFC0000488 : D810                		mov	#sin_table+$800,r8
(2)  739/FFFFFFFFC000048A : 097E                		mov	@(r0,r7),r9
(2)  740/FFFFFFFFC000048C : 0A8E                		mov	@(r0,r8),r10
(2)  741/FFFFFFFFC000048E :                     
(2)  742/FFFFFFFFC000048E : 3A5D                		dmuls	r5,r10		; x cos @
(2)  743/FFFFFFFFC0000490 : 071A                		sts	macl,r7
(2)  744/FFFFFFFFC0000492 : 000A                		sts	mach,r0
(2)  745/FFFFFFFFC0000494 : 270D                		xtrct	r0,r7
(2)  746/FFFFFFFFC0000496 : 396D                		dmuls	r6,r9		; y sin @
(2)  747/FFFFFFFFC0000498 : 081A                		sts	macl,r8
(2)  748/FFFFFFFFC000049A : 000A                		sts	mach,r0
(2)  749/FFFFFFFFC000049C : 280D                		xtrct	r0,r8
(2)  750/FFFFFFFFC000049E : 378C                		add	r8,r7
(2)  751/FFFFFFFFC00004A0 :                     
(2)  752/FFFFFFFFC00004A0 : 699B                		neg	r9,r9
(2)  753/FFFFFFFFC00004A2 : 395D                		dmuls	r5,r9		; x -sin @
(2)  754/FFFFFFFFC00004A4 : 081A                		sts	macl,r8
(2)  755/FFFFFFFFC00004A6 : 000A                		sts	mach,r0
(2)  756/FFFFFFFFC00004A8 : 280D                		xtrct	r0,r8
(2)  757/FFFFFFFFC00004AA : 3A6D                		dmuls	r6,r10		; y cos @
(2)  758/FFFFFFFFC00004AC : 091A                		sts	macl,r9
(2)  759/FFFFFFFFC00004AE : 000A                		sts	mach,r0
(2)  760/FFFFFFFFC00004B0 : 290D                		xtrct	r0,r9
(2)  761/FFFFFFFFC00004B2 : 389C                		add	r9,r8
(2)  762/FFFFFFFFC00004B4 : 000B                 		rts
(2)  763/FFFFFFFFC00004B6 : 0009                		nop
(2)  764/FFFFFFFFC00004B8 :                     		align 4
(2)  765/FFFFFFFFC00004B8 : C000 04F4 2603 15C8 		ltorg
                    0140 0000 C000 04D4 
                    0600 2864 0600 3064 
                    FF00 07FF           
(2)  766/FFFFFFFFC00004D4 :                     
(2)  767/FFFFFFFFC00004D4 :                     ; ------------------------------------------------
(2)  768/FFFFFFFFC00004D4 :                     
(2)  769/FFFFFFFFC00004D4 :                     			align 4
(2)  770/FFFFFFFFC00004D4 :                     Cach_BkupPnt_L		ds.l 8				; **
(2)  771/FFFFFFFFC00004F4 :                     Cach_BkupPnt_S		ds.l 0				; <-- Reads backwards
(2)  772/FFFFFFFFC00004F4 :                     Cach_BkupS_L		ds.l 5				; **
(2)  773/FFFFFFFFC0000508 :                     Cach_BkupS_S		ds.l 0				; <-- Reads backwards
(2)  774/FFFFFFFFC0000508 :                     Cach_SlvStack_L		ds.l 10				; **
(2)  775/FFFFFFFFC0000530 :                     Cach_SlvStack_S		ds.l 0				; <-- Reads backwards
(2)  776/FFFFFFFFC0000530 :                     MarsSnd_RvMode		ds.l 1				; ROM RV protection flag
(2)  777/FFFFFFFFC0000534 :                     MarsSnd_PwmControl	ds.b 8*7			; 8 bytes per channel.
(2)  778/FFFFFFFFC000056C :                     MarsSnd_PwmChnls	ds.b sizeof_sndchn*MAX_PWMCHNL
(2)  779/FFFFFFFFC0000684 :                     
(2)  780/FFFFFFFFC0000684 :                     ; ------------------------------------------------
(2)  781/ 6002864 :                     .end:		phase CACHE_SLAVE+.end&$1FFF
(2)  782/ 6002864 :                     
(2)  783/ 6002864 :                     		align 4
(2)  784/ 6002864 :                     CACHE_SLAVE_E:
(2)  788/ 6002864 :                     
(1) 2161/ 6002864 :                     
(1) 2162/ 6002864 :                     ; ====================================================================
(1) 2163/ 6002864 :                     ; ----------------------------------------------------------------
(1) 2164/ 6002864 :                     ; Data
(1) 2165/ 6002864 :                     ; ----------------------------------------------------------------
(1) 2166/ 6002864 :                     
(1) 2167/ 6002864 :                     		align 4
(1) 2168/ 6002864 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 2169/ 6005064 :                     ; m_ascii	binclude "system/mars/data/m_ascii.bin"
(1) 2170/ 6005064 :                     		align 4
(1) 2171/ 6005064 :                     		include "data/mars_sdram.asm"
(2)    1/ 6005064 :                     ; ====================================================================
(2)    2/ 6005064 :                     ; ----------------------------------------------------------------
(2)    3/ 6005064 :                     ; SH2 SDRAM data
(2)    4/ 6005064 :                     ; 
(2)    5/ 6005064 :                     ; This data is stored on SDRAM, always available to use on the 32X
(2)    6/ 6005064 :                     ; side and can be rewritible, but it is smaller than ROM
(2)    7/ 6005064 :                     ;
(2)    8/ 6005064 :                     ; PWM samples can be used here but those take a lot of space...
(2)    9/ 6005064 :                     ; use ROM (mars_rom.asm) instead, those are RV-protected on SH2
(2)   10/ 6005064 :                     ; ----------------------------------------------------------------
(2)   11/ 6005064 :                     
(2)   12/ 6005064 :                     		align 4
(2)   13/ 6005064 :                     
(1) 2172/ 6005064 :                     
(1) 2173/ 6005064 :                     ; ====================================================================
(1) 2174/ 6005064 :                     ; ----------------------------------------------------------------
(1) 2175/ 6005064 :                     ; MARS SH2 RAM
(1) 2176/ 6005064 :                     ; ----------------------------------------------------------------
(1) 2177/ 6005064 :                     
(1) 2178/ 6005064 :                     		align $10
(1) 2179/ 6005070 :                     SH2_RAM:
(1) 2180/ 6005070 : (MACRO)             		struct SH2_RAM|TH
(1) 2180/ 6005070 :                     
(1) 2180/ 6005070 :                     ;       if WPATCH=1
(1) 2180/ 6005070 :                     ; GLBL_LASTPC   set *
(1) 2180/ 6005070 :                     ; GLBL_LASTORG  set *
(1) 2180/ 6005070 :                     ;               dephase
(1) 2180/ 6005070 :                     ;               phase SH2_RAM|TH
(1) 2180/ 6005070 :                     ;       else
(1) 2180/ 6005070 : =$6005070           GLBL_LASTPC     set *
(1) 2180/   54270 :                                     dephase
(1) 2180/   54270 : =$54270             GLBL_LASTORG    set *
(1) 2180/26005070 :                                     phase SH2_RAM|TH
(1) 2180/26005070 :                     ;       endif
(1) 2187/26005070 :                     MarsRam_System		ds.b (sizeof_marssys-MarsRam_System)
(1) 2188/26005D00 :                     MarsRam_Sound		ds.b (sizeof_marssnd-MarsRam_Sound)
(1) 2189/26006080 :                     MarsRam_Video		ds.b (sizeof_marsvid-MarsRam_Video)
(1) 2190/26032080 :                     sizeof_marsram		ds.l 0
(1) 2192/26032080 :                     
(1) 2193/26032080 :                     .here:
(1) 2197/26032080 : (MACRO)             		finish
(1) 2197/26005070 :                                     !org GLBL_LASTORG
(1) 2197/ 6005070 :                                     phase GLBL_LASTPC
(1) 2198/ 6005070 :                     
(1) 2199/ 6005070 :                     ; ====================================================================
(1) 2200/ 6005070 :                     ; ----------------------------------------------------------------
(1) 2201/ 6005070 :                     ; MARS Video RAM
(1) 2202/ 6005070 :                     ;
(1) 2203/ 6005070 :                     ; RAM_Mars_ScrnBuff is recycled for all pseudo-screen modes
(1) 2204/ 6005070 :                     ; ----------------------------------------------------------------
(1) 2205/ 6005070 :                     
(1) 2206/ 6005070 : (MACRO)             			struct MarsRam_Video
(1) 2206/ 6005070 :                     
(1) 2206/ 6005070 :                     ;       if WPATCH=1
(1) 2206/ 6005070 :                     ; GLBL_LASTPC   set *
(1) 2206/ 6005070 :                     ; GLBL_LASTORG  set *
(1) 2206/ 6005070 :                     ;               dephase
(1) 2206/ 6005070 :                     ;               phase MARSRAM_VIDEO
(1) 2206/ 6005070 :                     ;       else
(1) 2206/ 6005070 : =$6005070           GLBL_LASTPC     set *
(1) 2206/   54270 :                                     dephase
(1) 2206/   54270 : =$54270             GLBL_LASTORG    set *
(1) 2206/26006080 :                                     phase MARSRAM_VIDEO
(1) 2206/26006080 :                     ;       endif
(1) 2207/26006080 :                     RAM_Mars_ScrnBuff	ds.b MAX_SCRNBUFF		; Single buffer for all screen modes
(1) 2208/26032080 :                     sizeof_marsvid		ds.l 0
(1) 2209/26032080 : (MACRO)             			finish
(1) 2209/26006080 :                                     !org GLBL_LASTORG
(1) 2209/ 6005070 :                                     phase GLBL_LASTPC
(1) 2210/ 6005070 :                     
(1) 2211/ 6005070 :                     ; --------------------------------------------------------
(1) 2212/ 6005070 :                     ; per-screen RAM
(1) 2213/ 6005070 : (MACRO)             			struct RAM_Mars_ScrnBuff
(1) 2213/ 6005070 :                     
(1) 2213/ 6005070 :                     ;       if WPATCH=1
(1) 2213/ 6005070 :                     ; GLBL_LASTPC   set *
(1) 2213/ 6005070 :                     ; GLBL_LASTORG  set *
(1) 2213/ 6005070 :                     ;               dephase
(1) 2213/ 6005070 :                     ;               phase RAM_MARS_SCRNBUFF
(1) 2213/ 6005070 :                     ;       else
(1) 2213/ 6005070 : =$6005070           GLBL_LASTPC     set *
(1) 2213/   54270 :                                     dephase
(1) 2213/   54270 : =$54270             GLBL_LASTORG    set *
(1) 2213/26006080 :                                     phase RAM_MARS_SCRNBUFF
(1) 2213/26006080 :                     ;       endif
(1) 2214/26006080 :                     Cach_DrawTimers		ds.l 4				; Screen draw-request timers, write $02 to these
(1) 2215/26006090 :                     RAM_Mars_ScrlBuff	ds.b sizeof_mscrl*2		; Scrolling buffers
(1) 2216/260060F8 :                     RAM_Mars_ScrlData	ds.b ((320+16)*(224+16))+320	; Entire pixeldata for one scroll: (w*h)+320
(1) 2217/26019D38 :                     end_scrn02		ds.l 0
(1) 2218/26019D38 : (MACRO)             			finish
(1) 2218/26006080 :                                     !org GLBL_LASTORG
(1) 2218/ 6005070 :                                     phase GLBL_LASTPC
(1) 2219/ 6005070 :                     
(1) 2220/ 6005070 :                     ; 3D MODE ONLY:
(1) 2221/ 6005070 : (MACRO)             			struct RAM_Mars_ScrnBuff
(1) 2221/ 6005070 :                     
(1) 2221/ 6005070 :                     ;       if WPATCH=1
(1) 2221/ 6005070 :                     ; GLBL_LASTPC   set *
(1) 2221/ 6005070 :                     ; GLBL_LASTORG  set *
(1) 2221/ 6005070 :                     ;               dephase
(1) 2221/ 6005070 :                     ;               phase RAM_MARS_SCRNBUFF
(1) 2221/ 6005070 :                     ;       else
(1) 2221/ 6005070 : =$6005070           GLBL_LASTPC     set *
(1) 2221/   54270 :                                     dephase
(1) 2221/   54270 : =$54270             GLBL_LASTORG    set *
(1) 2221/26006080 :                                     phase RAM_MARS_SCRNBUFF
(1) 2221/26006080 :                     ;       endif
(1) 2222/26006080 :                     RAM_Mars_SVdpDrwList	ds.b sizeof_plypz*MAX_SVDP_PZ	; Sprites / Polygon pieces
(1) 2223/26012A40 :                     RAM_Mars_SVdpDrwList_e	ds.l 0				; (END point label)
(1) 2224/26012A40 :                     RAM_Mars_Polygons_0	ds.b sizeof_polygn*MAX_FACES	; Read/Write polygon data
(1) 2225/260200A0 :                     RAM_Mars_Polygons_1	ds.b sizeof_polygn*MAX_FACES
(1) 2226/2602D700 :                     RAM_Mars_PlgnList_0	ds.l MAX_FACES*2		; Polygon order list: Zpos, pointer
(1) 2227/2602F5A0 :                     RAM_Mars_PlgnList_1	ds.l MAX_FACES*2
(1) 2228/26031440 :                     RAM_Mars_PlgnNum_0	ds.l 1				; Number of polygons to process
(1) 2229/26031444 :                     RAM_Mars_PlgnNum_1	ds.l 1
(1) 2230/26031448 :                     RAM_Mars_Objects	ds.b sizeof_mdlobj*MAX_MODELS	; Slave's Objects
(1) 2231/260315C8 :                     RAM_Mars_ObjCamera	ds.b sizeof_camera		; Slave's Camera
(1) 2232/260315E0 :                     sizeof_scrn04		ds.l 0
(1) 2233/260315E0 : (MACRO)             			finish
(1) 2233/26006080 :                                     !org GLBL_LASTORG
(1) 2233/ 6005070 :                                     phase GLBL_LASTPC
(1) 2234/ 6005070 :                     ; 	if MOMPASS=5
(1) 2240/ 6005070 :                     ; 	endif
(1) 2241/ 6005070 :                     
(1) 2242/ 6005070 :                     ; ====================================================================
(1) 2243/ 6005070 :                     ; ----------------------------------------------------------------
(1) 2244/ 6005070 :                     ; MARS Sound RAM
(1) 2245/ 6005070 :                     ; ----------------------------------------------------------------
(1) 2246/ 6005070 :                     
(1) 2247/ 6005070 : (MACRO)             			struct MarsRam_Sound
(1) 2247/ 6005070 :                     
(1) 2247/ 6005070 :                     ;       if WPATCH=1
(1) 2247/ 6005070 :                     ; GLBL_LASTPC   set *
(1) 2247/ 6005070 :                     ; GLBL_LASTORG  set *
(1) 2247/ 6005070 :                     ;               dephase
(1) 2247/ 6005070 :                     ;               phase MARSRAM_SOUND
(1) 2247/ 6005070 :                     ;       else
(1) 2247/ 6005070 : =$6005070           GLBL_LASTPC     set *
(1) 2247/   54270 :                                     dephase
(1) 2247/   54270 : =$54270             GLBL_LASTORG    set *
(1) 2247/26005D00 :                                     phase MARSRAM_SOUND
(1) 2247/26005D00 :                     ;       endif
(1) 2248/26005D00 :                     MarsSnd_PwmCache	ds.b MAX_PWMBACKUP*MAX_PWMCHNL
(1) 2249/26006080 :                     sizeof_marssnd		ds.l 0
(1) 2250/26006080 : (MACRO)             			finish
(1) 2250/26005D00 :                                     !org GLBL_LASTORG
(1) 2250/ 6005070 :                                     phase GLBL_LASTPC
(1) 2251/ 6005070 :                     
(1) 2252/ 6005070 :                     ; ====================================================================
(1) 2253/ 6005070 :                     ; ----------------------------------------------------------------
(1) 2254/ 6005070 :                     ; MARS System RAM
(1) 2255/ 6005070 :                     ; ----------------------------------------------------------------
(1) 2256/ 6005070 :                     
(1) 2257/ 6005070 : (MACRO)             			struct MarsRam_System
(1) 2257/ 6005070 :                     
(1) 2257/ 6005070 :                     ;       if WPATCH=1
(1) 2257/ 6005070 :                     ; GLBL_LASTPC   set *
(1) 2257/ 6005070 :                     ; GLBL_LASTORG  set *
(1) 2257/ 6005070 :                     ;               dephase
(1) 2257/ 6005070 :                     ;               phase MARSRAM_SYSTEM
(1) 2257/ 6005070 :                     ;       else
(1) 2257/ 6005070 : =$6005070           GLBL_LASTPC     set *
(1) 2257/   54270 :                                     dephase
(1) 2257/   54270 : =$54270             GLBL_LASTORG    set *
(1) 2257/26005070 :                                     phase MARSRAM_SYSTEM
(1) 2257/26005070 :                     ;       endif
(1) 2258/26005070 :                     RAM_Mars_DreqDma	ds.b sizeof_dreq	; DREQ data from Genesis ***DO NOT READ FROM HERE***
(1) 2259/26005668 :                     RAM_Mars_DreqRead	ds.b sizeof_dreq	; Copy of DREQ for reading.
(1) 2260/26005C60 :                     RAM_Mars_Global		ds.l sizeof_MarsGbl	; gbr values go here
(1) 2261/26005D00 :                     sizeof_marssys		ds.l 0
(1) 2262/26005D00 : (MACRO)             			finish
(1) 2262/26005070 :                                     !org GLBL_LASTORG
(1) 2262/ 6005070 :                                     phase GLBL_LASTPC
(1) 2263/ 6005070 :                     
(1) 2264/ 6005070 :                     ; ====================================================================
(1) 2265/ 6005070 :                     
(1) 2266/ 6005070 :                     
(1) 2267/ 6005070 :                     
     174/ 6005070 :                     		cpu 68000
     175/ 6005070 :                     		padding off
     176/   54270 :                     		dephase
     177/   54270 :                     MARS_RAMDATA_E:
     178/   54270 :                     		align 4
     179/   54270 :                     
     180/   54270 :                     ; ====================================================================
     181/   54270 :                     ; --------------------------------------------------------
     182/   54270 :                     ; SH2's ROM view
     183/   54270 :                     ; This section will be gone if RV bit is set to 1
     184/   54270 :                     ; --------------------------------------------------------
     185/   54270 :                     
     186/ 2054270 :                     		phase CS1+*
     187/ 2054270 :                     		align 4
     188/ 2054270 :                     		include "sound/smpl_pwm.asm"		; GEMA: PWM samples
(1)    1/ 2054270 :                     ; ====================================================================
(1)    2/ 2054270 :                     ; --------------------------------------------------------
(1)    3/ 2054270 :                     ; GEMA/Nikona PWM instruments
(1)    4/ 2054270 :                     ;
(1)    5/ 2054270 :                     ; These MUST be located at SH2's ROM area: $02000000
(1)    6/ 2054270 :                     ; THE SDRAM area ($06000000) CAN be used but there's
(1)    7/ 2054270 :                     ; no enough storage the samples, the SH2 side supports
(1)    8/ 2054270 :                     ; ROM-protection in case the RV-bit is set for
(1)    9/ 2054270 :                     ; Genesis' DMA transfers.
(1)   10/ 2054270 :                     ;
(1)   11/ 2054270 :                     ; Sample data is 8-bit at 22050hz
(1)   12/ 2054270 :                     ; INCLUDING STEREO SAMPLES.
(1)   13/ 2054270 :                     ;
(1)   14/ 2054270 :                     ; *** PUT align 4 AT THE TOP OF EVERY LABEL ***
(1)   15/ 2054270 :                     ; --------------------------------------------------------
(1)   16/ 2054270 :                     
(1)   17/ 2054270 :                     ; ; Special sample data macro
(1)   18/ 2054270 :                     ; gSmpHead macro len,loop
(1)   19/ 2054270 :                     ; 	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   20/ 2054270 :                     ; 	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   21/ 2054270 :                     ; 	endm
(1)   22/ 2054270 :                     
(1)   23/ 2054270 :                     	align 4
(1)   24/ 2054270 :                     SmpIns_Nadie:
(1)   25/ 2054270 : (MACRO)             	gSmpHead .end-.start,0
(1)   25/ 2054270 : 1A67 02                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   25/ 2054273 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   26/ 2054276 :                     .start:	binclude "sound/instr/smpl/nadie_st.wav",$2C
(1)   27/ 207A990 :                     .end:
(1)   28/ 207A990 :                     
(1)   29/ 207A990 :                     	align 4
(1)   30/ 207A990 :                     SmpIns_MoveMe_Hit:
(1)   31/ 207A990 : (MACRO)             	gSmpHead .end-.start,0
(1)   31/ 207A990 : B62E 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   31/ 207A993 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   32/ 207A996 :                     .start:	binclude "sound/instr/smpl/moveme_hit.wav",$2C
(1)   33/ 207D84C :                     .end:
(1)   34/ 207D84C :                     
(1)   35/ 207D84C :                     	align 4
(1)   36/ 207D84C :                     SmpIns_MoveMe_Brass:
(1)   37/ 207D84C : (MACRO)             	gSmpHead .end-.start,6478
(1)   37/ 207D84C : 6429 01                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   37/ 207D84F : 4E19 00                     dc.b ((6478)&$FF),(((6478)>>8)&$FF),(((6478)>>16)&$FF)
(1)   38/ 207D852 :                     .start:	binclude "sound/instr/smpl/brass_moveme.wav",$2C
(1)   39/ 20901B6 :                     .end:
(1)   40/ 20901B6 :                     
(1)   41/ 20901B6 :                     	align 4
(1)   42/ 20901B8 :                     SmpIns_Kick:
(1)   43/ 20901B8 : (MACRO)             	gSmpHead .end-.start,0
(1)   43/ 20901B8 : FA19 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   43/ 20901BB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   44/ 20901BE :                     .start:	binclude "sound/instr/smpl/kick_moveme.wav",$2C
(1)   45/ 2091BB8 :                     .end:
(1)   46/ 2091BB8 :                     
(1)   47/ 2091BB8 :                     	align 4
(1)   48/ 2091BB8 :                     SmpIns_Snare_moveme:
(1)   49/ 2091BB8 : (MACRO)             	gSmpHead .end-.start,0
(1)   49/ 2091BB8 : 341A 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   49/ 2091BBB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   50/ 2091BBE :                     .start:	binclude "sound/instr/smpl/snare_moveme.wav",$2C
(1)   51/ 20935F2 :                     .end:
(1)   52/ 20935F2 :                     
(1)   53/ 20935F2 :                     	align 4
(1)   54/ 20935F4 :                     SmpIns_snare_1:
(1)   55/ 20935F4 : (MACRO)             	gSmpHead .end-.start,0
(1)   55/ 20935F4 : 2411 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   55/ 20935F7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   56/ 20935FA :                     .start:	binclude "sound/instr/smpl/snare_1.wav",$2C
(1)   57/ 209471E :                     .end:
(1)   58/ 209471E :                     
(1)   59/ 209471E :                     	align 4
(1)   60/ 2094720 :                     SmpIns_Vctr01:
(1)   61/ 2094720 : (MACRO)             	gSmpHead .end-.start,58
(1)   61/ 2094720 : 301C 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   61/ 2094723 : 3A00 00                     dc.b ((58)&$FF),(((58)>>8)&$FF),(((58)>>16)&$FF)
(1)   62/ 2094726 :                     .start:	binclude "sound/instr/smpl/pwm/vctr01.wav",$2C
(1)   63/ 2096356 :                     .end:
(1)   64/ 2096356 :                     
(1)   65/ 2096356 :                     	align 4
(1)   66/ 2096358 :                     SmpIns_Vctr04:
(1)   67/ 2096358 : (MACRO)             	gSmpHead .end-.start,124
(1)   67/ 2096358 : 681A 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   67/ 209635B : 7C00 00                     dc.b ((124)&$FF),(((124)>>8)&$FF),(((124)>>16)&$FF)
(1)   68/ 209635E :                     .start:	binclude "sound/instr/smpl/pwm/vctr04.wav",$2C
(1)   69/ 2097DC6 :                     .end:
(1)   70/ 2097DC6 :                     
(1)   71/ 2097DC6 :                     	align 4
(1)   72/ 2097DC8 :                     SmpIns_VctrSnare:
(1)   73/ 2097DC8 : (MACRO)             	gSmpHead .end-.start,0
(1)   73/ 2097DC8 : 3E1D 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   73/ 2097DCB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   74/ 2097DCE :                     .start:	binclude "sound/instr/smpl/pwm/vctrSnare.wav",$2C
(1)   75/ 2099B0C :                     .end:
(1)   76/ 2099B0C :                     
(1)   77/ 2099B0C :                     	align 4
(1)   78/ 2099B0C :                     SmpIns_VctrKick:
(1)   79/ 2099B0C : (MACRO)             	gSmpHead .end-.start,0
(1)   79/ 2099B0C : 8C0F 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   79/ 2099B0F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   80/ 2099B12 :                     .start:	binclude "sound/instr/smpl/pwm/vctrKick.wav",$2C
(1)   81/ 209AA9E :                     .end:
(1)   82/ 209AA9E :                     
(1)   83/ 209AA9E :                     	align 4
(1)   84/ 209AAA0 :                     SmpIns_VctrTimpani:
(1)   85/ 209AAA0 : (MACRO)             	gSmpHead .end-.start,0
(1)   85/ 209AAA0 : 6C32 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   85/ 209AAA3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   86/ 209AAA6 :                     .start:	binclude "sound/instr/smpl/pwm/vctrTimpani.wav",$2C
(1)   87/ 209DD12 :                     .end:
(1)   88/ 209DD12 :                     
(1)   89/ 209DD12 :                     	align 4
(1)   90/ 209DD14 :                     SmpIns_VctrCrash:
(1)   91/ 209DD14 : (MACRO)             	gSmpHead .end-.start,0
(1)   91/ 209DD14 : 603C 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   91/ 209DD17 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   92/ 209DD1A :                     .start:	binclude "sound/instr/smpl/pwm/vctrCrash.wav",$2C
(1)   93/ 20A197A :                     .end:
(1)   94/ 20A197A :                     
(1)   95/ 20A197A :                     	align 4
(1)   96/ 20A197C :                     SmpIns_VctrBrass:
(1)   97/ 20A197C : (MACRO)             	gSmpHead .end-.start,1004
(1)   97/ 20A197C : 6E17 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   97/ 20A197F : EC03 00                     dc.b ((1004)&$FF),(((1004)>>8)&$FF),(((1004)>>16)&$FF)
(1)   98/ 20A1982 :                     .start:	binclude "sound/instr/smpl/pwm/vctrBrass.wav",$2C
(1)   99/ 20A30F0 :                     .end:
(1)  100/ 20A30F0 :                     
(1)  101/ 20A30F0 :                     	align 4
(1)  102/ 20A30F0 :                     SmpIns_VctrAmbient:
(1)  103/ 20A30F0 : (MACRO)             	gSmpHead .end-.start,124
(1)  103/ 20A30F0 : 6E17 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  103/ 20A30F3 : 7C00 00                     dc.b ((124)&$FF),(((124)>>8)&$FF),(((124)>>16)&$FF)
(1)  104/ 20A30F6 :                     .start:	binclude "sound/instr/smpl/pwm/vctrBrass.wav",$2C
(1)  105/ 20A4864 :                     .end:
(1)  106/ 20A4864 :                     
(1)  107/ 20A4864 :                     	align 4
(1)  108/ 20A4864 :                     SmpIns_Snare_2:
(1)  109/ 20A4864 : (MACRO)             	gSmpHead .end-.start,0
(1)  109/ 20A4864 : 3430 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  109/ 20A4867 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)  110/ 20A486A :                     .start:	binclude "sound/instr/smpl/snare_2.wav",$2C
(1)  111/ 20A789E :                     .end:
(1)  112/ 20A789E :                     
(1)  113/ 20A789E :                     	align 4
(1)  114/ 20A78A0 :                     
(1)  115/ 20A78A0 :                     
     189/ 20A78A0 :                     		include "data/mars_rom.asm"
(1)    1/ 20A78A0 :                     ; ====================================================================
(1)    2/ 20A78A0 :                     ; ----------------------------------------------------------------
(1)    3/ 20A78A0 :                     ; SH2 ROM data
(1)    4/ 20A78A0 :                     ;
(1)    5/ 20A78A0 :                     ; If your data is too much for SDRAM, place it here.
(1)    6/ 20A78A0 :                     ; BUT keep in mind that this entire section will be gone
(1)    7/ 20A78A0 :                     ; if the Genesis performs DMA-to-VDP Transfers
(1)    8/ 20A78A0 :                     ; which requires RV=1 (Revert ROM to original position)
(1)    9/ 20A78A0 :                     ; ***EMULATORS IGNORE THIS LIMITATION***
(1)   10/ 20A78A0 :                     ;
(1)   11/ 20A78A0 :                     ; Only access here on these conditions:
(1)   12/ 20A78A0 :                     ; - Stop all tracks that use PWM samples
(1)   13/ 20A78A0 :                     ; - If you wanna keep any tracks active: set 1 to marsBlock
(1)   14/ 20A78A0 :                     ;   in the Z80 driver, all tracks will continue playing using
(1)   15/ 20A78A0 :                     ;   only the PSG and FM instruments
(1)   16/ 20A78A0 :                     ;   (TODO: check how it peforms)
(1)   17/ 20A78A0 :                     ;
(1)   18/ 20A78A0 :                     ; The PWM samples are safe to use with the implementation
(1)   19/ 20A78A0 :                     ; of a sample-backup routine that the 68K requests before
(1)   20/ 20A78A0 :                     ; doing DMA
(1)   21/ 20A78A0 :                     ; ----------------------------------------------------------------
(1)   22/ 20A78A0 :                     
(1)   23/ 20A78A0 :                     	align 4
(1)   24/ 20A78A0 :                     
(1)   25/ 20A78A0 :                     ; --------------------------------------------------------
(1)   26/ 20A78A0 :                     ; 32X MAP data: Block graphics and Layout
(1)   27/ 20A78A0 :                     ; --------------------------------------------------------
(1)   28/ 20A78A0 :                     
(1)   29/ 20A78A0 :                     ; 		align 4
(1)   30/ 20A78A0 :                     ; MapBlk_M:	binclude "data/maps/2D/level0/m_art.bin"
(1)   31/ 20A78A0 :                     ; 		align 4
(1)   32/ 20A78A0 :                     ; MapFg_M:	binclude "data/maps/2D/level0/m_fg.bin"
(1)   33/ 20A78A0 :                     ; 		align 4
(1)   34/ 20A78A0 :                     
(1)   35/ 20A78A0 :                     ; --------------------------------------------------------
(1)   36/ 20A78A0 :                     ; Graphics
(1)   37/ 20A78A0 :                     ; --------------------------------------------------------
(1)   38/ 20A78A0 :                     
(1)   39/ 20A78A0 :                     		include "data/m_graphics.asm"
(2)    1/ 20A78A0 :                     ; ====================================================================
(2)    2/ 20A78A0 :                     ; ----------------------------------------------------------------
(2)    3/ 20A78A0 :                     ; Put your 32X graphics here, indexed or direct
(2)    4/ 20A78A0 :                     ;
(2)    5/ 20A78A0 :                     ; These are located on the SH2's ROM area, this will be gone
(2)    6/ 20A78A0 :                     ; if RV is set to 1
(2)    7/ 20A78A0 :                     ;
(2)    8/ 20A78A0 :                     ; Labels MUST be aligned by 4
(2)    9/ 20A78A0 :                     ; ----------------------------------------------------------------
(2)   10/ 20A78A0 :                     
(2)   11/ 20A78A0 :                     		align 4
(2)   12/ 20A78A0 :                     MarsGfx_TEMP:
(2)   13/ 20A78A0 :                     		binclude "data/title/mars/bg_mars_art.bin"
(2)   14/ 20B90A0 :                     		align 4
(2)   15/ 20B90A0 :                     Textr_pecsi:
(2)   16/ 20B90A0 :                     		binclude "data/title/mars/mtrl/mikami_art.bin"
(2)   17/ 20CA8A0 :                     		align 4
(2)   18/ 20CA8A0 :                     
(1)   40/ 20CA8A0 :                     
(1)   41/ 20CA8A0 :                     ; --------------------------------------------------------
(1)   42/ 20CA8A0 :                     ; Models
(1)   43/ 20CA8A0 :                     ; --------------------------------------------------------
(1)   44/ 20CA8A0 :                     
(1)   45/ 20CA8A0 :                     		align 4
(1)   46/ 20CA8A0 :                     ; 		include "data/maps/3D/mcity/mars_data.asm"
(1)   47/ 20CA8A0 :                     ; 		align 4
(1)   48/ 20CA8A0 :                     
(1)   49/ 20CA8A0 :                     MarsObj_TitleScrn:
(1)   50/ 20CA8A0 :                     		include "data/title/mars/mdl/test/head.asm"
(2)    1/ 20CA8A0 :                     MarsObj_test:
(2)    2/ 20CA8A0 : 0006 0008           		dc.w 6,8
(2)    3/ 20CA8A4 : 220C A8B4 220C A914 		dc.l TH|.vert,TH|.face,TH|.vrtx,TH|.mtrl
                    220C A984 220C A9D4 
(2)    4/ 20CA8B4 :                     .vert:		binclude "data/title/mars/mdl/test/vert.bin"
(2)    5/ 20CA914 :                     .face:		binclude "data/title/mars/mdl/test/face.bin"
(2)    6/ 20CA984 :                     .vrtx:		binclude "data/title/mars/mdl/test/vrtx.bin"
(2)    7/ 20CA9D4 :                     .mtrl:		include "data/title/mars/mdl/test/mtrl.asm"
(3)    1/ 20CA9D4 : 220B 90A0           	 dc.l Textr_pecsi|TH
(3)    2/ 20CA9D8 : 0140                	 dc.w 320
(3)    3/ 20CA9DA : 0000                	 dc.w 0
(3)    4/ 20CA9DC :                     
(2)    8/ 20CA9DC :                     		align 4
(1)   51/ 20CA9DC :                     
     190/   CA9DC :                     		dephase
     191/   CA9DC :                     
     192/   CA9DC :                     ; ====================================================================
     193/   CA9DC :                     ; ---------------------------------------------
     194/   CA9DC :                     ; End
     195/   CA9DC :                     ; ---------------------------------------------
     196/   CA9DC :                     
     197/   CA9DC :                     ROM_END:
     198/   CA9DC :                     		align $8000
     199/   D0000 :                     
 AS V1.42 Beta [Bld 118] - source file mars.asm - page 2 - 4/27/2023 3:44:03


  symbol table (* = unused):
  ------------------------

 ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
*ART_TITLE_BG :               48000 C | *ART_TITLE_BG_E :             4F200 C |
 ASCII_FONT :                 40000 C |  ASCII_FONT_E :               41000 C |
 ASCII_PAL :                 FF0304 C | *ASCII_PAL_E :               FF0324 C |
 ATK :                            8 - | *AT_D :                           2 - |
*AT_L :                           1 - | *AT_R :                           0 - |
*AT_U :                           3 - | *BIGENDIAN :                      0 - |
 BITBGON :                        7 - | *BITCLICKL :                      1 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      0 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
 BITDRWD :                        2 - |  BITDRWL :                        1 - |
 BITDRWR :                        0 - |  BITDRWU :                        3 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - |  BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - | *BITJOYA :                        6 - |
*BITJOYB :                        4 - | *BITJOYC :                        5 - |
*BITJOYDOWN :                     1 - | *BITJOYLEFT :                     2 - |
*BITJOYMODE :                     B - | *BITJOYRIGHT :                    3 - |
*BITJOYSTART :                    7 - | *BITJOYUP :                       0 - |
*BITJOYX :                        A - | *BITJOYY :                        9 - |
*BITJOYZ :                        8 - |  BITMAPMD :                       1 - |
 BITMARSBG :                      6 - |  BITOBJ_AIR :                     0 - |
 BITOBJ_FLIPH :                   0 - |  BITOBJ_FLIPV :                   1 - |
 BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
 BITVINTENBL :                    5 - | *BRANCHEXT :                      0 - |
 CACHE_MSTR_PLGN :          6001A28 C |
 CACHE_MSTR_PLGN.EXIT_WDG :                                FFFFFFFFC000003C C |
*CACHE_MSTR_PLGN.ON_CLR :                                  FFFFFFFFC0000038 C |
 CACHE_MSTR_PLGN.WAIT_FB :                                 FFFFFFFFC0000016 C |
 CACHE_MSTR_PLGN_E :        60021E0 C |  CACHE_MSTR_SCRL :          6001584 C |
 CACHE_MSTR_SCRL_E :        6001A28 C |  CACHE_SLAVE :              60021E0 C |
 CACHE_SLAVE_E :            6002864 C |  CACH_BKUPPNT_L :  FFFFFFFFC00004D4 C |
 CACH_BKUPPNT_S :  FFFFFFFFC00004F4 C | *CACH_BKUPS_L :    FFFFFFFFC00004F4 C |
*CACH_BKUPS_S :    FFFFFFFFC0000508 C |  CACH_BKUP_LB :    FFFFFFFFC0000770 C |
 CACH_BKUP_LPZ :   FFFFFFFFC000079C C |  CACH_BKUP_S :     FFFFFFFFC000079C C |
 CACH_BKUP_SPZ :   FFFFFFFFC00007B8 C |
 CACH_BKUP_SPZ.END :                                       FFFFFFFFC00007B8 C |
 CACH_BLKBACKUP_L :                                        FFFFFFFFC00003B4 C |
 CACH_BLKBACKUP_S :                                        FFFFFFFFC00003CC C |
*CACH_BLKREFILL :  FFFFFFFFC0000404 C |
*CACH_BLKREFILL_S :                                        FFFFFFFFC000042C C |
 CACH_CLRLINES :   FFFFFFFFC00006D4 C |  CACH_DDA_LAST :   FFFFFFFFC00006E8 C |
 CACH_DDA_SRC :    FFFFFFFFC00006F8 C |  CACH_DDA_SRC_L :  FFFFFFFFC0000718 C |
 CACH_DDA_SRC_R :  FFFFFFFFC0000728 C |  CACH_DDA_TOP :    FFFFFFFFC00006D8 C |
 CACH_DRAWTIMERS :         26006080 C |  CACH_FBDATA :     FFFFFFFFC000042C C |
 CACH_FBPOS :      FFFFFFFFC0000430 C |  CACH_FBPOS_Y :    FFFFFFFFC0000434 C |
 CACH_INREAD_L :   FFFFFFFFC00003AC C |  CACH_INREAD_S :   FFFFFFFFC00003B4 C |
*CACH_INSPRRDRW :  FFFFFFFFC000039C C |  CACH_INTRL_H :    FFFFFFFFC000043C C |
 CACH_INTRL_SIZE : FFFFFFFFC0000440 C |  CACH_INTRL_W :    FFFFFFFFC0000438 C |
 CACH_LNDRW_L :    FFFFFFFFC0000738 C |  CACH_LNDRW_S :    FFFFFFFFC0000770 C |
 CACH_SLVSTACK_L : FFFFFFFFC0000508 C |  CACH_SLVSTACK_S : FFFFFFFFC0000530 C |
 CACH_SPRBOXLIST : FFFFFFFFC0000444 C |
 CACH_SPRBOXLIST.END :                                     FFFFFFFFC00004A4 C |
*CACH_WDBACKUP_L : FFFFFFFFC00003CC C | *CACH_WDBACKUP_S : FFFFFFFFC0000404 C |
*CACH_WDGBUFFRD :  FFFFFFFFC000035C C |
*CACH_WDGBUFFRD_UD :                                       FFFFFFFFC000037C C |
*CACH_WDGBUFFWR :  FFFFFFFFC000037C C |
*CACH_WDGBUFFWR_UD :                                       FFFFFFFFC000039C C |
 CAM_X_POS :                      0 C |  CAM_X_ROT :                      C C |
 CAM_Y_POS :                      4 C |  CAM_Y_ROT :                     10 C |
 CAM_Z_POS :                      8 C |  CAM_Z_ROT :                     14 C |
*CART :                           1 - | *CASESENSITIVE :                  0 - |
 CHIP_ENV :                     FEF C |  CHIP_ENV.ATKEND :             1072 C |
*CHIP_ENV.ATKZERO :            1075 C |  CHIP_ENV.CHK2 :               107B C |
 CHIP_ENV.CHK4 :               10B0 C |  CHIP_ENV.CKOF :               1013 C |
 CHIP_ENV.CKON :               1026 C | *CHIP_ENV.DECTMR :             107F C |
 CHIP_ENV.DKADD :              1099 C |  CHIP_ENV.DKSAV :              10A1 C |
 CHIP_ENV.DKYEND :             10A6 C |  CHIP_ENV.DO_NFREQ :           1105 C |
 CHIP_ENV.ENVPROC :            1044 C |  CHIP_ENV.KILLENV :            10C6 C |
*CHIP_ENV.NBLOCK :             1044 C |  CHIP_ENV.NORMAL :             1100 C |
 CHIP_ENV.NOUPD :              1146 C |  CHIP_ENV.NSKIP :              103B C |
 CHIP_ENV.SILNC_3 :            10FC C |  CHIP_ENV.VEDLP :              10CE C |
 CHIP_ENV.VLMUCH :             1132 C |  CHIP_ENV.VLOOP :               FFB C |
 CHIP_ENV.VONLY :              1128 C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - |  CMDINTCLR :                     1A - |
 CMDIRQ_ON :                      2 - |  COM :                            0 - |
 COMM0 :                         20 - |  COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
 COMM12 :                        2C - | *COMM13 :                        2D - |
 COMM14 :                        2E - | *COMM15 :                        2F - |
 COMM2 :                         22 - | *COMM3 :                         23 - |
 COMM4 :                         24 - | *COMM5 :                         25 - |
*COMM6 :                         26 - | *COMM7 :                         27 - |
 COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                     40 C |  COMMZREAD :                   17C2 C |
 COMMZROMBLK :                   81 C |  COMMZWRITE :                    80 C |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFA9C6 - |
*CONTROLLER_2 :    FFFFFFFFFFFFA9D6 - | *CS0 :                            0 - |
 CS1 :                      2000000 - |  CS2 :                      4000000 - |
 CS3 :                      6000000 - |  CURRTICKBITS :                  2E C |
 CYCLE :                         32 - |  DACINS_SNARE_1 :            89B444 C |
 DACINS_SNARE_1.END :        89C56E C |  DACINS_SNARE_1.START :      89B44A C |
*DACINS_TESTINS :            89C56E C |  DACINS_TESTINS.END :        8AAC74 C |
 DACINS_TESTINS.START :      89C574 C |  DACINS_WEGOT_CRASH :        898000 C |
 DACINS_WEGOT_CRASH.END :    89ACCA C |  DACINS_WEGOT_CRASH.START :  898006 C |
 DACINS_WEGOT_KICK :         89ACCA C |  DACINS_WEGOT_KICK.END :     89B444 C |
 DACINS_WEGOT_KICK.START :   89ACD0 C |  DAC_FILL :                      20 C |
 DAC_FIRSTFILL :               11CF C |  DAC_ME :                         8 C |
 DAC_OFF :                     1186 C |  DAC_ON :                      1171 C |
 DAC_PLAY :                    119B C |  DAC_REFILL :                  11CF C |
 DAC_REFILL.DACFILL_END :      128E C |  DAC_REFILL.DACFILL_LOOP :     1247 C |
 DAC_REFILL.DACFILL_RET :      1291 C |  DAC_REFILL.DAC_OVER :         121D C |
*DATE :                   4/27/2023 - |  DDACCNTR :                      33 C |
 DDACFIFOMID :                   2F C |  DDACPNTR :                      30 C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
 DREQCTL :                        6 - | *DREQDEST :                       C - |
 DREQFIFO :                      12 - |  DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DREQ_BGEXBUFF :                200 C |
 DREQ_OBJCAM :                  280 C |  DREQ_OBJECTS :                 298 C |
 DREQ_PALETTE :                   0 C |  DREQ_SUPERSPR :                418 C |
 DRV_LOOP :                      87 C |  DRV_LOOP.CMND_0 :              12F C |
 DRV_LOOP.CMND_1 :              132 C |  DRV_LOOP.CMND_2 :              14E C |
 DRV_LOOP.CMND_8 :              16B C |  DRV_LOOP.CMND_C :              18D C |
 DRV_LOOP.FOUND :               1CB C |  DRV_LOOP.GETCBYTEL :            F2 C |
 DRV_LOOP.GRAB_ARG :             F0 C |  DRV_LOOP.LIST :                10F C |
 DRV_LOOP.NEITHER :              C7 C |  DRV_LOOP.NEXT :                1A5 C |
 DRV_LOOP.NEXT_CMD :             CD C |  DRV_LOOP.NEXT_SALL :           16F C |
 DRV_LOOP.NOBEATS :              AE C |  DRV_LOOP.NOTICKS :              A1 C |
 DRV_LOOP.NOT_FND :             1C6 C |  DRV_LOOP.NOT_ON :              185 C |
 DRV_LOOP.SRCH_FRID :           19E C |  DRWSLD_NEXTPZ :   FFFFFFFFC000036A C |
 DRWSLD_NEXTPZ.RESET_RD :                                  FFFFFFFFC000037C C |
 DRWSLD_NXTLINE :  FFFFFFFFC00002C6 C |
 DRWSLD_NXTLINE.L_FIX :                                    FFFFFFFFC000030E C |
 DRWSLD_NXTLINE.REVERS :                                   FFFFFFFFC00002F8 C |
 DRWSLD_NXTLINE.R_FIX :                                    FFFFFFFFC0000308 C |
 DRWSLD_NXTLINE_TEX :                                      FFFFFFFFC0000174 C |
 DRWSLD_NXTLINE_TEX.TEX_SKIP_LINE :                        FFFFFFFFC000026E C |
 DRWSLD_NXTLINE_TEX.TEX_XLOOP :                            FFFFFFFFC000022E C |
 DRWSLD_NXTLINE_TEX.TL_FIX :                               FFFFFFFFC00001FE C |
 DRWSLD_NXTLINE_TEX.TR_FIX :                               FFFFFFFFC00001EA C |
 DRWSLD_NXTLINE_TEX.TXREVERS :                             FFFFFFFFC00001B8 C |
 DRWSLD_NXTLINE_TEX.W_FB :                                 FFFFFFFFC0000228 C |
 DRWSLD_UPDLINE :  FFFFFFFFC0000360 C |
 DRWSLD_UPDLINE_TEX :                                      FFFFFFFFC0000288 C |
 DRWTASK_EXIT :    FFFFFFFFC00003AE C |  DRWTASK_RETURN :  FFFFFFFFC0000392 C |
 DRWTEX_NEXTPZ :   FFFFFFFFC00002A4 C | *DRWTSK1_NEWPZ :   FFFFFFFFC00000F4 C |
 DRWTSK1_NEWPZ.INVLD_Y :                                   FFFFFFFFC0000116 C |
 DRWTSK1_NEWPZ.LEN_MAX :                                   FFFFFFFFC0000110 C |
*DRWTSK1_NEWPZ.NO_PZ :                                     FFFFFFFFC000011C C |
 DRWTSK1_NEWPZ.VALID_Y :                                   FFFFFFFFC0000120 C |
 DRWTSK_SOLIDMODE :                                        FFFFFFFFC00002B4 C |
 DRWTSK_SOLIDMODE.WAIT :                                   FFFFFFFFC00002C0 C |
 DRWTSK_TEXMODE :  FFFFFFFFC0000154 C |
 DRWTSK_TEXMODE.TEXVALID :                                 FFFFFFFFC0000160 C |
 DTBL_FROMMUL :                 6E4 C |  DTBL_FROMMUL.CHNL_ULNK :       DB4 C |
 DTBL_FROMMUL.CHNL_ULNKCUT :    DC3 C |  DTBL_FROMMUL.CHNL_ULNKOFF :    DB2 C |
 DTBL_FROMMUL.DAC_CUT :         942 C |  DTBL_FROMMUL.DAC_INS :         BC6 C |
 DTBL_FROMMUL.DAC_OFF :         948 C |  DTBL_FROMMUL.DAC_PITCH :       94B C |
 DTBL_FROMMUL.D_CONT :          AAF C |  DTBL_FROMMUL.EFFC :            A1C C |
 DTBL_FROMMUL.EFFC_D :          A37 C |  DTBL_FROMMUL.EFFC_E :          A7A C |
 DTBL_FROMMUL.EFFC_F :          A8F C |  DTBL_FROMMUL.EFFC_X :          AB0 C |
 DTBL_FROMMUL.FINE_DOWN :       A52 C |  DTBL_FROMMUL.FINE_UP :         A66 C |
 DTBL_FROMMUL.FMSPC_SET :       881 C |  DTBL_FROMMUL.FM_CINDX :        D76 C |
 DTBL_FROMMUL.FM_CUT :          912 C |  DTBL_FROMMUL.FM_HASVOL :       C6A C |
 DTBL_FROMMUL.FM_INS :          B45 C |  DTBL_FROMMUL.FM_KEYOFF :       CCE C |
 DTBL_FROMMUL.FM_OFF :          90C C |  DTBL_FROMMUL.FM_PANLIST :      AD9 C |
 DTBL_FROMMUL.FM_SETFREQ :      CED C |  DTBL_FROMMUL.FM_SETRLIST :     BB6 C |
 DTBL_FROMMUL.FM_TLOFF :        CD6 C |  DTBL_FROMMUL.FM_WRTALPAN :     D7E C |
 DTBL_FROMMUL.FM_WRTLVOL :      D04 C |  DTBL_FROMMUL.FND_OCT :         CBB C |
 DTBL_FROMMUL.FROM_PSGN :       7C6 C |  DTBL_FROMMUL.GET_OCT :         CAB C |
 DTBL_FROMMUL.INST :            AEA C | *DTBL_FROMMUL.INVL_INS :        B08 C |
 DTBL_FROMMUL.KYCUT_PSG :       818 C |  DTBL_FROMMUL.KYCUT_PSGN :      813 C |
 DTBL_FROMMUL.KYOFF_PSG :       808 C |  DTBL_FROMMUL.KYOFF_PSGN :      803 C |
 DTBL_FROMMUL.LINKED :          741 C |  DTBL_FROMMUL.MK_DAC :          91B C |
 DTBL_FROMMUL.MK_FM :           823 C |  DTBL_FROMMUL.MK_FMSPC :        895 C |
 DTBL_FROMMUL.MK_LIST :         77F C |  DTBL_FROMMUL.MK_PSG :          7AD C |
 DTBL_FROMMUL.MK_PSGN :         78F C |  DTBL_FROMMUL.MK_PWM :          971 C |
 DTBL_FROMMUL.NEW_ROMDAT :      B79 C |  DTBL_FROMMUL.NOFM_NOTE :       858 C |
 DTBL_FROMMUL.NORM_DOWN :       A50 C |  DTBL_FROMMUL.NORM_UP :         A68 C |
 DTBL_FROMMUL.NOTE :            C60 C |  DTBL_FROMMUL.NOT_DAC :         855 C |
 DTBL_FROMMUL.NOT_DSPC :        84C C |  DTBL_FROMMUL.NO_LFO :          DB1 C |
 DTBL_FROMMUL.N_FM :            CA1 C |  DTBL_FROMMUL.N_INDX :          C8D C |
 DTBL_FROMMUL.N_PSGN :          C9C C |  DTBL_FROMMUL.N_STFREQ :        C8E C |
 DTBL_FROMMUL.PN_INS :          B09 C |  DTBL_FROMMUL.PSG_KEYON :       7ED C |
 DTBL_FROMMUL.PS_INS :          B0F C |  DTBL_FROMMUL.PWM_CUT :         A0D C |
 DTBL_FROMMUL.PWM_INS :         C1D C |  DTBL_FROMMUL.PWM_OFF :         9FE C |
 DTBL_FROMMUL.PWV_MUCH :        9FA C |  DTBL_FROMMUL.PW_EFFC :         99B C |
 DTBL_FROMMUL.PW_NOTE :         9A2 C |  DTBL_FROMMUL.PW_SEND :         9A7 C |
 DTBL_FROMMUL.PW_SETUP :        9CB C |  DTBL_FROMMUL.RCYL_COM :        735 C |
 DTBL_FROMMUL.RES_PAN :         ACF C |  DTBL_FROMMUL.SAME_PATCH :      BB1 C |
 DTBL_FROMMUL.SAVE_ARG :        AA4 C |  DTBL_FROMMUL.SILN_DAC :        722 C |
 DTBL_FROMMUL.SILN_FM :         725 C |  DTBL_FROMMUL.SILN_PSG :        71B C |
 DTBL_FROMMUL.SILN_PSG_N :      717 C |  DTBL_FROMMUL.SILN_PWM :        72B C |
 DTBL_FROMMUL.TL_DOWN :         CE0 C |  DTBL_FROMMUL.VMUCH :           7F9 C |
 DTBL_FROMMUL.VOLU :            AE1 C |  DTBL_FROMMUL.VOL_DVLD :        A76 C |
 DTBL_FROMMUL.WRITE_TL :        D69 C |  DTBL_MULTI :                   6CD C |
 DTBL_SINGL :                   6E3 C |  DTH :                           20 - |
 DTL :                           1C - |  DWAVEBUFF :                   1D00 C |
 END_SCRN02 :              26019D38 C | *EXTR_3 :                         A C |
*EXTR_4 :                         C C | *EXTR_5 :                         E C |
 EX_COMM :                      DD6 C |  EX_COMM.BLOCKED :              E76 C |
 EX_COMM.CLRCOM :               E7D C |  EX_COMM.NEXT_COMM :            E4E C |
 EX_COMM.NEXT_PASS :            E43 C |  EX_COMM.WAIT_ENTER :           E17 C |
 EX_COMM.W_PASS2 :              E64 C | *FALSE :                          0 - |
 FBVRAM_BLANK :               1F800 - |  FBVRAM_PATCH :               1D000 - |
*FEN :                            2 - |  FILLDATA :                       8 - |
 FILLLENGTH :                     4 - |  FILLSTART :                      6 - |
 FLG :                           28 - |  FM :                            80 - |
 FMCACH_1 :                    15F9 C |  FMCACH_2 :                    1621 C |
 FMCACH_3 :                    1649 C |  FMCACH_4 :                    1671 C |
 FMCACH_5 :                    1699 C |  FMCACH_6 :                    16C1 C |
 FMCACH_LIST :                 148F C |  FMFREQ_LIST :                 1295 C |
*FMINS_AMBIENT_3 :           895B52 C | *FMINS_AMBIENT_DARK :        895B12 C |
*FMINS_AMBIENT_SPOOK :       895B32 C | *FMINS_BANJO_PUY :           895BD2 C |
*FMINS_BASS_1 :              895992 C | *FMINS_BASS_2 :              8959B2 C |
 FMINS_BASS_4 :              8957D2 C |  FMINS_BASS_8 :              8957F2 C |
 FMINS_BASS_CALM :           895852 C |  FMINS_BASS_CLUB :           895832 C |
*FMINS_BASS_DONNA :          8959D2 C |  FMINS_BASS_DUCK :           895A72 C |
*FMINS_BASS_GROOVE :         8959F2 C |  FMINS_BASS_GROOVE_2 :       895A12 C |
*FMINS_BASS_GROOVE_GEM :     895A32 C | *FMINS_BASS_ITALO :          895A52 C |
 FMINS_BASS_LOW_1 :          895CD2 C | *FMINS_BASS_OIL :            8958D2 C |
 FMINS_BRASS_EUR :           8958B2 C | *FMINS_BRASS_PUY :           895B92 C |
 FMINS_CLOSEDHAT :           895952 C | *FMINS_DING_1 :              895C12 C |
 FMINS_DING_BASEBALL :       895912 C | *FMINS_DING_TOY :            895B72 C |
*FMINS_DRUMKICK_GEM :        895932 C | *FMINS_FLAUTE_CAVE :         895BB2 C |
 FMINS_GUITAR_BBALL :        895C92 C |  FMINS_HATS_1 :              895CB2 C |
 FMINS_HBEAT_TOM :           895C52 C |  FMINS_MARIMBA :             895AF2 C |
*FMINS_ORGAN_ITO :           8958F2 C |  FMINS_PIANOM1 :             895972 C |
*FMINS_PIANO_AQUA :          895A92 C | *FMINS_PIANO_HARD :          895D12 C |
 FMINS_PIANO_M1 :            895C72 C | *FMINS_PSYNTH_PLUS :         895BF2 C |
 FMINS_SEWER_1 :             895CF2 C |  FMINS_SP_CLOSEDHAT :        895782 C |
*FMINS_SP_COWBELL :          8957AA C |  FMINS_SP_OPENHAT :          89575A C |
 FMINS_SYNTH_PLUS :          895812 C | *FMINS_TROMBONE_GEM :        895C32 C |
 FMINS_TRUMPET_1 :           895872 C |  FMINS_TRUMPET_2 :           895AB2 C |
 FMINS_TRUMPET_CARNIVAL :    895892 C | *FMINS_TRUMPET_PUY :         895AD2 C |
 FMSPECIAL :                   17AD C |  FM_AUTOREG :                  1152 C |
 FM_SEND_1 :                   115B C |  FM_SEND_2 :                   1166 C |
 FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :              FF013A C |
 GEMADMAPAUSEROM :           FF017C C |  GEMADMARESUME :             FF0162 C |
 GEMADMARESUMEROM :          FF01AC C | *GEMAPLAYFROMBLK :           FF0244 C |
 GEMAPLAYTRACK :             FF0228 C |  GEMASETBEATS :              FF0286 C |
 GEMASTOPALL :               FF0276 C |  GEMASTOPTRACK :             FF0260 C |
 GEMATEST :                  FF0218 C |  GEMATRK_BODYOVER :          892434 C |
 GEMATRK_BODYOVER.BLK :      892440 C |  GEMATRK_BODYOVER.INS :      892C4E C |
 GEMATRK_BODYOVER.PAT :      892456 C |  GEMATRK_MAIN_0 :            8946A7 C |
 GEMATRK_MAIN_0.BLK :        8946B3 C |  GEMATRK_MAIN_0.INS :        895712 C |
 GEMATRK_MAIN_0.PAT :        8946C1 C |  GEMATRK_MOVEME :            892C96 C |
 GEMATRK_MOVEME.BLK :        892CA2 C |  GEMATRK_MOVEME.INS :        893B30 C |
 GEMATRK_MOVEME.PAT :        892CBA C |  GEMATRK_TEST_0 :            8945AC C |
 GEMATRK_TEST_0.BLK :        8945B8 C |  GEMATRK_TEST_0.INS :        89467F C |
 GEMATRK_TEST_0.PAT :        8945BB C |  GEMATRK_TEST_1 :            889CFC C |
 GEMATRK_TEST_1.BLK :        889D08 C |  GEMATRK_TEST_1.INS :        88D166 C |
*GEMATRK_TEST_1.INS_E :      88D1D6 C |  GEMATRK_TEST_1.PAT :        889D17 C |
 GEMATRK_TEST_2 :            888080 C |  GEMATRK_TEST_2.BLK :        88808C C |
 GEMATRK_TEST_2.INS :        889CC4 C |  GEMATRK_TEST_2.PAT :        8880A2 C |
 GEMATRK_TEST_3 :            88D1D6 C |  GEMATRK_TEST_3.BLK :        88D1E2 C |
 GEMATRK_TEST_3.INS :        88EA80 C |  GEMATRK_TEST_3.PAT :        88D1F0 C |
 GEMATRK_TEST_4 :            88EAA0 C |  GEMATRK_TEST_4.BLK :        88EAAC C |
 GEMATRK_TEST_4.INS :        88FFA4 C |  GEMATRK_TEST_4.PAT :        88EABE C |
 GEMATRK_TEST_5 :            88FFBC C |  GEMATRK_TEST_5.BLK :        88FFC8 C |
 GEMATRK_TEST_5.INS :        8907F8 C |  GEMATRK_TEST_5.PAT :        88FFD0 C |
 GEMATRK_TEST_6 :            890808 C |  GEMATRK_TEST_6.BLK :        890814 C |
 GEMATRK_TEST_6.INS :        8923B4 C |  GEMATRK_TEST_6.PAT :        89081C C |
 GEMATRK_XTRIM :             893BC8 C |  GEMATRK_XTRIM.BLK :         893BD4 C |
 GEMATRK_XTRIM.INS :         894584 C |  GEMATRK_XTRIM.PAT :         893BDA C |
 GEMA_INIT :                    E82 C |  GEMA_INIT.END_SETUP :          F28 C |
 GEMA_INIT.SETUP_LIST :         EDD C |  GEMA_INIT.ST_COPY :            EFC C |
 GEMA_MASTERLIST :           888000 C |  GET_ROMTRCKS :                 4CE C |
 GET_TICK :                     F2D C |  GET_TICK.CTNOTICK :            F4A C |
 GLBL_LASTORG :               54270 - |  GLBL_LASTPC :              6005070 - |
 GO_DRWSLD_UPDLINE_TEX :                                   FFFFFFFFC000014C C |
 GO_DRWTEX_GONXTPZ :                                       FFFFFFFFC0000150 C |
*G_RETURN :        FFFFFFFFC0000146 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
*HCOUNT :                         5 - |  HEADEROUT :                   17AE C |
 HEADEROUT_E :                 17BA C |  HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :              FF1B56 C |
*HINT_TITLE :                FF1ECC C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
 INIT_ROMTRCKS :                4D6 C | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      1 - | *INTMASK :                        1 - |
 INT_M_LIST :               60002A0 C |  INT_S_LIST :               60002E0 C |
*JOYA :                          40 - |  JOYB :                          10 - |
 JOYC :                          20 - |  JOYDOWN :                        2 - |
 JOYLEFT :                        4 - | *JOYMODE :                      800 - |
 JOYRIGHT :                       8 - | *JOYSTART :                      80 - |
 JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
 LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - |  LIST_VDPREGS :              FF02F0 C |
 LITERAL_F_00000000_1 :     60004A4 C |  LITERAL_F_00000001_1 :     60004B4 C |
 LITERAL_F_00000002_1 :     60006EC C |  LITERAL_F_00000003_1 :     60006F0 C |
 LITERAL_F_00000004_1 :     60006F4 C |  LITERAL_F_00000005_1 :     60006F8 C |
 LITERAL_F_00000006_1 :     6000700 C |  LITERAL_F_00000007_1 :     6000704 C |
 LITERAL_F_00000008_1 :     600071C C |  LITERAL_F_00000009_1 :     6000708 C |
 LITERAL_F_0000000A_1 :     600070C C |  LITERAL_F_0000000B_1 :     6000710 C |
 LITERAL_F_0000000C_1 :     6000714 C |  LITERAL_F_0000000D_1 :     6000718 C |
 LITERAL_F_0000000E_1 :     60007B4 C |  LITERAL_F_0000000F_1 :     60009AC C |
 LITERAL_F_00000010_1 :     6000A8C C |  LITERAL_F_00000011_1 :     6000A94 C |
 LITERAL_F_00000012_1 :     6000B88 C |  LITERAL_F_00000013_1 :     6000D30 C |
 LITERAL_F_00000014_1 :     6000D34 C |  LITERAL_F_00000015_1 :     6000D38 C |
 LITERAL_F_00000016_1 :     6000D3C C |  LITERAL_F_00000017_1 :     6000D40 C |
 LITERAL_F_00000018_1 :     6000E00 C |  LITERAL_F_00000019_1 :     6000E04 C |
 LITERAL_F_0000001A_1 :     6000EFC C |  LITERAL_F_0000001B_1 :     6000F00 C |
 LITERAL_F_0000001C_1 :     6000F04 C |  LITERAL_F_0000001D_1 :     6000F08 C |
 LITERAL_F_0000001E_1 :     6000F0C C |  LITERAL_F_0000001F_1 :     6000F10 C |
 LITERAL_F_00000020_1 :     6000FAC C |  LITERAL_F_00000021_1 :     600106C C |
 LITERAL_F_00000022_1 :     6001070 C |  LITERAL_F_00000023_1 :     6001078 C |
 LITERAL_F_00000024_1 :     6001084 C |  LITERAL_F_00000025_1 :     6001120 C |
 LITERAL_F_00000026_1 :     6001134 C |  LITERAL_F_00000027_1 :     6001128 C |
 LITERAL_F_00000028_1 :     6001218 C |  LITERAL_F_00000029_1 :     6001278 C |
 LITERAL_F_0000002A_1 :     600121C C |  LITERAL_F_0000002B_1 :     600127A C |
 LITERAL_F_0000002C_1 :     6001224 C |  LITERAL_F_0000002D_1 :     6001228 C |
 LITERAL_F_0000002E_1 :     600122C C |  LITERAL_F_0000002F_1 :     6001230 C |
 LITERAL_F_00000030_1 :     6001234 C |  LITERAL_F_00000031_1 :     6001238 C |
 LITERAL_F_00000032_1 :     6001244 C |  LITERAL_F_00000033_1 :     6001248 C |
 LITERAL_F_00000034_1 :     600124C C |  LITERAL_F_00000035_1 :     6001254 C |
 LITERAL_F_00000036_1 :     6001258 C |  LITERAL_F_00000037_1 :     6001264 C |
 LITERAL_F_00000038_1 :     6001268 C |  LITERAL_F_00000039_1 :     60013E0 C |
 LITERAL_F_0000003A_1 :     6001438 C |  LITERAL_F_0000003B_1 :     60013E4 C |
 LITERAL_F_0000003C_1 :     600143A C |  LITERAL_F_0000003D_1 :     60013FC C |
 LITERAL_F_0000003E_1 :     6001400 C |  LITERAL_F_0000003F_1 :     6001404 C |
 LITERAL_F_00000040_1 :     6001408 C |  LITERAL_F_00000041_1 :     6001414 C |
 LITERAL_F_00000042_1 :     6001418 C |  LITERAL_F_00000043_1 :     600141C C |
 LITERAL_F_00000044_1 :     6001424 C |  LITERAL_F_00000045_1 :     6001428 C |
 LITERAL_F_00000046_1 :     600142C C |  LITERAL_F_00000047_1 :     6001430 C |
 LITERAL_F_00000048_1 :     6001434 C |  LITERAL_F_00000049_1 :     60014F0 C |
 LITERAL_F_0000004A_1 :     60014F4 C |  LITERAL_F_0000004B_1 :     6001518 C |
 LITERAL_F_0000004C_1 :     6001504 C |  LITERAL_F_0000004D_1 :     600156C C |
 LITERAL_F_0000004E_1 :     6001574 C |  LITERAL_F_0000004F_1 :     6001578 C |
 LITERAL_F_00000050_1 :     600157C C |
 LITERAL_F_00000051_1 :                                    FFFFFFFFC000012C C |
 LITERAL_F_00000052_1 :                                    FFFFFFFFC0000130 C |
 LITERAL_F_00000053_1 :                                    FFFFFFFFC0000134 C |
 LITERAL_F_00000054_1 :                                    FFFFFFFFC0000138 C |
 LITERAL_F_00000055_1 :                                    FFFFFFFFC0000270 C |
 LITERAL_F_00000056_1 :                                    FFFFFFFFC0000274 C |
 LITERAL_F_00000057_1 :                                    FFFFFFFFC0000278 C |
 LITERAL_F_00000058_1 :                                    FFFFFFFFC000027C C |
 LITERAL_F_00000059_1 :                                    FFFFFFFFC0000280 C |
 LITERAL_F_0000005A_1 :                                    FFFFFFFFC0000288 C |
 LITERAL_F_0000005B_1 :                                    FFFFFFFFC000028C C |
 LITERAL_F_0000005C_1 :                                    FFFFFFFFC0000338 C |
 LITERAL_F_0000005D_1 :                                    FFFFFFFFC000033C C |
 LITERAL_F_0000005E_1 :                                    FFFFFFFFC0000340 C |
 LITERAL_F_0000005F_1 :                                    FFFFFFFFC0000344 C |
 LITERAL_F_00000060_1 :                                    FFFFFFFFC0000348 C |
 LITERAL_F_00000061_1 :                                    FFFFFFFFC000034C C |
 LITERAL_F_00000062_1 :                                    FFFFFFFFC0000354 C |
 LITERAL_F_00000063_1 :                                    FFFFFFFFC0000050 C |
 LITERAL_F_00000064_1 :                                    FFFFFFFFC000013C C |
 LITERAL_F_00000065_1 :                                    FFFFFFFFC0000140 C |
 LITERAL_F_00000066_1 :                                    FFFFFFFFC00003C4 C |
 LITERAL_F_00000067_1 :                                    FFFFFFFFC00003D0 C |
 LITERAL_F_00000068_1 :                                    FFFFFFFFC00003D4 C |
 LITERAL_F_00000069_1 :                                    FFFFFFFFC00004C8 C |
 LITERAL_F_0000006A_1 :                                    FFFFFFFFC00004CC C |
 LITERAL_F_0000006B_1 :                                    FFFFFFFFC00004D0 C |
 LITERAL_F_0000006C_1 :                                    FFFFFFFFC00004D8 C |
 LITERAL_F_0000006D_1 :                                    FFFFFFFFC00004DC C |
 LITERAL_F_0000006E_1 :                                    FFFFFFFFC00006B0 C |
 LITERAL_F_0000006F_1 :                                    FFFFFFFFC00006B4 C |
 LITERAL_F_00000070_1 :                                    FFFFFFFFC00006B8 C |
 LITERAL_F_00000071_1 :                                    FFFFFFFFC00006BC C |
 LITERAL_F_00000072_1 :                                    FFFFFFFFC00006C0 C |
 LITERAL_F_00000073_1 :                                    FFFFFFFFC00006C4 C |
 LITERAL_F_00000074_1 :                                    FFFFFFFFC00006C8 C |
 LITERAL_F_00000075_1 :                                    FFFFFFFFC00006CC C |
 LITERAL_F_00000076_1 :                                    FFFFFFFFC0000150 C |
 LITERAL_F_00000077_1 :                                    FFFFFFFFC0000154 C |
 LITERAL_F_00000078_1 :                                    FFFFFFFFC0000158 C |
 LITERAL_F_00000079_1 :                                    FFFFFFFFC0000164 C |
 LITERAL_F_0000007A_1 :                                    FFFFFFFFC0000170 C |
 LITERAL_F_0000007B_1 :                                    FFFFFFFFC00001CC C |
 LITERAL_F_0000007C_1 :                                    FFFFFFFFC00001D0 C |
 LITERAL_F_0000007D_1 :                                    FFFFFFFFC00001D4 C |
 LITERAL_F_0000007E_1 :                                    FFFFFFFFC00001D8 C |
 LITERAL_F_0000007F_1 :                                    FFFFFFFFC00001DC C |
 LITERAL_F_00000080_1 :                                    FFFFFFFFC00001E0 C |
 LITERAL_F_00000081_1 :                                    FFFFFFFFC00001E4 C |
 LITERAL_F_00000082_1 :                                    FFFFFFFFC00001E8 C |
 LITERAL_F_00000083_1 :                                    FFFFFFFFC00001EC C |
 LITERAL_F_00000084_1 :                                    FFFFFFFFC00001F0 C |
 LITERAL_F_00000085_1 :                                    FFFFFFFFC00001F4 C |
 LITERAL_F_00000086_1 :                                    FFFFFFFFC00001F8 C |
 LITERAL_F_00000087_1 :                                    FFFFFFFFC00004B8 C |
 LITERAL_F_00000088_1 :                                    FFFFFFFFC00004BC C |
 LITERAL_F_00000089_1 :                                    FFFFFFFFC00004C4 C |
 LITERAL_F_0000008A_1 :                                    FFFFFFFFC00004C8 C |
 LITERAL_F_0000008B_1 :                                    FFFFFFFFC00004CC C |
 LITERAL_L_0000FC00_1 :     6000898 C |  LITERAL_L_0001D000_1 :     6001270 C |
 LITERAL_L_0001F800_1 :     60009A8 C |
 LITERAL_L_00FFFFFF_1 :                                    FFFFFFFFC000015C C |
 LITERAL_L_01400000_1 :                                    FFFFFFFFC00004C0 C |
 LITERAL_L_02000000_1 :     6000F14 C |
 LITERAL_L_02000000_2 :                                    FFFFFFFFC0000160 C |
 LITERAL_L_06000000_1 :     6000FA8 C |  LITERAL_L_06000040_1 :     6000D44 C |
 LITERAL_L_06000128_1 :     60014EC C |  LITERAL_L_060007DC_1 :     6001124 C |
 LITERAL_L_060007DC_2 :     6001220 C |  LITERAL_L_060007DC_3 :     60013E8 C |
 LITERAL_L_060007DC_4 :     60014F8 C |  LITERAL_L_0600081C_1 :     6001420 C |
 LITERAL_L_0600084C_1 :     6000FB0 C |  LITERAL_L_060008D8_1 :     6001130 C |
 LITERAL_L_060008D8_2 :     60013F0 C |  LITERAL_L_06000948_1 :     6001274 C |
 LITERAL_L_060009E8_1 :     600126C C |  LITERAL_L_06000B54_1 :     6001240 C |
 LITERAL_L_06000D50_1 :     600125C C |  LITERAL_L_06000D64_1 :     6001260 C |
 LITERAL_L_0603EFF8_1 :     60007B0 C |  LITERAL_L_0603F000_1 :     60014E8 C |
 LITERAL_L_0603FFF8_1 :     60004B0 C |  LITERAL_L_06040000_1 :     6000FA4 C |
 LITERAL_L_20004000_1 :     6000498 C |  LITERAL_L_20004000_2 :     60007AC C |
 LITERAL_L_20004000_3 :     600088C C |  LITERAL_L_20004000_4 :     6000EF8 C |
 LITERAL_L_20004000_5 :     6000FB4 C |  LITERAL_L_20004000_6 :     60014FC C |
 LITERAL_L_20004012_1 :     60004A0 C |  LITERAL_L_20004016_1 :     60004AC C |
 LITERAL_L_20004016_2 :     60007A8 C |  LITERAL_L_20004018_1 :     60004A8 C |
 LITERAL_L_20004018_2 :     60007A4 C |  LITERAL_L_2000401A_1 :     6000494 C |
 LITERAL_L_2000401A_2 :     60006E4 C |  LITERAL_L_2000401C_1 :     6000490 C |
 LITERAL_L_2000401C_2 :                                    FFFFFFFFC000014C C |
 LITERAL_L_20004020_1 :     6001064 C |  LITERAL_L_20004020_2 :     6001410 C |
 LITERAL_L_20004021_1 :     6001568 C |  LITERAL_L_20004022_1 :     6000378 C |
 LITERAL_L_20004024_1 :     600037C C |  LITERAL_L_20004028_1 :     60006FC C |
 LITERAL_L_2000402C_1 :     600049C C |  LITERAL_L_2000402C_2 :     60013F4 C |
 LITERAL_L_2000402C_3 :     6001500 C |  LITERAL_L_2000402D_1 :     6001080 C |
 LITERAL_L_2000402E_1 :     60006E8 C |  LITERAL_L_2000402E_2 :     6000FB8 C |
 LITERAL_L_2000402E_3 :     6001210 C |  LITERAL_L_2000402E_4 :     60013F8 C |
 LITERAL_L_2000402E_5 :     6001570 C |  LITERAL_L_2000402F_1 :     6001250 C |
 LITERAL_L_2000402F_2 :     600140C C |  LITERAL_L_2000402F_3 :     6001580 C |
 LITERAL_L_20004034_1 :                                    FFFFFFFFC0000168 C |
 LITERAL_L_20004036_1 :                                    FFFFFFFFC000016C C |
 LITERAL_L_20004100_1 :     6000890 C |  LITERAL_L_20004100_2 :     60009A0 C |
 LITERAL_L_20004100_3 :     6001068 C |  LITERAL_L_20004100_4 :     600111C C |
 LITERAL_L_20004100_5 :     6001214 C |  LITERAL_L_20004100_6 :     60013EC C |
 LITERAL_L_20004100_7 :                                    FFFFFFFFC000004C C |
 LITERAL_L_20004100_8 :                                    FFFFFFFFC00003CC C |
 LITERAL_L_20004102_1 :     6001074 C |  LITERAL_L_20004200_1 :     600107C C |
 LITERAL_L_24000000_1 :     6000894 C |  LITERAL_L_24000000_2 :     60009A4 C |
 LITERAL_L_24000000_3 :     6000A90 C |  LITERAL_L_24000000_4 :     6000D2C C |
 LITERAL_L_24000000_5 :     600123C C |
 LITERAL_L_24000000_6 :                                    FFFFFFFFC0000284 C |
 LITERAL_L_24000000_7 :                                    FFFFFFFFC0000350 C |
 LITERAL_L_24000200_1 :     600112C C |
 LITERAL_L_24020200_1 :                                    FFFFFFFFC00003C8 C |
 LITERAL_L_4D5F4F4B_1 :     60004B8 C |  LITERAL_L_535F4F4B_1 :     60007B8 C |
 LITERAL_L_7FFFFFFF_1 :                                    FFFFFFFFC00004D4 C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     6000814 C |
 LITERAL_L_FFFFFFFFC0000800_1 :                                     6000810 C |
 LITERAL_W_0080_1 :         6000818 C |  LITERAL_W_0080_2 :         600089C C |
 LITERAL_W_0080_3 :         6000F1C C |
 LITERAL_W_0080_4 :                                        FFFFFFFFC000017A C |
 LITERAL_W_00A0_1 :                                        FFFFFFFFC00004E0 C |
 LITERAL_W_00A2_1 :         60009B4 C |
 LITERAL_W_00A4_1 :                                        FFFFFFFFC0000056 C |
 LITERAL_W_00A5_1 :         6001440 C |  LITERAL_W_00C0_1 :         600108A C |
 LITERAL_W_00E0_1 :         6000D4C C |  LITERAL_W_00E0_2 :         600113A C |
 LITERAL_W_00E0_3 :         6001280 C |  LITERAL_W_00E0_4 :         6001442 C |
 LITERAL_W_00E0_5 :                                        FFFFFFFFC0000290 C |
 LITERAL_W_00E0_6 :                                        FFFFFFFFC0000144 C |
 LITERAL_W_00E0_7 :                                        FFFFFFFFC00003DA C |
 LITERAL_W_00E0_8 :                                        FFFFFFFFC00004E2 C |
 LITERAL_W_00F0_1 :         60004C2 C |  LITERAL_W_00F0_2 :         60007C0 C |
 LITERAL_W_00F0_3 :         600089E C |  LITERAL_W_00F0_4 :         60009B0 C |
 LITERAL_W_00F0_5 :         6000E0A C |  LITERAL_W_00F0_6 :         6001284 C |
 LITERAL_W_00F0_7 :         600143E C |  LITERAL_W_00FC_1 :         600071E C |
 LITERAL_W_00FF_1 :                                        FFFFFFFFC0000358 C |
 LITERAL_W_0100_1 :         6000D4A C |
 LITERAL_W_0100_2 :                                        FFFFFFFFC0000142 C |
 LITERAL_W_0105_1 :         6000F18 C |  LITERAL_W_0140_1 :         6000D48 C |
 LITERAL_W_0140_2 :         6001138 C |  LITERAL_W_0140_3 :         600127E C |
 LITERAL_W_0140_4 :                                        FFFFFFFFC0000144 C |
 LITERAL_W_0140_5 :                                        FFFFFFFFC0000292 C |
 LITERAL_W_0140_6 :                                        FFFFFFFFC000035A C |
 LITERAL_W_0140_7 :                                        FFFFFFFFC00003DC C |
 LITERAL_W_0150_1 :         6000E08 C |  LITERAL_W_017E_1 :         6001088 C |
 LITERAL_W_0200_1 :         600127C C |  LITERAL_W_0200_2 :         600143C C |
 LITERAL_W_03D4_1 :                                        FFFFFFFFC00001FC C |
 LITERAL_W_03D4_2 :                                        FFFFFFFFC00003B4 C |
 LITERAL_W_03FF_1 :                                        FFFFFFFFC000017C C |
 LITERAL_W_0415_1 :         6000F1A C |  LITERAL_W_0530_1 :         6000FC0 C |
 LITERAL_W_0530_2 :         600150C C |  LITERAL_W_07FF_1 :         60009B2 C |
 LITERAL_W_07FF_2 :         6000A98 C |
 LITERAL_W_07FF_3 :                                        FFFFFFFFC00004D2 C |
 LITERAL_W_3FFF_1 :                                        FFFFFFFFC00003D8 C |
 LITERAL_W_44E0_1 :         60004BE C |  LITERAL_W_44E0_2 :         60007BE C |
 LITERAL_W_44E5_1 :         60004C0 C |  LITERAL_W_4600_1 :         6001136 C |
 LITERAL_W_4800_1 :         6000FC4 C |  LITERAL_W_4800_2 :         6001510 C |
 LITERAL_W_4F10_1 :         6001282 C |  LITERAL_W_5A00_1 :         6000848 C |
 LITERAL_W_5A00_2 :                                        FFFFFFFFC00003E2 C |
 LITERAL_W_5A10_1 :                                        FFFFFFFFC000005C C |
 LITERAL_W_5AE0_1 :         6000B8C C |  LITERAL_W_5AE1_1 :         6000B8E C |
 LITERAL_W_A518_1 :         6000FC8 C |  LITERAL_W_A518_2 :         6001446 C |
 LITERAL_W_A518_3 :         6001514 C |
 LITERAL_W_A518_4 :                                        FFFFFFFFC0000140 C |
 LITERAL_W_A518_5 :                                        FFFFFFFFC000005A C |
 LITERAL_W_A518_6 :                                        FFFFFFFFC00003E0 C |
 LITERAL_W_A518_7 :                                        FFFFFFFFC0000178 C |
 LITERAL_W_A538_1 :         600084A C |  LITERAL_W_FE10_1 :         60004BC C |
 LITERAL_W_FE10_2 :         60007BC C |  LITERAL_W_FE10_3 :         6000FBC C |
 LITERAL_W_FE10_4 :         6001508 C |
 LITERAL_W_FE10_5 :                                        FFFFFFFFC000013C C |
 LITERAL_W_FE10_6 :                                        FFFFFFFFC0000054 C |
 LITERAL_W_FE10_7 :                                        FFFFFFFFC0000174 C |
 LITERAL_W_FE80_1 :         6000846 C |  LITERAL_W_FE80_2 :         6000FC6 C |
 LITERAL_W_FE80_3 :         6001444 C |  LITERAL_W_FE80_4 :         6001512 C |
 LITERAL_W_FE80_5 :                                        FFFFFFFFC000013E C |
 LITERAL_W_FE80_6 :                                        FFFFFFFFC0000058 C |
 LITERAL_W_FE80_7 :                                        FFFFFFFFC00003DE C |
 LITERAL_W_FE80_8 :                                        FFFFFFFFC0000176 C |
 LITERAL_W_FE92_1 :         600081A C |  LITERAL_W_FE92_2 :         6000844 C |
 LITERAL_W_FE92_3 :         6000FCA C |  LITERAL_W_FE92_4 :         6001516 C |
 LITERAL_W_FEE2_1 :         6000FBE C |  LITERAL_W_FEE2_2 :         600150A C |
 LITERAL_W_FEE4_1 :         6000FC2 C |  LITERAL_W_FEE4_2 :         600150E C |
 LITERAL_W_FF00_1 :                                        FFFFFFFFC00006D0 C |
 LITERAL_W_FF00_2 :                                        FFFFFFFFC00004D0 C |
 LITERAL_W_FF60_1 :                                        FFFFFFFFC00003B6 C |
*MACEXP :                         7 - |  MAINDRW_TASKS :   FFFFFFFFC0000060 C |
 MAINDRW_TASKS.LIST :                                      FFFFFFFFC000006C C |
*MAP_TITLE_BG :              FF230E C |  MAP_TITLE_BG.HERE :         FF2BCE C |
*MAP_TITLE_FG :              FF2086 C |  MARS :                           1 - |
 MARSBLOCK :                     82 C | *MARSCD :                         0 - |
 MARSGBL_PLYPZCNTR :             1A C |  MARSGBL_PLYPZLIST_END :          C C |
 MARSGBL_PLYPZLIST_R :            0 C |  MARSGBL_PLYPZLIST_START :        8 C |
 MARSGBL_PLYPZLIST_W :            4 C |  MARSGBL_POLYBUFFNUM :           18 C |
 MARSGBL_WAVEDEFORM :            24 C |  MARSGBL_WAVEENABLE :            1E C |
 MARSGBL_WAVEMAX :               22 C |  MARSGBL_WAVESPD :               20 C |
 MARSGBL_WAVETAN :               26 C |  MARSGBL_WDGDIVLOCK :            16 C |
 MARSGBL_WDGHOLD :               12 C |  MARSGBL_WDGMODE :               10 C |
 MARSGBL_WDGREADY :              14 C |  MARSGBL_XSHIFT :                1C C |
 MARSGFX_TEMP :             20A78A0 C |  MARSMDL_MDLLOOP : FFFFFFFFC0000180 C |
 MARSMDL_MDLLOOP.GO_MDL :                                  FFFFFFFFC0000192 C |
 MARSMDL_MDLLOOP.INVLID :                                  FFFFFFFFC00001AA C |
 MARSMDL_MDLLOOP.LOOP :                                    FFFFFFFFC0000196 C |
 MARSMDL_MDLLOOP.PAGE_2 :                                  FFFFFFFFC00001C2 C |
*MARSMDL_MDLLOOP.SKIP :                                    FFFFFFFFC00001B0 C |
 MARSMDL_READMODEL :                                       FFFFFFFFC0000200 C |
 MARSMDL_READMODEL.BAD_FACE :                              FFFFFFFFC00003A4 C |
 MARSMDL_READMODEL.EXIT :                                  FFFFFFFFC00003AC C |
 MARSMDL_READMODEL.FC_TRI :                                FFFFFFFFC00002DA C |
 MARSMDL_READMODEL.HAS_UV :                                FFFFFFFFC0000244 C |
 MARSMDL_READMODEL.MK_FACE :                               FFFFFFFFC00002A8 C |
 MARSMDL_READMODEL.NEXT_FACE :                             FFFFFFFFC0000210 C |
 MARSMDL_READMODEL.NXT_X :                                 FFFFFFFFC0000356 C |
 MARSMDL_READMODEL.NXT_Y :                                 FFFFFFFFC0000380 C |
 MARSMDL_READMODEL.QUAD :                                  FFFFFFFFC0000228 C |
 MARSMDL_READMODEL.UV_TRI :                                FFFFFFFFC000025C C |
 MARSMDL_READMODEL.VALID :                                 FFFFFFFFC000021A C |
 MARSMDL_READMODEL.X_L :                                   FFFFFFFFC000035E C |
 MARSMDL_READMODEL.X_R :                                   FFFFFFFFC0000364 C |
 MARSMDL_READMODEL.Y_L :                                   FFFFFFFFC0000388 C |
 MARSMDL_READMODEL.Y_R :                                   FFFFFFFFC000038E C |
*MARSOBJ_TEST :             20CA8A0 C |  MARSOBJ_TEST.FACE :        20CA914 C |
 MARSOBJ_TEST.MTRL :        20CA9D4 C |  MARSOBJ_TEST.VERT :        20CA8B4 C |
 MARSOBJ_TEST.VRTX :        20CA984 C |  MARSOBJ_TITLESCRN :        20CA8A0 C |
 MARSRAM_SOUND :           26005D00 C |  MARSRAM_SYSTEM :          26005070 C |
 MARSRAM_VIDEO :           26006080 C |  MARSSND_PWMCACHE :        26005D00 C |
 MARSSND_PWMCHNLS :                                        FFFFFFFFC000056C C |
 MARSSND_PWMCHNLS.END :                                    FFFFFFFFC0000684 C |
 MARSSND_PWMCONTROL :                                      FFFFFFFFC0000534 C |
 MARSSND_REFILL :           6000EA8 C |  MARSSND_REFILL.COPY_NOW :  6000ECE C |
 MARSSND_REFILL.NEXT_ONE :  6000EB0 C |  MARSSND_REFILL.NOT_ENBL :  6000EEA C |
 MARSSND_RVMODE :  FFFFFFFFC0000530 C |  MARSSOUND_INIT :           6000E0C C |
 MARSSOUND_PWMENABLE :      6000E98 C |  MARSSOUND_SETPWM :         6000E28 C |
 MARSSOUND_SETPWM.ENDMRK :  6000E50 C |  MARSSOUND_SETPWMPITCH :    6000E68 C |
 MARSSOUND_SETPWMPITCH.OFF_1 :                                      6000E7C C |
 MARSSOUND_SETVOLUME :      6000E80 C |
 MARSSOUND_SETVOLUME.OFF_1 :                                        6000E94 C |
 MARSSPR_DATA :                  10 C |  MARSSPR_DWIDTH :                 8 C |
*MARSSPR_FILL :                   E C |  MARSSPR_FLAGS :                  C C |
 MARSSPR_INDX :                   A C |  MARSSPR_X :                      4 C |
 MARSSPR_XFRM :                   0 C |  MARSSPR_XS :                     2 C |
 MARSSPR_Y :                      6 C |  MARSSPR_YFRM :                   1 C |
 MARSSPR_YS :                     3 C |  MARSUPD :                       3F C |
 MARSVIDEO_BG_DRAWREQ :     6000B10 C |  MARSVIDEO_BG_DRAWREQ.X_K : 6000B34 C |
 MARSVIDEO_BG_DRAWREQ.X_R : 6000B30 C |  MARSVIDEO_BG_DRAWREQ.Y_K : 6000B4E C |
 MARSVIDEO_BG_DRAWREQ.Y_R : 6000B4A C |  MARSVIDEO_BG_DRAWSCRL :    6000B90 C |
 MARSVIDEO_BG_DRAWSCRL.DRAW_D :                                     6000C88 C |
 MARSVIDEO_BG_DRAWSCRL.DRAW_L :                                     6000C02 C |
 MARSVIDEO_BG_DRAWSCRL.DRAW_R :                                     6000BF4 C |
 MARSVIDEO_BG_DRAWSCRL.DRAW_U :                                     6000C96 C |
 MARSVIDEO_BG_DRAWSCRL.FB_Y :                                       6000BBE C |
 MARSVIDEO_BG_DRAWSCRL.GO_DU :                                      6000CA0 C |
 MARSVIDEO_BG_DRAWSCRL.GO_LR :                                      6000C0C C |
 MARSVIDEO_BG_DRAWSCRL.NO_D :                                       6000BE2 C |
 MARSVIDEO_BG_DRAWSCRL.NO_L :                                       6000BD6 C |
 MARSVIDEO_BG_DRAWSCRL.NO_R :                                       6000BCA C |
 MARSVIDEO_BG_DRAWSCRL.NO_U :                                       6000BEE C |
 MARSVIDEO_BG_DRAWSCRL.XD_EX :                                      6000D0C C |
 MARSVIDEO_BG_DRAWSCRL.XD_LNE :                                     6000CE8 C |
 MARSVIDEO_BG_DRAWSCRL.X_EX :                                       6000C6E C |
 MARSVIDEO_BG_DRAWSCRL.X_LNE :                                      6000C4A C |
 MARSVIDEO_BG_DRAWSCRL.YD_BLK :                                     6000CCA C |
 MARSVIDEO_BG_DRAWSCRL.YD_LNE :                                     6000CE0 C |
 MARSVIDEO_BG_DRAWSCRL.YD_RES :                                     6000CE6 C |
 MARSVIDEO_BG_DRAWSCRL.Y_BLK :                                      6000C2E C |
 MARSVIDEO_BG_DRAWSCRL.Y_LNE :                                      6000C42 C |
 MARSVIDEO_BG_DRAWSCRL.Y_RES :                                      6000C48 C |
 MARSVIDEO_BG_UPDPOS :      6000A9C C |  MARSVIDEO_BG_UPDPOS.XEQU : 6000AB4 C |
 MARSVIDEO_BG_UPDPOS.YEQU : 6000ACA C |
 MARSVIDEO_BG_UPDPOS.YPU_NEGTV :                                    6000AE2 C |
 MARSVIDEO_BG_UPDPOS.YPU_POSTV :                                    6000AEC C |
 MARSVIDEO_BG_UPDPOS.YX_NEGTV :                                     6000AFE C |
 MARSVIDEO_BG_UPDPOS.YX_POSTV :                                     6000B08 C |
*MARSVIDEO_CLEARSCREEN :    60008A0 C |
 MARSVIDEO_CLEARSCREEN.FB_LOOP :                                    60008A6 C |
*MARSVIDEO_CLEARSCREEN.NO_REDRAW_2 :                                60008BE C |
 MARSVIDEO_CLEARSCREEN.WAIT_FB2 :                                   60008B2 C |
 MARSVIDEO_DMADRAW :        6000B54 C |
 MARSVIDEO_DMADRAW.WAIT_DMA :                                       6000B74 C |
 MARSVIDEO_DRAWSUPERSPR_M :                                FFFFFFFFC0000148 C |
 MARSVIDEO_DRWMAPDATA :                                    FFFFFFFFC0000014 C |
 MARSVIDEO_DRWMAPDATA.THIS_BLK :                           FFFFFFFFC00000CC C |
 MARSVIDEO_DRWMAPDATA.XB_LINE :                            FFFFFFFFC00000F2 C |
 MARSVIDEO_DRWMAPDATA.XY_G :                               FFFFFFFFC0000098 C |
 MARSVIDEO_DRWMAPDATA.XY_G2 :                              FFFFFFFFC00000EC C |
 MARSVIDEO_DRWMAPDATA.X_EX :                               FFFFFFFFC000010A C |
 MARSVIDEO_DRWMAPDATA.X_FL :                               FFFFFFFFC000006C C |
 MARSVIDEO_DRWMAPDATA.X_IN :                               FFFFFFFFC000005C C |
 MARSVIDEO_DRWMAPDATA.X_LOOP :                             FFFFFFFFC00000A0 C |
 MARSVIDEO_DRWMAPDATA.X_PL :                               FFFFFFFFC0000064 C |
 MARSVIDEO_DRWMAPDATA.YB_LINE :                            FFFFFFFFC00000E6 C |
 MARSVIDEO_DRWMAPDATA.Y_FL :                               FFFFFFFFC000007C C |
 MARSVIDEO_DRWMAPDATA.Y_LOOP :                             FFFFFFFFC000008C C |
 MARSVIDEO_DRWMAPDATA.Y_PL :                               FFFFFFFFC0000074 C |
 MARSVIDEO_FIXTBLSHIFT :    6000948 C |
 MARSVIDEO_FIXTBLSHIFT.COPY :                                       6000988 C |
 MARSVIDEO_FIXTBLSHIFT.LOOP :                                       6000970 C |
 MARSVIDEO_FIXTBLSHIFT.PTCHSET :                                    600099A C |
 MARSVIDEO_FIXTBLSHIFT.TBLEXIT :                                    6000994 C |
 MARSVIDEO_INIT :           600084C C |  MARSVIDEO_INIT.DEF_FB :    600086C C |
 MARSVIDEO_INIT.NXT_LNE :   6000872 C |  MARSVIDEO_INIT.WAIT_FRM :  6000882 C |
 MARSVIDEO_MAKENAMETBL :    60008D8 C |
 MARSVIDEO_MAKENAMETBL.CANT_USE :                                   6000942 C |
 MARSVIDEO_MAKENAMETBL.LINETBL_NORMAL :                             6000934 C |
 MARSVIDEO_MAKENAMETBL.NXT_LNE :                                    600090C C |
 MARSVIDEO_MAKENAMETBL.NXT_LNE2 :                                   6000938 C |
 MARSVIDEO_MKSCRLFIELD :    60009B8 C |  MARSVIDEO_MKSPRBOXES :     6000D64 C |
 MARSVIDEO_MKSPRBOXES.LAST :                                        6000DFC C |
 MARSVIDEO_MKSPRBOXES.NEXT_SAVE :                                   6000D68 C |
 MARSVIDEO_MKSPRBOXES.SPR_OUT :                                     6000DF8 C |
 MARSVIDEO_MKSPRBOXES.XL_L :                                        6000DB2 C |
 MARSVIDEO_MKSPRBOXES.XR_L :                                        6000DBE C |
 MARSVIDEO_MKSPRBOXES.YL_L :                                        6000DB8 C |
 MARSVIDEO_MKSPRBOXES.YR_L :                                        6000DC4 C |
 MARSVIDEO_MKSPRBOXES.Y_KEEP :                                      6000DD0 C |
*MARSVIDEO_MKSPRBOXES.Y_LP :                                        6000DCA C |
 MARSVIDEO_MKSPRCOORDS :    6000D50 C |
 MARSVIDEO_NXTSUPRSPR :                                    FFFFFFFFC0000154 C |
 MARSVIDEO_NXTSUPRSPR.BLNK :                               FFFFFFFFC000023A C |
 MARSVIDEO_NXTSUPRSPR.BLNK2 :                              FFFFFFFFC000024A C |
 MARSVIDEO_NXTSUPRSPR.EX_LINE :                            FFFFFFFFC000024E C |
 MARSVIDEO_NXTSUPRSPR.FLP_H :                              FFFFFFFFC00001E8 C |
 MARSVIDEO_NXTSUPRSPR.FLP_V :                              FFFFFFFFC00001DC C |
 MARSVIDEO_NXTSUPRSPR.SPR_OUT :                            FFFFFFFFC000026A C |
 MARSVIDEO_NXTSUPRSPR.VALID :                              FFFFFFFFC0000160 C |
 MARSVIDEO_NXTSUPRSPR.XB_E :                               FFFFFFFFC00001A0 C |
 MARSVIDEO_NXTSUPRSPR.XFINC :                              FFFFFFFFC0000208 C |
 MARSVIDEO_NXTSUPRSPR.XT_E :                               FFFFFFFFC000020C C |
 MARSVIDEO_NXTSUPRSPR.X_LOOP :                             FFFFFFFFC000022C C |
 MARSVIDEO_NXTSUPRSPR.YB_E :                               FFFFFFFFC0000198 C |
 MARSVIDEO_NXTSUPRSPR.YFINC :                              FFFFFFFFC00001FA C |
 MARSVIDEO_NXTSUPRSPR.YT_E :                               FFFFFFFFC00001FC C |
 MARSVIDEO_NXTSUPRSPR.Y_LOOP :                             FFFFFFFFC0000222 C |
 MARSVIDEO_NXTSUPRSPR.Y_MAX :                              FFFFFFFFC0000228 C |
 MARSVIDEO_REFILLBGSPR :                                   FFFFFFFFC0000294 C |
 MARSVIDEO_REFILLBGSPR.LAST :                              FFFFFFFFC0000332 C |
 MARSVIDEO_REFILLBGSPR.NEXT_SAVE :                         FFFFFFFFC00002C2 C |
 MARSVIDEO_REFILLBGSPR.SPR_OUT :                           FFFFFFFFC000032E C |
 MARSVIDEO_REFILLBGSPR.X_KEEP :                            FFFFFFFFC0000308 C |
 MARSVIDEO_REFILLBGSPR.X_LP :                              FFFFFFFFC0000302 C |
 MARSVIDEO_REFILLBGSPR.X_LRG :                             FFFFFFFFC0000320 C |
 MARSVIDEO_REFILLBGSPR.YGOOD :                             FFFFFFFFC00002BE C |
 MARSVIDEO_REFILLBGSPR.Y_LP :                              FFFFFFFFC00002FC C |
*MARSVIDEO_RESETNAMETBL :   60008C4 C |
 MARSVIDEO_RESETNAMETBL.NXT_LNE2 :                                  60008CA C |
 MARSVIDEO_SHOWSCRLBG :     60009E8 C |
 MARSVIDEO_SHOWSCRLBG.LN_LOOP :                                     6000A0A C |
 MARSVIDEO_SHOWSCRLBG.LN_LOOP_W :                                   6000A48 C |
 MARSVIDEO_SHOWSCRLBG.LN_WAVY :                                     6000A30 C |
*MARSVIDEO_SHOWSCRLBG.NO_LINES :                                    6000A88 C |
 MARSVIDEO_SHOWSCRLBG.WXL_L :                                       6000A6C C |
 MARSVIDEO_SHOWSCRLBG.WXL_R :                                       6000A66 C |
 MARSVIDEO_SHOWSCRLBG.XL_L :                                        6000A18 C |
 MARSVIDEO_SHOWSCRLBG.XL_R :                                        6000A12 C |
 MARSVIDEO_SLICEPLGN :                                     FFFFFFFFC00003E4 C |
 MARSVIDEO_SLICEPLGN.EXIT :                                FFFFFFFFC00004C0 C |
 MARSVIDEO_SLICEPLGN.FIND_TOP :                            FFFFFFFFC0000436 C |
 MARSVIDEO_SLICEPLGN.IS_HIGH :                             FFFFFFFFC0000448 C |
 MARSVIDEO_SLICEPLGN.IS_LOW :                              FFFFFFFFC000043E C |
 MARSVIDEO_SLICEPLGN.LEFTH :                               FFFFFFFFC0000488 C |
 MARSVIDEO_SLICEPLGN.LEFTH2 :                              FFFFFFFFC00004B8 C |
 MARSVIDEO_SLICEPLGN.NEXT_PZ :                             FFFFFFFFC000046A C |
 MARSVIDEO_SLICEPLGN.SETPNTS :                             FFFFFFFFC0000404 C |
 MARSVIDEO_SLICEPLGN.SRC_PNTS :                            FFFFFFFFC0000418 C |
*MARSVIDEO_SLICEPLGN.START_MATH :                          FFFFFFFFC0000426 C |
 MARSVIDEO_SLICEPLGN.TRINGL :                              FFFFFFFFC00003F6 C |
 MARSVIDEO_SLICEPLGN.YTRINGL :                             FFFFFFFFC000042E C |
*MARS_CLEARCACHERAM :       60007C4 C |  MARS_CLEARCACHERAM.LOOP :  60007CA C |
 MARS_ENTRY :                   800 C | *MARS_ENTRY.NO_MARS :           802 C |
 MARS_LOADCACHERAM :        60007DC C |  MARS_LOADCACHERAM.COPY :   6000800 C |
 MARS_RAMDATA :               4F200 C |  MARS_RAMDATA_E :             54270 C |
 MARS_SETWATCHDOG :         600081C C |  MASTER_IRQ :               6000250 C |
 MASTER_LOOP :              6000FCC C |  MASTER_LOOP.COPY_PAL :     600100C C |
 MASTER_LOOP.COPY_SAFE :    6000FEA C | *MASTER_LOOP.NOT_READY :    6001028 C |
 MASTER_LOOP.NO_INIT :      6001054 C |  MASTER_LOOP.WAITL :        6000FD6 C |
 MASTER_LOOP.WAITV :        6000FF8 C |  MAX_BLOCKS :                    18 - |
 MAX_FACES :                    3D4 - |  MAX_HEADS :                      F - |
 MAX_INS :                        F - |  MAX_MDDMATSK :                  10 - |
 MAX_MDERAM :                  1000 - |  MAX_MDOBJ :                     10 - |
 MAX_MODELS :                    10 - |  MAX_PWMBACKUP :                 80 - |
 MAX_PWMCHNL :                    7 - |  MAX_RCACH :                     40 - |
 MAX_SCRNBUFF :               2C000 - |  MAX_SSPRSPD :                    8 - |
 MAX_SUPERSPR :                  18 - |  MAX_SVDP_PZ :                  434 - |
 MAX_TBLSIZE :                   10 - |  MAX_TITLOPT :                    6 - |
 MAX_TRFRPZ :                     8 - |  MAX_TRKCHN :                    11 - |
 MAX_ZDIST :       FFFFFFFFFFFFE700 - | *MCD :                            0 - |
 MCHNSND_BANK :                   C C |  MCHNSND_CCHREAD :                8 C |
 MCHNSND_ENBL :                   0 C |  MCHNSND_END :                   14 C |
 MCHNSND_FLAGS :                 20 C |  MCHNSND_LOOP :                  18 C |
 MCHNSND_PITCH :                 1C C |  MCHNSND_READ :                   4 C |
 MCHNSND_START :                 10 C |  MCHNSND_VOL :                   24 C |
*MDBNK0_END :                939574 C | *MDBNK0_END.END :             39574 C |
*MDBNK0_START :              939374 C |  MDLRD_ROTATE :    FFFFFFFFC0000480 C |
 MDLRD_SETPOINT :  FFFFFFFFC00003B8 C |
 MDLRD_SETPOINT.INSIDE :                                   FFFFFFFFC0000450 C |
 MDLRD_SETPOINT.ZMULTI :                                   FFFFFFFFC000045A C |
 MDL_DATA :                       0 C | *MDL_FLAGS :                     16 C |
*MDL_FRAME :                     14 C |  MDL_OPTION :                     4 C |
 MDL_X_POS :                      8 C |  MDL_X_ROT :                      E C |
 MDL_Y_POS :                      A C |  MDL_Y_ROT :                     10 C |
 MDL_Z_POS :                      C C |  MDL_Z_ROT :                     12 C |
*MDMAP_DRAWALL :             FF0E7E C |  MDMAP_DRAWALL.BLANK :       FF0F44 C |
 MDMAP_DRAWALL.DRWY_16 :     FF0F9E C |  MDMAP_DRAWALL.GOT_BLK :     FF0F42 C |
 MDMAP_DRAWALL.MK_BLOCK :    FF0F7A C |  MDMAP_DRAWALL.NO_BG :       FF0F78 C |
 MDMAP_DRAWALL.THIS_BG :     FF0E88 C |  MDMAP_DRAWALL.X_LOOP :      FF0F32 C |
 MDMAP_DRAWALL.Y_LOOP :      FF0F2A C | *MDMAP_DRAWSCRLMD :          FF0FD8 C |
*MDMAP_DRAWSCRLMD.BLNK :     FF1072 C |  MDMAP_DRAWSCRLMD.FRCE :     FF10A6 C |
 MDMAP_DRAWSCRLMD.GET_COORDS :                                       FF11BA C |
*MDMAP_DRAWSCRLMD.MARS_RET_C :                                       FF10FC C |
 MDMAP_DRAWSCRLMD.MK_CLMN :  FF104C C |  MDMAP_DRAWSCRLMD.MK_ROW :   FF10FE C |
 MDMAP_DRAWSCRLMD.NO_BG :    FF104A C |  MDMAP_DRAWSCRLMD.NO_D :     FF101E C |
 MDMAP_DRAWSCRLMD.NO_L :     FF1036 C |  MDMAP_DRAWSCRLMD.NO_R :     FF1046 C |
 MDMAP_DRAWSCRLMD.NO_U :     FF100C C |  MDMAP_DRAWSCRLMD.PRIO :     FF1078 C |
 MDMAP_DRAWSCRLMD.THIS_BG :  FF0FE8 C |  MDMAP_DRAWSCRLMD.VLD :      FF1084 C |
*MDMAP_DRAWSCRLMD.XBLNK :    FF1132 C |  MDMAP_DRAWSCRLMD.XFRCE :    FF1166 C |
 MDMAP_DRAWSCRLMD.XPRIO :    FF1138 C |  MDMAP_DRAWSCRLMD.XVLD :     FF1144 C |
 MDMAP_DRAWSCRLMD.X_BLK :    FF1126 C |  MDMAP_DRAWSCRLMD.X_LOW :    FF11A8 C |
*MDMAP_DRAWSCRLMD.X_NEW :    FF11B0 C |  MDMAP_DRAWSCRLMD.Y_BLK :    FF1066 C |
 MDMAP_DRAWSCRLMD.Y_LOW :    FF10F4 C | *MDMAP_INIT :                FF0C58 C |
 MDMAP_INIT.CLR :            FF0C62 C | *MDMAP_MOVE :                FF0D5E C |
 MDMAP_MOVE.MARS_SIDE :      FF0D70 C | *MDMAP_MOVE.NOT_ENABLD :     FF0DA0 C |
 MDMAP_MOVE.X_LEFT :         FF0D7A C |  MDMAP_MOVE.X_RIGHT :        FF0D84 C |
 MDMAP_MOVE.Y_LEFT :         FF0D8E C |  MDMAP_MOVE.Y_RIGHT :        FF0D98 C |
*MDMAP_SET :                 FF0C6A C |  MDMAP_SET.MARS_SIDE :       FF0C8A C |
 MDMAP_SET.MD_SIDE :         FF0C7A C |  MDMAP_SET.XL_G :            FF0D26 C |
 MDMAP_SET.XL_L :            FF0D1E C |  MDMAP_SET.XR_G :            FF0D36 C |
 MDMAP_SET.XR_L :            FF0D2E C |  MDMAP_SET.YB_G :            FF0D52 C |
 MDMAP_SET.YB_L :            FF0D4A C |  MDMAP_SET.YT_G :            FF0D42 C |
 MDMAP_SET.YT_L :            FF0D3A C | *MDMAP_UPDATE :              FF0DA2 C |
 MDMAP_UPDATE.BEAM_INCR :    FF0E6A C |  MDMAP_UPDATE.NO_BG :        FF0E68 C |
 MDMAP_UPDATE.THIS_BG :      FF0DB2 C |  MDMAP_UPDATE.VAL_H :        FF0E7C C |
 MDMAP_UPDATE.XD_G :         FF0E74 C |  MDMAP_UPDATE.XD_L :         FF0E6C C |
 MDMAP_UPDATE.XEQU :         FF0DD4 C |  MDMAP_UPDATE.X_K :          FF0E38 C |
 MDMAP_UPDATE.X_R :          FF0E34 C |  MDMAP_UPDATE.YEQU :         FF0DE8 C |
 MDMAP_UPDATE.Y_D :          FF0E5A C |  MDMAP_UPDATE.Y_K :          FF0E5E C |
 MDRAM_START :             FFFF9000 - |  MDSYS_SINEDATA :            FF198E C |
*MD_2DMODE :                 FF1B90 C | *MD_2DMODE.FADE_IN :         FF1E04 C |
*MD_2DMODE.FADE_OUT :        FF1E2A C |  MD_2DMODE.GEMA_TEST :       FF1D7C C |
 MD_2DMODE.LIST :            FF1D8A C |  MD_2DMODE.LOOP :            FF1CB8 C |
 MD_2DMODE.LOOP2 :           FF1E4E C |  MD_2DMODE.NO_B :            FF1D6A C |
 MD_2DMODE.NO_BEATS :        FF1DAC C |  MD_2DMODE.NO_C :            FF1D5A C |
 MD_2DMODE.NO_DOWN :         FF1D1E C |  MD_2DMODE.NO_L :            FF1D38 C |
 MD_2DMODE.NO_R :            FF1D4C C |  MD_2DMODE.NO_UP :           FF1D04 C |
 MD_2DMODE.NULL :            FF1DC2 C |  MD_2DMODE.PLAY :            FF1D98 C |
 MD_2DMODE.PLOOP :           FF1CB8 C |  MD_2DMODE.SFX_DRAW :        FF1D6E C |
 MD_2DMODE.STOP :            FF1DB2 C |  MD_2DMODE.STOPALL :         FF1DBA C |
 MD_2DMODE.TEMPOLIST :       FF1DC4 C |  MD_BANK_SRAM :              A130F1 - |
 MD_BG_BH :                       1 C |  MD_BG_BLK :                     28 C |
*MD_BG_BLKW :                     2 C |  MD_BG_BW :                       0 C |
 MD_BG_COL :                     2C C |  MD_BG_FLAGS :                    3 C |
 MD_BG_H :                        A C |  MD_BG_HF :                       E C |
 MD_BG_HI :                      24 C |  MD_BG_LOW :                     20 C |
*MD_BG_MOVEX :                    6 C | *MD_BG_MOVEY :                    7 C |
 MD_BG_VPOS :                    1C C |  MD_BG_VRAM :                    1E C |
 MD_BG_W :                        8 C |  MD_BG_WF :                       C C |
 MD_BG_X :                       30 C |  MD_BG_XINC_L :                  10 C |
 MD_BG_XINC_R :                  12 C |  MD_BG_XSET :                     4 C |
 MD_BG_X_OLD :                   18 C |  MD_BG_Y :                       34 C |
 MD_BG_YINC_D :                  16 C |  MD_BG_YINC_U :                  14 C |
 MD_BG_YSET :                     5 C |  MD_BG_Y_OLD :                   1A C |
 MD_ERRADDR :                   820 C |  MD_ERRBUS :                    820 C |
 MD_ERRCHK :                    820 C |  MD_ERRILL :                    820 C |
 MD_ERROREX :                   820 C |  MD_ERRORTRAP :                 820 C |
 MD_ERRPRIVL :                  820 C |  MD_ERRTRAPV :                  820 C |
 MD_ERRZDIV :                   820 C |  MD_INIT :                      838 C |
 MD_INIT.COPYME :               8A4 C |  MD_INIT.LOOP_RAM :             850 C |
 MD_INIT.WAIT_1 :               884 C |  MD_INIT.WAIT_2 :               88A C |
 MD_INIT.WAIT_DMA :             86A C |  MD_LINE1010 :                  820 C |
 MD_LINE1111 :                  820 C |  MD_READMODES :              FF1B58 C |
 MD_READMODES.HERE :         FF1B90 C |  MD_READMODES.PICK_BOOT :    FF1B70 C |
 MD_TOPCODE :                   8C8 C |  MD_TOPCODE_E :                2458 C |
 MD_TRACE :                     820 C |  MINFO_RAM_S :               FF0000 C |
 MODE :                          18 - | *MODE_FADEOUT :              FF1B0C C |
 MODE_FADEOUT.LOOPW :        FF1B30 C |  MODE_INIT :                 FF1ADC C |
 MODE_INIT.CLR :             FF1AEC C |  MODE_INIT.CLR_MDLS :        FF1AFA C |
 MOMCPU :                     68000 - | *MOMCPUNAME :                 68000 - |
 MONOWIDTH :                     38 - |  MOUSE_X :                        6 C |
 MOUSE_Y :                        8 C |  MSTR_GFX0_HBLK :           60010CC C |
 MSTR_GFX0_INIT_1 :         60010D6 C |  MSTR_GFX0_INIT_2 :         60010D0 C |
 MSTR_GFX0_LOOP :           60010D6 C |  MSTR_GFX1_CONT :           60010F4 C |
 MSTR_GFX1_CONT.COPYME :    60010FA C |  MSTR_GFX1_HBLK :           60010DC C |
 MSTR_GFX1_INIT_1 :         60010E0 C |  MSTR_GFX1_INIT_2 :         60010EE C |
 MSTR_GFX1_LOOP :           6001104 C |  MSTR_GFX2_HBLK :           600113C C |
 MSTR_GFX2_INIT_1 :         6001140 C |
 MSTR_GFX2_INIT_1.CLR_SCRN :                                        6001158 C |
 MSTR_GFX2_INIT_1.SLV_WAIT :                                        6001142 C |
 MSTR_GFX2_INIT_1.WAIT_FB : 600114C C |  MSTR_GFX2_INIT_2 :         6001186 C |
 MSTR_GFX2_INIT_CONT :      600118C C |  MSTR_GFX2_LOOP :           600119E C |
 MSTR_GFX2_LOOP.WAIT_SLV :  60011FA C |  MSTR_GFX3_HBLK :           6001288 C |
 MSTR_GFX3_INIT_1 :         600128C C |
 MSTR_GFX3_INIT_1.CLR_SCRN :                                        6001292 C |
 MSTR_GFX3_INIT_2 :         60012AC C |  MSTR_GFX3_INIT_CONT :      60012B2 C |
 MSTR_GFX3_INIT_CONT.WAIT_FB :                                      60012B4 C |
 MSTR_GFX3_LOOP :           60012C8 C |  MSTR_GFX3_LOOP.CONT_PLGN : 6001362 C |
 MSTR_GFX3_LOOP.COPY_CAM :  60012FE C |  MSTR_GFX3_LOOP.COPY_OBJ :  60012EE C |
*MSTR_GFX3_LOOP.EXIT :      600139C C |  MSTR_GFX3_LOOP.HIGHER :    6001380 C |
 MSTR_GFX3_LOOP.INVALID :   60013B2 C |  MSTR_GFX3_LOOP.LOOP :      600139E C |
 MSTR_GFX3_LOOP.MK_ME :     60012D8 C |  MSTR_GFX3_LOOP.PAGE_2 :    600135A C |
 MSTR_GFX3_LOOP.ROLL :      600136C C |  MSTR_GFX3_LOOP.SKIP :      60013B8 C |
 MSTR_GFX3_LOOP.SRCH :      6001376 C |  MSTR_GFX3_LOOP.WAIT_FB :   600131E C |
 MSTR_GFX3_LOOP.WAIT_ME :   60012CC C |  MSTR_GFX3_LOOP.WAIT_PZ :   60013BC C |
 MSTR_GFX3_LOOP.WAIT_SV :   60013D0 C |  MSTR_GFX3_LOOP.WAIT_WDG :  60013C2 C |
 MSTR_GFXLIST :             600108C C |  MSTR_READY :               60013DC C |
 M_IRQ_BAD :                6000380 C |  M_IRQ_CMD :                600039C C |
 M_IRQ_DMA :                60003F0 C |  M_IRQ_DMA.WAIT_DMA :       60003FA C |
 M_IRQ_H :                  600040C C |  M_IRQ_PWM :                6000384 C |
 M_IRQ_V :                  6000428 C |  M_IRQ_VRES :               6000444 C |
 M_IRQ_VRES.RV_BUSY :       6000484 C | *NESTMAX :                      100 - |
 NIKONA_BUFFLIST :             149D C |  NIKONA_SETMSTRLIST :          14CF C |
 OBJECTS_INIT :              FF1236 C |  OBJECTS_INIT.CLR :          FF123E C |
 OBJECTS_INIT.CLR_D :        FF124C C | *OBJECTS_RUN :               FF1258 C |
 OBJECTS_RUN.NEXT_ONE :      FF1260 C |  OBJECTS_RUN.NO_CODE :       FF126C C |
*OBJECTS_SHOW :              FF1276 C |  OBJECTS_SHOW.FINISH :       FF13A6 C |
 OBJECTS_SHOW.FLIP_H :       FF138C C |  OBJECTS_SHOW.FLIP_V :       FF1398 C |
 OBJECTS_SHOW.MARS_MODE :    FF132E C |  OBJECTS_SHOW.MK_PZ :        FF12F6 C |
 OBJECTS_SHOW.MK_SPR :       FF13A0 C |  OBJECTS_SHOW.NEXT :         FF12C0 C |
 OBJECTS_SHOW.NEXTS :        FF128E C |  OBJECTS_SHOW.NO_SPRDRW :    FF12B4 C |
 OBJECTS_SHOW.RAN_OUT :      FF13BC C | *OBJECT_ANIMATE :            FF1404 C |
 OBJECT_ANIMATE.GOTOFRAME :  FF1486 C |  OBJECT_ANIMATE.KEEPSPD :    FF1446 C |
 OBJECT_ANIMATE.LASTFRAME :  FF1480 C |  OBJECT_ANIMATE.NOANIM :     FF1472 C |
 OBJECT_ANIMATE.RETURN :     FF1470 C |  OBJECT_ANIMATE.SAMETHING :  FF141E C |
*OBJECT_COLM_FLOOR :         FF14B4 C |  OBJECT_COLM_FLOOR.BLNK :    FF152A C |
 OBJECT_COLM_FLOOR.NEXT :    FF151E C |  OBJECT_COLM_FLOOR.VALID :   FF1532 C |
 OBJECT_COLM_FLOOR.V_X :     FF14D0 C |  OBJECT_COLM_FLOOR.V_XR :    FF14D6 C |
 OBJECT_COLM_FLOOR.V_Y :     FF14E6 C |  OBJECT_COLM_FLOOR.V_YD :    FF14EC C |
*OBJECT_DISPLAY :            FF13BE C |  OBJECT_DISPLAY.SRCH :       FF13C6 C |
 OBJECT_DISPLAY.THIS_ONE :   FF13D2 C | *OBJECT_MKSPRPZ :            FF13D6 C |
 OBJECT_MKSPRPZ.NOPE :       FF1402 C | *OBJECT_SETCOLFLOOR :        FF1538 C |
 OBJECT_SETCOLFLOOR.NO_COL : FF1582 C | *OBJECT_SPEED :              FF14A2 C |
 OBJECT_UPDX :               FF1492 C | *OBJECT_UPDY :               FF14A4 C |
 OBJ_ANIM_ID :                   1C C |  OBJ_ANIM_INDX :                 1A C |
 OBJ_ANIM_SPD :                  20 C |  OBJ_CODE :                       0 C |
 OBJ_FRAME :                     1E C | *OBJ_INDEX :                     21 C |
 OBJ_MAP :                       10 C | *OBJ_RAM :                       26 C |
 OBJ_SET :                       23 C |  OBJ_SIZE :                       4 C |
*OBJ_SPWNID :                    25 C |  OBJ_STATUS :                    24 C |
*OBJ_SUBID :                     22 C |  OBJ_VRAM :                      14 C |
 OBJ_X :                          8 C |  OBJ_X_SPD :                     16 C |
 OBJ_Y :                          C C |  OBJ_Y_SPD :                     18 C |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*PACKING :                        0 - | *PADDING :                        0 - |
*PADDINGSOFAR :                   0 - |  PAD_ID :                         0 C |
 PAD_VER :                        1 C |  PALMARS_TITLE :             939374 C |
 PAL_TITLE_BG :              FF22EE C | *PAL_TITLE_FG :              FF2026 C |
 PARP :                          34 - | *PEN :                           20 - |
 PLGN_TEXURE :                   80 - |  PLGN_TRI :                      40 - |
 PLYPZ_MTRL :                     4 C |  PLYPZ_SRC_XL :                  10 C |
 PLYPZ_SRC_XL_DX :               20 C |  PLYPZ_SRC_XR_DX :               24 C |
 PLYPZ_SRC_YL :                  14 C |  PLYPZ_SRC_YL_DX :               28 C |
 PLYPZ_SRC_YR_DX :               2C C |  PLYPZ_TYPE :                     0 C |
 PLYPZ_XL :                       C C |  PLYPZ_XL_DX :                   18 C |
 PLYPZ_XR_DX :                   1C C |  PLYPZ_YTB :                      8 C |
 POLYGN_MTRL :                    4 C |  POLYGN_POINTS :                  8 C |
 POLYGN_SRCPNTS :                28 C |  POLYGN_TYPE :                    0 C |
 PROC_CHIPS :                   520 C |  PSGCOM :                      1721 C |
 PSGFREQ_LIST :                12AD C |  PSGHATMODE :                  17AC C |
*PSG_CTRL :                  C00011 - |  PTMR :                          38 - |
 PUT_PIECE :       FFFFFFFFC00005F4 C |
 PUT_PIECE.BAD_PIECE :                                     FFFFFFFFC00006A8 C |
 PUT_PIECE.DONTRES :                                       FFFFFFFFC000069E C |
 PUT_PIECE.LEFTH : FFFFFFFFC0000606 C |
 PUT_PIECE.TOP_NEG :                                       FFFFFFFFC000068A C |
 PVOL :                          30 - | *PWCOM :                          0 - |
*PWINSH :                        20 - | *PWINSL :                        30 - |
*PWINSM :                        28 - |  PWMCOM :                      16E9 C |
*PWMCTL :                        31 - |  PWMINTCLR :                     1C - |
 PWMIRQ_ON :                      1 - |  PWOUTF :                        18 - |
*PWPHL :                         10 - | *PWPTH_V :                        8 - |
 RAMCODE_SCRN1 :               2458 C |  RAMCODE_USER :              FF1B90 C |
 RAM_BGBUFFER :    FFFFFFFFFFFF9660 C |  RAM_BGBUFFERM :   FFFFFFFFFFFFB022 - |
*RAM_DMACODE :     FFFFFFFFFFFFAC06 C |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFA9AA C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFA9A8 C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFA9A6 C |  RAM_FADEMARSTMR : FFFFFFFFFFFFA9AC C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFA9A2 C |  RAM_FADEMDINCR :  FFFFFFFFFFFFA9A0 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFA99E C |  RAM_FADEMDTMR :   FFFFFFFFFFFFA9A4 C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFF9740 C |  RAM_GLBL_SCRN :   FFFFFFFFFFFFC41A C |
 RAM_HORSCROLL :   FFFFFFFFFFFF9744 C | *RAM_INITFLUG :    FFFFFFFFFFFFAE0E C |
 RAM_INPUTDATA :   FFFFFFFFFFFFA9C6 C |  RAM_MARS_DREQDMA :        26005070 C |
 RAM_MARS_DREQREAD :       26005668 C |  RAM_MARS_GLOBAL :         26005C60 C |
 RAM_MARS_OBJCAMERA :      260315C8 C |  RAM_MARS_OBJECTS :        26031448 C |
 RAM_MARS_PLGNLIST_0 :     2602D700 C |  RAM_MARS_PLGNLIST_1 :     2602F5A0 C |
 RAM_MARS_PLGNNUM_0 :      26031440 C |  RAM_MARS_PLGNNUM_1 :      26031444 C |
 RAM_MARS_POLYGONS_0 :     26012A40 C |  RAM_MARS_POLYGONS_1 :     260200A0 C |
 RAM_MARS_SCRLBUFF :       26006090 C |  RAM_MARS_SCRLDATA :       260060F8 C |
 RAM_MARS_SCRNBUFF :       26006080 C |  RAM_MARS_SVDPDRWLIST :    26006080 C |
 RAM_MARS_SVDPDRWLIST_E :  26012A40 C |  RAM_MDDREQ :      FFFFFFFFFFFFAE22 C |
 RAM_MDGLOBAL :    FFFFFFFFFFFFC41A C |  RAM_MDMARSHINT :  FFFFFFFFFFFFAE18 C |
 RAM_MDMARSPALFD : FFFFFFFFFFFFA534 C |  RAM_MDMARSVINT :  FFFFFFFFFFFFAE12 C |
 RAM_MDSYSTEM :    FFFFFFFFFFFFA9C6 C | *RAM_MDVBLKWAIT :  FFFFFFFFFFFFAE1E C |
 RAM_MDVIDEO :     FFFFFFFFFFFF9000 C |  RAM_MODEBUFF :    FFFFFFFFFFFFB41A C |
 RAM_OBJDISPLIST : FFFFFFFFFFFF9B54 C |  RAM_OBJECTS :     FFFFFFFFFFFF9000 C |
 RAM_PALETTE :     FFFFFFFFFFFFA434 C |  RAM_PALETTEFD :   FFFFFFFFFFFFA4B4 C |
*RAM_SAVEDATA :    FFFFFFFFFFFFAA06 C |  RAM_SPRDRWCNTR :  FFFFFFFFFFFFA994 C |
 RAM_SPRDRWPZ :    FFFFFFFFFFFF9B74 C |  RAM_SPRITES :     FFFFFFFFFFFF9FD4 C |
*RAM_SPRSHOWINDX : FFFFFFFFFFFFA996 C | *RAM_SYSFLAGS :    FFFFFFFFFFFFAE20 C |
 RAM_SYSRANDSEED : FFFFFFFFFFFFAE0A C | *RAM_SYSRANDVAL :  FFFFFFFFFFFFAE06 C |
 RAM_TITE_PICKOPT :                                        FFFFFFFFFFFFB666 C |
*RAM_TITE_USROPT_B :                                       FFFFFFFFFFFFB66A C |
 RAM_TITE_USROPT_T :                                       FFFFFFFFFFFFB668 C |
*RAM_TITE_VERBGMENU :                                      FFFFFFFFFFFFB656 C |
*RAM_TITE_VERBOT : FFFFFFFFFFFFB652 C |
*RAM_TITL_DBGVALUES :                                      FFFFFFFFFFFFB66C C |
*RAM_TTLE_HORBG :  FFFFFFFFFFFFB65E C |  RAM_TTLE_HORVAL : FFFFFFFFFFFFB64A C |
 RAM_TTLE_SFX :    FFFFFFFFFFFFB664 C |  RAM_TTLE_SPDUSR : FFFFFFFFFFFFB662 C |
*RAM_TTLE_SPRITEDATA :                                     FFFFFFFFFFFFB41A C |
*RAM_TTLE_VERBG :  FFFFFFFFFFFFB65A C |  RAM_TTLE_VERVAL : FFFFFFFFFFFFB64E C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFA998 C |  RAM_VDPDMALIST :  FFFFFFFFFFFFA734 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFA99A C |  RAM_VDPREGS :     FFFFFFFFFFFFA9AE C |
 RAM_VERSCROLL :   FFFFFFFFFFFF9B04 C |  RAM_VIDPRNTLIST : FFFFFFFFFFFFA814 C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFFA99C C |  RCHWIDTH :                      36 - |
*RELAXED :                        0 - |  ROM_END :                    CA9DC C |
 RRT :                           14 - |  SAMPLEHEAD :                  17BC C |
 SAMPLE_RATE :                 5622 - |  SBEATACC :                      1C C |
 SBEATPTCK :                     1E C |  SCREEN_HEIGHT :                 E0 - |
 SCREEN_WIDTH :                 140 - |  SCRL_BLKSIZE :                  10 C |
 SCRL_FBDATA :                   28 C |  SCRL_FBPOS :                    24 C |
 SCRL_FBPOS_Y :                  20 C |  SCRL_INTRL_H :                  1C C |
 SCRL_INTRL_SIZE :               14 C |  SCRL_INTRL_W :                  18 C |
 SCRL_XPOS :                     2C C |  SCRL_XPOS_OLD :                  0 C |
 SCRL_XSET :                      8 C |  SCRL_YPOS :                     30 C |
 SCRL_YPOS_OLD :                  4 C |  SCRL_YSET :                      C C |
 SET_CHIPS :                    4FB C |  SET_CHIPS.TRK_BUFFRS :         503 C |
 SET_LEFT :        FFFFFFFFC00004E4 C |  SET_LEFT.LFT_OK : FFFFFFFFC0000506 C |
 SET_LEFT.LFT_SKIP :                                       FFFFFFFFC0000566 C |
 SET_MENUTOPLINE :               7B - |  SET_RIGHT :       FFFFFFFFC000056C C |
 SET_RIGHT.RGT_OK :                                        FFFFFFFFC000058E C |
 SET_RIGHT.RGT_SKIP :                                      FFFFFFFFC00005EE C |
 SH2_DEBUG :                      1 - |  SH2_MASTER :               6000000 C |
 SH2_M_ENTRY :              6000F20 C |  SH2_M_ERRADDR :            600032C C |
 SH2_M_ERRCODE :            600033C C |  SH2_M_ERRDMA :             6000330 C |
 SH2_M_ERRILLG :            6000324 C |  SH2_M_ERRINVL :            6000328 C |
 SH2_M_ERRNMI :             6000334 C |  SH2_M_ERROR :              6000320 C |
 SH2_M_ERRUSER :            6000338 C |  SH2_M_HOTSTART :           6000F62 C |
 SH2_M_HOTSTART.WAIT_SLV :  6000F96 C |  SH2_RAM :                  6005070 C |
 SH2_SLAVE :                6000128 C |  SH2_S_ENTRY :              6001448 C |
 SH2_S_ERRADDR :            6000358 C |  SH2_S_ERRCODE :            6000368 C |
 SH2_S_ERRDMA :             600035C C |  SH2_S_ERRILLG :            6000350 C |
 SH2_S_ERRINVL :            6000354 C |  SH2_S_ERRNMI :             6000360 C |
 SH2_S_ERROR :              600034C C |  SH2_S_ERRUSER :            6000364 C |
 SH2_S_HOTSTART :           6001498 C |  SH2_S_HOTSTART.WAIT_MST :  60014D6 C |
 SHIFT :                          2 - |  SHOWROM :                      F4E C |
 SIN_TABLE :                6002864 C |  SIZEOF_CAMERA :                 18 C |
 SIZEOF_DREQ :                  5F8 C |  SIZEOF_INPUT :                  10 C |
 SIZEOF_MARSGBL :                28 C | *SIZEOF_MARSRAM :          26032080 C |
*SIZEOF_MARSRAM.HERE :     26032080 C |  SIZEOF_MARSSND :          26006080 C |
 SIZEOF_MARSSPR :                14 C |  SIZEOF_MARSSYS :          26005D00 C |
 SIZEOF_MARSVID :          26032080 C |  SIZEOF_MDBG :                   38 C |
 SIZEOF_MDGLBL :   FFFFFFFFFFFFC41C C |  SIZEOF_MDLOBJ :                 18 C |
 SIZEOF_MDOBJ :                  66 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFC41C C |
 SIZEOF_MDSYS :    FFFFFFFFFFFFAE22 C |  SIZEOF_MDVID :    FFFFFFFFFFFFA9C6 C |
 SIZEOF_MSCRL :                  34 C |  SIZEOF_PLYPZ :                  30 C |
 SIZEOF_POLYGN :                 38 C |  SIZEOF_SCRN04 :           260315E0 C |
 SIZEOF_SNDCHN :                 28 C |  SLAVE_IRQ :                6000278 C |
 SLAVE_LOOP :               600151C C |  SLAVE_LOOP.LIST :          6001534 C |
 SLOPE_DATA_16 :             FF1584 C |  SLV :                           10 - |
 SLVPLGN_00 :      FFFFFFFFC0000388 C |  SLVPLGN_01 :      FFFFFFFFC00000C0 C |
 SLVPLGN_01.EXIT : FFFFFFFFC00000D2 C |
 SLVPLGN_01.HAS_PZ :                                       FFFFFFFFC00000D8 C |
 SLVPLGN_02 :      FFFFFFFFC0000078 C | *SLVPLGN_02.EXIT : FFFFFFFFC00000BC C |
 SLV_EXIT :                 600155C C |  SLV_TASK_1 :               6001544 C |
 SLV_TASK_2 :               6001550 C |  SMPINS_KICK :              20901B8 C |
 SMPINS_KICK.END :          2091BB8 C |  SMPINS_KICK.START :        20901BE C |
 SMPINS_MOVEME_BRASS :      207D84C C |  SMPINS_MOVEME_BRASS.END :  20901B6 C |
 SMPINS_MOVEME_BRASS.START :                                        207D852 C |
 SMPINS_MOVEME_HIT :        207A990 C |  SMPINS_MOVEME_HIT.END :    207D84C C |
 SMPINS_MOVEME_HIT.START :  207A996 C |  SMPINS_NADIE :             2054270 C |
 SMPINS_NADIE.END :         207A990 C |  SMPINS_NADIE.START :       2054276 C |
*SMPINS_SNARE_1 :           20935F4 C |  SMPINS_SNARE_1.END :       209471E C |
 SMPINS_SNARE_1.START :     20935FA C |  SMPINS_SNARE_2 :           20A4864 C |
 SMPINS_SNARE_2.END :       20A789E C |  SMPINS_SNARE_2.START :     20A486A C |
 SMPINS_SNARE_MOVEME :      2091BB8 C |  SMPINS_SNARE_MOVEME.END :  20935F2 C |
 SMPINS_SNARE_MOVEME.START :                                        2091BBE C |
 SMPINS_VCTR01 :            2094720 C |  SMPINS_VCTR01.END :        2096356 C |
 SMPINS_VCTR01.START :      2094726 C |  SMPINS_VCTR04 :            2096358 C |
 SMPINS_VCTR04.END :        2097DC6 C |  SMPINS_VCTR04.START :      209635E C |
*SMPINS_VCTRAMBIENT :       20A30F0 C |  SMPINS_VCTRAMBIENT.END :   20A4864 C |
 SMPINS_VCTRAMBIENT.START : 20A30F6 C |  SMPINS_VCTRBRASS :         20A197C C |
 SMPINS_VCTRBRASS.END :     20A30F0 C |  SMPINS_VCTRBRASS.START :   20A1982 C |
 SMPINS_VCTRCRASH :         209DD14 C |  SMPINS_VCTRCRASH.END :     20A197A C |
 SMPINS_VCTRCRASH.START :   209DD1A C |  SMPINS_VCTRKICK :          2099B0C C |
 SMPINS_VCTRKICK.END :      209AA9E C |  SMPINS_VCTRKICK.START :    2099B12 C |
 SMPINS_VCTRSNARE :         2097DC8 C |  SMPINS_VCTRSNARE.END :     2099B0C C |
 SMPINS_VCTRSNARE.START :   2097DCE C |  SMPINS_VCTRTIMPANI :       209AAA0 C |
 SMPINS_VCTRTIMPANI.END :   209DD12 C |  SMPINS_VCTRTIMPANI.START : 209AAA6 C |
 SNDLOCKZ80 :                FF00A0 C |  SNDLOCKZ80.WAIT :           FF00A8 C |
 SNDREQCMD :                 FF01D4 C |  SNDREQCMD.WAIT_IN :         FF01D4 C |
 SNDREQCMD.WAIT_OUT :        FF020A C |  SNDREQ_ENTER :              FF00BE C |
 SNDREQ_ENTER.WAIT :         FF00E8 C |  SNDREQ_EXIT :               FF00F8 C |
*SNDREQ_SADDR :              FF0124 C |  SNDREQ_SBYTE :              FF012C C |
 SNDREQ_SCMD :               FF0112 C | *SNDREQ_SLONG :              FF0120 C |
 SNDREQ_SWORD :              FF0128 C |  SNDUNLOCKZ80 :              FF00B4 C |
 SOUND_INIT :                FF0038 C |  SOUND_INIT.CLEANUP :        FF0062 C |
 SOUND_INIT.COPY :           FF0078 C |  SOUND_INIT.WAIT :           FF004C C |
 STACK_MSTR :               6040000 - |  STACK_SLV :                603F000 - |
 STANDBY :                        3 - |  STR_CURSOR :                FF2020 C |
*STR_CURSOROUT :             FF201A C |  STR_TITLDRWID :             FF2012 C |
 STR_TITLES :                FF1FA4 C |  STR_TITLESFX :              FF1FBE C |
*SYSMARS_ID :                A130EC - |  SYSMARS_REG :               A15100 - |
 SYSTEM_DMAENTER_RAM :       FF173A C |  SYSTEM_DMAENTER_ROM :       FF1742 C |
 SYSTEM_DMAEXIT_RAM :        FF173E C |  SYSTEM_DMAEXIT_ROM :        FF1746 C |
 SYSTEM_GRABRAMCODE :        FF1758 C |
 SYSTEM_GRABRAMCODE.COPYME2 :                                        FF176A C |
 SYSTEM_INIT :               FF1614 C |  SYSTEM_INIT.CLRINPUT :      FF1672 C |
 SYSTEM_INIT.WAIT :          FF1622 C |  SYSTEM_INPUT :              FF1776 C |
 SYSTEM_INPUT.EXIT :         FF17A4 C |  SYSTEM_INPUT.ID_03 :        FF17CA C |
 SYSTEM_INPUT.ID_0D :        FF1874 C |  SYSTEM_INPUT.INVALID :      FF186E C |
 SYSTEM_INPUT.LIST :         FF17AA C |  SYSTEM_INPUT.OLDPAD :       FF18EC C |
 SYSTEM_INPUT.PICK_ID :      FF18F2 C |  SYSTEM_INPUT.READ :         FF1908 C |
 SYSTEM_INPUT.STEP_1 :       FF1914 C |  SYSTEM_INPUT.STEP_2 :       FF1920 C |
 SYSTEM_INPUT.THIS_ONE :     FF178A C | *SYSTEM_INPUT.WAIT :         FF1776 C |
 SYSTEM_INPUT.X_NEG :        FF183C C |  SYSTEM_INPUT.Y_NEG :        FF1868 C |
 SYSTEM_MARSUPDATE :         FF174A C |  SYSTEM_RANDOM :             FF1922 C |
 SYSTEM_RANDOM.GOOD_S :      FF1932 C |  SYSTEM_ROMSENDDREQ :        883498 C |
*SYSTEM_ROMSENDDREQ.BAD :    8834F0 C |  SYSTEM_ROMSENDDREQ.L0 :     8834DA C |
 SYSTEM_ROMSENDDREQ.WAIT_BIT :                                       8834C6 C |
 SYSTEM_SETINTS :            FF1A8E C |  SYSTEM_SETINTS.NOHINT :     FF1AB2 C |
 SYSTEM_SETINTS.NOVINT :     FF1AA0 C |  SYSTEM_SINEWAVE :           FF1970 C |
 SYSTEM_SINEWAVE.DONT_NEG :  FF198C C | *SYSTEM_SINEWAVE_COS :       FF1950 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                                      FF196A C |
*SYSTEM_SRAMINIT :           FF1AB4 C |  SYSTEM_SRAMINIT.INITSAVE :  FF1AC8 C |
 SYSTEM_WAITFRAME :          FF167E C |  SYSTEM_WAITFRAME.WAIT_IN :  FF1696 C |
 SYSTEM_WAITFRAME.WAIT_LAG : FF1684 C |  SYS_CTRL_1 :                A10009 - |
 SYS_CTRL_2 :                A1000B - |  SYS_CTRL_3 :                A1000D - |
 SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
*SYS_IO :                    A10001 - | *SYS_TMSS :                  A14000 - |
 S_IRQ_BAD :                60004C4 C |  S_IRQ_CMD :                60004C8 C |
*S_IRQ_CMD.COPY_1 :         600058C C |  S_IRQ_CMD.END_CHNLS :      60006B0 C |
 S_IRQ_CMD.EXIT_C :         600059A C |  S_IRQ_CMD.GO_EXIT :        600050C C |
 S_IRQ_CMD.LIST :           6000514 C |  S_IRQ_CMD.MODE_1 :         6000578 C |
 S_IRQ_CMD.MODE_2 :         6000554 C |  S_IRQ_CMD.MODE_3 :         6000568 C |
 S_IRQ_CMD.NEXT_CHNL :      60005A0 C |  S_IRQ_CMD.NO_CMDTASK :     60006D6 C |
 S_IRQ_CMD.NO_PITCHBND :    6000610 C |  S_IRQ_CMD.NO_REQ :         60006A6 C |
 S_IRQ_CMD.NO_REQ2 :        60005BC C |  S_IRQ_CMD.NO_TRNSFREX :    60006B6 C |
 S_IRQ_CMD.PWM_KEYCUT :     60005CC C |  S_IRQ_CMD.PWM_KEYOFF :     60005C0 C |
 S_IRQ_CMD.PWM_KEYON :      60005D8 C |  S_IRQ_CMD.TAG_FRT :        6000510 C |
 S_IRQ_CMD.WAIT_1 :         6000580 C |  S_IRQ_H :                  6000720 C |
 S_IRQ_PWM :       FFFFFFFFC0000014 C |
 S_IRQ_PWM.FROM_RV :                                       FFFFFFFFC00000C4 C |
 S_IRQ_PWM.LMUCH : FFFFFFFFC0000126 C |  S_IRQ_PWM.LOOP :  FFFFFFFFC0000042 C |
 S_IRQ_PWM.LOOP_ME :                                       FFFFFFFFC0000072 C |
 S_IRQ_PWM.MONO :  FFFFFFFFC00000CE C |
 S_IRQ_PWM.MONO_A :                                        FFFFFFFFC00000BC C |
 S_IRQ_PWM.MONO_C :                                        FFFFFFFFC000009C C |
 S_IRQ_PWM.MONO_L :                                        FFFFFFFFC000007E C |
 S_IRQ_PWM.NOT_ROM :                                       FFFFFFFFC00000AE C |
 S_IRQ_PWM.NO_L :  FFFFFFFFC00000E2 C |  S_IRQ_PWM.NO_R :  FFFFFFFFC00000E8 C |
 S_IRQ_PWM.ON :    FFFFFFFFC0000050 C |  S_IRQ_PWM.READ :  FFFFFFFFC0000080 C |
 S_IRQ_PWM.RMUCH : FFFFFFFFC000012C C |
 S_IRQ_PWM.SILENT :                                        FFFFFFFFC0000048 C |
 S_IRQ_PWM.SKIP :  FFFFFFFFC000010C C |  S_IRQ_V :                  600073C C |
 S_IRQ_VRES :               6000758 C |  S_IRQ_VRES.RV_BUSY :       6000798 C |
 TAG_JR :          FFFFFFFFC00002A8 C |  TAG_WIDTH :       FFFFFFFFC00002AC C |
 TAG_YHGHT :       FFFFFFFFC00002B0 C |  TBLBUFF_READ :                 540 C |
 TBLBUFF_READ.CHK_PSG :         604 C |  TBLBUFF_READ.CLRFULL :         6C3 C |
 TBLBUFF_READ.DO_CHIP :         576 C |  TBLBUFF_READ.DO_NEWCHIP :      62F C |
 TBLBUFF_READ.GRAB_LINK :       5AC C |  TBLBUFF_READ.INVLDL :          5ED C |
 TBLBUFF_READ.L_HIPRIO :        678 C |  TBLBUFF_READ.NEW_CHIP :        630 C |
 TBLBUFF_READ.NEW_LINK :        675 C |  TBLBUFF_READ.NEW_LINK_O :      675 C |
 TBLBUFF_READ.NEW_LINK_Z :      671 C |  TBLBUFF_READ.NEXTSRCH_TBL :    667 C |
 TBLBUFF_READ.NEXT_CHNL :       563 C |  TBLBUFF_READ.NEXT_PRIO :       652 C |
 TBLBUFF_READ.PASS_2 :          650 C |  TBLBUFF_READ.PICK_TBL :        69B C |
 TBLBUFF_READ.REFILL :          62C C |  TBLBUFF_READ.REROLL :          5F6 C |
 TBLBUFF_READ.RESET_LINK :      6B5 C |  TBLBUFF_READ.RNOT_PSG :        62A C |
 TBLBUFF_READ.SET_ASFULL :      698 C |  TBLBUFF_READ.SINGL_FREE :      686 C |
 TBLBUFF_READ.SINGL_LINK :      61C C | *TBLBUFF_READ.SNGL_SPRIO :      697 C |
 TBLBUFF_READ.SRCH_FREE :       63F C |  TBLBUFF_READ.SRCH_LINK :       5D3 C |
 TBLBUFF_READ.SRCH_LLOOP :      5DD C |  TBLBUFF_READ.TRACK_CONT :      556 C |
 TBLFM :                       1525 C |  TBLFM3 :                      1565 C |
 TBLFM6 :                      1575 C |  TBLLIST :                     14D3 C |
 TBLPSG :                      14E3 C |  TBLPSGN :                     1515 C |
 TBLPWM :                      1587 C | *TEST_WAVE :                 8AAC74 C |
*TEST_WAVE_E :               8B9374 C |  TEXTR_PECSI :              20B90A0 C |
 TH :                      20000000 - |  TICKCNT :                     17AB C |
 TICKFLAG :                    17AA C |  TICKSPSET :                   17A9 C |
*TIME :                     3:44:03 - |  TIMERCTL :                      30 - |
*TITLE_ANIMATEFG :           FF1E5A C |  TITLE_ANIMATEFG.HNEXT :     FF1E66 C |
 TITLE_ANIMATEFG.VNEXT :     FF1E8E C |  TITLE_PRINTCURSOR :         FF1EB6 C |
*TMR :                           2C - |  TRACK_OUT :                    490 C |
 TRACK_OUT.CLRFE :              4A1 C |  TRACK_OUT.NOCHIP :             4C4 C |
 TRANSFERROM :                  F6E C |  TRANSFERROM.DOUBLE :           F8D C |
 TRANSFERROM.TRANSFER :         FB1 C |  TRANSFERROM.X68KLAST :         FCF C |
 TRANSFERROM.X68KLOOP :         FBB C |  TRANSFERROM.X68KLPWT :         FDD C |
 TRANSFERROM.X68KNOCARRY :      FAB C |  TRANSFERROM.X68KPWTLP :        FE2 C |
 TRKBLKS_0 :                   1C07 C |  TRKBLKS_1 :                   1C1F C |
 TRKBLKS_2 :                   1C37 C |  TRKBUFF_0 :                   17C3 C |
 TRKBUFF_1 :                   17F3 C |  TRKBUFF_2 :                   1823 C |
 TRKCACH_0 :                   1E00 C |  TRKCACH_1 :                   1E40 C |
 TRKCACH_2 :                   1E80 C | *TRKCACH_3 :                   1EC0 C |
 TRKCHNL_0 :                   1853 C |  TRKCHNL_1 :                   18DB C |
 TRKCHNL_2 :                   1963 C |  TRKHDRS_0 :                   19EB C |
 TRKHDRS_1 :                   1A27 C |  TRKHDRS_2 :                   1A63 C |
 TRKINSD_0 :                   1A9F C |  TRKINSD_1 :                   1B17 C |
 TRKINSD_2 :                   1B8F C |  TRKLISTCACH :                 175D C |
 TRKLISTPAGE :                   3E C |  TRK_BLOCKS :                     4 - |
 TRK_CACHHALF :                   E - | *TRK_CACHINC :                    F - |
 TRK_CHNCACH :                   2E - |  TRK_CHNCBLK :                   28 - |
 TRK_CHNCHEAD :                  2A - |  TRK_CHNCINS :                   2C - |
 TRK_CHNLIST :                   26 - |  TRK_CURRBLK :                   12 - |
 TRK_INSTR :                      8 - | *TRK_LASTBKBLK :                 16 - |
*TRK_LASTBKHDRS :                17 - | *TRK_LASTBKINS :                 15 - |
 TRK_MAXBLKS :                   1D - |  TRK_MAXCHNLS :                  1C - |
 TRK_MAXHDRS :                   1E - |  TRK_MAXINS :                    1F - |
*TRK_PANNING :                   13 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMCPATT :                  20 - |  TRK_ROMPATT :                   23 - |
 TRK_ROWPAUSE :                  10 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   11 - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    1CE C |
 UPD_TRACK.DECROW :             264 C |  UPD_TRACK.DECROW_E :           267 C |
 UPD_TRACK.EFFECT_FILL :        3D8 C |  UPD_TRACK.EFF_A :              302 C |
 UPD_TRACK.EFF_B :              312 C |  UPD_TRACK.EFF_C :              328 C |
 UPD_TRACK.EXIT :               258 C |  UPD_TRACK.FIRST_FILL :         3DF C |
 UPD_TRACK.GRAB_RHEAD :         47C C |  UPD_TRACK.HAS_NOTE :           26F C |
 UPD_TRACK.INC_CPATT :          32B C |  UPD_TRACK.NEXT_NOTE :          248 C |
 UPD_TRACK.NO_EFF :             2CE C |  UPD_TRACK.NO_GLBL :            40A C |
 UPD_TRACK.NO_INS :             2B0 C |  UPD_TRACK.NO_NOTE :            2A5 C |
 UPD_TRACK.NO_VOL :             2BB C |  UPD_TRACK.OLD_TYPE :           299 C |
 UPD_TRACK.RAN_OUT :            339 C |  UPD_TRACK.READ_TRACK :         1EF C |
 UPD_TRACK.ROW_ACTIVE :         241 C |  UPD_TRACK.SET_TRACK :          363 C |
 UPD_TRACK.SFXMD :              208 C |  UPD_TRACK.TRACK_END :          3C7 C |
 UPD_TRACK.TRK_BUFFRS :         1D3 C |  VARNULLVRAM :                  7FF - |
 VARPRINTPAL :                    3 - |  VARPRINTVRAM :                 580 - |
 VBLK :                          80 - |  VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_CLEAR :               FF0324 C |
*VIDEO_CLEARSCREEN :         FF0324 C |  VIDEO_CLEARSCREEN.PMNEXT :  FF03B8 C |
 VIDEO_CLEARSCREEN.PNEXT :   FF03A2 C |  VIDEO_CLEARSCREEN.SNEXT :   FF038E C |
 VIDEO_CLEARSCREEN.XNEXT :   FF036E C |  VIDEO_CLEARSCREEN.YNEXT :   FF037E C |
*VIDEO_COPY :                FF08FC C |  VIDEO_COPY.DMAW :           FF0910 C |
 VIDEO_COPY.DMAWE :          FF0968 C | *VIDEO_DMABLAST :            FF0A22 C |
 VIDEO_DMABLAST.END :        FF0A78 C |  VIDEO_DMABLAST.EXIT :       FF0A8E C |
 VIDEO_DMABLAST.NEXT :       FF0A52 C | *VIDEO_DMAMKENTRY :          FF0814 C |
 VIDEO_DOPALFADE :           FF06CA C |  VIDEO_DOPALFADE.ACTIVE :    FF06E6 C |
 VIDEO_DOPALFADE.FADE_DONE : FF06EE C |  VIDEO_DOPALFADE.FADE_IN :   FF06F0 C |
 VIDEO_DOPALFADE.FADE_LIST : FF06E8 C |  VIDEO_DOPALFADE.FADE_OUT :  FF0794 C |
 VIDEO_DOPALFADE.NO_BLU :    FF076C C |  VIDEO_DOPALFADE.NO_BLU_O :  FF07F0 C |
 VIDEO_DOPALFADE.NO_FNSH :   FF0784 C |  VIDEO_DOPALFADE.NO_FNSH_O : FF0804 C |
 VIDEO_DOPALFADE.NO_GRN :    FF074C C |  VIDEO_DOPALFADE.NO_GRN_O :  FF07D8 C |
 VIDEO_DOPALFADE.NO_MOVE :   FF0792 C |  VIDEO_DOPALFADE.NO_MOVE_O : FF0812 C |
 VIDEO_DOPALFADE.NO_RED :    FF072C C |  VIDEO_DOPALFADE.NO_RED_O :  FF07C0 C |
 VIDEO_DOPALFADE.NXT_PAL :   FF070A C |  VIDEO_DOPALFADE.NXT_PAL_O : FF07A8 C |
 VIDEO_FADEPAL :             FF069C C |  VIDEO_FADEPAL_MARS :        FF0AD4 C |
 VIDEO_FILL :                FF0886 C |  VIDEO_FILL.DMAW :           FF089A C |
 VIDEO_FILL.DMAWE :          FF08E4 C |  VIDEO_INIT :                FF029C C |
 VIDEO_INIT.CLRRAM :         FF02A6 C | *VIDEO_INIT.EXIT :           FF02D0 C |
 VIDEO_INIT.LOOP :           FF02C2 C |  VIDEO_LOADART :             FF0980 C |
 VIDEO_LOADART.FROM_RAM :    FF0A0E C | *VIDEO_LOADMAP :             FF03C2 C |
 VIDEO_LOADMAP.CONT :        FF03E8 C |  VIDEO_LOADMAP.NODBLE :      FF0408 C |
 VIDEO_LOADMAP.NONULL :      FF03E6 C |  VIDEO_LOADMAP.XLOOP :       FF03D8 C |
 VIDEO_LOADMAP.YLOOP :       FF03CE C | *VIDEO_LOADMAP_VERT :        FF041A C |
 VIDEO_LOADMAP_VERT.CONT :   FF044E C |  VIDEO_LOADMAP_VERT.NODBLE : FF0470 C |
 VIDEO_LOADMAP_VERT.NONULL : FF044C C | *VIDEO_LOADMAP_VERT.OUTDBL : FF047A C |
 VIDEO_LOADMAP_VERT.XLOOP :  FF0428 C |  VIDEO_LOADMAP_VERT.YLOOP :  FF043A C |
 VIDEO_LOADPAL :             FF06A6 C | *VIDEO_LOADPAL_MARS :        FF0ADE C |
 VIDEO_MARSPALFADE :         FF0B06 C |  VIDEO_MARSPALFADE.ACTIVE :  FF0B22 C |
 VIDEO_MARSPALFADE.FADE_DONE :                                       FF0B2A C |
 VIDEO_MARSPALFADE.FADE_IN : FF0B2C C |
 VIDEO_MARSPALFADE.FADE_LIST :                                       FF0B24 C |
 VIDEO_MARSPALFADE.FADE_OUT :                                        FF0BD6 C |
 VIDEO_MARSPALFADE.NO_BLU :  FF0BA6 C |
 VIDEO_MARSPALFADE.NO_BLU_O :                                        FF0C32 C |
 VIDEO_MARSPALFADE.NO_FNSH : FF0BC6 C |
 VIDEO_MARSPALFADE.NO_FNSH_O :                                       FF0C48 C |
 VIDEO_MARSPALFADE.NO_GRN :  FF0B86 C |
 VIDEO_MARSPALFADE.NO_GRN_O :                                        FF0C1A C |
 VIDEO_MARSPALFADE.NO_MOVE : FF0BD4 C |
 VIDEO_MARSPALFADE.NO_MOVE_O :                                       FF0C56 C |
 VIDEO_MARSPALFADE.NO_RED :  FF0B66 C |
 VIDEO_MARSPALFADE.NO_RED_O :                                        FF0C02 C |
 VIDEO_MARSPALFADE.NXT_PAL : FF0B44 C |
 VIDEO_MARSPALFADE.NXT_PAL_O :                                       FF0BEA C |
 VIDEO_MARS_GFXMODE :        FF0A90 C |  VIDEO_MARS_GFXMODE.WAIT :   FF0AB0 C |
 VIDEO_MARS_GFXMODE.WAIT_SLV :                                       FF0AA4 C |
*VIDEO_MARS_WAITFRAME :      FF0ABE C | *VIDEO_MARS_WAITFRAME.LATE : FF0AD2 C |
 VIDEO_MARS_WAITFRAME.WAIT : FF0AC6 C |  VIDEO_PRINT :               FF04B6 C |
 VIDEO_PRINT.DONIBL :        FF05D0 C |  VIDEO_PRINT.EXIT :          FF0540 C |
 VIDEO_PRINT.ISBYTE :        FF050A C |  VIDEO_PRINT.ISLONG :        FF052E C |
 VIDEO_PRINT.ISWORD :        FF051C C |  VIDEO_PRINT.LNGLOOP :       FF05C0 C |
 VIDEO_PRINT.LOOP :          FF04CA C |  VIDEO_PRINT.LOWR :          FF05E0 C |
 VIDEO_PRINT.NEWJUMP :       FF04C4 C |  VIDEO_PRINT.NEXT :          FF04EC C |
 VIDEO_PRINT.NEXTV :         FF054A C |  VIDEO_PRINT.NOTHING :       FF05EC C |
 VIDEO_PRINT.PUTTEXT :       FF04DE C |  VIDEO_PRINT.SPECIAL :       FF04F0 C |
 VIDEO_PRINT.VBYTE :         FF057C C |  VIDEO_PRINT.VLONG :         FF05C8 C |
 VIDEO_PRINT.VWORD :         FF059E C |  VIDEO_PRINTINIT :           FF048A C |
*VIDEO_PRINTPAL :            FF04A4 C |  VIDEO_RUNFADE :             FF068A C |
 VIDEO_UPDATE :              FF02D0 C | *VIDEO_UPDATE.EXIT :         FF02EE C |
 VIDEO_UPDATE.LOOP :         FF02E2 C |  VIDMARS_PAL :               FF0AE2 C |
 VIDMARS_PAL.LOOP :          FF0AFA C |  VIDMD_PAL :                 FF06AA C |
 VIDMD_PAL.LOOP :            FF06C2 C |  VID_PICKLAYER :             FF05EE C |
 VID_PICKLAYER.GOLYR :       FF063E C |  VID_PICKLAYER.NOWD :        FF0628 C |
 VID_PICKLAYER.PLAWND :      FF0616 C |  VID_PICKLAYER.THISSZ :      FF065E C |
 VID_PICKLAYER.THISSZJ :     FF0686 C |  VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :              FF1B3E C |
*VIRQ_ON :                        8 - | *VRAMTTL_CELLHIDE :             780 - |
*VRAMTTL_PUZBG :                  1 - |  VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  17A8 C |  WAVE_LEN :                    17A0 C |
 WAVE_LOOP :                   17A3 C |  WAVE_PITCH :                  17A6 C |
 WAVE_START :                  179D C |  WAVFREQ_LIST :                139F C |
*WPATCH :                         0 - |  X68KSRCLSB :                    36 C |
 X68KSRCMID :                    37 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :                  8834F4 C |  Z80_CODE_END :              8853F4 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      83 C |
 Z80_RESET :                 A11200 - |  Z80_TOP :                   8834F4 C |
*ZBANK :                       6000 - |  ZDRVFIFO :                      40 - |
 ZDRVFWRT :                      80 - | *ZDRVMARSBLK :                   82 - |
 ZDRVROMBLK :                    81 - | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
 _CCR :                    FFFFFE92 - | *_DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - |  _DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
 _DMASOURCE0 :             FFFFFF80 - |  _DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
 _FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - |  _FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - |  _JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
 _OVERWRITE :              24020000 - |  _PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - |  _SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
 _VDPREG :                 20004100 - |

   2158 symbols
    304 unused symbols

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 3 - 4/27/2023 3:44:03


  defined macros:
  ---------------

COLORME                               | FINISH                               
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPSG                               | GINSPSGN                             
GINSPWM                               | GSMPHEAD                             
ORG                                   | REPORT                               
STRUCT                                |

     15 macros

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 4 - 4/27/2023 3:44:03


  defined functions:
  ------------------

NOTZ80                                | LOCATE                               
MAPSIZE                               | DWORD                                

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 5 - 4/27/2023 3:44:03


  codepages:
  ----------

STANDARD (0 changed characters)


0.20 seconds assembly time

  16902 lines source file
  17965 lines incl. macro expansions
      5 passes
      0 errors
      0 warnings
